import{f}from"./utils-9sQxfkoa.js";import{I as m,U as y,Z as S,bn as s,aW as c,bh as l}from"./main-kpG51UWM.js";import{R}from"./normalizeUtils-Bxmy9MNI.js";import{t as g}from"./query-DFW9-NG_.js";import p from"./BinsQuery-DjwQZqB8.js";import{d as J}from"./FeatureSet-BkVNthuN.js";function N(n){const e=n.geometry,o=n.toJSON(),t=o;let r,i,a;return e!=null&&(i=e.spatialReference,a=s(i),t.geometryType=c(e),t.geometry=JSON.stringify(e),t.inSR=a),o.outSR?(t.outSR=s(o.outSR),r=n.outSpatialReference):e&&(t.outSR=t.inSR,r=i),t.bin&&=JSON.stringify(t.bin),t.quantizationParameters&&=JSON.stringify(t.quantizationParameters),t.outStatistics&&=JSON.stringify(t.outStatistics),t.outTimeReference&&=JSON.stringify(t.outTimeReference),n.defaultSpatialReference&&l(i,r)&&(t.defaultSR=t.inSR,delete t.inSR,delete t.outSR),t}async function O(n,e,o){return d(n,e,o)}async function d(n,e,o={}){const t=typeof n=="string"?m(n):n,r=e.geometry?[e.geometry]:[],i=await R(r,null,{signal:o.signal}),a=i?.[0];a!=null&&((e=e.clone()).geometry=a);const u=g({...t.query,f:"json",...N(e)});return y(S(t.path,"queryBins"),{...o,query:{...u,...o.query}})}async function q(n,e,o){const{data:t}=await O(f(n),p.from(e),o);return J.fromJSON(t)}export{q as executeBinsQuery};
