import{G as m,s,h as p}from"./main-B5_XOOwi.js";import{p as n}from"./MeshVertexAttributes-CuBQ7Vps.js";import{B as a}from"./vertexSpaceConversion-DG0_9QSs.js";import"./preload-helper-ExcqyqRp.js";import"./mat3-XZDRtl20.js";import"./common-DQOJ18NT.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4-CUdVSMyt.js";import"./mat4f64-CSKppSlJ.js";import"./vec32-DACfXE6P.js";import"./spatialReferenceEllipsoidUtils-D6F8fOwT.js";import"./computeTranslationToOriginAndRotation-BS1OgOv0.js";import"./projectBuffer-D86redIv.js";import"./projectPointToVector-DG2fEkt3.js";import"./projection-DwpqUf7U.js";import"./meshVertexSpaceUtils-BdGk07L9.js";import"./MeshLocalVertexSpace-DGxdCf4L.js";import"./vec3-NqjSj-t4.js";import"./BufferView-isk7FOAG.js";import"./vec2-DGVIkCvT.js";import"./vec42-CKs01hkn.js";import"./vec4-BOybBZ6c.js";async function U(t,r,o){await Promise.resolve(),m(o);const e=a(t,r,{useEllipsoid:o?.useEllipsoid});if(!e)throw new s("meshUtils:convertVertexSpace()","Failed to convert to provided vertex space due to projection errors");const i=t.cloneAndModifyVertexAttributes(new n({...e,uv:p(t.vertexAttributes.uv),color:p(t.vertexAttributes.color)}),r);return i.transform=null,i}export{U as convertMeshVertexSpace};
