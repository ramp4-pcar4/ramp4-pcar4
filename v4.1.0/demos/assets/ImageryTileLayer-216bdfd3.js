import{bD as ht,fX as pe,r as _,m1 as Ze,u as Oe,f as $,bi as et,bp as A,m2 as tt,w as j,b as M,d as U,jX as ve,jT as ft,U as it,m3 as dt,af as mt,lc as st,m4 as ye,jY as pt,jZ as yt,j_ as gt,_ as xt,m5 as It,m6 as wt,m7 as bt,m8 as St,m9 as rt,e as x,y as b,b3 as nt,n as Q,R as Rt,ma as vt,mb as Pe,k as W,mc as at,g4 as Tt,j$ as _t,md as ze,gm as Ft,me as Je,mf as Ne,mg as He,co as kt,mh as Ct,mi as Pt,mj as $t,mk as Le,jU as Mt,ml as Ot,mm as Ae,k1 as ge,bH as ot,jW as Dt,jV as Bt,E as lt,mn as De,mo as Et,h as zt,c0 as Jt,mp as Nt,cJ as Ht,Y as Lt,mq as At,mr as Wt,ms as jt,gk as qt,mt as Gt,mu as Ut,mv as Vt,mw as Xt,mx as Yt,my as xe,mz as Kt,mA as Qt,mB as Zt,l8 as ei,l9 as ti,aY as ii,aZ as si,lE as ri,lH as ni,aX as ai,la as oi,a_ as li,b0 as ci,fb as me,mC as ui,lf as hi,O as fi,jQ as di,gB as mi,mD as pi,lN as yi,fY as gi,mE as xi,b1 as Ii,b4 as wi}from"./main-e6c796d9.js";import{a as We,x as je,h as qe,d as bi,m as Si}from"./RawBlockCache-097eaa04.js";import{T as Ge,U as Ie,j as Ue,o as Ve,n as Ri,Q as Te,J as _e,$ as vi,V as Ti,C as _i}from"./rasterProjectionHelper-f113ca63.js";import{C as $e,f as Fi,i as ki,m as Be,c as Ci,h as Pi}from"./utils-7e81f3ad.js";import"./preload-helper-388ac9d5.js";const Xe=8,$i=256;let q=class extends ht(Rt){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const s=Ge();this.addResolvingPromise(s),await this.when()}normalizeCtorArgs(s){return s&&s.ioConfig&&(s={...s,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:pe.create(),...s.ioConfig}}),s}get _isGlobalWrappableSource(){const{rasterInfo:s}=this,e=Ie(s.spatialReference);return _(e)&&s.extent.width>=e/2}set url(s){this._set("url",Ze(s,Oe.getLogger(this.declaredClass)))}async open(s){throw new $("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(s,e,r,t={}){const i=t.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(s,e,r,i);return this.fetchPixels(n,i.size[0],i.size[1],t)}async identify(s,e={}){s=et(A,s).clone().normalize();const{multidimensionalDefinition:r,timeExtent:t}=e,{rasterInfo:i}=this,{hasMultidimensionalTranspose:n,multidimensionalInfo:a}=i;let{transposedVariableName:o}=e;const l=_(a)&&n&&(t!=null||tt(r));l&&!o&&(o=_(r)&&r.length>0?r[0].variableName??void 0:a.variables[0].name,e={...e,transposedVariableName:o}),e=this._getRequestOptionsWithSliceId(e);const{spatialReference:c,extent:u}=i,{datumTransformation:h}=e;let f=Ue(s,c,h);if(!u.intersects(f))return{location:f,value:null};if(_(i.transform)){const P=i.transform.inverseTransform(f);if(!i.nativeExtent.intersects(P))return{location:P,value:null};f=P}let m=0;const p=_(o)&&_(a)&&i.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const P=this.primaryRasters.rasters[0];if(p)return P.identify(f,e);const{pixelSize:E}=i,D=3,V=E.x*D/2,J=E.y*D/2,z=new j({xmin:f.x-V,xmax:f.x+V,ymin:f.y-J,ymax:f.y+J,spatialReference:c}),H={interpolation:"nearest"},{pixelBlock:N}=await P.fetchPixels(z,D,D,H),{pixelBlock:O}=await this.fetchPixels(z,D,D,H);if(M(N))return{location:f,value:null};const X=Math.floor(D*D*.5),ne=!N.mask||N.mask[X]?N.pixels.map(ae=>ae[X]):null;let ce;return _(O)&&(ce=!O.mask||O.mask[X]?O.pixels.map(ae=>ae[X]):void 0),{location:f,value:ne,processedValue:ce,pyramidLevel:0}}if(!p){if(e.srcResolution)m=Ve(e.srcResolution,i,this.ioConfig.sampling).pyramidLevel;else if(m=await this.computeBestPyramidLevelForLocation(s,e),m==null)return{location:f,value:null}}const y=this.identifyPixelLocation(f,m,null,p);if(y===null)return{location:f,value:null};const{row:d,col:g,rowOffset:I,colOffset:w,blockWidth:k}=y,F=o??U(e.sliceId),T=We(this.url,F),C=`${m}/${d}/${g}`;let S=je(T,null,C);M(S)&&(S=this.fetchRawTile(m,d,g,e),qe(T,null,C,S));const R=await S;if(M(R)||!R.pixels?.length)return{location:f,value:null};const v=I*k+w;return this._processIdentifyResult(R,{srcLocation:f,position:v,pyramidLevel:m,useTransposedTile:!!p,requestSomeSlices:l,identifyOptions:e})}async fetchPixels(s,e,r,t={}){if(s=Ri(s),(t=this._getRequestOptionsWithSliceId(t)).requestRawData)return this._fetchPixels(s,e,r,t);const i=Ie(s.spatialReference),n=Te(s);if(M(i)||n===0||n===1&&this._isGlobalWrappableSource)return this._fetchPixels(s,e,r,t);if(n>=3)return{extent:s,pixelBlock:null};const a=[],{xmin:o,xmax:l}=s,c=Math.round(i/(l-o)*e),u=c-Math.round((i/2-o)/(l-o)*e);let h=0;const f=[];for(let d=0;d<=n;d++){const g=new j({xmin:d===0?o:-i/2,xmax:d===n?l-i*d:i/2,ymin:s.ymin,ymax:s.ymax,spatialReference:s.spatialReference}),I=d===0?c-u:d===n?e-h:c;h+=I,f.push(I);const w=t.disableWrapAround&&d>0?null:this._fetchPixels(g,I,r,t);a.push(w)}const m=(await Promise.all(a)).map(d=>d?.pixelBlock);let p=null;const y={width:e,height:r};return this.rasterJobHandler?p=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:m,srcMosaicSize:y,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:f},t)).pixelBlock:p=ve(m,y,{blockWidths:f}),{extent:s,srcExtent:_e(s,this.rasterInfo.spatialReference,t.datumTransformation),pixelBlock:p}}async fetchRawPixels(s,e,r,t={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const i=await this._fetchRawTiles(s,e,r,t),{nativeExtent:n,nativePixelSize:a,storageInfo:o}=this.rasterInfo,l=2**s,c=a.x*l,u=a.y*l,h=new j({xmin:n.xmin+c*e.x,xmax:n.xmin+c*(e.x+r.width-1),ymin:n.ymax-u*(e.y+r.height-1),ymax:n.ymax-u*e.y,spatialReference:n.spatialReference});if(!i)return{extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:f,mosaicSize:m}=i;if(f.length===1&&_(f[0])&&f[0].width===r.width&&f[0].height===r.height)return{extent:h,srcExtent:h,pixelBlock:i.pixelBlocks[0]};const p=s>0?o.pyramidBlockWidth:o.blockWidth,y=s>0?o.pyramidBlockHeight:o.blockHeight,d={x:e.x%p,y:e.y%y};let g;return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:m,destDimension:r,clipOffset:d,clipSize:r,coefs:null,sampleSpacing:null,interpolation:t.interpolation,alignmentInfo:null,blockWidths:null},t)).pixelBlock:g=ve(f,m,{clipOffset:d,clipSize:r}),{extent:h,srcExtent:h,pixelBlock:g}}fetchRawTile(s,e,r,t){throw new $("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(s){return _e(this.rasterInfo.extent,s)}decodePixelBlock(s,e){return!this.rasterJobHandler||e.useCanvas?ft(s,e):this.rasterJobHandler.decode({data:s,options:e})}async request(s,e,r=0){const{customFetchParameters:t}=this.ioConfig,{range:i,query:n,headers:a}=e;r=r??e.retryCount??this.ioConfig.retryCount;const o=i?{Range:`bytes=${i.from}-${i.to}`}:null;try{return await it(s,{...e,query:{...n,...t},headers:{...a,...o}})}catch(l){if(r>0)return r--,this.request(s,e,r);throw l}}getSliceIndex(s){const{multidimensionalInfo:e}=this.rasterInfo;return M(e)||M(s)||s.length===0?null:dt(s,e)}getTileExtentFromTileInfo(s,e,r,t){const i=mt(t.lodAt(s));return this.getTileExtent({x:i.resolution,y:i.resolution},e,r,t.origin,t.spatialReference,t.size)}updateTileInfo(){const{storageInfo:s,spatialReference:e,extent:r,pixelSize:t}=this.rasterInfo;if(!s.tileInfo){const i=[],n=s.maximumPyramidLevel||0;let a=Math.max(t.x,t.y),o=1/.0254*96*a;for(let c=0;c<=n;c++)i.push(new st({level:n-c,resolution:a,scale:o})),a*=2,o*=2;const l=new A({x:r.xmin,y:r.ymax,spatialReference:e});s.tileInfo=new pe({origin:l,size:[s.blockWidth,s.blockHeight],spatialReference:e,lods:i}),s.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(s,e=512,r=512,t){const{width:i,height:n,nativeExtent:a,pixelSize:o,spatialReference:l}=s,c=new A({x:a.xmin,y:a.ymax,spatialReference:l});t==null&&(t=Math.max(0,Math.round(Math.log(Math.max(i,n))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[o],t);s.storageInfo=new ye({blockWidth:e,blockHeight:r,pyramidBlockWidth:e,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:t,blockBoundary:u})}async computeBestPyramidLevelForLocation(s,e={}){return 0}computeBlockBoundary(s,e,r,t,i,n=0,a=2){if(i.length===1&&n>0){i=[...i];let{x:u,y:h}=i[0];for(let f=0;f<n;f++)u*=a,h*=a,i.push({x:u,y:h})}const o=[],{x:l,y:c}=t;for(let u=0;u<i.length;u++){const{x:h,y:f}=i[u];o.push({minCol:Math.floor((s.xmin-l+.1*h)/e/h),maxCol:Math.floor((s.xmax-l-.1*h)/e/h),minRow:Math.floor((c-s.ymax+.1*f)/r/f),maxRow:Math.floor((c-s.ymin-.1*f)/r/f)})}return o}getPyramidPixelSize(s){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:t}=this.rasterInfo.storageInfo;if(s===0)return e;if(_(r)&&r.length)return r[s-1];const i=t**s;return{x:e.x*i,y:e.y*i}}identifyPixelLocation(s,e,r,t){const{spatialReference:i,nativeExtent:n,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:o,origin:l,transposeInfo:c}=a,u=t&&_(c)?c.tileSize[0]:a.blockWidth,h=t&&_(c)?c.tileSize[1]:a.blockHeight,f=Ue(s,i,r);if(!n.intersects(f)||e<0||e>o)return null;const m=this.getPyramidPixelSize(e),{x:p,y}=m,d=(l.y-f.y)/y/h,g=(f.x-l.x)/p/u,I=Math.min(h-1,Math.floor((d-Math.floor(d))*h)),w=Math.min(u-1,Math.floor((g-Math.floor(g))*u));return{pyramidLevel:e,row:Math.floor(d),col:Math.floor(g),rowOffset:I,colOffset:w,blockWidth:u,srcLocation:f}}getTileExtent(s,e,r,t,i,n){const[a,o]=n,l=t.x+r*a*s.x,c=l+a*s.x,u=t.y-e*o*s.y,h=u-o*s.y;return new j({xmin:l,xmax:c,ymin:h,ymax:u,spatialReference:i})}getBlockWidthHeight(s){return{blockWidth:s>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:s>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(s,e,r){const t=this.rasterInfo.storageInfo.blockBoundary[s];return!t||t.maxRow<e||t.maxCol<r||t.minRow>e||t.minCol>r}async _fetchPixels(s,e,r,t={}){let i=Te(s);if(i>=2)return{extent:s,pixelBlock:null};const n=this._getSourceDataInfo(s,e,r,t),{pyramidLevel:a,pyramidResolution:o,srcResolution:l,srcExtent:c,srcWidth:u,srcHeight:h}=n;if(u===0||h===0)return{extent:s,srcExtent:c,pixelBlock:null};const f=U(this.rasterInfo.transform),m=f?.type==="gcs-shift",p=_(Ie(s.spatialReference));!m&&p||(i=Te(n.srcExtent,m));const y=this.rasterInfo.storageInfo,d={x:Math.floor((c.xmin-y.origin.x)/o.x+.1),y:Math.floor((y.origin.y-c.ymax)/o.y+.1)},g=await this._fetchRawTiles(a,d,{width:u,height:h,wrapCount:i},t);if(!g)return{extent:s,srcExtent:c,pixelBlock:null};const I=a>0?y.pyramidBlockWidth:y.blockWidth,w=a>0?y.pyramidBlockHeight:y.blockHeight,k=I===u&&w===h&&d.x%I==0&&d.y%w==0,F=new A({x:(s.xmax-s.xmin)/e,y:(s.ymax-s.ymin)/r,spatialReference:s.spatialReference}),T=!s.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:C}=t;if(!T&&k&&g.pixelBlocks.length===1&&I===e&&w===r&&l.x===F.x&&l.y===F.y)return{extent:s,srcExtent:c,pixelBlock:g.pixelBlocks[0]};const S=p&&_(Ie(c.spatialReference)),R=t.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");R&&!this.rasterJobHandler&&await Ge();const v=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:s,srcBufferExtent:g.extent,pixelSize:F.toJSON(),datumTransformation:C,rasterTransform:f,hasWrapAround:i>0||S,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:R},t):vi({projectedExtent:s,srcBufferExtent:g.extent,pixelSize:F,datumTransformation:C,rasterTransform:f,hasWrapAround:i>0||S,isAdaptive:!1,includeGCSGrid:R});let P;const E=!t.requestRawData,D={rows:v.spacing[0],cols:v.spacing[1]},V=U(this._getRasterTileAlignmentInfo(a,g.extent.xmin)),{pixelBlocks:J,mosaicSize:z,isPartiallyFilled:H}=g;let N=null;if(this.rasterJobHandler)({pixelBlock:P,localNorthDirections:N}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:J,srcMosaicSize:z,destDimension:E?{width:e,height:r}:null,coefs:E?v.coefficients:null,sampleSpacing:E?D:null,projectDirections:R,gcsGrid:R?v.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:t.interpolation,alignmentInfo:V,blockWidths:null},t));else{const O=ve(J,z,{alignmentInfo:V});P=E?pt(O,{width:e,height:r},v.coefficients,D,t.interpolation):O,R&&v.gcsGrid&&(N=yt({width:e,height:r},v.gcsGrid),P=gt(P,this.rasterInfo.dataType,N))}return t.requestRawData||R?{srcExtent:c,pixelBlock:P,transformGrid:v,localNorthDirections:N,extent:s,isPartiallyFilled:H}:{srcExtent:c,extent:s,pixelBlock:P}}async _fetchRawTiles(s,e,r,t){const{origin:i,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:o}=this.getBlockWidthHeight(s);let{x:l,y:c}=e,{width:u,height:h,wrapCount:f}=r;const m=this._getRasterTileAlignmentInfo(s,0);t.buffer&&(l-=t.buffer.cols,c-=t.buffer.rows,u+=2*t.buffer.cols,h+=2*t.buffer.rows);let p=0,y=0,d=0;f&&_(m)&&({worldColumnCountFromOrigin:y,originColumnOffset:d,rightPadding:p}=m,y*m.blockWidth-p>=l+u&&(p=0));const g=Math.floor(l/a),I=Math.floor(c/o),w=Math.floor((l+u+p-1)/a),k=Math.floor((c+h+p-1)/o),F=n[s];if(!F)return null;const{minRow:T,minCol:C,maxCol:S,maxRow:R}=F;if(f===0&&(k<T||w<C||I>R||g>S))return null;const v=new Array;let P=!1;const E=this.ioConfig.allowPartialFill==null?t.allowPartialFill:this.ioConfig.allowPartialFill;for(let O=I;O<=k;O++)for(let X=g;X<=w;X++){let ne=X;if(!t.disableWrapAround&&f&&_(m)&&y<=X&&(ne=X-y-d),O>=T&&ne>=C&&R>=O&&S>=ne){const ce=this._fetchRawTile(s,O,ne,t);E?v.push(new Promise(ae=>{ce.then(ut=>ae(ut)).catch(()=>{P=!0,ae(null)})})):v.push(ce)}else v.push(Promise.resolve(null))}if(v.length===0)return null;const D=await Promise.all(v),V={height:(k-I+1)*o,width:(w-g+1)*a},{spatialReference:J}=this.rasterInfo,z=this.getPyramidPixelSize(s),{x:H,y:N}=z;return{extent:new j({xmin:i.x+g*a*H,xmax:i.x+(w+1)*a*H,ymin:i.y-(k+1)*o*N,ymax:i.y-I*o*N,spatialReference:J}),pixelBlocks:D,mosaicSize:V,isPartiallyFilled:P}}_fetchRawTile(s,e,r,t){const i=this.rasterInfo.storageInfo.blockBoundary[s];if(!i)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:o,maxRow:l}=i;if(e<n||r<a||e>l||r>o)return Promise.resolve(null);const c=We(this.url,t.sliceId),u=`${s}/${e}/${r}`;let h=je(c,t.registryId,u);if(M(h)){const f=new AbortController;h=this.fetchRawTile(s,e,r,{...t,signal:f.signal}),qe(c,t.registryId,u,h,f),h.catch(()=>bi(c,t.registryId,u))}return t.signal&&xt(t,()=>{Si(c,t.registryId,u)}),h}_computeMagDirValues(s){const{bandCount:e,dataType:r}=this.rasterInfo;if(!(e===2&&r==="vector-magdir"||r==="vector-uv")||s?.length!==2||!s[0]?.length)return null;const t=s[0].length;if(r==="vector-magdir"){const l=s[1].map(c=>(c+360)%360);return[s[0],l]}const[i,n]=s,a=[],o=[];for(let l=0;l<t;l++){const[c,u]=It([i[l],n[l]]);a.push(c),o.push(u)}return[a,o]}_getRasterTileAlignmentInfo(s,e){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=Ti(this.rasterInfo)),M(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:e,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[s]}}_getSourceDataInfo(s,e,r,t={}){const i={datumTransformation:t.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};t.srcResolution&&(i.srcResolution=t.srcResolution,this._updateSourceDataInfo(s,i));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:o,pyramidLevel:l}=i,c=a/e,u=o/r,h=l<n&&c*u>=16,f=l===n&&this._requireTooManySrcTiles(a,o,e,r);if(h||f||a===0||o===0){const m=new A({x:(s.xmax-s.xmin)/e,y:(s.ymax-s.ymin)/r,spatialReference:s.spatialReference});let p=_i(m,this.rasterInfo.spatialReference,s,i.datumTransformation);const y=!p||t.srcResolution&&p.x+p.y<t.srcResolution.x+t.srcResolution.y;if(h&&t.srcResolution&&y){const d=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-l+3>=d){const g=2**d;p={x:t.srcResolution.x*g,y:t.srcResolution.y*g}}}p&&(i.srcResolution=p,this._updateSourceDataInfo(s,i))}return this._requireTooManySrcTiles(i.srcWidth,i.srcHeight,e,r)&&(i.srcWidth=0,i.srcHeight=0),i}_requireTooManySrcTiles(s,e,r,t){const{tileInfo:i}=this.rasterInfo.storageInfo;return Math.ceil(s/i.size[0])*Math.ceil(e/i.size[1])>=$i||s/r>Xe||e/t>Xe}_updateSourceDataInfo(s,e){e.srcWidth=0,e.srcHeight=0;const r=this.rasterInfo.spatialReference,{srcResolution:t,datumTransformation:i}=e,{pyramidLevel:n,pyramidResolution:a,excessiveReading:o}=Ve(t,this.rasterInfo,this.ioConfig.sampling);if(o)return;let l=e.srcExtent||_e(s,r,i);if(l==null)return;const c=U(this.rasterInfo.transform);c&&(l=c.inverseTransform(l)),e.srcExtent=l;const u=Math.ceil((l.xmax-l.xmin)/a.x-.1),h=Math.ceil((l.ymax-l.ymin)/a.y-.1);e.pyramidLevel=n,e.pyramidResolution=a,e.srcWidth=u,e.srcHeight=h}_getRequestOptionsWithSliceId(s){return _(this.rasterInfo.multidimensionalInfo)&&s.sliceId==null&&(s={...s,sliceId:this.getSliceIndex(s.multidimensionalDefinition)}),s}_processIdentifyResult(s,e){const{srcLocation:r,position:t,pyramidLevel:i,useTransposedTile:n}=e,a=s.pixels[0].length/s.width/s.height;if(!(!s.mask||s.mask[t]))return{location:r,value:null};const{multidimensionalInfo:o}=this.rasterInfo;if(M(o)||!n){const d=s.pixels.map(w=>w[t]),g={location:r,value:d,pyramidLevel:i},I=this._computeMagDirValues(d.map(w=>[w]));return I?.length&&(g.magdirValue=I.map(w=>w[0])),g}let l=s.pixels.map(d=>d.slice(t*a,t*a+a)),c=this._computeMagDirValues(l);const{requestSomeSlices:u,identifyOptions:h}=e;let f=wt(o,h.transposedVariableName);if(u){const d=bt(f,U(h.multidimensionalDefinition),U(h.timeExtent));l=l.map(g=>d.map(I=>g[I])),c=c?.map(g=>d.map(I=>g[I])),f=d.map(g=>f[g])}const m=s.noDataValues||this.rasterInfo.noDataValue,p={pixels:l,pixelType:s.pixelType};let y;return _(m)&&(St(p,m),y=p.mask),{location:r,value:null,dataSeries:f.map((d,g)=>{const I={value:y?.[g]===0?null:l.map(w=>w[g]),multidimensionalDefinition:d.multidimensionalDefinition.map(w=>new rt({...w,isSlice:!0}))};return c?.length&&(I.magdirValue=[c[0][g],c[1][g]]),I}),pyramidLevel:i}}};x([b()],q.prototype,"_rasterTileAlighmentInfo",void 0),x([b({readOnly:!0})],q.prototype,"_isGlobalWrappableSource",null),x([b(nt)],q.prototype,"url",null),x([b({type:String,json:{write:!0}})],q.prototype,"datasetName",void 0),x([b({type:String,json:{write:!0}})],q.prototype,"datasetFormat",void 0),x([b()],q.prototype,"hasUniqueSourceStorageInfo",void 0),x([b()],q.prototype,"rasterInfo",void 0),x([b()],q.prototype,"ioConfig",void 0),x([b()],q.prototype,"sourceJSON",void 0),q=x([Q("esri.layers.support.rasterDatasets.BaseRaster")],q);const re=q;let ee=class extends re{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null}async open(e){await this.init();const{rasterFunction:r}=this;this.primaryRasters?.rasters?.length?r.sourceRasters=this.primaryRasters.rasters:this.primaryRasters=r.getPrimaryRasters();const{rasters:t,rasterIds:i}=this.primaryRasters,n=t.map(c=>c.rasterInfo?void 0:c.open(e));await Promise.all(n);const a=t.map(({rasterInfo:c})=>c),o=r.bind({rasterInfos:a,rasterIds:i});if(!o.success||a.length===0)throw new $("raster-function:open",`cannot bind the function: ${o.error??""}`);await this.syncJobHandler();const l=a[0];this.hasUniqueSourceStorageInfo=a.length===1||a.slice(1).every(c=>this._hasSameStorageInfo(c,l)),this.set("sourceJSON",t[0].sourceJSON),this.set("rasterInfo",r.rasterInfo)}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(e,r,t,i={}){const{rasters:n,rasterIds:a}=this.primaryRasters,o=n.map(f=>f.fetchPixels(e,r,t,i)),l=await Promise.all(o),c=l.map(f=>f.pixelBlock);if(i.skipRasterFunction||c.every(f=>M(f)))return l[0];const u=l.find(f=>_(f.pixelBlock))?.extent??e,h=this.rasterJobHandler?await this.rasterJobHandler.process({extent:u,primaryPixelBlocks:c,primaryRasterIds:a}):this.rasterFunction.process({extent:u,primaryPixelBlocks:c,primaryRasterIds:a});return{...l[0],pixelBlock:h}}_hasSameStorageInfo(e,r){const{storageInfo:t,pixelSize:i,spatialReference:n,extent:a}=e,{storageInfo:o,pixelSize:l,spatialReference:c,extent:u}=r;return i.x===l.x&&i.y===l.y&&n.equals(c)&&a.equals(u)&&t.blockHeight===o.blockHeight&&t.blockWidth===o.blockWidth&&t.maximumPyramidLevel===o.maximumPyramidLevel}};x([b({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),x([b()],ee.prototype,"tileType",void 0),x([b()],ee.prototype,"rasterFunction",void 0),x([b()],ee.prototype,"primaryRasters",void 0),ee=x([Q("esri.layers.support.rasterDatasets.FunctionRaster")],ee);const Me=ee,Ye=Oe.getLogger("esri.layers.mixins.ImageryTileMixin"),Mi=s=>{let e=class extends s{constructor(...t){super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=t[0]?.raster?.datasetFormat==="Function"}get fullExtent(){return this.rasterInfo?.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer()}get tileInfo(){return this.rasterInfo?.storageInfo.tileInfo}set url(t){this._set("url",Ze(t,Ye))}set renderer(t){this._set("renderer",t),this.updateRenderer()}async convertVectorFieldData(t,i){if(M(t)||!this.rasterInfo)return null;const n=this._rasterJobHandler.instance,a=this.rasterInfo.dataType;return n?n.convertVectorFieldData({pixelBlock:t,dataType:a},i):Tt(t,a)}async createFlowMesh(t,i){const n=this._rasterJobHandler.instance;return n?n.createFlowMesh(t,i):_t(t.meshType,t.simulationSettings,t.flowData,_(i.signal)?i.signal:new AbortController().signal)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:i}=this.rasterInfo??{};if(M(i))return t;let n=t.multidimensionalDefinition||this.multidimensionalDefinition;!M(n)&&n.length||(n=ze(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const a=t.timeExtent||this.timeExtent;if(_(n)&&_(a)&&(_(a.start)||_(a.end))){n=n.map(y=>y.clone());const o=i.variables.find(({name:y})=>y===n[0].variableName)?.dimensions?.find(({name:y})=>y==="StdTime"),l=n.find(({dimensionName:y})=>y==="StdTime");if(!o||!l)return{...t,multidimensionalDefinition:null};const{start:c,end:u}=a,h=M(c)?null:c.getTime(),f=M(u)?null:u.getTime(),m=h??f,p=f??h;if(_(o.values)){const y=o.values.filter(d=>{if(Array.isArray(d)){if(m===p)return d[0]<=m&&d[1]>=m;const g=d[0]<=m&&d[1]>m||d[0]<p&&d[1]>=p,I=d[0]>=m&&d[1]<=p||d[0]<m&&d[1]>p;return g||I}return m===p?d===m:d>=m&&d<=p});if(y.length){const d=y.sort((g,I)=>m===p?(g[0]??g)-(I[0]??I):Math.abs((g[1]??g)-p)-Math.abs((I[1]??I)-p))[0];l.values=[d]}else n=null}else if(o.hasRegularIntervals&&o.extent){const[y,d]=o.extent;m>d||p<y?n=null:l.values=m===p?[m]:[Math.max(y,m),Math.min(d,p)]}}return _(n)&&Ft(n,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:n}}async updateRasterFunction(){if(this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&u&&this._set("rasterFunction",Pe.fromJSON(u)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let t,i=this.raster,n=!1;i.datasetFormat==="Function"?(t=i.primaryRasters.rasters,i=t[0],n=!0):t=[i];const{rasterFunction:a}=this;if(a){const u={raster:i};t.length>1&&t.forEach(m=>u[m.url]=m);const h=$e(a.rasterFunctionDefinition??a.toJSON(),u),f=new Me({rasterFunction:h});f.rasterJobHandler=this._rasterJobHandler.instance,await f.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=f}else this.raster=i,this._cachedRasterFunctionJson=null;if(this._cachedRendererJson=null,!n&&!a)return;const{bandIds:o}=this,{bandCount:l}=this.raster.rasterInfo,c=o?.length?o.some(u=>u>=l):l>=3;o&&(c||this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:t,symbolizer:i}=this;if(!t||!i)return;const{rasterInfo:n}=this.raster,a=Je(n,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset})?.name,o=Ne({...this.renderer.toJSON(),variableName:a});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(o))return;const l=this._rasterJobHandler.instance;l&&(i.rasterInfo=He(n,a),i.rendererJSON=o,i.bind(),await l.updateSymbolizer(i),this._cachedRendererJson=o)}async applyRenderer(t,i){const n=t&&t.pixelBlock;if(!(_(n)&&n.pixels&&n.pixels.length>0))return null;let a;await this.updateRenderer();const o=this._rasterJobHandler.instance,l=this.bandIds??[];return a=o?await o.symbolize({...t,simpleStretchParams:i,bandIds:l}):this.symbolizer.symbolize({...t,simpleStretchParams:i,bandIds:l}),a}getTileUrl(t,i,n){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${t}/${i}/${n}`:""}getCompatibleTileInfo(t,i,n=!1){if(!this.loaded||M(i))return null;if(n&&t.equals(this.spatialReference))return this.tileInfo;const a=kt(t);return pe.create({size:256,spatialReference:t,origin:a?{x:a.origin[0],y:a.origin[1]}:{x:i.xmin,y:i.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,i,n,a={}){if(r(this),a.requestAsImageElement){const l=this.getTileUrl(t,i,n);return it(l,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:a.signal}).then(c=>c.data)}const{rasterInfo:o}=this;if(_(o.multidimensionalInfo)&&(a=this.normalizeRasterFetchOptions(a),M(a.multidimensionalDefinition))){const l=a.tileInfo||o.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(t,i,n,l),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer.type==="raster-shaded-relief"&&(a={...a,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,i,n,a)}async fetchPixels(t,i,n,a={}){return _(this.rasterInfo.multidimensionalInfo)&&(a=this.normalizeRasterFetchOptions(a),M(a.multidimensionalDefinition))?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),this.raster.fetchPixels(t,i,n,a))}async identify(t,i={}){const{raster:n,rasterInfo:a}=this;if(_(a.multidimensionalInfo)&&!(a.hasMultidimensionalTranspose&&(tt(i.multidimensionalDefinition)||i.transposedVariableName||i.timeExtent))&&(i=this.normalizeRasterFetchOptions(i),M(i.multidimensionalDefinition)))return{location:t,value:null};const o=this.multidimensionalSubset?.areaOfInterest;if(o&&!o.contains(t))throw new $("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return n.identify(t,i)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const t=this.rasterInfo?.multidimensionalInfo;if(M(t)||this.rasterInfo?.dataType!=="standard-time")return!1;const i=this.multidimensionalDefinition,n=i?.[0]?.variableName;return t.variables.some(a=>a.name===n&&(!i?.[0].dimensionName||a.dimensions.some(o=>o.name==="StdTime")))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){const i=t??this.rasterInfo?.multidimensionalInfo;return Ct(this.multidimensionalSubset,i)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=ze(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const t=new Ot;return this._rasterJobHandler.connectionPromise=t.initialize().then(()=>{r(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.renderer&&this.updateRenderer(),this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(this.interpolation==null){r(this);const{raster:t}=this,i=Pt(t.rasterInfo,t.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",i)}}_configDefaultRenderer(t="no"){r(this);const{rasterInfo:i}=this.raster;!this.bandIds&&i.bandCount>1&&(this.bandIds=$t(i));const n=Je(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset})?.name;if(!this.renderer||t==="override"){const c=Le(i,{bandIds:this.bandIds,variableName:n});this.raster.datasetFormat==="WCSServer"&&c.type==="raster-stretch"&&((i.statistics?.[0].max??0)>1e24||(i.statistics?.[0].min??0)<-1e24)&&(c.dynamicRangeAdjustment=!0,c.statistics=null,c.stretchType==="none"&&(c.stretchType="min-max")),this.renderer=c}const a=Ne({...this.renderer.toJSON(),variableName:n}),o=He(i,n);this.symbolizer?(this.symbolizer.rendererJSON=a,this.symbolizer.rasterInfo=o):this.symbolizer=new Mt({rendererJSON:a,rasterInfo:o});const l=this.symbolizer.bind();if(l.success){if(t==="auto"){const{colormap:c}=this.raster.rasterInfo,u=this.renderer;if(_(c))if(u.type!=="raster-colormap")this._configDefaultRenderer("override");else{const h=Le(this.raster.rasterInfo);JSON.stringify(h)!==JSON.stringify(u)&&this._configDefaultRenderer("override")}else if(u.type==="raster-stretch"){const h=this.bandIds?.length,f=u.statistics?.length;!u.dynamicRangeAdjustment&&f&&h&&f!==h&&this._configDefaultRenderer("override")}}}else Ye.warn("imagery-tile-mixin",l.error||"The given renderer is not supported by the layer."),t==="auto"&&this._configDefaultRenderer("override")}};function r(t){if(!t.raster||!t.rasterInfo)throw new $("imagery-tile","no raster")}return x([b()],e.prototype,"_cachedRendererJson",void 0),x([b()],e.prototype,"_cachedRasterFunctionJson",void 0),x([b()],e.prototype,"_compatibleFullExtent",void 0),x([b()],e.prototype,"_isConstructedFromFunctionRaster",void 0),x([b()],e.prototype,"_rasterJobHandler",void 0),x([b()],e.prototype,"bandIds",void 0),x([b({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),x([b({json:{read:!1}})],e.prototype,"fullExtent",null),x([b()],e.prototype,"interpolation",void 0),x([b()],e.prototype,"ioConfig",void 0),x([b({type:[rt],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),x([b({type:vt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),x([b()],e.prototype,"raster",void 0),x([b({type:Pe})],e.prototype,"rasterFunction",void 0),x([b()],e.prototype,"rasterInfo",void 0),x([b()],e.prototype,"sourceJSON",void 0),x([b({readOnly:!0,type:W,json:{read:!1}})],e.prototype,"spatialReference",void 0),x([b({json:{read:!1}})],e.prototype,"tileInfo",null),x([b(nt)],e.prototype,"url",null),x([b({types:at})],e.prototype,"renderer",null),x([b()],e.prototype,"symbolizer",void 0),e=x([Q("esri.layers.ImageryTileMixin")],e),e};function Oi(s){const e=s.fields,r=s.records,t=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:t,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),n=i.map(c=>c.name),a=[];let o=0,l=0;return r.forEach(c=>{const u={};for(u[t]=o++,l=1;l<n.length;l++)u[n[l]]=c[l-1];a.push({attributes:u})}),{displayFieldName:"",fields:i,features:a}}class ct{static get supportedVersions(){return[5]}static parse(e){const r=new DataView(e),t=3&r.getUint8(0);if(t!==3)return{header:{version:t},recordSet:null};const i=r.getUint32(4,!0),n=r.getUint16(8,!0),a=r.getUint16(10,!0),o={version:t,recordCount:i,headerByteCount:n,recordByteCount:a};let l=32;const c=[],u=[];let h;if(t===3){for(;r.getUint8(l)!==13;)h=String.fromCharCode(r.getUint8(l+11)).trim(),c.push({name:Ae(new Uint8Array(e,l,11)),type:h,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(h)],length:r.getUint8(l+16)}),l+=32;if(l+=1,c.length>0)for(;u.length<i&&e.byteLength-l>a;){const f=[];r.getUint8(l)===32?(l+=1,c.forEach(m=>{if(m.type==="C")f.push(Ae(new Uint8Array(e,l,m.length)).trim());else if(m.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim(),10));else if(m.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim()));else if(m.type==="D"){const p=String.fromCharCode.apply(null,new Uint8Array(e,l,m.length)).trim();f.push(new Date(parseInt(p.substring(0,4),10),parseInt(p.substring(4,6),10)-1,parseInt(p.substring(6,8),10)))}l+=m.length}),u.push(f)):l+=a}}return{header:o,fields:c,records:u,recordSet:Oi({fields:c,records:u})}}}const te=new Map;te.set("int16","esriFieldTypeSmallInteger"),te.set("int32","esriFieldTypeInteger"),te.set("int64","esriFieldTypeInteger"),te.set("float32","esriFieldTypeSingle"),te.set("float64","esriFieldTypeDouble"),te.set("text","esriFieldTypeString");const Ke=8;let he=class extends re{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:r}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(r))throw new $("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:t,rasterInfo:i}=this._parseHeader(r);if(i.dataType==="thematic"){const n=await this._fetchAuxiliaryInformation();i.attributeTable=n}this._set("storageInfo",t),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,r,t,i={}){const{transposeInfo:n}=this.rasterInfo.storageInfo,{transposedVariableName:a}=i,o=!(!n||!a),l=o?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(l<0)return null;const c=this._buildCacheFilePath(l,r,t,i.multidimensionalDefinition,a),u=this._getIndexRecordFromBundle(r,t,o),h=await this.request(c,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:i.signal});if(!h)return null;const f=new Uint8Array(h.data),m=this._getTileEndAndContentType(f,u);if(m.recordSize===0)return null;const p=await this.request(c,{range:{from:m.position,to:m.position+m.recordSize},responseType:"array-buffer",signal:i.signal});if(!p)return null;const[y,d]=this._getTileSize(o);return this.decodePixelBlock(p.data,{width:y,height:d,planes:null,pixelType:null,returnInterleaved:o})}_validateHeader(e){const r=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!r.some(t=>!e[t])}_parseHeader(e){const r=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:t,histograms:i,colormap:n,blockWidth:a,blockHeight:o,firstPyramidLevel:l,maximumPyramidLevel:c}=e,u=e.statistics&&e.statistics.map(O=>({min:O.min,max:O.max,avg:O.mean,stddev:O.standardDeviation,median:O.median,mode:O.mode})),h=e.extent.spatialReference,f=e.geodataXform?.spatialReference,m=new W(h?.wkid||h?.wkt?h:f);let p=new j({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:m});const y=new A({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:m}),d=Math.round((p.xmax-p.xmin)/y.x),g=Math.round((p.ymax-p.ymin)/y.y),I=this._parseTransform(e.geodataXform),w=I?p:null;I&&(p=I.forwardTransform(p),y.x=(p.xmax-p.xmin)/d,y.y=(p.ymax-p.ymin)/g);const k=e.properties??{},F=e.format.toLowerCase().replace("cache/",""),T=new A(e.origin.x,e.origin.y,m);let C,S,R,v;if(n&&n.colors)for(C=[],S=0;S<n.colors.length;S++)R=n.colors[S],v=n.values?n.values[S]:S,C.push([v,255&R,R<<16>>>24,R<<8>>>24,R>>>24]);const P=e.LODInfos,E=[];for(S=0;S<P.levels.length;S++)E.push(new st({level:P.levels[S],resolution:P.resolutions[S],scale:96/.0254*P.resolutions[S]}));const D=new pe({dpi:96,lods:E,format:F,origin:T,size:[a,o],spatialReference:m}),V={recordSize:Ke,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*Ke+64},J=[{maxCol:Math.ceil(d/a)-1,maxRow:Math.ceil(g/o)-1,minCol:0,minRow:0}];let z=2;if(c>0)for(S=0;S<c;S++)J.push({maxCol:Math.ceil(d/z/a)-1,maxRow:Math.ceil(g/z/o)-1,minCol:0,minRow:0}),z*=2;const H=e.mdInfo;let N=null;if(H&&k._yxs){const O=k._yxs;N={packetSize:O.PacketSize,tileSize:[O.TileXSize,O.TileYSize]}}return{storageInfo:V,rasterInfo:new ge({width:d,height:g,pixelType:r,bandCount:t,extent:p,nativeExtent:w,transform:I,spatialReference:m,pixelSize:y,keyProperties:k,statistics:u,histograms:i,multidimensionalInfo:H,colormap:C,storageInfo:new ye({blockWidth:a,blockHeight:o,pyramidBlockWidth:a,pyramidBlockHeight:o,origin:T,tileInfo:D,transposeInfo:N,firstPyramidLevel:l,maximumPyramidLevel:c,blockBoundary:J})})}}_parseTransform(e){if(!Fi(e))throw new $("cloudraster:open","the data contains unsupported geodata transform types");const r=ki(e);if(r.type==="identity")return null;if(r.type!=="polynomial"||!r.forwardCoefficients?.length||!r.inverseCoefficients?.length)throw new $("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(e){const r=this.request(this.url+"/conf.vat.json",{signal:e}).then(a=>a.data).catch(()=>null),t=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(a=>a.data).catch(()=>null),i=await Promise.all([r,t]);let n;if(i[0]){let a=i[0].fields;const o=i[0].values;if(a&&o){a=a.map(c=>({type:c.name==="OID"?"esriFieldTypeOID":te.get(c.type),name:c.name,alias:c.alias||c.name}));const l=o.map(c=>({attributes:c}));a&&o&&(n={fields:a,features:l})}}return!n&&i[1]&&(n=ct.parse(i[1]).recordSet),ot.fromJSON(n)}_buildCacheFilePath(e,r,t,i,n){const a=this._getPackageSize(!!n),o=Math.floor(r/a)*a,l=Math.floor(t/a)*a,c="R"+this._toHexString4(o)+"C"+this._toHexString4(l);let u="L";u+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:h}=this.rasterInfo,f=i?.[0];if(M(h)||!f)return`${this.url}/_alllayers/${u}/${c}.bundle`;let m="_yxs";if(!n){m=h.variables.find(d=>d.name===f.variableName).dimensions[0].values.indexOf(f.values[0]).toString(16);const y=4-m.length;for(let d=0;d<y;d++)m="0"+m;m="S"+m}const p=this._getVariableFolderName(n||f.variableName);return`${this.url}/_alllayers/${p}/${m}/${u}/${c}.bundle`}_getPackageSize(e=!1){const{transposeInfo:r}=this.rasterInfo.storageInfo;return e&&_(r)?r.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:r}=this.rasterInfo,{transposeInfo:t}=r;return e&&_(t)?t.tileSize:r.tileInfo.size}_getVariableFolderName(e){return(e=e.trim())===""?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,r,t=!1){const i=this._getPackageSize(t),n=i*(e%i)+r%i;if(n<0)throw new Error("Invalid level / row / col");return 20+n*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,r){const t=e.subarray(r,r+8);let i,n=0;for(i=0;i<5;i++)n|=(255&t[i])<<8*i;const a=0xffffffffff&n;for(n=0,i=5;i<8;i++)n|=(255&t[i])<<8*(i-5);return{position:a,recordSize:0xffffffffff&n}}_toHexString4(e){let r=e.toString(16);if(r.length!==4){let t=4-r.length;for(;t-- >0;)r="0"+r}return r}};x([b({readOnly:!0})],he.prototype,"storageInfo",void 0),x([b({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),he=x([Q("esri.layers.support.rasterDatasets.CloudRaster")],he);const Di=he;let fe=class extends re{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null}async open(s){await this.init();const e=this.data,{pixelBlock:r,statistics:t,histograms:i,name:n,keyProperties:a,nativeExtent:o,transform:l}=this.data,{width:c,height:u,pixelType:h}=r,f=e.extent??new j({xmin:-.5,ymin:.5,xmax:c-.5,ymax:u-.5,spatialReference:new W({wkid:3857})}),m=e.isPseudoSpatialReference??!e.extent,p={x:f.width/c,y:f.height/u},y=new ge({width:c,height:u,pixelType:h,extent:f,nativeExtent:o,transform:l,pixelSize:p,spatialReference:f.spatialReference,bandCount:r.pixels.length,keyProperties:a||{},statistics:t,isPseudoSpatialReference:m,histograms:i});this.createRemoteDatasetStorageInfo(y,512,512),this._set("rasterInfo",y),this.updateTileInfo(),await this._buildInMemoryRaster(r,{width:512,height:512},s),this.datasetName=n,this.url="/InMemory/"+n}fetchRawTile(s,e,r,t={}){const i=this._pixelBlockTiles.get(`${s}/${e}/${r}`);return Promise.resolve(i)}async _buildInMemoryRaster(s,e,r){const t=this.rasterInfo.storageInfo.maximumPyramidLevel,i=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:s,tileSize:e,maximumPyramidLevel:t},r):Promise.resolve(Dt(s,e,t)),n=_(this.rasterInfo.statistics),a=_(this.rasterInfo.histograms),o=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:s},r):Promise.resolve(Bt(s)),l=await lt([i,o]);if(!l[0].value&&l[1].value)throw new $("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=l[0].value,n||(this.rasterInfo.statistics=l[1].value?.statistics),a||(this.rasterInfo.histograms=l[1].value?.histograms)}};x([b({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),x([b()],fe.prototype,"data",void 0),fe=x([Q("esri.layers.support.rasterDatasets.InMemoryRaster")],fe);const Bi=fe;function le(s,e){if(!s||!e)return[];let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=[];if(e){const n=le(s,r);for(let a=0;a<n.length;a++)le(n[a],e).forEach(o=>t.push(o));return t}const i=s.getElementsByTagNameNS("*",r);if(!i||i.length===0)return[];for(let n=0;n<i.length;n++)t.push(i[n]||i.item[n]);return t}function G(s,e){if(!s||!e)return null;let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const t=le(s,r);return t.length>0?e?G(t[0],e):t[0]:null}function K(s,e=null){const r=e?G(s,e):s;let t;return r?(t=r.textContent||r.nodeValue,t?t.trim():null):null}function Ei(s,e){const r=le(s,e),t=[];let i;for(let n=0;n<r.length;n++)i=r[n].textContent||r[n].nodeValue,i&&(i=i.trim(),i!==""&&t.push(i));return t}function we(s,e){return Ei(s,e).map(r=>Number(r))}function se(s,e){const r=K(s,e);return Number(r)}function Fe(s,e){const r=s?.nodeName?.toLowerCase(),t=e.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===t}function Qe(s,e){if(!s||!e)return null;const r=[];for(let t=0;t<s.length;t++)r.push(s[t]),r.push(e[t]);return r}function zi(s){const e=G(s,"GeodataXform"),r=Re(se(e,"SpatialReference/WKID")||K(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const t=se(e,"PolynomialOrder")??1,i=we(e,"CoeffX/Double"),n=we(e,"CoeffY/Double"),a=we(e,"InverseCoeffX/Double"),o=we(e,"InverseCoeffY/Double"),l=Qe(i,n),c=Qe(a,o);return{spatialReference:r,transform:l&&c&&l.length&&c.length?new Be({spatialReference:r,polynomialOrder:t,forwardCoefficients:l,inverseCoefficients:c}):null}}function Ji(s){const e=se(s,"NoDataValue"),r=G(s,"Histograms/HistItem"),t=se(r,"HistMin"),i=se(r,"HistMax"),n=se(r,"BucketCount"),a=K(r,"HistCounts")?.split("|").map(f=>Number(f));let o,l,c,u;le(s,"Metadata/MDI").forEach(f=>{const m=Number(f.textContent??f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":o=m;break;case"STATISTICS_MAXIMUM":l=m;break;case"STATISTICS_MEAN":c=m;break;case"STATISTICS_STDDEV":u=m}});const h=se(s,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:a?.length&&t!=null&&i!=null?{min:t,max:i,size:n||a.length,counts:a}:null,sourceBandIndex:h,statistics:o!=null&&l!=null?{min:o,max:l,avg:c,stddev:u}:null}}function Re(s){if(!s)return null;let e=Number(s);if(!isNaN(e)&&e!==0)return new W({wkid:e});if((s=String(s)).startsWith("COMPD_CS")){if(!s.includes("VERTCS")||!s.includes("GEOGCS")&&!s.startsWith("PROJCS"))return null;const r=s.indexOf("VERTCS"),t=s.indexOf("PROJCS"),i=t>-1?t:s.indexOf("GEOGCS");if(i===-1)return null;const n=s.slice(i,s.lastIndexOf("]",r)+1).trim(),a=s.slice(r,s.lastIndexOf("]")).trim();e=ke(n);const o=new W(e?{wkid:e}:{wkt:n}),l=ke(a);return l&&(o.vcsWkid=l),o}return s.startsWith("GEOGCS")||s.startsWith("PROJCS")?(e=ke(s),new W(e!==0?{wkid:e}:{wkt:s})):null}function ke(s){const e=s.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(i=>i.trim()).filter(i=>i!==""),r=e[e.length-1].split(","),t=r[0]?.toLowerCase();if((t==="epsg"||t==="esri")&&s.endsWith('"]]')){const i=Number(r[1]);if(!isNaN(i)&&i!==0)return i}return 0}function Ee(s){if(s?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};s.documentElement.childNodes.forEach(t=>{if(t.nodeType===1){if(Fe(t,"SRS")){if(!e.spatialReference){const i=K(t);e.spatialReference=Re(i)}}else if(Fe(t,"Metadata"))if(t.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:n}=zi(t);e.transform=n,e.spatialReference||(e.spatialReference=i)}else le(t,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=K(i));else if(Fe(t,"PAMRasterBand")){const i=Ji(t);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}});const r=e.rasterBands;if(r.length){const t=!!r[0].statistics;e.statistics=t?r.map(n=>n.statistics).filter(_):null;const i=!!r[0].histogram;e.histograms=i?r.map(n=>n.histogram).filter(_):null}return e}let Se=class extends re{async open(s){await this.init();const e=await this._fetchData(s);let{spatialReference:r,statistics:t,histograms:i,transform:n}=await this._fetchAuxiliaryData(s);const a=!r;a&&(r=new W({wkid:3857})),i?.length&&t==null&&(t=De(i));const{width:o,height:l}=e;let c=new j({xmin:-.5,ymin:.5-l,xmax:o-.5,ymax:.5,spatialReference:r});const u=n?n.forwardTransform(c):c;let h=!0;if(n){const m=n.forwardCoefficients;h=m&&m[1]===0&&m[2]===0,h&&(n=null,c=u)}const f=new Bi({data:{extent:u,nativeExtent:c,transform:n,pixelBlock:e,statistics:t,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await f.open(),f.data=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}fetchRawTile(s,e,r,t={}){return this._inMemoryRaster.fetchRawTile(s,e,r,t)}async _fetchData(s){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:s?.signal}),r=Et(e).toUpperCase();if(r!=="JPG"&&r!=="PNG"&&r!=="GIF"&&r!=="BMP")throw new $("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const t=r.toLowerCase(),i=t==="gif"||t==="bmp"||!zt("ios"),n=await this.decodePixelBlock(e,{format:t,useCanvas:i,hasNoZlibMask:!0});if(n==null)throw new $("image-aux-raster:open","the data cannot be decoded");return n}async _fetchAuxiliaryData(s){const e=U(s?.signal),r=this.ioConfig.skipExtensions??[],t=r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),i=this.datasetFormat,n=i==="JPG"?"jgw":i==="PNG"?"pgw":i==="BMP"?"bpw":null,a=n&&r.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await lt([t,a]);if(e?.aborted)throw Jt();const l=Ee(o[0].value?.data);if(!l.transform){const c=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(u=>Number(u)):null;l.transform=c?.length===6?new Be({forwardCoefficients:[c[4],c[5],c[0],-c[1],c[2],-c[3]]}):null}return l}};x([b({type:String,json:{write:!0}})],Se.prototype,"datasetFormat",void 0),Se=x([Q("esri.layers.support.rasterDatasets.ImageAuxRaster")],Se);const be=Se;let de=class extends re{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async open(e){await this.init();const r=e&&e.signal,t=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:r});t.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const i=t.data;if(this.sourceJSON=i,!i)throw new $("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!i.tileInfo)throw new $("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=i.cacheType,this.tileType==null&&(n.includes(i.tileInfo.format.toLowerCase())?this.tileType="Map":i.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=i.name?.slice(i.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:r});if(M(a))throw new $("image-server-raster:open","cannot initialize image service");const o=this.tileType==="Map"?Nt(i.tileInfo,i):pe.fromJSON(i.tileInfo);Ht(o);const[l,c]=this._computeMinMaxLOD(a,o),{extent:u,pixelSize:h}=a,f=.5/a.width*h.x,m=Math.max(h.x,h.y),{lods:p}=o;(this.tileType!=="Map"&&i.maxScale!==0||Math.abs(h.x-h.y)>f||!p.some(S=>Math.abs(S.resolution-m)<f))&&(h.x=h.y=l.resolution,a.width=Math.ceil((u.xmax-u.xmin)/h.x-.1),a.height=Math.ceil((u.ymax-u.ymin)/h.y-.1));const y=l.level-c.level,[d,g]=o.size,I=[],w=[];p.forEach((S,R)=>{S.level>=c.level&&S.level<=l.level&&I.push({x:S.resolution,y:S.resolution}),R<p.length-1&&w.push(Math.round(10*S.resolution/p[R+1].resolution)/10)}),I.sort((S,R)=>S.x-R.x);const k=this.computeBlockBoundary(u,d,g,o.origin,I,y),F=I.length>1?I.slice(1):null;let T;i.transposeInfo&&(T={tileSize:[i.transposeInfo.rows,i.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const C=w.length<=1||w.length>=3&&w.slice(0,w.length-1).every(S=>S===w[0])?w[0]??2:Math.round(10/(c.resolution/l.resolution)**(-1/y))/10;if(a.storageInfo=new ye({blockWidth:o.size[0],blockHeight:o.size[1],pyramidBlockWidth:o.size[0],pyramidBlockHeight:o.size[1],pyramidResolutions:F,pyramidScalingFactor:C,compression:o.format,origin:o.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:o,transposeInfo:T,blockBoundary:k}),this._fixGCSShift(a),this._set("rasterInfo",a),i.capabilities.toLowerCase().includes("tilemap")){const S={tileInfo:a.storageInfo.tileInfo,parsedUrl:Lt(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new At({layer:S})}}async fetchRawTile(e,r,t,i={}){const{storageInfo:n,extent:a}=this.rasterInfo,{transposeInfo:o}=n,l=_(o)&&!!i.transposedVariableName;if(this._slices&&!l&&i.sliceId==null)return null;const c=l?0:n.maximumPyramidLevel-e+this._levelOffset,u=`${this.url}/tile/${c}/${r}/${t}`,h=this._slices?l?{variable:i.transposedVariableName}:{sliceId:i.sliceId||0}:null,{data:f}=await this.request(u,{query:h,responseType:"array-buffer",signal:i.signal});if(!f)return null;const m=l?o.tileSize:n.tileInfo.size,p=await this.decodePixelBlock(f,{width:m[0],height:m[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:U(this.rasterInfo.noDataValue)});if(p==null)return null;const y=n.blockBoundary[e];if(n.compression!=="jpg"||t>y.minCol&&t<y.maxCol&&r>y.minRow&&r<y.maxRow)return p;const{origin:d,blockWidth:g,blockHeight:I}=n,{x:w,y:k}=this.getPyramidPixelSize(e),F=Math.round((a.xmin-d.x)/w)%g,T=Math.round((a.xmax-d.x)/w)%g||g,C=Math.round((d.y-a.ymax)/k)%I,S=Math.round((d.y-a.ymin)/k)%I||I,R=t===y.minCol?F:0,v=r===y.minRow?C:0,P=t===y.maxCol?T:g,E=r===y.maxRow?S:I;return Wt(p,{x:R,y:v},{width:P-R,height:E-v}),p}getSliceIndex(e){if(!this._slices||M(e)||e.length===0)return null;const r=e;for(let t=0;t<this._slices.length;t++){const i=this._slices[t].multidimensionalDefinition;if(i.length===r.length&&!i.some(n=>{const a=r.find(o=>n.variableName===o.variableName&&o.dimensionName===n.dimensionName);return a?(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0])!==(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0]):!0}))return t}return null}async fetchVariableStatisticsHistograms(e,r){const t=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:r}).then(a=>a.data?.statistics),i=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:r}).then(a=>a.data?.histograms),n=await Promise.all([t,i]);return n[0]&&n[0].forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),{statistics:n[0]||null,histograms:n[1]||null}}async computeBestPyramidLevelForLocation(e,r={}){if(!this._tilemapCache)return 0;let t=this.identifyPixelLocation(e,0,U(r.datumTransformation));if(t===null)return null;let i=0;const{maximumPyramidLevel:n}=this.rasterInfo.storageInfo;let a=n-i+this._levelOffset;const o=t.srcLocation;for(;a>=0;){try{if(await this._tilemapCache.fetchAvailability(a,t.row,t.col,r)==="available")break}catch{}if(a--,i++,t=this.identifyPixelLocation(o,i,U(r.datumTransformation)),t===null)return null}return a===-1||t==null?null:i}async _fetchRasterInfo(e){const r=this.sourceJSON;if(this.tileType==="Map"){const o=r.fullExtent||r.extent,l=Math.ceil((o.xmax-o.xmin)/r.pixelSizeX-.1),c=Math.ceil((o.ymax-o.ymin)/r.pixelSizeY-.1),u=W.fromJSON(r.spatialReference||o.spatialReference),h=new A({x:r.pixelSizeX,y:r.pixelSizeY,spatialReference:u});return new ge({width:l,height:c,bandCount:3,extent:j.fromJSON(o),spatialReference:u,pixelSize:h,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:t}=e,i=jt(this.url,this.sourceJSON,{signal:t,query:this.ioConfig.customFetchParameters}),n=r.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:t}).then(o=>o.data&&o.data.slices).catch(()=>null):null,a=await Promise.all([i,n]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:r,spatialReference:t}=e;r.xmin>-1&&r.xmax>181&&t?.wkid&&t.isGeographic&&(e.nativeExtent=e.extent,e.transform=new Ci,e.extent=e.transform.forwardTransform(r))}_computeMinMaxLOD(e,r){const{pixelSize:t}=e,i=.5/e.width*t.x,{lods:n}=r,a=r.lodAt(Math.max.apply(null,n.map(m=>m.level))),o=r.lodAt(Math.min.apply(null,n.map(m=>m.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=n[0].level,[a,o];if(l==="Raster")return[n.find(m=>m.resolution===t.x)??a,o];const{minScale:c,maxScale:u}=this.sourceJSON;let h=a;u>0&&(h=n.find(m=>Math.abs(m.scale-u)<i),h||(h=n.filter(m=>m.scale>u).sort((m,p)=>m.scale>p.scale?1:-1)[0]??a));let f=o;return c>0&&(f=n.find(m=>Math.abs(m.scale-c)<i)??o,this._levelOffset=f.level-o.level),[h,f]}};x([b({type:String,json:{write:!0}})],de.prototype,"datasetFormat",void 0),x([b()],de.prototype,"tileType",void 0),de=x([Q("esri.layers.support.rasterDatasets.ImageServerRaster")],de);const Ni=de,Y=new Map;Y.set("Int8","s8"),Y.set("UInt8","u8"),Y.set("Int16","s16"),Y.set("UInt16","u16"),Y.set("Int32","s32"),Y.set("UInt32","u32"),Y.set("Float32","f32"),Y.set("Float64","f32"),Y.set("Double64","f32");const Z=new Map;Z.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Z.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Z.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Z.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let oe=class extends re{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(s){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=s?U(s.signal):null,r=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:t,files:i}=this._parseHeader(r.data);if(this.ioConfig.skipExtensions?.indexOf("aux.xml")===-1){const y=await this._fetchAuxiliaryData(s);y!=null&&(t.statistics=y.statistics??t.statistics,t.histograms=y.histograms,y.histograms&&M(t.statistics)&&(t.statistics=De(y.histograms)))}this._set("rasterInfo",t),this._files=i;const n=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(n.data);const{blockWidth:a,blockHeight:o}=this.rasterInfo.storageInfo,l=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:c,height:u}=this.rasterInfo,h=[],f=this._getBandSegmentCount();let m=0,p=-1;for(;m<this._storageIndex.length;){p++;const y=Math.ceil(c/a/l**p)-1,d=Math.ceil(u/o/l**p)-1;m+=(y+1)*(d+1)*f*4,h.push({maxRow:d,maxCol:y,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=h,p>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=p),this.updateTileInfo()}async fetchRawTile(s,e,r,t={}){const{blockWidth:i,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,o=a[s];if(!o||o.maxRow<e||o.maxCol<r||o.minRow>e||o.minCol>r)return null;const{bandCount:l,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:h,actualTileHeight:f}=this._getTileLocation(s,e,r);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const R=new Uint8Array(i*n);return new qt({width:i,height:n,pixels:null,mask:R,validPixelCount:0})}const{bandIds:m}=this.ioConfig,p=this._getBandSegmentCount(),y=[];let d=0;for(d=0;d<p;d++)(!m||m.indexOf[d]>-1)&&y.push(this.request(this._files.data,{range:{from:u[d].from,to:u[d].to},responseType:"array-buffer",signal:t.signal}));const g=await Promise.all(y),I=g.map(R=>R.data.byteLength).reduce((R,v)=>R+v),w=new Uint8Array(I);let k=0;for(d=0;d<p;d++)w.set(new Uint8Array(g[d].data),k),k+=g[d].data.byteLength;const F=Z.get(this.rasterInfo.storageInfo.compression).decoderFormat,T=await this.decodePixelBlock(w.buffer,{width:i,height:n,format:F,planes:m?.length||l,pixelType:c});if(T==null)return null;if(_(this.rasterInfo.noDataValue)&&F!=="lerc"&&!T.mask){const R=this.rasterInfo.noDataValue[0];if(R!=null){const v=T.width*T.height,P=new Uint8Array(v);if(Math.abs(R)>1e24)for(d=0;d<v;d++)Math.abs((T.pixels[0][d]-R)/R)>1e-6&&(P[d]=1);else for(d=0;d<v;d++)T.pixels[0][d]!==R&&(P[d]=1);T.mask=P}}let C=0,S=0;if(h!==i||f!==n){let R=T.mask;if(R)for(d=0;d<n;d++)if(S=d*i,d<f)for(C=h;C<i;C++)R[S+C]=0;else for(C=0;C<i;C++)R[S+C]=0;else for(R=new Uint8Array(i*n),T.mask=R,d=0;d<f;d++)for(S=d*i,C=0;C<h;C++)R[S+C]=1}return T}_parseIndex(s){if(s.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,r,t,i,n,a;if(Gt){for(r=new Uint8Array(s),i=new ArrayBuffer(s.byteLength),t=new Uint8Array(i),n=0;n<s.byteLength/4;n++)for(a=0;a<4;a++)t[4*n+a]=r[4*n+3-a];e=new Uint32Array(i)}else e=new Uint32Array(s);return e}_getBandSegmentCount(){return Z.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(s,e,r){const{blockWidth:t,blockHeight:i,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:o}=this.rasterInfo,l=this._getBandSegmentCount();let c,u,h,f=0,m=0;for(h=0;h<s;h++)m=n**h,c=Math.ceil(a/t/m),u=Math.ceil(o/i/m),f+=c*u;m=n**s,c=Math.ceil(a/t/m),u=Math.ceil(o/i/m),f+=e*c+r,f*=4*l;const p=this._storageIndex.subarray(f,f+4*l);let y=0,d=0;const g=[];for(let I=0;I<l;I++)y=p[4*I+0]*2**32+p[4*I+1],d=y+p[4*I+2]*2**32+p[4*I+3],g.push({from:y,to:d});return{ranges:g,actualTileWidth:r<c-1?t:Math.ceil(a/m)-t*(c-1),actualTileHeight:e<u-1?i:Math.ceil(o/m)-i*(u-1)}}_parseHeader(s){const e=G(s,"MRF_META/Raster");if(!e)throw new $("mrf:open","not a valid MRF format");const r=G(e,"Size"),t=parseInt(r.getAttribute("x"),10),i=parseInt(r.getAttribute("y"),10),n=parseInt(r.getAttribute("c"),10),a=(K(e,"Compression")||"none").toLowerCase();if(!Z.has(a))throw new $("mrf:open","currently does not support compression "+a);const o=K(e,"DataType")||"UInt8",l=Y.get(o);if(l==null)throw new $("mrf:open","currently does not support pixel type "+o);const c=G(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),h=parseInt(c.getAttribute("y"),10),f=G(e,"DataValues");let m,p;if(f&&(p=f.getAttribute("NoData"),p!=null&&(m=p.trim().split(" ").map(P=>parseFloat(P)))),G(s,"MRF_META/CachedSource"))throw new $("mrf:open","currently does not support MRF referencing other data files");const y=G(s,"MRF_META/GeoTags"),d=G(y,"BoundingBox");let g,I=!1;if(d!=null){const P=parseFloat(d.getAttribute("minx")),E=parseFloat(d.getAttribute("miny")),D=parseFloat(d.getAttribute("maxx")),V=parseFloat(d.getAttribute("maxy")),J=K(y,"Projection")||"";let z=W.WGS84;if(J!=="LOCAL_CS[]")if(J.toLowerCase().startsWith("epsg:")){const H=Number(J.slice(5));isNaN(H)||H===0||(z=new W({wkid:H}))}else z=Re(J)??W.WGS84;else I=!0,z=new W({wkid:3857});g=new j(P,E,D,V),g.spatialReference=z}else I=!0,g=new j({xmin:-.5,ymin:.5-i,xmax:t-.5,ymax:.5,spatialReference:new W({wkid:3857})});const w=G(s,"MRF_META/Rsets"),k=parseInt(w&&w.getAttribute("scale")||"2",10),F=g.spatialReference,T=new ye({origin:new A({x:g.xmin,y:g.ymax,spatialReference:F}),blockWidth:u,blockHeight:h,pyramidBlockWidth:u,pyramidBlockHeight:h,compression:a,pyramidScalingFactor:k}),C=new A({x:g.width/t,y:g.height/i,spatialReference:F}),S=new ge({width:t,height:i,extent:g,isPseudoSpatialReference:I,spatialReference:F,bandCount:n,pixelType:l,pixelSize:C,noDataValue:m,storageInfo:T}),R=K(s,"datafile"),v=K(s,"IndexFile");return{rasterInfo:S,files:{mrf:this.url,index:v||this.url.replace(".mrf",".idx"),data:R||this.url.replace(".mrf",Z.get(a).blobExtension)}}}async _fetchAuxiliaryData(s){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:s?.signal});return Ee(e)}catch{return null}}};x([b()],oe.prototype,"_files",void 0),x([b()],oe.prototype,"_storageIndex",void 0),x([b({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=x([Q("esri.layers.support.rasterIO.MRFRaster")],oe);const Hi=oe,Ce=(s,e)=>s.get(e)?.values,ue=(s,e)=>s.get(e)?.values?.[0];let ie=class extends re{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(s){await this.init();const e=s?U(s.signal):null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!r)throw new $("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:t,firstIFDPos:i,isBigTiff:n}=Ut(r),a=[];await this._readIFDs(a,r,t,i,0,n?8:4,e);const{imageInfo:o,rasterInfo:l}=this._parseIFDs(a),c=Vt(a),u=Xt(a);if(this._headerInfo={littleEndian:t,isBigTiff:n,ifds:a,pyramidIFDs:c,maskIFDs:u,...o},this._set("rasterInfo",l),!o.isSupported)throw new $("tiffraster:open","this tiff is not supported: "+o.message);if(!o.tileWidth)throw new $("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:h=[]}=this.ioConfig;if(!h.includes("aux.xml")){const f=await this._fetchAuxiliaryMetaData(s);f!=null&&this._processPAMInfo(f,l)}h.includes("vat.dbf")||l.bandCount!==1||l.pixelType!=="u8"||(l.attributeTable=await this._fetchAuxiliaryTable(s),_(l.attributeTable)&&(l.keyProperties.DataType="thematic")),this.updateTileInfo()}async fetchRawTile(s,e,r,t={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(s,e,r))return null;const i=await this._fetchRawTiffTile(s,e,r,!1,t);if(_(i)&&this._headerInfo.hasMaskBand){const n=await this._fetchRawTiffTile(s,e,r,!0,t);_(n)&&n.pixels[0]instanceof Uint8Array&&(i.mask=n.pixels[0])}return i}_parseIFDs(s){const e=Yt(s),{width:r,height:t,tileWidth:i,tileHeight:n,planes:a,pixelType:o,compression:l,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:h,pyramidBlockHeight:f,tileBoundary:m,affine:p,metadata:y}=e,d=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let g=Re(d),I=!!e.isPseudoGeographic;g==null&&(I=!0,g=new W({wkid:3857}));const w=new j({...e.extent,spatialReference:g}),k=new A(w?{x:w.xmin,y:w.ymax,spatialReference:g}:{x:0,y:0}),F=new ye({blockWidth:i,blockHeight:n,pyramidBlockWidth:h,pyramidBlockHeight:f,compression:l,origin:k,firstPyramidLevel:c,maximumPyramidLevel:u,blockBoundary:m}),T=new A({x:(w.xmax-w.xmin)/r,y:(w.ymax-w.ymin)/t,spatialReference:g}),C=y?{BandProperties:y.bandProperties,DataType:y.dataType}:{};let S=null;const R=ue(s[0],"PHOTOMETRICINTERPRETATION"),v=Ce(s[0],"COLORMAP");if(R<=3&&v?.length>3&&v.length%3==0){S=[];const E=v.length/3;for(let D=0;D<E;D++)S.push([D,v[D]>>>8,v[D+E]>>>8,v[D+2*E]>>>8])}const P=new ge({width:r,height:t,bandCount:a,pixelType:o,pixelSize:T,storageInfo:F,spatialReference:g,isPseudoSpatialReference:I,keyProperties:C,extent:w,colormap:S,statistics:y?y.statistics:null});return p?.length&&(P.nativeExtent=new j({xmin:-.5,ymin:.5-t,xmax:r-.5,ymax:.5,spatialReference:g}),P.transform=new Be({polynomialOrder:1,forwardCoefficients:[p[2]+p[0]/2,p[5]-p[3]/2,p[0],p[3],-p[1],-p[4]]}),P.extent=P.transform.forwardTransform(P.nativeExtent),P.pixelSize=new A({x:(w.xmax-w.xmin)/r,y:(w.ymax-w.ymin)/t,spatialReference:g}),F.origin.x=-.5,F.origin.y=.5),{imageInfo:e,rasterInfo:P}}_processPAMInfo(s,e){if(e.statistics=s.statistics??e.statistics,e.histograms=s.histograms,s.histograms&&M(e.statistics)&&(e.statistics=De(s.histograms)),s.transform&&M(e.transform)){e.transform=s.transform,e.nativeExtent=e.extent;const r=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new A({x:(r.xmax-r.xmin)/e.width,y:(r.ymax-r.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=r}e.isPseudoSpatialReference&&s.spatialReference&&(e.spatialReference=s.spatialReference)}async _readIFDs(s,e,r,t,i,n=4,a){if(!t)return null;(t>=e.byteLength||t<0)&&(e=(await this.request(this.url,{range:{from:t+i,to:t+i+this._bufferSize},responseType:"array-buffer",signal:a})).data,i=t+i,t=0);const o=await this._readIFD(e,r,t,i,xe.TIFF_TAGS,n,a);if(s.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(s,e,r,o.nextIFD-i,i,n,a)}async _readIFD(s,e,r,t,i=xe.TIFF_TAGS,n=4,a){if(!s)return null;const o=Kt(s,e,r,t,i,n);if(o.success){const l=[];if(o.ifd?.forEach(c=>{c.values||l.push(c)}),l.length>0){const c=l.map(h=>h.offlineOffsetSize).filter(_),u=Math.min.apply(null,c.map(h=>h[0]));if(Math.min.apply(null,c.map(h=>h[0]+h[1]))-u<=this._bufferSize){const{data:h}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:a});s=h,t=u,l.forEach(f=>Qt(s,e,f,t))}}if(o.ifd?.has("GEOKEYDIRECTORY")){const c=o.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const h=u[0]+"."+u[1]+"."+u[2],f=await this._readIFD(s,e,c.valueOffset+6-t,t,xe.GEO_KEYS,2,a);c.data=f.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[h]})}}return o}if(o.requiredBufferSize&&o.requiredBufferSize!==s.byteLength)return(s=(await this.request(this.url,{range:{from:t,to:t+o.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data).byteLength<o.requiredBufferSize?null:this._readIFD(s,e,0,t,xe.TIFF_TAGS,4,a)}async _fetchRawTiffTile(s,e,r,t,i={}){const n=this._getTileLocation(s,e,r,t);if(!n)return null;const{ranges:a,actualTileWidth:o,actualTileHeight:l,ifd:c}=n,u=a.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:i.signal})),h=await Promise.all(u),f=h.map(T=>T.data.byteLength).reduce((T,C)=>T+C),m=h.length===1?h[0].data:new ArrayBuffer(f),p=[0],y=[0];if(h.length>1){const T=new Uint8Array(m);for(let C=0,S=0;C<h.length;C++){const R=h[C].data;T.set(new Uint8Array(R),S),p[C]=S,S+=R.byteLength,y[C]=R.byteLength}}const{blockWidth:d,blockHeight:g}=this.getBlockWidthHeight(s),I=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:p,sizes:y},width:d,height:g,planes:null,pixelType:null});if(I==null)return null;let w,k,F;if(o!==d||l!==g){let T=I.mask;if(T)for(w=0;w<g;w++)if(F=w*d,w<l)for(k=o;k<d;k++)T[F+k]=0;else for(k=0;k<d;k++)T[F+k]=0;else for(T=new Uint8Array(d*g),I.mask=T,w=0;w<l;w++)for(F=w*d,k=0;k<o;k++)T[F+k]=1}return I}_getTileLocation(s,e,r,t=!1){const{firstPyramidLevel:i,blockBoundary:n}=this.rasterInfo.storageInfo,a=s===0?0:s-(i-1),{_headerInfo:o}=this;if(!o)return null;const l=t?o.maskIFDs[a]:a===0?o?.ifds[0]:o?.pyramidIFDs[a-1];if(!l)return null;const c=Zt(l,o),u=Ce(l,"TILEOFFSETS");if(u===void 0)return null;const h=Ce(l,"TILEBYTECOUNTS"),{minRow:f,minCol:m,maxRow:p,maxCol:y}=n[a];if(e>p||r>y||e<f||r<m)return null;const d=ue(l,"IMAGEWIDTH"),g=ue(l,"IMAGELENGTH"),I=ue(l,"TILEWIDTH"),w=ue(l,"TILELENGTH"),k=c?this.rasterInfo.bandCount:1,F=k*e*(y+1)+r,T=[{from:u[F],to:u[F+k-1]+h[F+k-1]-1}];if(c){let R=!0;for(let v=0;v<k;v++)if(u[F+v]+h[F+v]!==u[F+v+1]){R=!1;break}if(!R)for(let v=0;v<k;v++)T[v]={from:u[F+v],to:u[F+v]+h[F+v]-1}}const C=u[F],S=h[F];return C==null||S==null?null:{ranges:T,ifd:l,actualTileWidth:r===y&&d%I||I,actualTileHeight:e===p&&g%w||w}}async _fetchAuxiliaryMetaData(s){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:s?.signal});return Ee(e)}catch{return null}}async _fetchAuxiliaryTable(s){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:s?.signal}),r=ct.parse(e);return r?.recordSet?ot.fromJSON(r.recordSet):null}catch{return null}}};x([b()],ie.prototype,"_files",void 0),x([b()],ie.prototype,"_headerInfo",void 0),x([b()],ie.prototype,"_bufferSize",void 0),x([b({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),ie=x([Q("esri.layers.support.rasterDatasets.TIFFRaster")],ie);const Li=ie,L=new Map;L.set("CRF",{desc:"Cloud Raster Format",constructor:Di}),L.set("MRF",{desc:"Meta Raster Format",constructor:Hi}),L.set("TIFF",{desc:"GeoTIFF",constructor:Li}),L.set("RasterTileServer",{desc:"Raster Tile Server",constructor:Ni}),L.set("JPG",{desc:"JPG Raster Format",constructor:be}),L.set("PNG",{desc:"PNG Raster Format",constructor:be}),L.set("GIF",{desc:"GIF Raster Format",constructor:be}),L.set("BMP",{desc:"BMP Raster Format",constructor:be});class Ai{static get supportedFormats(){const e=new Set;return L.forEach((r,t)=>e.add(t)),e}static async open(e){const{url:r,ioConfig:t,sourceJSON:i}=e;let n=e.datasetFormat;n==null&&r.lastIndexOf(".")&&(n=r.slice(r.lastIndexOf(".")+1).toUpperCase()),n==="OVR"||n==="TIF"?n="TIFF":n!=="JPG"&&n!=="JPEG"&&n!=="JFIF"||(n="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const a={url:r,sourceJSON:i,datasetFormat:n,ioConfig:t??{bandIds:null,sampling:null}};let o,l;if(n&&this.supportedFormats.has(n)){if(n==="CRF"&&!t?.enableCRF)throw new $("rasterfactory:open",`cannot open raster: ${r}`);return o=L.get(n).constructor,l=new o(a),await l.open({signal:e.signal}),l}if(n)throw new $("rasterfactory:open","not a supported format "+n);const c=Array.from(L.keys());let u=0;const h=()=>(n=c[u++],n&&(n!=="CRF"||t?.enableCRF)?(o=L.get(n).constructor,l=new o(a),l.open({signal:e.signal}).then(()=>l).catch(()=>h())):null);return h()}static register(e,r,t){L.has(e.toUpperCase())||L.set(e.toUpperCase(),{desc:r,constructor:t})}}let B=class extends ei(ti(ii(si(ri(Mi(ni(ai(oi(li(wi)))))))))){constructor(...s){super(...s),this._primaryRasters=null,this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(s,e){return typeof s=="string"?{url:s,...e}:s}load(s){const e=_(s)?s.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},s).catch(ci).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let s=[new me({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:e}=this,r=e?.attributeTable,t=_(r)?r.fields:null,i="Raster.";if(t){const o=t.filter(l=>l.type!=="oid"&&l.name.toLowerCase()!=="value").map(l=>{const c=l.clone();return c.name=i+l.name,c});s=s.concat(o)}const n=e?.dataType,a=e?.multidimensionalInfo;if((n==="vector-magdir"||n==="vector-uv")&&_(a)){const o=a.variables[0].unit?.trim(),l="Magnitude"+(o?` (${o})`:"");s.push(new me({name:"Raster.Magnitude",alias:l,domain:null,editable:!1,type:"double"})),s.push(new me({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}))}return s}set renderer(s){this._set("renderer",s),this.updateRenderer()}readRenderer(s,e,r){const t=e&&e.layerDefinition&&e.layerDefinition.drawingInfo&&e.layerDefinition.drawingInfo.renderer,i=ui(t,r)||void 0;if(i!=null)return i}createPopupTemplate(s){return hi({fields:this.rasterFields,title:this.title},s)}async generateRasterInfo(s,e){if(!(s=et(Pe,s)))return this._primaryRasters[0].rasterInfo;try{const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(n=>r[n.url]=n);const t=$e(s.toJSON(),r),i=new Me({rasterFunction:t});return await i.open(e),i.rasterInfo}catch{return null}}write(s,e){const{raster:r}=this;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(s,e);if(e&&e.messages){const t=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new $("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${t}'`,{layer:this}))}return null}async _openRaster(s){let e=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),this.raster.datasetFormat==="Function"?(e=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else{const{rasterFunction:t}=this,i=[this.url];t&&Pi(t.toJSON(),i);const n=await Promise.all(i.map(o=>Ai.open({url:o,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:s}))),a=n.findIndex(o=>o==null);if(a>-1)throw new $("imagery-tile-layer:open",`cannot open raster: ${i[a]}`);if(this._primaryRasters=n,t){const o={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(u=>o[u.url]=u);const l=$e(t.rasterFunctionDefinition??t.toJSON(),o),c=new Me({rasterFunction:l});try{await c.open(),this.raster=c}catch(u){const h=Oe.getLogger(this.declaredClass);u instanceof $&&h.error("imagery-tile-layer:open",u.message),h.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=n[0]}}else this.raster=n[0]}const r=this.raster.rasterInfo;if(!r)throw new $("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",e?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const t=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(t,{origin:"service"})}this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(fi(()=>this.customParameters,t=>{this.raster&&(this.raster.ioConfig.customFetchParameters=t)}))}};x([b()],B.prototype,"_primaryRasters",void 0),x([b({type:[di],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],B.prototype,"bandIds",void 0),x([b({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),mi(pi)],B.prototype,"interpolation",void 0),x([b(yi)],B.prototype,"legendEnabled",void 0),x([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],B.prototype,"isReference",void 0),x([b({type:["show","hide"]})],B.prototype,"listMode",void 0),x([b({json:{read:!0,write:!0}})],B.prototype,"blendMode",void 0),x([b()],B.prototype,"sourceJSON",void 0),x([b({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],B.prototype,"version",void 0),x([b({readOnly:!0,json:{read:!1}})],B.prototype,"type",void 0),x([b({type:["ArcGISTiledImageServiceLayer"]})],B.prototype,"operationalLayerType",void 0),x([b({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(s,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(s,e,r){e[r]=!s}}}})],B.prototype,"popupEnabled",void 0),x([b({type:gi,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],B.prototype,"popupTemplate",void 0),x([b({readOnly:!0})],B.prototype,"defaultPopupTemplate",null),x([b({readOnly:!0,type:[me]})],B.prototype,"fields",void 0),x([b({readOnly:!0,type:[me]})],B.prototype,"rasterFields",null),x([b({types:at,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const s=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!s}}},origins:{"web-scene":{types:xi,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:s=>({enabled:s&&s.type!=="vector-field"&&s.type!=="flow"})}}}}})],B.prototype,"renderer",null),x([Ii("renderer")],B.prototype,"readRenderer",null),B=x([Q("esri.layers.ImageryTileLayer")],B);const Ki=B;export{Ki as default};
