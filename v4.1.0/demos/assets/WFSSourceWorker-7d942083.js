import{ar as p,du as l,iD as o,r as g,dz as _,dL as d,dU as f,d as w,f as u,aS as E,at as q,u as F}from"./main-e6c796d9.js";import{g as S}from"./FeatureStore-cedcca11.js";import{g as x,f as T}from"./projectionSupport-082039ab.js";import{e as j}from"./QueryEngine-c8c4675b.js";import{T as I,I as b}from"./geojson-ef6baa29.js";import{m as C}from"./sourceUtils-e3fac67b.js";import{K as P}from"./wfsUtils-1c9cb936.js";import"./preload-helper-388ac9d5.js";import"./BoundsStore-eca5e813.js";import"./PooledRBush-63eddad1.js";import"./centroid-3ae2e478.js";import"./utils-5341e53c.js";import"./json-48e3ea08.js";import"./QueryEngineResult-98e4cdd6.js";import"./quantizationUtils-8117aa03.js";import"./WhereClause-cbab4ad7.js";import"./executionError-c1d13a98.js";import"./utils-d1732c67.js";import"./QueryEngineCapabilities-42e44ded.js";import"./timeSupport-e9840121.js";import"./xmlUtils-444cb4c0.js";class Y{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await P(this._getFeatureUrl??"",this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await I(i),p(t);const s=b(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!l(this._queryEngine.spatialReference,o))for(const r of s)g(r.geometry)&&(r.geometry=_(x(d(r.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const r of s){const a={};C(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[e]==null&&(r.objectId=r.attributes[e]=n++)}return s}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:s,spatialReference:n,fields:r,geometryType:a,featureType:h,objectIdField:y,customParameters:m}=t;this._featureType=h,this._customParameters=m,this._getFeatureUrl=i,this._getFeatureOutputFormat=s,this._fieldsIndex=new f(r),await this._checkProjection(n),p(e),this._queryEngine=new j({fields:r,geometryType:a,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new S({geometryType:a,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(w(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){return this._customParameters=t,this._snapshotTask?.abort(),this._snapshotTask=E(this._snapshotFeatures),this._snapshotTask.promise.then(e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)},e=>{this._queryEngine.featureStore.clear(),q(e)||F.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))}),await this._waitSnapshotComplete(),{extent:(await this._queryEngine.fetchRecomputedExtents()).fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await T(o,t)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{Y as default};
