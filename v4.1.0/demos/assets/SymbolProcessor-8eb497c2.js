import{at as C,e as $,n as F,dG as K,gE as T,ar as _,k as E,cV as v,b as M,r as I,af as P,d as L}from"./main-e6c796d9.js";import{c as A}from"./ExpandedCIM-da55b3f7.js";import{p as O}from"./visualVariablesUtils-be463bbc.js";import{S as U}from"./color-efbded4a.js";import{x as z,o as x,n as B,E as j,b as V}from"./Matcher-027063b0.js";import{p as G}from"./BaseProcessor-c86c4211.js";import"./preload-helper-388ac9d5.js";import"./BidiEngine-836b7ef6.js";import"./GeometryUtils-53652037.js";import"./enums-55085e26.js";import"./MaterialKey-596a8b14.js";import"./definitions-19bfb61c.js";import"./Rect-ea14f53a.js";import"./quantizationUtils-8117aa03.js";import"./floatRGBA-8628bba4.js";import"./visualVariablesUtils-cacab33b.js";import"./enums-64ab819c.js";import"./VertexElementDescriptor-2925c6af.js";import"./tileUtils-c2f19f52.js";import"./TurboLine-499def17.js";import"./GeometryUtils-dd03fc25.js";import"./earcut-61f7b102.js";import"./devEnvironmentUtils-f2a1f21e.js";class H{constructor(e){this._remoteClient=e,this._resourceMap=new Map,this._inFlightResourceMap=new Map,this.geometryEngine=null,this.geometryEnginePromise=null}destroy(){}async fetchResource(e,r){const s=this._resourceMap,i=s.get(e);if(i)return i;let a=this._inFlightResourceMap.get(e);if(a)return a;try{a=this._remoteClient.invoke("tileRenderer.fetchResource",{url:e},{...r}),this._inFlightResourceMap.set(e,a),a.then(o=>(this._inFlightResourceMap.delete(e),s.set(e,o),o))}catch(o){return C(o)?null:{width:0,height:0}}return a}getResource(e){return this._resourceMap.get(e)??null}}function k(t,e){return(!t.minScale||t.minScale>=e)&&(!t.maxScale||t.maxScale<=e)}function D(t){const e=t.message,r={message:{data:{},tileKey:e.tileKey,tileKeyOrigin:e.tileKeyOrigin,version:e.version},transferList:new Array};for(const s in e.data){const i=e.data[s];if(r.message.data[s]=null,I(i)){const a=i.stride,o=i.indices.slice(0),l=i.vertices.slice(0),c=i.records.slice(0),d={stride:a,indices:o,vertices:l,records:c,metrics:v(i.metrics,h=>h.slice(0))};r.transferList.push(o,l,c),r.message.data[s]=d}}return r}let S=class extends G{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new H(this.remoteClient)}destroy(){this._resourceManagerProxy.destroy()}get supportsTileUpdates(){return!0}forEachBufferId(t){this._bufferIds.forEach(e=>{e.forEach(t)})}async update(t,e){const r=e.schema.processors[0];if(r.type!=="symbol")return;const s=K(this._schema,r);(T(s,"mesh")||T(s,"target"))&&(t.mesh=!0,t.why?.mesh.push("Symbology changed"),this._schema=r,this._factory=this._createFactory(r),this._factory.update(r,this.tileStore.tileScheme.tileInfo))}onTileMessage(t,e,r,s){return _(s),this._onTileData(t,e,r,s)}onTileClear(t){const e={clear:!0};return this._bufferData.delete(t.key.id),this._bufferIds.delete(t.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:e})}onTileError(t,e,r){const s=r.signal,i={tileKey:t.id,error:e};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:s})}onTileUpdate(t){for(const e of t.removed)this._bufferData.has(e.key.id)&&this._bufferData.delete(e.key.id),this._bufferIds.has(e.key.id)&&this._bufferIds.delete(e.key.id);for(const e of t.added)this._bufferData.forEach(r=>{for(const s of r)s.message.tileKey===e.id&&this._updateTileMesh("append",e,D(s),[],!1,!1,null)})}_addBufferData(t,e){this._bufferData.has(t)||this._bufferData.set(t,[]),this._bufferData.get(t)?.push(D(e))}_createFactory(t){const{geometryType:e,objectIdField:r,fields:s}=this.service,i=(d,h)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",d,h),a={geometryType:e,fields:s,spatialReference:E.fromJSON(this.spatialReference)},o=new z(i,this.tileStore.tileScheme.tileInfo),{matcher:l,aggregateMatcher:c}=t.mesh;return this._store=o,this._matchers.feature=x(l,o,a,this._resourceManagerProxy),this._matchers.aggregate=v(c,d=>x(d,o,a,this._resourceManagerProxy)),new B(e,r,o)}async _onTileData(t,e,r,s){_(s);const{type:i,addOrUpdate:a,remove:o,clear:l,end:c}=e,d=!!this._schema.mesh.sortKey;if(!a){const u={type:i,addOrUpdate:null,remove:o,clear:l,end:c,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:u},s)}const h=this._processFeatures(t,a,r,s,e.status?.version);try{const u=await h;if(M(u)){const n={type:i,addOrUpdate:null,remove:o,clear:l,end:c,sort:d};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:t.id,data:n},s)}const m=[];for(const n of u){let f=!1;const g=n.message.bufferIds,p=t.key.id,b=n.message.tileKey;if(p!==b&&I(g)){if(!this.tileStore.get(b)){this._addBufferData(p,n),m.push(n);continue}let y=this._bufferIds.get(b);y||(y=new Set,this._bufferIds.set(b,y));const R=Array.from(g);for(const w of R){if(y.has(w)){f=!0;break}y.add(w)}}f||(this._addBufferData(p,n),m.push(n))}await Promise.all(m.map(n=>{const f=t.key.id===n.message.tileKey,g=f?e.remove:[],p=f&&e.end;return this._updateTileMesh(i,t,n,g,p,!!e.clear,s.signal)}))}catch(u){this._handleError(t,u,s)}}async _updateTileMesh(t,e,r,s,i,a,o){const l=t,c=r.message.tileKey,d=!!this._schema.mesh.sortKey;c!==e.key.id&&(i=!1);const h=v(r,f=>f.message),u=v(r,f=>f.transferList)||[],m={type:l,addOrUpdate:h,remove:s,clear:a,end:i,sort:d},n={transferList:L(u)||[],signal:o};return _(n),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:c,data:m},n)}async _processFeatures(t,e,r,s,i){if(M(e)||!e.hasFeatures)return null;const a={transform:t.transform,hasZ:!1,hasM:!1},o=this._factory,l={viewingMode:"",scale:t.scale},c=await this._matchers.feature,d=await this._matchers.aggregate;_(s);const h=this._getLabelInfos(t,e);return await o.analyze(e.getCursor(),this._resourceManagerProxy,c,d,a,l),_(s),this._writeFeatureSet(t,e,a,h,o,r,i)}_writeFeatureSet(t,e,r,s,i,a,o){const l=e.getSize(),c=this._schema.mesh.matcher.symbologyType,d=new j(t.key.id,{features:l,records:l,metrics:0},c,a,c!==U.HEATMAP,o),h={viewingMode:"",scale:t.scale},u=e.getCursor();for(;u.next();)try{const n=u.getDisplayId(),f=I(s)?s.get(n):null;i.writeCursor(d,u,r,h,t.level,f,this._resourceManagerProxy)}catch{}const m=t.tileInfoView.tileInfo.isWrappable;return d.serialize(m)}_handleError(t,e,r){if(!C(e)){const s={tileKey:t.id,error:e.message};return this.remoteClient.invoke("tileRenderer.onTileError",s,{signal:r.signal})}return Promise.resolve()}_getLabelingSchemaForScale(t){const e=this._schema.mesh.labels;if(M(e))return null;if(e.type==="subtype"){const s={type:"subtype",classes:{}};let i=!1;for(const a in e.classes){const o=e.classes[a].filter(l=>k(l,t.scale));i=i||!!o.length,s.classes[a]=o}return i?s:null}const r=e.classes.filter(s=>k(s,t.scale));return r.length?{type:"simple",classes:r}:null}_getLabels(t,e){if(e.type==="subtype"){const r=this.service.subtypeField,s=P(r,"Expected to find subtype Field"),i=t.readAttribute(s);return i==null?[]:e.classes[i]??[]}return e.classes}_getLabelInfos(t,e){const r=this._getLabelingSchemaForScale(t);if(M(r))return null;const s=new Map,i=e.getCursor();for(;i.next();){const a=i.getDisplayId(),o=[],l=O(a),c=l&&i.readAttribute("cluster_count")!==1?"aggregate":"feature",d=this._getLabels(i,r);for(const h of d){if(h.target!==c)continue;const u=i.getStorage(),m=l&&c==="feature"?u.getComputedStringAtIndex(i.readAttribute("referenceId"),h.fieldIndex):u.getComputedStringAtIndex(a,h.fieldIndex);if(!m)continue;const n=A(m.toString()),f=n[0],g=n[1];this._store.getMosaicItem(h.symbol,V(f)).then(p=>{o[h.index]={glyphs:p.glyphMosaicItems??[],rtl:g,index:h.index}})}s.set(a,o)}return s}};S=$([F("esri.views.2d.layers.features.processors.SymbolProcessor")],S);const pe=S;export{pe as default};
