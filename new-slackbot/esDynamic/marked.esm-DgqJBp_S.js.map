{"version":3,"file":"marked.esm-DgqJBp_S.js","sources":["../../node_modules/marked/lib/marked.esm.js"],"sourcesContent":["/**\n * marked v4.3.0 - a markdown parser\n * Copyright (c) 2011-2023, Christopher Jeffrey. (MIT Licensed)\n * https://github.com/markedjs/marked\n */\n\n/**\n * DO NOT EDIT THIS FILE\n * The code in this file is generated from files in ./src/\n */\n\nfunction getDefaults() {\n  return {\n    async: false,\n    baseUrl: null,\n    breaks: false,\n    extensions: null,\n    gfm: true,\n    headerIds: true,\n    headerPrefix: '',\n    highlight: null,\n    hooks: null,\n    langPrefix: 'language-',\n    mangle: true,\n    pedantic: false,\n    renderer: null,\n    sanitize: false,\n    sanitizer: null,\n    silent: false,\n    smartypants: false,\n    tokenizer: null,\n    walkTokens: null,\n    xhtml: false\n  };\n}\n\nlet defaults = getDefaults();\n\nfunction changeDefaults(newDefaults) {\n  defaults = newDefaults;\n}\n\n/**\n * Helpers\n */\nconst escapeTest = /[&<>\"']/;\nconst escapeReplace = new RegExp(escapeTest.source, 'g');\nconst escapeTestNoEncode = /[<>\"']|&(?!(#\\d{1,7}|#[Xx][a-fA-F0-9]{1,6}|\\w+);)/;\nconst escapeReplaceNoEncode = new RegExp(escapeTestNoEncode.source, 'g');\nconst escapeReplacements = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  \"'\": '&#39;'\n};\nconst getEscapeReplacement = (ch) => escapeReplacements[ch];\nfunction escape(html, encode) {\n  if (encode) {\n    if (escapeTest.test(html)) {\n      return html.replace(escapeReplace, getEscapeReplacement);\n    }\n  } else {\n    if (escapeTestNoEncode.test(html)) {\n      return html.replace(escapeReplaceNoEncode, getEscapeReplacement);\n    }\n  }\n\n  return html;\n}\n\nconst unescapeTest = /&(#(?:\\d+)|(?:#x[0-9A-Fa-f]+)|(?:\\w+));?/ig;\n\n/**\n * @param {string} html\n */\nfunction unescape(html) {\n  // explicitly match decimal, hex, and named HTML entities\n  return html.replace(unescapeTest, (_, n) => {\n    n = n.toLowerCase();\n    if (n === 'colon') return ':';\n    if (n.charAt(0) === '#') {\n      return n.charAt(1) === 'x'\n        ? String.fromCharCode(parseInt(n.substring(2), 16))\n        : String.fromCharCode(+n.substring(1));\n    }\n    return '';\n  });\n}\n\nconst caret = /(^|[^\\[])\\^/g;\n\n/**\n * @param {string | RegExp} regex\n * @param {string} opt\n */\nfunction edit(regex, opt) {\n  regex = typeof regex === 'string' ? regex : regex.source;\n  opt = opt || '';\n  const obj = {\n    replace: (name, val) => {\n      val = val.source || val;\n      val = val.replace(caret, '$1');\n      regex = regex.replace(name, val);\n      return obj;\n    },\n    getRegex: () => {\n      return new RegExp(regex, opt);\n    }\n  };\n  return obj;\n}\n\nconst nonWordAndColonTest = /[^\\w:]/g;\nconst originIndependentUrl = /^$|^[a-z][a-z0-9+.-]*:|^[?#]/i;\n\n/**\n * @param {boolean} sanitize\n * @param {string} base\n * @param {string} href\n */\nfunction cleanUrl(sanitize, base, href) {\n  if (sanitize) {\n    let prot;\n    try {\n      prot = decodeURIComponent(unescape(href))\n        .replace(nonWordAndColonTest, '')\n        .toLowerCase();\n    } catch (e) {\n      return null;\n    }\n    if (prot.indexOf('javascript:') === 0 || prot.indexOf('vbscript:') === 0 || prot.indexOf('data:') === 0) {\n      return null;\n    }\n  }\n  if (base && !originIndependentUrl.test(href)) {\n    href = resolveUrl(base, href);\n  }\n  try {\n    href = encodeURI(href).replace(/%25/g, '%');\n  } catch (e) {\n    return null;\n  }\n  return href;\n}\n\nconst baseUrls = {};\nconst justDomain = /^[^:]+:\\/*[^/]*$/;\nconst protocol = /^([^:]+:)[\\s\\S]*$/;\nconst domain = /^([^:]+:\\/*[^/]*)[\\s\\S]*$/;\n\n/**\n * @param {string} base\n * @param {string} href\n */\nfunction resolveUrl(base, href) {\n  if (!baseUrls[' ' + base]) {\n    // we can ignore everything in base after the last slash of its path component,\n    // but we might need to add _that_\n    // https://tools.ietf.org/html/rfc3986#section-3\n    if (justDomain.test(base)) {\n      baseUrls[' ' + base] = base + '/';\n    } else {\n      baseUrls[' ' + base] = rtrim(base, '/', true);\n    }\n  }\n  base = baseUrls[' ' + base];\n  const relativeBase = base.indexOf(':') === -1;\n\n  if (href.substring(0, 2) === '//') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(protocol, '$1') + href;\n  } else if (href.charAt(0) === '/') {\n    if (relativeBase) {\n      return href;\n    }\n    return base.replace(domain, '$1') + href;\n  } else {\n    return base + href;\n  }\n}\n\nconst noopTest = { exec: function noopTest() {} };\n\nfunction splitCells(tableRow, count) {\n  // ensure that every cell-delimiting pipe has a space\n  // before it to distinguish it from an escaped pipe\n  const row = tableRow.replace(/\\|/g, (match, offset, str) => {\n      let escaped = false,\n        curr = offset;\n      while (--curr >= 0 && str[curr] === '\\\\') escaped = !escaped;\n      if (escaped) {\n        // odd number of slashes means | is escaped\n        // so we leave it alone\n        return '|';\n      } else {\n        // add space before unescaped |\n        return ' |';\n      }\n    }),\n    cells = row.split(/ \\|/);\n  let i = 0;\n\n  // First/last cell in a row cannot be empty if it has no leading/trailing pipe\n  if (!cells[0].trim()) { cells.shift(); }\n  if (cells.length > 0 && !cells[cells.length - 1].trim()) { cells.pop(); }\n\n  if (cells.length > count) {\n    cells.splice(count);\n  } else {\n    while (cells.length < count) cells.push('');\n  }\n\n  for (; i < cells.length; i++) {\n    // leading or trailing whitespace is ignored per the gfm spec\n    cells[i] = cells[i].trim().replace(/\\\\\\|/g, '|');\n  }\n  return cells;\n}\n\n/**\n * Remove trailing 'c's. Equivalent to str.replace(/c*$/, '').\n * /c*$/ is vulnerable to REDOS.\n *\n * @param {string} str\n * @param {string} c\n * @param {boolean} invert Remove suffix of non-c chars instead. Default falsey.\n */\nfunction rtrim(str, c, invert) {\n  const l = str.length;\n  if (l === 0) {\n    return '';\n  }\n\n  // Length of suffix matching the invert condition.\n  let suffLen = 0;\n\n  // Step left until we fail to match the invert condition.\n  while (suffLen < l) {\n    const currChar = str.charAt(l - suffLen - 1);\n    if (currChar === c && !invert) {\n      suffLen++;\n    } else if (currChar !== c && invert) {\n      suffLen++;\n    } else {\n      break;\n    }\n  }\n\n  return str.slice(0, l - suffLen);\n}\n\nfunction findClosingBracket(str, b) {\n  if (str.indexOf(b[1]) === -1) {\n    return -1;\n  }\n  const l = str.length;\n  let level = 0,\n    i = 0;\n  for (; i < l; i++) {\n    if (str[i] === '\\\\') {\n      i++;\n    } else if (str[i] === b[0]) {\n      level++;\n    } else if (str[i] === b[1]) {\n      level--;\n      if (level < 0) {\n        return i;\n      }\n    }\n  }\n  return -1;\n}\n\nfunction checkSanitizeDeprecation(opt) {\n  if (opt && opt.sanitize && !opt.silent) {\n    console.warn('marked(): sanitize and sanitizer parameters are deprecated since version 0.7.0, should not be used and will be removed in the future. Read more here: https://marked.js.org/#/USING_ADVANCED.md#options');\n  }\n}\n\n// copied from https://stackoverflow.com/a/5450113/806777\n/**\n * @param {string} pattern\n * @param {number} count\n */\nfunction repeatString(pattern, count) {\n  if (count < 1) {\n    return '';\n  }\n  let result = '';\n  while (count > 1) {\n    if (count & 1) {\n      result += pattern;\n    }\n    count >>= 1;\n    pattern += pattern;\n  }\n  return result + pattern;\n}\n\nfunction outputLink(cap, link, raw, lexer) {\n  const href = link.href;\n  const title = link.title ? escape(link.title) : null;\n  const text = cap[1].replace(/\\\\([\\[\\]])/g, '$1');\n\n  if (cap[0].charAt(0) !== '!') {\n    lexer.state.inLink = true;\n    const token = {\n      type: 'link',\n      raw,\n      href,\n      title,\n      text,\n      tokens: lexer.inlineTokens(text)\n    };\n    lexer.state.inLink = false;\n    return token;\n  }\n  return {\n    type: 'image',\n    raw,\n    href,\n    title,\n    text: escape(text)\n  };\n}\n\nfunction indentCodeCompensation(raw, text) {\n  const matchIndentToCode = raw.match(/^(\\s+)(?:```)/);\n\n  if (matchIndentToCode === null) {\n    return text;\n  }\n\n  const indentToCode = matchIndentToCode[1];\n\n  return text\n    .split('\\n')\n    .map(node => {\n      const matchIndentInNode = node.match(/^\\s+/);\n      if (matchIndentInNode === null) {\n        return node;\n      }\n\n      const [indentInNode] = matchIndentInNode;\n\n      if (indentInNode.length >= indentToCode.length) {\n        return node.slice(indentToCode.length);\n      }\n\n      return node;\n    })\n    .join('\\n');\n}\n\n/**\n * Tokenizer\n */\nclass Tokenizer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  space(src) {\n    const cap = this.rules.block.newline.exec(src);\n    if (cap && cap[0].length > 0) {\n      return {\n        type: 'space',\n        raw: cap[0]\n      };\n    }\n  }\n\n  code(src) {\n    const cap = this.rules.block.code.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ {1,4}/gm, '');\n      return {\n        type: 'code',\n        raw: cap[0],\n        codeBlockStyle: 'indented',\n        text: !this.options.pedantic\n          ? rtrim(text, '\\n')\n          : text\n      };\n    }\n  }\n\n  fences(src) {\n    const cap = this.rules.block.fences.exec(src);\n    if (cap) {\n      const raw = cap[0];\n      const text = indentCodeCompensation(raw, cap[3] || '');\n\n      return {\n        type: 'code',\n        raw,\n        lang: cap[2] ? cap[2].trim().replace(this.rules.inline._escapes, '$1') : cap[2],\n        text\n      };\n    }\n  }\n\n  heading(src) {\n    const cap = this.rules.block.heading.exec(src);\n    if (cap) {\n      let text = cap[2].trim();\n\n      // remove trailing #s\n      if (/#$/.test(text)) {\n        const trimmed = rtrim(text, '#');\n        if (this.options.pedantic) {\n          text = trimmed.trim();\n        } else if (!trimmed || / $/.test(trimmed)) {\n          // CommonMark requires space before trailing #s\n          text = trimmed.trim();\n        }\n      }\n\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[1].length,\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  hr(src) {\n    const cap = this.rules.block.hr.exec(src);\n    if (cap) {\n      return {\n        type: 'hr',\n        raw: cap[0]\n      };\n    }\n  }\n\n  blockquote(src) {\n    const cap = this.rules.block.blockquote.exec(src);\n    if (cap) {\n      const text = cap[0].replace(/^ *>[ \\t]?/gm, '');\n      const top = this.lexer.state.top;\n      this.lexer.state.top = true;\n      const tokens = this.lexer.blockTokens(text);\n      this.lexer.state.top = top;\n      return {\n        type: 'blockquote',\n        raw: cap[0],\n        tokens,\n        text\n      };\n    }\n  }\n\n  list(src) {\n    let cap = this.rules.block.list.exec(src);\n    if (cap) {\n      let raw, istask, ischecked, indent, i, blankLine, endsWithBlankLine,\n        line, nextLine, rawLine, itemContents, endEarly;\n\n      let bull = cap[1].trim();\n      const isordered = bull.length > 1;\n\n      const list = {\n        type: 'list',\n        raw: '',\n        ordered: isordered,\n        start: isordered ? +bull.slice(0, -1) : '',\n        loose: false,\n        items: []\n      };\n\n      bull = isordered ? `\\\\d{1,9}\\\\${bull.slice(-1)}` : `\\\\${bull}`;\n\n      if (this.options.pedantic) {\n        bull = isordered ? bull : '[*+-]';\n      }\n\n      // Get next list item\n      const itemRegex = new RegExp(`^( {0,3}${bull})((?:[\\t ][^\\\\n]*)?(?:\\\\n|$))`);\n\n      // Check if current bullet point can start a new List Item\n      while (src) {\n        endEarly = false;\n        if (!(cap = itemRegex.exec(src))) {\n          break;\n        }\n\n        if (this.rules.block.hr.test(src)) { // End list if bullet was actually HR (possibly move into itemRegex?)\n          break;\n        }\n\n        raw = cap[0];\n        src = src.substring(raw.length);\n\n        line = cap[2].split('\\n', 1)[0].replace(/^\\t+/, (t) => ' '.repeat(3 * t.length));\n        nextLine = src.split('\\n', 1)[0];\n\n        if (this.options.pedantic) {\n          indent = 2;\n          itemContents = line.trimLeft();\n        } else {\n          indent = cap[2].search(/[^ ]/); // Find first non-space char\n          indent = indent > 4 ? 1 : indent; // Treat indented code blocks (> 4 spaces) as having only 1 indent\n          itemContents = line.slice(indent);\n          indent += cap[1].length;\n        }\n\n        blankLine = false;\n\n        if (!line && /^ *$/.test(nextLine)) { // Items begin with at most one blank line\n          raw += nextLine + '\\n';\n          src = src.substring(nextLine.length + 1);\n          endEarly = true;\n        }\n\n        if (!endEarly) {\n          const nextBulletRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:[*+-]|\\\\d{1,9}[.)])((?:[ \\t][^\\\\n]*)?(?:\\\\n|$))`);\n          const hrRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}((?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$)`);\n          const fencesBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}(?:\\`\\`\\`|~~~)`);\n          const headingBeginRegex = new RegExp(`^ {0,${Math.min(3, indent - 1)}}#`);\n\n          // Check if following lines should be included in List Item\n          while (src) {\n            rawLine = src.split('\\n', 1)[0];\n            nextLine = rawLine;\n\n            // Re-align to follow commonmark nesting rules\n            if (this.options.pedantic) {\n              nextLine = nextLine.replace(/^ {1,4}(?=( {4})*[^ ])/g, '  ');\n            }\n\n            // End list item if found code fences\n            if (fencesBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new heading\n            if (headingBeginRegex.test(nextLine)) {\n              break;\n            }\n\n            // End list item if found start of new bullet\n            if (nextBulletRegex.test(nextLine)) {\n              break;\n            }\n\n            // Horizontal rule found\n            if (hrRegex.test(src)) {\n              break;\n            }\n\n            if (nextLine.search(/[^ ]/) >= indent || !nextLine.trim()) { // Dedent if possible\n              itemContents += '\\n' + nextLine.slice(indent);\n            } else {\n              // not enough indentation\n              if (blankLine) {\n                break;\n              }\n\n              // paragraph continuation unless last line was a different block level element\n              if (line.search(/[^ ]/) >= 4) { // indented code block\n                break;\n              }\n              if (fencesBeginRegex.test(line)) {\n                break;\n              }\n              if (headingBeginRegex.test(line)) {\n                break;\n              }\n              if (hrRegex.test(line)) {\n                break;\n              }\n\n              itemContents += '\\n' + nextLine;\n            }\n\n            if (!blankLine && !nextLine.trim()) { // Check if current line is blank\n              blankLine = true;\n            }\n\n            raw += rawLine + '\\n';\n            src = src.substring(rawLine.length + 1);\n            line = nextLine.slice(indent);\n          }\n        }\n\n        if (!list.loose) {\n          // If the previous item ended with a blank line, the list is loose\n          if (endsWithBlankLine) {\n            list.loose = true;\n          } else if (/\\n *\\n *$/.test(raw)) {\n            endsWithBlankLine = true;\n          }\n        }\n\n        // Check for task list items\n        if (this.options.gfm) {\n          istask = /^\\[[ xX]\\] /.exec(itemContents);\n          if (istask) {\n            ischecked = istask[0] !== '[ ] ';\n            itemContents = itemContents.replace(/^\\[[ xX]\\] +/, '');\n          }\n        }\n\n        list.items.push({\n          type: 'list_item',\n          raw,\n          task: !!istask,\n          checked: ischecked,\n          loose: false,\n          text: itemContents\n        });\n\n        list.raw += raw;\n      }\n\n      // Do not consume newlines at end of final item. Alternatively, make itemRegex *start* with any newlines to simplify/speed up endsWithBlankLine logic\n      list.items[list.items.length - 1].raw = raw.trimRight();\n      list.items[list.items.length - 1].text = itemContents.trimRight();\n      list.raw = list.raw.trimRight();\n\n      const l = list.items.length;\n\n      // Item child tokens handled here at end because we needed to have the final item to trim it first\n      for (i = 0; i < l; i++) {\n        this.lexer.state.top = false;\n        list.items[i].tokens = this.lexer.blockTokens(list.items[i].text, []);\n\n        if (!list.loose) {\n          // Check if list should be loose\n          const spacers = list.items[i].tokens.filter(t => t.type === 'space');\n          const hasMultipleLineBreaks = spacers.length > 0 && spacers.some(t => /\\n.*\\n/.test(t.raw));\n\n          list.loose = hasMultipleLineBreaks;\n        }\n      }\n\n      // Set all items to loose if list is loose\n      if (list.loose) {\n        for (i = 0; i < l; i++) {\n          list.items[i].loose = true;\n        }\n      }\n\n      return list;\n    }\n  }\n\n  html(src) {\n    const cap = this.rules.block.html.exec(src);\n    if (cap) {\n      const token = {\n        type: 'html',\n        raw: cap[0],\n        pre: !this.options.sanitizer\n          && (cap[1] === 'pre' || cap[1] === 'script' || cap[1] === 'style'),\n        text: cap[0]\n      };\n      if (this.options.sanitize) {\n        const text = this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0]);\n        token.type = 'paragraph';\n        token.text = text;\n        token.tokens = this.lexer.inline(text);\n      }\n      return token;\n    }\n  }\n\n  def(src) {\n    const cap = this.rules.block.def.exec(src);\n    if (cap) {\n      const tag = cap[1].toLowerCase().replace(/\\s+/g, ' ');\n      const href = cap[2] ? cap[2].replace(/^<(.*)>$/, '$1').replace(this.rules.inline._escapes, '$1') : '';\n      const title = cap[3] ? cap[3].substring(1, cap[3].length - 1).replace(this.rules.inline._escapes, '$1') : cap[3];\n      return {\n        type: 'def',\n        tag,\n        raw: cap[0],\n        href,\n        title\n      };\n    }\n  }\n\n  table(src) {\n    const cap = this.rules.block.table.exec(src);\n    if (cap) {\n      const item = {\n        type: 'table',\n        header: splitCells(cap[1]).map(c => { return { text: c }; }),\n        align: cap[2].replace(/^ *|\\| *$/g, '').split(/ *\\| */),\n        rows: cap[3] && cap[3].trim() ? cap[3].replace(/\\n[ \\t]*$/, '').split('\\n') : []\n      };\n\n      if (item.header.length === item.align.length) {\n        item.raw = cap[0];\n\n        let l = item.align.length;\n        let i, j, k, row;\n        for (i = 0; i < l; i++) {\n          if (/^ *-+: *$/.test(item.align[i])) {\n            item.align[i] = 'right';\n          } else if (/^ *:-+: *$/.test(item.align[i])) {\n            item.align[i] = 'center';\n          } else if (/^ *:-+ *$/.test(item.align[i])) {\n            item.align[i] = 'left';\n          } else {\n            item.align[i] = null;\n          }\n        }\n\n        l = item.rows.length;\n        for (i = 0; i < l; i++) {\n          item.rows[i] = splitCells(item.rows[i], item.header.length).map(c => { return { text: c }; });\n        }\n\n        // parse child tokens inside headers and cells\n\n        // header child tokens\n        l = item.header.length;\n        for (j = 0; j < l; j++) {\n          item.header[j].tokens = this.lexer.inline(item.header[j].text);\n        }\n\n        // cell child tokens\n        l = item.rows.length;\n        for (j = 0; j < l; j++) {\n          row = item.rows[j];\n          for (k = 0; k < row.length; k++) {\n            row[k].tokens = this.lexer.inline(row[k].text);\n          }\n        }\n\n        return item;\n      }\n    }\n  }\n\n  lheading(src) {\n    const cap = this.rules.block.lheading.exec(src);\n    if (cap) {\n      return {\n        type: 'heading',\n        raw: cap[0],\n        depth: cap[2].charAt(0) === '=' ? 1 : 2,\n        text: cap[1],\n        tokens: this.lexer.inline(cap[1])\n      };\n    }\n  }\n\n  paragraph(src) {\n    const cap = this.rules.block.paragraph.exec(src);\n    if (cap) {\n      const text = cap[1].charAt(cap[1].length - 1) === '\\n'\n        ? cap[1].slice(0, -1)\n        : cap[1];\n      return {\n        type: 'paragraph',\n        raw: cap[0],\n        text,\n        tokens: this.lexer.inline(text)\n      };\n    }\n  }\n\n  text(src) {\n    const cap = this.rules.block.text.exec(src);\n    if (cap) {\n      return {\n        type: 'text',\n        raw: cap[0],\n        text: cap[0],\n        tokens: this.lexer.inline(cap[0])\n      };\n    }\n  }\n\n  escape(src) {\n    const cap = this.rules.inline.escape.exec(src);\n    if (cap) {\n      return {\n        type: 'escape',\n        raw: cap[0],\n        text: escape(cap[1])\n      };\n    }\n  }\n\n  tag(src) {\n    const cap = this.rules.inline.tag.exec(src);\n    if (cap) {\n      if (!this.lexer.state.inLink && /^<a /i.test(cap[0])) {\n        this.lexer.state.inLink = true;\n      } else if (this.lexer.state.inLink && /^<\\/a>/i.test(cap[0])) {\n        this.lexer.state.inLink = false;\n      }\n      if (!this.lexer.state.inRawBlock && /^<(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = true;\n      } else if (this.lexer.state.inRawBlock && /^<\\/(pre|code|kbd|script)(\\s|>)/i.test(cap[0])) {\n        this.lexer.state.inRawBlock = false;\n      }\n\n      return {\n        type: this.options.sanitize\n          ? 'text'\n          : 'html',\n        raw: cap[0],\n        inLink: this.lexer.state.inLink,\n        inRawBlock: this.lexer.state.inRawBlock,\n        text: this.options.sanitize\n          ? (this.options.sanitizer\n            ? this.options.sanitizer(cap[0])\n            : escape(cap[0]))\n          : cap[0]\n      };\n    }\n  }\n\n  link(src) {\n    const cap = this.rules.inline.link.exec(src);\n    if (cap) {\n      const trimmedUrl = cap[2].trim();\n      if (!this.options.pedantic && /^</.test(trimmedUrl)) {\n        // commonmark requires matching angle brackets\n        if (!(/>$/.test(trimmedUrl))) {\n          return;\n        }\n\n        // ending angle bracket cannot be escaped\n        const rtrimSlash = rtrim(trimmedUrl.slice(0, -1), '\\\\');\n        if ((trimmedUrl.length - rtrimSlash.length) % 2 === 0) {\n          return;\n        }\n      } else {\n        // find closing parenthesis\n        const lastParenIndex = findClosingBracket(cap[2], '()');\n        if (lastParenIndex > -1) {\n          const start = cap[0].indexOf('!') === 0 ? 5 : 4;\n          const linkLen = start + cap[1].length + lastParenIndex;\n          cap[2] = cap[2].substring(0, lastParenIndex);\n          cap[0] = cap[0].substring(0, linkLen).trim();\n          cap[3] = '';\n        }\n      }\n      let href = cap[2];\n      let title = '';\n      if (this.options.pedantic) {\n        // split pedantic href and title\n        const link = /^([^'\"]*[^\\s])\\s+(['\"])(.*)\\2/.exec(href);\n\n        if (link) {\n          href = link[1];\n          title = link[3];\n        }\n      } else {\n        title = cap[3] ? cap[3].slice(1, -1) : '';\n      }\n\n      href = href.trim();\n      if (/^</.test(href)) {\n        if (this.options.pedantic && !(/>$/.test(trimmedUrl))) {\n          // pedantic allows starting angle bracket without ending angle bracket\n          href = href.slice(1);\n        } else {\n          href = href.slice(1, -1);\n        }\n      }\n      return outputLink(cap, {\n        href: href ? href.replace(this.rules.inline._escapes, '$1') : href,\n        title: title ? title.replace(this.rules.inline._escapes, '$1') : title\n      }, cap[0], this.lexer);\n    }\n  }\n\n  reflink(src, links) {\n    let cap;\n    if ((cap = this.rules.inline.reflink.exec(src))\n        || (cap = this.rules.inline.nolink.exec(src))) {\n      let link = (cap[2] || cap[1]).replace(/\\s+/g, ' ');\n      link = links[link.toLowerCase()];\n      if (!link) {\n        const text = cap[0].charAt(0);\n        return {\n          type: 'text',\n          raw: text,\n          text\n        };\n      }\n      return outputLink(cap, link, cap[0], this.lexer);\n    }\n  }\n\n  emStrong(src, maskedSrc, prevChar = '') {\n    let match = this.rules.inline.emStrong.lDelim.exec(src);\n    if (!match) return;\n\n    // _ can't be between two alphanumerics. \\p{L}\\p{N} includes non-english alphabet/numbers as well\n    if (match[3] && prevChar.match(/[\\p{L}\\p{N}]/u)) return;\n\n    const nextChar = match[1] || match[2] || '';\n\n    if (!nextChar || (nextChar && (prevChar === '' || this.rules.inline.punctuation.exec(prevChar)))) {\n      const lLength = match[0].length - 1;\n      let rDelim, rLength, delimTotal = lLength, midDelimTotal = 0;\n\n      const endReg = match[0][0] === '*' ? this.rules.inline.emStrong.rDelimAst : this.rules.inline.emStrong.rDelimUnd;\n      endReg.lastIndex = 0;\n\n      // Clip maskedSrc to same section of string as src (move to lexer?)\n      maskedSrc = maskedSrc.slice(-1 * src.length + lLength);\n\n      while ((match = endReg.exec(maskedSrc)) != null) {\n        rDelim = match[1] || match[2] || match[3] || match[4] || match[5] || match[6];\n\n        if (!rDelim) continue; // skip single * in __abc*abc__\n\n        rLength = rDelim.length;\n\n        if (match[3] || match[4]) { // found another Left Delim\n          delimTotal += rLength;\n          continue;\n        } else if (match[5] || match[6]) { // either Left or Right Delim\n          if (lLength % 3 && !((lLength + rLength) % 3)) {\n            midDelimTotal += rLength;\n            continue; // CommonMark Emphasis Rules 9-10\n          }\n        }\n\n        delimTotal -= rLength;\n\n        if (delimTotal > 0) continue; // Haven't found enough closing delimiters\n\n        // Remove extra characters. *a*** -> *a*\n        rLength = Math.min(rLength, rLength + delimTotal + midDelimTotal);\n\n        const raw = src.slice(0, lLength + match.index + (match[0].length - rDelim.length) + rLength);\n\n        // Create `em` if smallest delimiter has odd char count. *a***\n        if (Math.min(lLength, rLength) % 2) {\n          const text = raw.slice(1, -1);\n          return {\n            type: 'em',\n            raw,\n            text,\n            tokens: this.lexer.inlineTokens(text)\n          };\n        }\n\n        // Create 'strong' if smallest delimiter has even char count. **a***\n        const text = raw.slice(2, -2);\n        return {\n          type: 'strong',\n          raw,\n          text,\n          tokens: this.lexer.inlineTokens(text)\n        };\n      }\n    }\n  }\n\n  codespan(src) {\n    const cap = this.rules.inline.code.exec(src);\n    if (cap) {\n      let text = cap[2].replace(/\\n/g, ' ');\n      const hasNonSpaceChars = /[^ ]/.test(text);\n      const hasSpaceCharsOnBothEnds = /^ /.test(text) && / $/.test(text);\n      if (hasNonSpaceChars && hasSpaceCharsOnBothEnds) {\n        text = text.substring(1, text.length - 1);\n      }\n      text = escape(text, true);\n      return {\n        type: 'codespan',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n\n  br(src) {\n    const cap = this.rules.inline.br.exec(src);\n    if (cap) {\n      return {\n        type: 'br',\n        raw: cap[0]\n      };\n    }\n  }\n\n  del(src) {\n    const cap = this.rules.inline.del.exec(src);\n    if (cap) {\n      return {\n        type: 'del',\n        raw: cap[0],\n        text: cap[2],\n        tokens: this.lexer.inlineTokens(cap[2])\n      };\n    }\n  }\n\n  autolink(src, mangle) {\n    const cap = this.rules.inline.autolink.exec(src);\n    if (cap) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[1]) : cap[1]);\n        href = 'mailto:' + text;\n      } else {\n        text = escape(cap[1]);\n        href = text;\n      }\n\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  url(src, mangle) {\n    let cap;\n    if (cap = this.rules.inline.url.exec(src)) {\n      let text, href;\n      if (cap[2] === '@') {\n        text = escape(this.options.mangle ? mangle(cap[0]) : cap[0]);\n        href = 'mailto:' + text;\n      } else {\n        // do extended autolink path validation\n        let prevCapZero;\n        do {\n          prevCapZero = cap[0];\n          cap[0] = this.rules.inline._backpedal.exec(cap[0])[0];\n        } while (prevCapZero !== cap[0]);\n        text = escape(cap[0]);\n        if (cap[1] === 'www.') {\n          href = 'http://' + cap[0];\n        } else {\n          href = cap[0];\n        }\n      }\n      return {\n        type: 'link',\n        raw: cap[0],\n        text,\n        href,\n        tokens: [\n          {\n            type: 'text',\n            raw: text,\n            text\n          }\n        ]\n      };\n    }\n  }\n\n  inlineText(src, smartypants) {\n    const cap = this.rules.inline.text.exec(src);\n    if (cap) {\n      let text;\n      if (this.lexer.state.inRawBlock) {\n        text = this.options.sanitize ? (this.options.sanitizer ? this.options.sanitizer(cap[0]) : escape(cap[0])) : cap[0];\n      } else {\n        text = escape(this.options.smartypants ? smartypants(cap[0]) : cap[0]);\n      }\n      return {\n        type: 'text',\n        raw: cap[0],\n        text\n      };\n    }\n  }\n}\n\n/**\n * Block-Level Grammar\n */\nconst block = {\n  newline: /^(?: *(?:\\n|$))+/,\n  code: /^( {4}[^\\n]+(?:\\n(?: *(?:\\n|$))*)?)+/,\n  fences: /^ {0,3}(`{3,}(?=[^`\\n]*(?:\\n|$))|~{3,})([^\\n]*)(?:\\n|$)(?:|([\\s\\S]*?)(?:\\n|$))(?: {0,3}\\1[~`]* *(?=\\n|$)|$)/,\n  hr: /^ {0,3}((?:-[\\t ]*){3,}|(?:_[ \\t]*){3,}|(?:\\*[ \\t]*){3,})(?:\\n+|$)/,\n  heading: /^ {0,3}(#{1,6})(?=\\s|$)(.*)(?:\\n+|$)/,\n  blockquote: /^( {0,3}> ?(paragraph|[^\\n]*)(?:\\n|$))+/,\n  list: /^( {0,3}bull)([ \\t][^\\n]+?)?(?:\\n|$)/,\n  html: '^ {0,3}(?:' // optional indentation\n    + '<(script|pre|style|textarea)[\\\\s>][\\\\s\\\\S]*?(?:</\\\\1>[^\\\\n]*\\\\n+|$)' // (1)\n    + '|comment[^\\\\n]*(\\\\n+|$)' // (2)\n    + '|<\\\\?[\\\\s\\\\S]*?(?:\\\\?>\\\\n*|$)' // (3)\n    + '|<![A-Z][\\\\s\\\\S]*?(?:>\\\\n*|$)' // (4)\n    + '|<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?(?:\\\\]\\\\]>\\\\n*|$)' // (5)\n    + '|</?(tag)(?: +|\\\\n|/?>)[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (6)\n    + '|<(?!script|pre|style|textarea)([a-z][\\\\w-]*)(?:attribute)*? */?>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) open tag\n    + '|</(?!script|pre|style|textarea)[a-z][\\\\w-]*\\\\s*>(?=[ \\\\t]*(?:\\\\n|$))[\\\\s\\\\S]*?(?:(?:\\\\n *)+\\\\n|$)' // (7) closing tag\n    + ')',\n  def: /^ {0,3}\\[(label)\\]: *(?:\\n *)?([^<\\s][^\\s]*|<.*?>)(?:(?: +(?:\\n *)?| *\\n *)(title))? *(?:\\n+|$)/,\n  table: noopTest,\n  lheading: /^((?:.|\\n(?!\\n))+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  // regex template, placeholders will be replaced according to different paragraph\n  // interruption rules of commonmark and the original markdown spec:\n  _paragraph: /^([^\\n]+(?:\\n(?!hr|heading|lheading|blockquote|fences|list|html|table| +\\n)[^\\n]+)*)/,\n  text: /^[^\\n]+/\n};\n\nblock._label = /(?!\\s*\\])(?:\\\\.|[^\\[\\]\\\\])+/;\nblock._title = /(?:\"(?:\\\\\"?|[^\"\\\\])*\"|'[^'\\n]*(?:\\n[^'\\n]+)*\\n?'|\\([^()]*\\))/;\nblock.def = edit(block.def)\n  .replace('label', block._label)\n  .replace('title', block._title)\n  .getRegex();\n\nblock.bullet = /(?:[*+-]|\\d{1,9}[.)])/;\nblock.listItemStart = edit(/^( *)(bull) */)\n  .replace('bull', block.bullet)\n  .getRegex();\n\nblock.list = edit(block.list)\n  .replace(/bull/g, block.bullet)\n  .replace('hr', '\\\\n+(?=\\\\1?(?:(?:- *){3,}|(?:_ *){3,}|(?:\\\\* *){3,})(?:\\\\n+|$))')\n  .replace('def', '\\\\n+(?=' + block.def.source + ')')\n  .getRegex();\n\nblock._tag = 'address|article|aside|base|basefont|blockquote|body|caption'\n  + '|center|col|colgroup|dd|details|dialog|dir|div|dl|dt|fieldset|figcaption'\n  + '|figure|footer|form|frame|frameset|h[1-6]|head|header|hr|html|iframe'\n  + '|legend|li|link|main|menu|menuitem|meta|nav|noframes|ol|optgroup|option'\n  + '|p|param|section|source|summary|table|tbody|td|tfoot|th|thead|title|tr'\n  + '|track|ul';\nblock._comment = /<!--(?!-?>)[\\s\\S]*?(?:-->|$)/;\nblock.html = edit(block.html, 'i')\n  .replace('comment', block._comment)\n  .replace('tag', block._tag)\n  .replace('attribute', / +[a-zA-Z:_][\\w.:-]*(?: *= *\"[^\"\\n]*\"| *= *'[^'\\n]*'| *= *[^\\s\"'=<>`]+)?/)\n  .getRegex();\n\nblock.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('|table', '')\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.blockquote = edit(block.blockquote)\n  .replace('paragraph', block.paragraph)\n  .getRegex();\n\n/**\n * Normal Block Grammar\n */\n\nblock.normal = { ...block };\n\n/**\n * GFM Block Grammar\n */\n\nblock.gfm = {\n  ...block.normal,\n  table: '^ *([^\\\\n ].*\\\\|.*)\\\\n' // Header\n    + ' {0,3}(?:\\\\| *)?(:?-+:? *(?:\\\\| *:?-+:? *)*)(?:\\\\| *)?' // Align\n    + '(?:\\\\n((?:(?! *\\\\n|hr|heading|blockquote|code|fences|list|html).*(?:\\\\n|$))*)\\\\n*|$)' // Cells\n};\n\nblock.gfm.table = edit(block.gfm.table)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('blockquote', ' {0,3}>')\n  .replace('code', ' {4}[^\\\\n]')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // tables can be interrupted by type (6) html blocks\n  .getRegex();\n\nblock.gfm.paragraph = edit(block._paragraph)\n  .replace('hr', block.hr)\n  .replace('heading', ' {0,3}#{1,6} ')\n  .replace('|lheading', '') // setex headings don't interrupt commonmark paragraphs\n  .replace('table', block.gfm.table) // interrupt paragraphs with table\n  .replace('blockquote', ' {0,3}>')\n  .replace('fences', ' {0,3}(?:`{3,}(?=[^`\\\\n]*\\\\n)|~{3,})[^\\\\n]*\\\\n')\n  .replace('list', ' {0,3}(?:[*+-]|1[.)]) ') // only lists starting from 1 can interrupt\n  .replace('html', '</?(?:tag)(?: +|\\\\n|/?>)|<(?:script|pre|style|textarea|!--)')\n  .replace('tag', block._tag) // pars can be interrupted by type (6) html blocks\n  .getRegex();\n/**\n * Pedantic grammar (original John Gruber's loose markdown specification)\n */\n\nblock.pedantic = {\n  ...block.normal,\n  html: edit(\n    '^ *(?:comment *(?:\\\\n|\\\\s*$)'\n    + '|<(tag)[\\\\s\\\\S]+?</\\\\1> *(?:\\\\n{2,}|\\\\s*$)' // closed tag\n    + '|<tag(?:\"[^\"]*\"|\\'[^\\']*\\'|\\\\s[^\\'\"/>\\\\s]*)*?/?> *(?:\\\\n{2,}|\\\\s*$))')\n    .replace('comment', block._comment)\n    .replace(/tag/g, '(?!(?:'\n      + 'a|em|strong|small|s|cite|q|dfn|abbr|data|time|code|var|samp|kbd|sub'\n      + '|sup|i|b|u|mark|ruby|rt|rp|bdi|bdo|span|br|wbr|ins|del|img)'\n      + '\\\\b)\\\\w+(?!:|[^\\\\w\\\\s@]*@)\\\\b')\n    .getRegex(),\n  def: /^ *\\[([^\\]]+)\\]: *<?([^\\s>]+)>?(?: +([\"(][^\\n]+[\")]))? *(?:\\n+|$)/,\n  heading: /^(#{1,6})(.*)(?:\\n+|$)/,\n  fences: noopTest, // fences not supported\n  lheading: /^(.+?)\\n {0,3}(=+|-+) *(?:\\n+|$)/,\n  paragraph: edit(block.normal._paragraph)\n    .replace('hr', block.hr)\n    .replace('heading', ' *#{1,6} *[^\\n]')\n    .replace('lheading', block.lheading)\n    .replace('blockquote', ' {0,3}>')\n    .replace('|fences', '')\n    .replace('|list', '')\n    .replace('|html', '')\n    .getRegex()\n};\n\n/**\n * Inline-Level Grammar\n */\nconst inline = {\n  escape: /^\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/,\n  autolink: /^<(scheme:[^\\s\\x00-\\x1f<>]*|email)>/,\n  url: noopTest,\n  tag: '^comment'\n    + '|^</[a-zA-Z][\\\\w:-]*\\\\s*>' // self-closing tag\n    + '|^<[a-zA-Z][\\\\w-]*(?:attribute)*?\\\\s*/?>' // open tag\n    + '|^<\\\\?[\\\\s\\\\S]*?\\\\?>' // processing instruction, e.g. <?php ?>\n    + '|^<![a-zA-Z]+\\\\s[\\\\s\\\\S]*?>' // declaration, e.g. <!DOCTYPE html>\n    + '|^<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>', // CDATA section\n  link: /^!?\\[(label)\\]\\(\\s*(href)(?:\\s+(title))?\\s*\\)/,\n  reflink: /^!?\\[(label)\\]\\[(ref)\\]/,\n  nolink: /^!?\\[(ref)\\](?:\\[\\])?/,\n  reflinkSearch: 'reflink|nolink(?!\\\\()',\n  emStrong: {\n    lDelim: /^(?:\\*+(?:([punct_])|[^\\s*]))|^_+(?:([punct*])|([^\\s_]))/,\n    //        (1) and (2) can only be a Right Delimiter. (3) and (4) can only be Left.  (5) and (6) can be either Left or Right.\n    //          () Skip orphan inside strong                                      () Consume to delim     (1) #***                (2) a***#, a***                             (3) #***a, ***a                 (4) ***#              (5) #***#                 (6) a***a\n    rDelimAst: /^(?:[^_*\\\\]|\\\\.)*?\\_\\_(?:[^_*\\\\]|\\\\.)*?\\*(?:[^_*\\\\]|\\\\.)*?(?=\\_\\_)|(?:[^*\\\\]|\\\\.)+(?=[^*])|[punct_](\\*+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[punct_\\s]|$)|[punct_\\s](\\*+)(?=[^punct*_\\s])|[\\s](\\*+)(?=[punct_])|[punct_](\\*+)(?=[punct_])|(?:[^punct*_\\s\\\\]|\\\\.)(\\*+)(?=[^punct*_\\s])/,\n    rDelimUnd: /^(?:[^_*\\\\]|\\\\.)*?\\*\\*(?:[^_*\\\\]|\\\\.)*?\\_(?:[^_*\\\\]|\\\\.)*?(?=\\*\\*)|(?:[^_\\\\]|\\\\.)+(?=[^_])|[punct*](\\_+)(?=[\\s]|$)|(?:[^punct*_\\s\\\\]|\\\\.)(\\_+)(?=[punct*\\s]|$)|[punct*\\s](\\_+)(?=[^punct*_\\s])|[\\s](\\_+)(?=[punct*])|[punct*](\\_+)(?=[punct*])/ // ^- Not allowed for _\n  },\n  code: /^(`+)([^`]|[^`][\\s\\S]*?[^`])\\1(?!`)/,\n  br: /^( {2,}|\\\\)\\n(?!\\s*$)/,\n  del: noopTest,\n  text: /^(`+|[^`])(?:(?= {2,}\\n)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*_]|\\b_|$)|[^ ](?= {2,}\\n)))/,\n  punctuation: /^([\\spunctuation])/\n};\n\n// list of punctuation marks from CommonMark spec\n// without * and _ to handle the different emphasis markers * and _\ninline._punctuation = '!\"#$%&\\'()+\\\\-.,/:;<=>?@\\\\[\\\\]`^{|}~';\ninline.punctuation = edit(inline.punctuation).replace(/punctuation/g, inline._punctuation).getRegex();\n\n// sequences em should skip over [title](link), `code`, <html>\ninline.blockSkip = /\\[[^\\]]*?\\]\\([^\\)]*?\\)|`[^`]*?`|<[^>]*?>/g;\n// lookbehind is not available on Safari as of version 16\n// inline.escapedEmSt = /(?<=(?:^|[^\\\\)(?:\\\\[^])*)\\\\[*_]/g;\ninline.escapedEmSt = /(?:^|[^\\\\])(?:\\\\\\\\)*\\\\[*_]/g;\n\ninline._comment = edit(block._comment).replace('(?:-->|$)', '-->').getRegex();\n\ninline.emStrong.lDelim = edit(inline.emStrong.lDelim)\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimAst = edit(inline.emStrong.rDelimAst, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline.emStrong.rDelimUnd = edit(inline.emStrong.rDelimUnd, 'g')\n  .replace(/punct/g, inline._punctuation)\n  .getRegex();\n\ninline._escapes = /\\\\([!\"#$%&'()*+,\\-./:;<=>?@\\[\\]\\\\^_`{|}~])/g;\n\ninline._scheme = /[a-zA-Z][a-zA-Z0-9+.-]{1,31}/;\ninline._email = /[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+(@)[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)+(?![-_])/;\ninline.autolink = edit(inline.autolink)\n  .replace('scheme', inline._scheme)\n  .replace('email', inline._email)\n  .getRegex();\n\ninline._attribute = /\\s+[a-zA-Z:_][\\w.:-]*(?:\\s*=\\s*\"[^\"]*\"|\\s*=\\s*'[^']*'|\\s*=\\s*[^\\s\"'=<>`]+)?/;\n\ninline.tag = edit(inline.tag)\n  .replace('comment', inline._comment)\n  .replace('attribute', inline._attribute)\n  .getRegex();\n\ninline._label = /(?:\\[(?:\\\\.|[^\\[\\]\\\\])*\\]|\\\\.|`[^`]*`|[^\\[\\]\\\\`])*?/;\ninline._href = /<(?:\\\\.|[^\\n<>\\\\])+>|[^\\s\\x00-\\x1f]*/;\ninline._title = /\"(?:\\\\\"?|[^\"\\\\])*\"|'(?:\\\\'?|[^'\\\\])*'|\\((?:\\\\\\)?|[^)\\\\])*\\)/;\n\ninline.link = edit(inline.link)\n  .replace('label', inline._label)\n  .replace('href', inline._href)\n  .replace('title', inline._title)\n  .getRegex();\n\ninline.reflink = edit(inline.reflink)\n  .replace('label', inline._label)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.nolink = edit(inline.nolink)\n  .replace('ref', block._label)\n  .getRegex();\n\ninline.reflinkSearch = edit(inline.reflinkSearch, 'g')\n  .replace('reflink', inline.reflink)\n  .replace('nolink', inline.nolink)\n  .getRegex();\n\n/**\n * Normal Inline Grammar\n */\n\ninline.normal = { ...inline };\n\n/**\n * Pedantic Inline Grammar\n */\n\ninline.pedantic = {\n  ...inline.normal,\n  strong: {\n    start: /^__|\\*\\*/,\n    middle: /^__(?=\\S)([\\s\\S]*?\\S)__(?!_)|^\\*\\*(?=\\S)([\\s\\S]*?\\S)\\*\\*(?!\\*)/,\n    endAst: /\\*\\*(?!\\*)/g,\n    endUnd: /__(?!_)/g\n  },\n  em: {\n    start: /^_|\\*/,\n    middle: /^()\\*(?=\\S)([\\s\\S]*?\\S)\\*(?!\\*)|^_(?=\\S)([\\s\\S]*?\\S)_(?!_)/,\n    endAst: /\\*(?!\\*)/g,\n    endUnd: /_(?!_)/g\n  },\n  link: edit(/^!?\\[(label)\\]\\((.*?)\\)/)\n    .replace('label', inline._label)\n    .getRegex(),\n  reflink: edit(/^!?\\[(label)\\]\\s*\\[([^\\]]*)\\]/)\n    .replace('label', inline._label)\n    .getRegex()\n};\n\n/**\n * GFM Inline Grammar\n */\n\ninline.gfm = {\n  ...inline.normal,\n  escape: edit(inline.escape).replace('])', '~|])').getRegex(),\n  _extended_email: /[A-Za-z0-9._+-]+(@)[a-zA-Z0-9-_]+(?:\\.[a-zA-Z0-9-_]*[a-zA-Z0-9])+(?![-_])/,\n  url: /^((?:ftp|https?):\\/\\/|www\\.)(?:[a-zA-Z0-9\\-]+\\.?)+[^\\s<]*|^email/,\n  _backpedal: /(?:[^?!.,:;*_'\"~()&]+|\\([^)]*\\)|&(?![a-zA-Z0-9]+;$)|[?!.,:;*_'\"~)]+(?!$))+/,\n  del: /^(~~?)(?=[^\\s~])([\\s\\S]*?[^\\s~])\\1(?=[^~]|$)/,\n  text: /^([`~]+|[^`~])(?:(?= {2,}\\n)|(?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)|[\\s\\S]*?(?:(?=[\\\\<!\\[`*~_]|\\b_|https?:\\/\\/|ftp:\\/\\/|www\\.|$)|[^ ](?= {2,}\\n)|[^a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-](?=[a-zA-Z0-9.!#$%&'*+\\/=?_`{\\|}~-]+@)))/\n};\n\ninline.gfm.url = edit(inline.gfm.url, 'i')\n  .replace('email', inline.gfm._extended_email)\n  .getRegex();\n/**\n * GFM + Line Breaks Inline Grammar\n */\n\ninline.breaks = {\n  ...inline.gfm,\n  br: edit(inline.br).replace('{2,}', '*').getRegex(),\n  text: edit(inline.gfm.text)\n    .replace('\\\\b_', '\\\\b_| {2,}\\\\n')\n    .replace(/\\{2,\\}/g, '*')\n    .getRegex()\n};\n\n/**\n * smartypants text replacement\n * @param {string} text\n */\nfunction smartypants(text) {\n  return text\n    // em-dashes\n    .replace(/---/g, '\\u2014')\n    // en-dashes\n    .replace(/--/g, '\\u2013')\n    // opening singles\n    .replace(/(^|[-\\u2014/(\\[{\"\\s])'/g, '$1\\u2018')\n    // closing singles & apostrophes\n    .replace(/'/g, '\\u2019')\n    // opening doubles\n    .replace(/(^|[-\\u2014/(\\[{\\u2018\\s])\"/g, '$1\\u201c')\n    // closing doubles\n    .replace(/\"/g, '\\u201d')\n    // ellipses\n    .replace(/\\.{3}/g, '\\u2026');\n}\n\n/**\n * mangle email addresses\n * @param {string} text\n */\nfunction mangle(text) {\n  let out = '',\n    i,\n    ch;\n\n  const l = text.length;\n  for (i = 0; i < l; i++) {\n    ch = text.charCodeAt(i);\n    if (Math.random() > 0.5) {\n      ch = 'x' + ch.toString(16);\n    }\n    out += '&#' + ch + ';';\n  }\n\n  return out;\n}\n\n/**\n * Block Lexer\n */\nclass Lexer {\n  constructor(options) {\n    this.tokens = [];\n    this.tokens.links = Object.create(null);\n    this.options = options || defaults;\n    this.options.tokenizer = this.options.tokenizer || new Tokenizer();\n    this.tokenizer = this.options.tokenizer;\n    this.tokenizer.options = this.options;\n    this.tokenizer.lexer = this;\n    this.inlineQueue = [];\n    this.state = {\n      inLink: false,\n      inRawBlock: false,\n      top: true\n    };\n\n    const rules = {\n      block: block.normal,\n      inline: inline.normal\n    };\n\n    if (this.options.pedantic) {\n      rules.block = block.pedantic;\n      rules.inline = inline.pedantic;\n    } else if (this.options.gfm) {\n      rules.block = block.gfm;\n      if (this.options.breaks) {\n        rules.inline = inline.breaks;\n      } else {\n        rules.inline = inline.gfm;\n      }\n    }\n    this.tokenizer.rules = rules;\n  }\n\n  /**\n   * Expose Rules\n   */\n  static get rules() {\n    return {\n      block,\n      inline\n    };\n  }\n\n  /**\n   * Static Lex Method\n   */\n  static lex(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.lex(src);\n  }\n\n  /**\n   * Static Lex Inline Method\n   */\n  static lexInline(src, options) {\n    const lexer = new Lexer(options);\n    return lexer.inlineTokens(src);\n  }\n\n  /**\n   * Preprocessing\n   */\n  lex(src) {\n    src = src\n      .replace(/\\r\\n|\\r/g, '\\n');\n\n    this.blockTokens(src, this.tokens);\n\n    let next;\n    while (next = this.inlineQueue.shift()) {\n      this.inlineTokens(next.src, next.tokens);\n    }\n\n    return this.tokens;\n  }\n\n  /**\n   * Lexing\n   */\n  blockTokens(src, tokens = []) {\n    if (this.options.pedantic) {\n      src = src.replace(/\\t/g, '    ').replace(/^ +$/gm, '');\n    } else {\n      src = src.replace(/^( *)(\\t+)/gm, (_, leading, tabs) => {\n        return leading + '    '.repeat(tabs.length);\n      });\n    }\n\n    let token, lastToken, cutSrc, lastParagraphClipped;\n\n    while (src) {\n      if (this.options.extensions\n        && this.options.extensions.block\n        && this.options.extensions.block.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // newline\n      if (token = this.tokenizer.space(src)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.length === 1 && tokens.length > 0) {\n          // if there's a single \\n as a spacer, it's terminating the last line,\n          // so move it there so that we don't get unecessary paragraph tags\n          tokens[tokens.length - 1].raw += '\\n';\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.code(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        // An indented code block cannot interrupt a paragraph.\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // fences\n      if (token = this.tokenizer.fences(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // heading\n      if (token = this.tokenizer.heading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // hr\n      if (token = this.tokenizer.hr(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // blockquote\n      if (token = this.tokenizer.blockquote(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // list\n      if (token = this.tokenizer.list(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // html\n      if (token = this.tokenizer.html(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // def\n      if (token = this.tokenizer.def(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && (lastToken.type === 'paragraph' || lastToken.type === 'text')) {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.raw;\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else if (!this.tokens.links[token.tag]) {\n          this.tokens.links[token.tag] = {\n            href: token.href,\n            title: token.title\n          };\n        }\n        continue;\n      }\n\n      // table (gfm)\n      if (token = this.tokenizer.table(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // lheading\n      if (token = this.tokenizer.lheading(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // top-level paragraph\n      // prevent paragraph consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startBlock) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startBlock.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (this.state.top && (token = this.tokenizer.paragraph(cutSrc))) {\n        lastToken = tokens[tokens.length - 1];\n        if (lastParagraphClipped && lastToken.type === 'paragraph') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        lastParagraphClipped = (cutSrc.length !== src.length);\n        src = src.substring(token.raw.length);\n        continue;\n      }\n\n      // text\n      if (token = this.tokenizer.text(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += '\\n' + token.raw;\n          lastToken.text += '\\n' + token.text;\n          this.inlineQueue.pop();\n          this.inlineQueue[this.inlineQueue.length - 1].src = lastToken.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    this.state.top = true;\n    return tokens;\n  }\n\n  inline(src, tokens = []) {\n    this.inlineQueue.push({ src, tokens });\n    return tokens;\n  }\n\n  /**\n   * Lexing/Compiling\n   */\n  inlineTokens(src, tokens = []) {\n    let token, lastToken, cutSrc;\n\n    // String with links masked to avoid interference with em and strong\n    let maskedSrc = src;\n    let match;\n    let keepPrevChar, prevChar;\n\n    // Mask out reflinks\n    if (this.tokens.links) {\n      const links = Object.keys(this.tokens.links);\n      if (links.length > 0) {\n        while ((match = this.tokenizer.rules.inline.reflinkSearch.exec(maskedSrc)) != null) {\n          if (links.includes(match[0].slice(match[0].lastIndexOf('[') + 1, -1))) {\n            maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.reflinkSearch.lastIndex);\n          }\n        }\n      }\n    }\n    // Mask out other blocks\n    while ((match = this.tokenizer.rules.inline.blockSkip.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index) + '[' + repeatString('a', match[0].length - 2) + ']' + maskedSrc.slice(this.tokenizer.rules.inline.blockSkip.lastIndex);\n    }\n\n    // Mask out escaped em & strong delimiters\n    while ((match = this.tokenizer.rules.inline.escapedEmSt.exec(maskedSrc)) != null) {\n      maskedSrc = maskedSrc.slice(0, match.index + match[0].length - 2) + '++' + maskedSrc.slice(this.tokenizer.rules.inline.escapedEmSt.lastIndex);\n      this.tokenizer.rules.inline.escapedEmSt.lastIndex--;\n    }\n\n    while (src) {\n      if (!keepPrevChar) {\n        prevChar = '';\n      }\n      keepPrevChar = false;\n\n      // extensions\n      if (this.options.extensions\n        && this.options.extensions.inline\n        && this.options.extensions.inline.some((extTokenizer) => {\n          if (token = extTokenizer.call({ lexer: this }, src, tokens)) {\n            src = src.substring(token.raw.length);\n            tokens.push(token);\n            return true;\n          }\n          return false;\n        })) {\n        continue;\n      }\n\n      // escape\n      if (token = this.tokenizer.escape(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // tag\n      if (token = this.tokenizer.tag(src)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // link\n      if (token = this.tokenizer.link(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // reflink, nolink\n      if (token = this.tokenizer.reflink(src, this.tokens.links)) {\n        src = src.substring(token.raw.length);\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && token.type === 'text' && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      // em & strong\n      if (token = this.tokenizer.emStrong(src, maskedSrc, prevChar)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // code\n      if (token = this.tokenizer.codespan(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // br\n      if (token = this.tokenizer.br(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // del (gfm)\n      if (token = this.tokenizer.del(src)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // autolink\n      if (token = this.tokenizer.autolink(src, mangle)) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // url (gfm)\n      if (!this.state.inLink && (token = this.tokenizer.url(src, mangle))) {\n        src = src.substring(token.raw.length);\n        tokens.push(token);\n        continue;\n      }\n\n      // text\n      // prevent inlineText consuming extensions by clipping 'src' to extension start\n      cutSrc = src;\n      if (this.options.extensions && this.options.extensions.startInline) {\n        let startIndex = Infinity;\n        const tempSrc = src.slice(1);\n        let tempStart;\n        this.options.extensions.startInline.forEach(function(getStartIndex) {\n          tempStart = getStartIndex.call({ lexer: this }, tempSrc);\n          if (typeof tempStart === 'number' && tempStart >= 0) { startIndex = Math.min(startIndex, tempStart); }\n        });\n        if (startIndex < Infinity && startIndex >= 0) {\n          cutSrc = src.substring(0, startIndex + 1);\n        }\n      }\n      if (token = this.tokenizer.inlineText(cutSrc, smartypants)) {\n        src = src.substring(token.raw.length);\n        if (token.raw.slice(-1) !== '_') { // Track prevChar before string of ____ started\n          prevChar = token.raw.slice(-1);\n        }\n        keepPrevChar = true;\n        lastToken = tokens[tokens.length - 1];\n        if (lastToken && lastToken.type === 'text') {\n          lastToken.raw += token.raw;\n          lastToken.text += token.text;\n        } else {\n          tokens.push(token);\n        }\n        continue;\n      }\n\n      if (src) {\n        const errMsg = 'Infinite loop on byte: ' + src.charCodeAt(0);\n        if (this.options.silent) {\n          console.error(errMsg);\n          break;\n        } else {\n          throw new Error(errMsg);\n        }\n      }\n    }\n\n    return tokens;\n  }\n}\n\n/**\n * Renderer\n */\nclass Renderer {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  code(code, infostring, escaped) {\n    const lang = (infostring || '').match(/\\S*/)[0];\n    if (this.options.highlight) {\n      const out = this.options.highlight(code, lang);\n      if (out != null && out !== code) {\n        escaped = true;\n        code = out;\n      }\n    }\n\n    code = code.replace(/\\n$/, '') + '\\n';\n\n    if (!lang) {\n      return '<pre><code>'\n        + (escaped ? code : escape(code, true))\n        + '</code></pre>\\n';\n    }\n\n    return '<pre><code class=\"'\n      + this.options.langPrefix\n      + escape(lang)\n      + '\">'\n      + (escaped ? code : escape(code, true))\n      + '</code></pre>\\n';\n  }\n\n  /**\n   * @param {string} quote\n   */\n  blockquote(quote) {\n    return `<blockquote>\\n${quote}</blockquote>\\n`;\n  }\n\n  html(html) {\n    return html;\n  }\n\n  /**\n   * @param {string} text\n   * @param {string} level\n   * @param {string} raw\n   * @param {any} slugger\n   */\n  heading(text, level, raw, slugger) {\n    if (this.options.headerIds) {\n      const id = this.options.headerPrefix + slugger.slug(raw);\n      return `<h${level} id=\"${id}\">${text}</h${level}>\\n`;\n    }\n\n    // ignore IDs\n    return `<h${level}>${text}</h${level}>\\n`;\n  }\n\n  hr() {\n    return this.options.xhtml ? '<hr/>\\n' : '<hr>\\n';\n  }\n\n  list(body, ordered, start) {\n    const type = ordered ? 'ol' : 'ul',\n      startatt = (ordered && start !== 1) ? (' start=\"' + start + '\"') : '';\n    return '<' + type + startatt + '>\\n' + body + '</' + type + '>\\n';\n  }\n\n  /**\n   * @param {string} text\n   */\n  listitem(text) {\n    return `<li>${text}</li>\\n`;\n  }\n\n  checkbox(checked) {\n    return '<input '\n      + (checked ? 'checked=\"\" ' : '')\n      + 'disabled=\"\" type=\"checkbox\"'\n      + (this.options.xhtml ? ' /' : '')\n      + '> ';\n  }\n\n  /**\n   * @param {string} text\n   */\n  paragraph(text) {\n    return `<p>${text}</p>\\n`;\n  }\n\n  /**\n   * @param {string} header\n   * @param {string} body\n   */\n  table(header, body) {\n    if (body) body = `<tbody>${body}</tbody>`;\n\n    return '<table>\\n'\n      + '<thead>\\n'\n      + header\n      + '</thead>\\n'\n      + body\n      + '</table>\\n';\n  }\n\n  /**\n   * @param {string} content\n   */\n  tablerow(content) {\n    return `<tr>\\n${content}</tr>\\n`;\n  }\n\n  tablecell(content, flags) {\n    const type = flags.header ? 'th' : 'td';\n    const tag = flags.align\n      ? `<${type} align=\"${flags.align}\">`\n      : `<${type}>`;\n    return tag + content + `</${type}>\\n`;\n  }\n\n  /**\n   * span level renderer\n   * @param {string} text\n   */\n  strong(text) {\n    return `<strong>${text}</strong>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  em(text) {\n    return `<em>${text}</em>`;\n  }\n\n  /**\n   * @param {string} text\n   */\n  codespan(text) {\n    return `<code>${text}</code>`;\n  }\n\n  br() {\n    return this.options.xhtml ? '<br/>' : '<br>';\n  }\n\n  /**\n   * @param {string} text\n   */\n  del(text) {\n    return `<del>${text}</del>`;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  link(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n    let out = '<a href=\"' + href + '\"';\n    if (title) {\n      out += ' title=\"' + title + '\"';\n    }\n    out += '>' + text + '</a>';\n    return out;\n  }\n\n  /**\n   * @param {string} href\n   * @param {string} title\n   * @param {string} text\n   */\n  image(href, title, text) {\n    href = cleanUrl(this.options.sanitize, this.options.baseUrl, href);\n    if (href === null) {\n      return text;\n    }\n\n    let out = `<img src=\"${href}\" alt=\"${text}\"`;\n    if (title) {\n      out += ` title=\"${title}\"`;\n    }\n    out += this.options.xhtml ? '/>' : '>';\n    return out;\n  }\n\n  text(text) {\n    return text;\n  }\n}\n\n/**\n * TextRenderer\n * returns only the textual part of the token\n */\nclass TextRenderer {\n  // no need for block level renderers\n  strong(text) {\n    return text;\n  }\n\n  em(text) {\n    return text;\n  }\n\n  codespan(text) {\n    return text;\n  }\n\n  del(text) {\n    return text;\n  }\n\n  html(text) {\n    return text;\n  }\n\n  text(text) {\n    return text;\n  }\n\n  link(href, title, text) {\n    return '' + text;\n  }\n\n  image(href, title, text) {\n    return '' + text;\n  }\n\n  br() {\n    return '';\n  }\n}\n\n/**\n * Slugger generates header id\n */\nclass Slugger {\n  constructor() {\n    this.seen = {};\n  }\n\n  /**\n   * @param {string} value\n   */\n  serialize(value) {\n    return value\n      .toLowerCase()\n      .trim()\n      // remove html tags\n      .replace(/<[!\\/a-z].*?>/ig, '')\n      // remove unwanted chars\n      .replace(/[\\u2000-\\u206F\\u2E00-\\u2E7F\\\\'!\"#$%&()*+,./:;<=>?@[\\]^`{|}~]/g, '')\n      .replace(/\\s/g, '-');\n  }\n\n  /**\n   * Finds the next safe (unique) slug to use\n   * @param {string} originalSlug\n   * @param {boolean} isDryRun\n   */\n  getNextSafeSlug(originalSlug, isDryRun) {\n    let slug = originalSlug;\n    let occurenceAccumulator = 0;\n    if (this.seen.hasOwnProperty(slug)) {\n      occurenceAccumulator = this.seen[originalSlug];\n      do {\n        occurenceAccumulator++;\n        slug = originalSlug + '-' + occurenceAccumulator;\n      } while (this.seen.hasOwnProperty(slug));\n    }\n    if (!isDryRun) {\n      this.seen[originalSlug] = occurenceAccumulator;\n      this.seen[slug] = 0;\n    }\n    return slug;\n  }\n\n  /**\n   * Convert string to unique id\n   * @param {object} [options]\n   * @param {boolean} [options.dryrun] Generates the next unique slug without\n   * updating the internal accumulator.\n   */\n  slug(value, options = {}) {\n    const slug = this.serialize(value);\n    return this.getNextSafeSlug(slug, options.dryrun);\n  }\n}\n\n/**\n * Parsing & Compiling\n */\nclass Parser {\n  constructor(options) {\n    this.options = options || defaults;\n    this.options.renderer = this.options.renderer || new Renderer();\n    this.renderer = this.options.renderer;\n    this.renderer.options = this.options;\n    this.textRenderer = new TextRenderer();\n    this.slugger = new Slugger();\n  }\n\n  /**\n   * Static Parse Method\n   */\n  static parse(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parse(tokens);\n  }\n\n  /**\n   * Static Parse Inline Method\n   */\n  static parseInline(tokens, options) {\n    const parser = new Parser(options);\n    return parser.parseInline(tokens);\n  }\n\n  /**\n   * Parse Loop\n   */\n  parse(tokens, top = true) {\n    let out = '',\n      i,\n      j,\n      k,\n      l2,\n      l3,\n      row,\n      cell,\n      header,\n      body,\n      token,\n      ordered,\n      start,\n      loose,\n      itemBody,\n      item,\n      checked,\n      task,\n      checkbox,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['space', 'hr', 'heading', 'code', 'table', 'blockquote', 'list', 'html', 'paragraph', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'space': {\n          continue;\n        }\n        case 'hr': {\n          out += this.renderer.hr();\n          continue;\n        }\n        case 'heading': {\n          out += this.renderer.heading(\n            this.parseInline(token.tokens),\n            token.depth,\n            unescape(this.parseInline(token.tokens, this.textRenderer)),\n            this.slugger);\n          continue;\n        }\n        case 'code': {\n          out += this.renderer.code(token.text,\n            token.lang,\n            token.escaped);\n          continue;\n        }\n        case 'table': {\n          header = '';\n\n          // header\n          cell = '';\n          l2 = token.header.length;\n          for (j = 0; j < l2; j++) {\n            cell += this.renderer.tablecell(\n              this.parseInline(token.header[j].tokens),\n              { header: true, align: token.align[j] }\n            );\n          }\n          header += this.renderer.tablerow(cell);\n\n          body = '';\n          l2 = token.rows.length;\n          for (j = 0; j < l2; j++) {\n            row = token.rows[j];\n\n            cell = '';\n            l3 = row.length;\n            for (k = 0; k < l3; k++) {\n              cell += this.renderer.tablecell(\n                this.parseInline(row[k].tokens),\n                { header: false, align: token.align[k] }\n              );\n            }\n\n            body += this.renderer.tablerow(cell);\n          }\n          out += this.renderer.table(header, body);\n          continue;\n        }\n        case 'blockquote': {\n          body = this.parse(token.tokens);\n          out += this.renderer.blockquote(body);\n          continue;\n        }\n        case 'list': {\n          ordered = token.ordered;\n          start = token.start;\n          loose = token.loose;\n          l2 = token.items.length;\n\n          body = '';\n          for (j = 0; j < l2; j++) {\n            item = token.items[j];\n            checked = item.checked;\n            task = item.task;\n\n            itemBody = '';\n            if (item.task) {\n              checkbox = this.renderer.checkbox(checked);\n              if (loose) {\n                if (item.tokens.length > 0 && item.tokens[0].type === 'paragraph') {\n                  item.tokens[0].text = checkbox + ' ' + item.tokens[0].text;\n                  if (item.tokens[0].tokens && item.tokens[0].tokens.length > 0 && item.tokens[0].tokens[0].type === 'text') {\n                    item.tokens[0].tokens[0].text = checkbox + ' ' + item.tokens[0].tokens[0].text;\n                  }\n                } else {\n                  item.tokens.unshift({\n                    type: 'text',\n                    text: checkbox\n                  });\n                }\n              } else {\n                itemBody += checkbox;\n              }\n            }\n\n            itemBody += this.parse(item.tokens, loose);\n            body += this.renderer.listitem(itemBody, task, checked);\n          }\n\n          out += this.renderer.list(body, ordered, start);\n          continue;\n        }\n        case 'html': {\n          // TODO parse inline content if parameter markdown=1\n          out += this.renderer.html(token.text);\n          continue;\n        }\n        case 'paragraph': {\n          out += this.renderer.paragraph(this.parseInline(token.tokens));\n          continue;\n        }\n        case 'text': {\n          body = token.tokens ? this.parseInline(token.tokens) : token.text;\n          while (i + 1 < l && tokens[i + 1].type === 'text') {\n            token = tokens[++i];\n            body += '\\n' + (token.tokens ? this.parseInline(token.tokens) : token.text);\n          }\n          out += top ? this.renderer.paragraph(body) : body;\n          continue;\n        }\n\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n\n    return out;\n  }\n\n  /**\n   * Parse Inline Tokens\n   */\n  parseInline(tokens, renderer) {\n    renderer = renderer || this.renderer;\n    let out = '',\n      i,\n      token,\n      ret;\n\n    const l = tokens.length;\n    for (i = 0; i < l; i++) {\n      token = tokens[i];\n\n      // Run any renderer extensions\n      if (this.options.extensions && this.options.extensions.renderers && this.options.extensions.renderers[token.type]) {\n        ret = this.options.extensions.renderers[token.type].call({ parser: this }, token);\n        if (ret !== false || !['escape', 'html', 'link', 'image', 'strong', 'em', 'codespan', 'br', 'del', 'text'].includes(token.type)) {\n          out += ret || '';\n          continue;\n        }\n      }\n\n      switch (token.type) {\n        case 'escape': {\n          out += renderer.text(token.text);\n          break;\n        }\n        case 'html': {\n          out += renderer.html(token.text);\n          break;\n        }\n        case 'link': {\n          out += renderer.link(token.href, token.title, this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'image': {\n          out += renderer.image(token.href, token.title, token.text);\n          break;\n        }\n        case 'strong': {\n          out += renderer.strong(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'em': {\n          out += renderer.em(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'codespan': {\n          out += renderer.codespan(token.text);\n          break;\n        }\n        case 'br': {\n          out += renderer.br();\n          break;\n        }\n        case 'del': {\n          out += renderer.del(this.parseInline(token.tokens, renderer));\n          break;\n        }\n        case 'text': {\n          out += renderer.text(token.text);\n          break;\n        }\n        default: {\n          const errMsg = 'Token with \"' + token.type + '\" type was not found.';\n          if (this.options.silent) {\n            console.error(errMsg);\n            return;\n          } else {\n            throw new Error(errMsg);\n          }\n        }\n      }\n    }\n    return out;\n  }\n}\n\nclass Hooks {\n  constructor(options) {\n    this.options = options || defaults;\n  }\n\n  static passThroughHooks = new Set([\n    'preprocess',\n    'postprocess'\n  ]);\n\n  /**\n   * Process markdown before marked\n   */\n  preprocess(markdown) {\n    return markdown;\n  }\n\n  /**\n   * Process HTML after marked is finished\n   */\n  postprocess(html) {\n    return html;\n  }\n}\n\nfunction onError(silent, async, callback) {\n  return (e) => {\n    e.message += '\\nPlease report this to https://github.com/markedjs/marked.';\n\n    if (silent) {\n      const msg = '<p>An error occurred:</p><pre>'\n        + escape(e.message + '', true)\n        + '</pre>';\n      if (async) {\n        return Promise.resolve(msg);\n      }\n      if (callback) {\n        callback(null, msg);\n        return;\n      }\n      return msg;\n    }\n\n    if (async) {\n      return Promise.reject(e);\n    }\n    if (callback) {\n      callback(e);\n      return;\n    }\n    throw e;\n  };\n}\n\nfunction parseMarkdown(lexer, parser) {\n  return (src, opt, callback) => {\n    if (typeof opt === 'function') {\n      callback = opt;\n      opt = null;\n    }\n\n    const origOpt = { ...opt };\n    opt = { ...marked.defaults, ...origOpt };\n    const throwError = onError(opt.silent, opt.async, callback);\n\n    // throw error in case of non string input\n    if (typeof src === 'undefined' || src === null) {\n      return throwError(new Error('marked(): input parameter is undefined or null'));\n    }\n    if (typeof src !== 'string') {\n      return throwError(new Error('marked(): input parameter is of type '\n        + Object.prototype.toString.call(src) + ', string expected'));\n    }\n\n    checkSanitizeDeprecation(opt);\n\n    if (opt.hooks) {\n      opt.hooks.options = opt;\n    }\n\n    if (callback) {\n      const highlight = opt.highlight;\n      let tokens;\n\n      try {\n        if (opt.hooks) {\n          src = opt.hooks.preprocess(src);\n        }\n        tokens = lexer(src, opt);\n      } catch (e) {\n        return throwError(e);\n      }\n\n      const done = function(err) {\n        let out;\n\n        if (!err) {\n          try {\n            if (opt.walkTokens) {\n              marked.walkTokens(tokens, opt.walkTokens);\n            }\n            out = parser(tokens, opt);\n            if (opt.hooks) {\n              out = opt.hooks.postprocess(out);\n            }\n          } catch (e) {\n            err = e;\n          }\n        }\n\n        opt.highlight = highlight;\n\n        return err\n          ? throwError(err)\n          : callback(null, out);\n      };\n\n      if (!highlight || highlight.length < 3) {\n        return done();\n      }\n\n      delete opt.highlight;\n\n      if (!tokens.length) return done();\n\n      let pending = 0;\n      marked.walkTokens(tokens, function(token) {\n        if (token.type === 'code') {\n          pending++;\n          setTimeout(() => {\n            highlight(token.text, token.lang, function(err, code) {\n              if (err) {\n                return done(err);\n              }\n              if (code != null && code !== token.text) {\n                token.text = code;\n                token.escaped = true;\n              }\n\n              pending--;\n              if (pending === 0) {\n                done();\n              }\n            });\n          }, 0);\n        }\n      });\n\n      if (pending === 0) {\n        done();\n      }\n\n      return;\n    }\n\n    if (opt.async) {\n      return Promise.resolve(opt.hooks ? opt.hooks.preprocess(src) : src)\n        .then(src => lexer(src, opt))\n        .then(tokens => opt.walkTokens ? Promise.all(marked.walkTokens(tokens, opt.walkTokens)).then(() => tokens) : tokens)\n        .then(tokens => parser(tokens, opt))\n        .then(html => opt.hooks ? opt.hooks.postprocess(html) : html)\n        .catch(throwError);\n    }\n\n    try {\n      if (opt.hooks) {\n        src = opt.hooks.preprocess(src);\n      }\n      const tokens = lexer(src, opt);\n      if (opt.walkTokens) {\n        marked.walkTokens(tokens, opt.walkTokens);\n      }\n      let html = parser(tokens, opt);\n      if (opt.hooks) {\n        html = opt.hooks.postprocess(html);\n      }\n      return html;\n    } catch (e) {\n      return throwError(e);\n    }\n  };\n}\n\n/**\n * Marked\n */\nfunction marked(src, opt, callback) {\n  return parseMarkdown(Lexer.lex, Parser.parse)(src, opt, callback);\n}\n\n/**\n * Options\n */\n\nmarked.options =\nmarked.setOptions = function(opt) {\n  marked.defaults = { ...marked.defaults, ...opt };\n  changeDefaults(marked.defaults);\n  return marked;\n};\n\nmarked.getDefaults = getDefaults;\n\nmarked.defaults = defaults;\n\n/**\n * Use Extension\n */\n\nmarked.use = function(...args) {\n  const extensions = marked.defaults.extensions || { renderers: {}, childTokens: {} };\n\n  args.forEach((pack) => {\n    // copy options to new object\n    const opts = { ...pack };\n\n    // set async to true if it was set to true before\n    opts.async = marked.defaults.async || opts.async || false;\n\n    // ==-- Parse \"addon\" extensions --== //\n    if (pack.extensions) {\n      pack.extensions.forEach((ext) => {\n        if (!ext.name) {\n          throw new Error('extension name required');\n        }\n        if (ext.renderer) { // Renderer extensions\n          const prevRenderer = extensions.renderers[ext.name];\n          if (prevRenderer) {\n            // Replace extension with func to run new extension but fall back if false\n            extensions.renderers[ext.name] = function(...args) {\n              let ret = ext.renderer.apply(this, args);\n              if (ret === false) {\n                ret = prevRenderer.apply(this, args);\n              }\n              return ret;\n            };\n          } else {\n            extensions.renderers[ext.name] = ext.renderer;\n          }\n        }\n        if (ext.tokenizer) { // Tokenizer Extensions\n          if (!ext.level || (ext.level !== 'block' && ext.level !== 'inline')) {\n            throw new Error(\"extension level must be 'block' or 'inline'\");\n          }\n          if (extensions[ext.level]) {\n            extensions[ext.level].unshift(ext.tokenizer);\n          } else {\n            extensions[ext.level] = [ext.tokenizer];\n          }\n          if (ext.start) { // Function to check for start of token\n            if (ext.level === 'block') {\n              if (extensions.startBlock) {\n                extensions.startBlock.push(ext.start);\n              } else {\n                extensions.startBlock = [ext.start];\n              }\n            } else if (ext.level === 'inline') {\n              if (extensions.startInline) {\n                extensions.startInline.push(ext.start);\n              } else {\n                extensions.startInline = [ext.start];\n              }\n            }\n          }\n        }\n        if (ext.childTokens) { // Child tokens to be visited by walkTokens\n          extensions.childTokens[ext.name] = ext.childTokens;\n        }\n      });\n      opts.extensions = extensions;\n    }\n\n    // ==-- Parse \"overwrite\" extensions --== //\n    if (pack.renderer) {\n      const renderer = marked.defaults.renderer || new Renderer();\n      for (const prop in pack.renderer) {\n        const prevRenderer = renderer[prop];\n        // Replace renderer with func to run extension, but fall back if false\n        renderer[prop] = (...args) => {\n          let ret = pack.renderer[prop].apply(renderer, args);\n          if (ret === false) {\n            ret = prevRenderer.apply(renderer, args);\n          }\n          return ret;\n        };\n      }\n      opts.renderer = renderer;\n    }\n    if (pack.tokenizer) {\n      const tokenizer = marked.defaults.tokenizer || new Tokenizer();\n      for (const prop in pack.tokenizer) {\n        const prevTokenizer = tokenizer[prop];\n        // Replace tokenizer with func to run extension, but fall back if false\n        tokenizer[prop] = (...args) => {\n          let ret = pack.tokenizer[prop].apply(tokenizer, args);\n          if (ret === false) {\n            ret = prevTokenizer.apply(tokenizer, args);\n          }\n          return ret;\n        };\n      }\n      opts.tokenizer = tokenizer;\n    }\n\n    // ==-- Parse Hooks extensions --== //\n    if (pack.hooks) {\n      const hooks = marked.defaults.hooks || new Hooks();\n      for (const prop in pack.hooks) {\n        const prevHook = hooks[prop];\n        if (Hooks.passThroughHooks.has(prop)) {\n          hooks[prop] = (arg) => {\n            if (marked.defaults.async) {\n              return Promise.resolve(pack.hooks[prop].call(hooks, arg)).then(ret => {\n                return prevHook.call(hooks, ret);\n              });\n            }\n\n            const ret = pack.hooks[prop].call(hooks, arg);\n            return prevHook.call(hooks, ret);\n          };\n        } else {\n          hooks[prop] = (...args) => {\n            let ret = pack.hooks[prop].apply(hooks, args);\n            if (ret === false) {\n              ret = prevHook.apply(hooks, args);\n            }\n            return ret;\n          };\n        }\n      }\n      opts.hooks = hooks;\n    }\n\n    // ==-- Parse WalkTokens extensions --== //\n    if (pack.walkTokens) {\n      const walkTokens = marked.defaults.walkTokens;\n      opts.walkTokens = function(token) {\n        let values = [];\n        values.push(pack.walkTokens.call(this, token));\n        if (walkTokens) {\n          values = values.concat(walkTokens.call(this, token));\n        }\n        return values;\n      };\n    }\n\n    marked.setOptions(opts);\n  });\n};\n\n/**\n * Run callback for every token\n */\n\nmarked.walkTokens = function(tokens, callback) {\n  let values = [];\n  for (const token of tokens) {\n    values = values.concat(callback.call(marked, token));\n    switch (token.type) {\n      case 'table': {\n        for (const cell of token.header) {\n          values = values.concat(marked.walkTokens(cell.tokens, callback));\n        }\n        for (const row of token.rows) {\n          for (const cell of row) {\n            values = values.concat(marked.walkTokens(cell.tokens, callback));\n          }\n        }\n        break;\n      }\n      case 'list': {\n        values = values.concat(marked.walkTokens(token.items, callback));\n        break;\n      }\n      default: {\n        if (marked.defaults.extensions && marked.defaults.extensions.childTokens && marked.defaults.extensions.childTokens[token.type]) { // Walk any extensions\n          marked.defaults.extensions.childTokens[token.type].forEach(function(childTokens) {\n            values = values.concat(marked.walkTokens(token[childTokens], callback));\n          });\n        } else if (token.tokens) {\n          values = values.concat(marked.walkTokens(token.tokens, callback));\n        }\n      }\n    }\n  }\n  return values;\n};\n\n/**\n * Parse Inline\n * @param {string} src\n */\nmarked.parseInline = parseMarkdown(Lexer.lexInline, Parser.parseInline);\n\n/**\n * Expose\n */\nmarked.Parser = Parser;\nmarked.parser = Parser.parse;\nmarked.Renderer = Renderer;\nmarked.TextRenderer = TextRenderer;\nmarked.Lexer = Lexer;\nmarked.lexer = Lexer.lex;\nmarked.Tokenizer = Tokenizer;\nmarked.Slugger = Slugger;\nmarked.Hooks = Hooks;\nmarked.parse = marked;\n\nconst options = marked.options;\nconst setOptions = marked.setOptions;\nconst use = marked.use;\nconst walkTokens = marked.walkTokens;\nconst parseInline = marked.parseInline;\nconst parse = marked;\nconst parser = Parser.parse;\nconst lexer = Lexer.lex;\n\nexport { Hooks, Lexer, Parser, Renderer, Slugger, TextRenderer, Tokenizer, defaults, getDefaults, lexer, marked, options, parse, parseInline, parser, setOptions, use, walkTokens };\n"],"names":["getDefaults","defaults","changeDefaults","newDefaults","escapeTest","escapeReplace","escapeTestNoEncode","escapeReplaceNoEncode","escapeReplacements","getEscapeReplacement","ch","escape","html","encode","unescapeTest","unescape","_","n","caret","edit","regex","opt","obj","name","val","nonWordAndColonTest","originIndependentUrl","cleanUrl","sanitize","base","href","prot","resolveUrl","baseUrls","justDomain","protocol","domain","rtrim","relativeBase","noopTest","splitCells","tableRow","count","row","match","offset","str","escaped","curr","cells","c","invert","l","suffLen","currChar","findClosingBracket","b","level","checkSanitizeDeprecation","repeatString","pattern","result","outputLink","cap","link","raw","lexer","title","text","token","indentCodeCompensation","matchIndentToCode","indentToCode","node","matchIndentInNode","indentInNode","Tokenizer","options","src","trimmed","top","tokens","istask","ischecked","indent","i","blankLine","endsWithBlankLine","line","nextLine","rawLine","itemContents","endEarly","bull","isordered","list","itemRegex","t","nextBulletRegex","hrRegex","fencesBeginRegex","headingBeginRegex","spacers","hasMultipleLineBreaks","tag","item","j","k","trimmedUrl","rtrimSlash","lastParenIndex","linkLen","links","maskedSrc","prevChar","nextChar","lLength","rDelim","rLength","delimTotal","midDelimTotal","endReg","hasNonSpaceChars","hasSpaceCharsOnBothEnds","mangle","prevCapZero","smartypants","block","inline","out","Lexer","rules","next","leading","tabs","lastToken","cutSrc","lastParagraphClipped","extTokenizer","startIndex","tempSrc","tempStart","getStartIndex","errMsg","keepPrevChar","Renderer","code","infostring","lang","quote","slugger","id","body","ordered","start","type","startatt","checked","header","content","flags","TextRenderer","Slugger","value","originalSlug","isDryRun","slug","occurenceAccumulator","Parser","l2","l3","cell","loose","itemBody","task","checkbox","ret","renderer","Hooks","markdown","onError","silent","async","callback","msg","parseMarkdown","parser","origOpt","marked","throwError","highlight","e","done","err","pending","args","extensions","pack","opts","ext","prevRenderer","prop","tokenizer","prevTokenizer","hooks","prevHook","arg","walkTokens","values","childTokens"],"mappings":"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","x_google_ignoreList":[0]}