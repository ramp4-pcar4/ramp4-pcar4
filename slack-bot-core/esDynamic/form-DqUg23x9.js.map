{"version":3,"file":"form-DqUg23x9.js","sources":["../../node_modules/@esri/calcite-components/dist/components/form.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/main/LICENSE.md for details.\n * v2.6.0\n */\nimport { q as queryElementRoots, c as closestElementCrossShadowBoundary } from './dom.js';\nimport { h } from '@stencil/core/internal/client/index.js';\n\n/**\n * Any form <Component> with a `calcite<Component>Input` event needs to be included in this array.\n */\nconst componentsWithInputEvent = [\n    \"calcite-input\",\n    \"calcite-input-number\",\n    \"calcite-input-text\",\n    \"calcite-text-area\",\n];\n/**\n * Get the event name to listen for that, when emitted, will clear the\n * validation message that displays after form submission. Only validation\n * messages that are set by the browser will be cleared. If a user sets\n * validationMessage to a custom value, they are responsible for clearing it.\n *\n * Exported for testing purposes.\n *\n * @param componentTag the tag of the component, e.g. \"calcite-input\"\n * @returns the event name\n */\nfunction getClearValidationEventName(componentTag) {\n    const componentTagCamelCase = componentTag\n        .split(\"-\")\n        .map((part, index) => index === 0 ? part : `${part[0].toUpperCase()}${part.slice(1)}`)\n        .join(\"\");\n    const clearValidationEvent = `${componentTagCamelCase}${componentsWithInputEvent.includes(componentTag) ? \"Input\" : \"Change\"}`;\n    return clearValidationEvent;\n}\n/**\n * Exported for testing purposes.\n */\nconst hiddenFormInputSlotName = \"hidden-form-input\";\nfunction isCheckable(component) {\n    return \"checked\" in component;\n}\nconst onFormResetMap = new WeakMap();\nconst formComponentSet = new WeakSet();\n/**\n * This helps determine if our form component is part of a composite form-associated component.\n *\n * @param form\n * @param formComponentEl\n */\nfunction hasRegisteredFormComponentParent(form, formComponentEl) {\n    // if we have a parent component using the form ID attribute, we assume it is form-associated\n    const hasParentComponentWithFormIdSet = closestElementCrossShadowBoundary(formComponentEl.parentElement, \"[form]\");\n    if (hasParentComponentWithFormIdSet) {\n        return true;\n    }\n    // we use events as a way to test for nested form-associated components across shadow bounds\n    const formComponentRegisterEventName = \"calciteInternalFormComponentRegister\";\n    let hasRegisteredFormComponentParent = false;\n    form.addEventListener(formComponentRegisterEventName, (event) => {\n        hasRegisteredFormComponentParent = event\n            .composedPath()\n            .some((element) => formComponentSet.has(element));\n        event.stopPropagation();\n    }, { once: true });\n    formComponentEl.dispatchEvent(new CustomEvent(formComponentRegisterEventName, {\n        bubbles: true,\n        composed: true,\n    }));\n    return hasRegisteredFormComponentParent;\n}\nfunction clearFormValidation(component) {\n    \"status\" in component && (component.status = \"idle\");\n    \"validationIcon\" in component && (component.validationIcon = false);\n    \"validationMessage\" in component && (component.validationMessage = \"\");\n}\nfunction setInvalidFormValidation(component, message) {\n    \"status\" in component && (component.status = \"invalid\");\n    \"validationIcon\" in component && !component.validationIcon && (component.validationIcon = true);\n    \"validationMessage\" in component &&\n        !component.validationMessage &&\n        (component.validationMessage = message);\n}\nfunction displayValidationMessage(event) {\n    // target is the hidden input, which is slotted in the actual form component\n    const hiddenInput = event?.target;\n    // not necessarily a calcite-input, but we don't have an HTMLCalciteFormElement type\n    const formComponent = hiddenInput?.parentElement;\n    const componentTag = formComponent?.nodeName?.toLowerCase();\n    const componentTagParts = componentTag?.split(\"-\");\n    if (componentTagParts.length < 2 || componentTagParts[0] !== \"calcite\") {\n        return;\n    }\n    // prevent the browser from showing the native validation popover\n    event?.preventDefault();\n    setInvalidFormValidation(formComponent, hiddenInput?.validationMessage);\n    if (formComponent?.validationMessage !== hiddenInput?.validationMessage) {\n        return;\n    }\n    const clearValidationEvent = getClearValidationEventName(componentTag);\n    formComponent.addEventListener(clearValidationEvent, () => clearFormValidation(formComponent), {\n        once: true,\n    });\n}\n/**\n * Helper to submit a form.\n *\n * @param component\n * @returns true if its associated form was submitted, false otherwise.\n */\nfunction submitForm(component) {\n    const { formEl } = component;\n    if (!formEl) {\n        return false;\n    }\n    formEl.addEventListener(\"invalid\", displayValidationMessage, true);\n    formEl.requestSubmit();\n    formEl.removeEventListener(\"invalid\", displayValidationMessage, true);\n    requestAnimationFrame(() => {\n        const invalidEls = formEl.querySelectorAll(\"[status=invalid]\");\n        // focus the first invalid element that has a validation message\n        for (const el of invalidEls) {\n            if (el?.validationMessage) {\n                el?.setFocus();\n                break;\n            }\n        }\n    });\n    return true;\n}\n/**\n * Helper to reset a form.\n *\n * @param component\n */\nfunction resetForm(component) {\n    component.formEl?.reset();\n}\n/**\n * Helper to set up form interactions on connectedCallback.\n *\n * @param component\n */\nfunction connectForm(component) {\n    const { el, value } = component;\n    const associatedForm = findAssociatedForm(component);\n    if (!associatedForm || hasRegisteredFormComponentParent(associatedForm, el)) {\n        return;\n    }\n    component.formEl = associatedForm;\n    component.defaultValue = value;\n    if (isCheckable(component)) {\n        component.defaultChecked = component.checked;\n    }\n    const boundOnFormReset = (component.onFormReset || onFormReset).bind(component);\n    associatedForm.addEventListener(\"reset\", boundOnFormReset);\n    onFormResetMap.set(component.el, boundOnFormReset);\n    formComponentSet.add(el);\n}\n/**\n * Utility method to find a form-component's associated form element.\n *\n * @param component\n */\nfunction findAssociatedForm(component) {\n    const { el, form } = component;\n    return form\n        ? queryElementRoots(el, { id: form })\n        : closestElementCrossShadowBoundary(el, \"form\");\n}\nfunction onFormReset() {\n    clearFormValidation(this);\n    if (isCheckable(this)) {\n        this.checked = this.defaultChecked;\n        return;\n    }\n    this.value = this.defaultValue;\n}\n/**\n * Helper to tear down form interactions on disconnectedCallback.\n *\n * @param component\n */\nfunction disconnectForm(component) {\n    const { el, formEl } = component;\n    if (!formEl) {\n        return;\n    }\n    const boundOnFormReset = onFormResetMap.get(el);\n    formEl.removeEventListener(\"reset\", boundOnFormReset);\n    onFormResetMap.delete(el);\n    component.formEl = null;\n    formComponentSet.delete(el);\n}\n/**\n * Helper for setting the default value on initialization after connectedCallback.\n *\n * Note that this is only needed if the default value cannot be determined on connectedCallback.\n *\n * @param component\n * @param value\n */\nfunction afterConnectDefaultValueSet(component, value) {\n    component.defaultValue = value;\n}\nconst internalHiddenInputInputEvent = \"calciteInternalHiddenInputInput\";\nconst hiddenInputInputHandler = (event) => {\n    event.target.dispatchEvent(new CustomEvent(internalHiddenInputInputEvent, { bubbles: true }));\n};\nconst removeHiddenInputChangeEventListener = (input) => input.removeEventListener(\"input\", hiddenInputInputHandler);\n/**\n * Helper for maintaining a form-associated's hidden input in sync with the component.\n *\n * Based on Ionic's approach: https://github.com/ionic-team/ionic-framework/blob/e4bf052794af9aac07f887013b9250d2a045eba3/core/src/utils/helpers.ts#L198\n *\n * @param component\n */\nfunction syncHiddenFormInput(component) {\n    const { el, formEl, name, value } = component;\n    const { ownerDocument } = el;\n    const inputs = el.querySelectorAll(`input[slot=\"${hiddenFormInputSlotName}\"]`);\n    if (!formEl || !name) {\n        inputs.forEach((input) => {\n            removeHiddenInputChangeEventListener(input);\n            input.remove();\n        });\n        return;\n    }\n    const values = Array.isArray(value) ? value : [value];\n    const extra = [];\n    const seen = new Set();\n    inputs.forEach((input) => {\n        const valueMatch = values.find((val) => \n        /* intentional non-strict equality check */\n        val == input.value);\n        if (valueMatch != null) {\n            seen.add(valueMatch);\n            defaultSyncHiddenFormInput(component, input, valueMatch);\n        }\n        else {\n            extra.push(input);\n        }\n    });\n    let docFrag;\n    values.forEach((value) => {\n        if (seen.has(value)) {\n            return;\n        }\n        let input = extra.pop();\n        if (!input) {\n            input = ownerDocument.createElement(\"input\");\n            input.slot = hiddenFormInputSlotName;\n        }\n        if (!docFrag) {\n            docFrag = ownerDocument.createDocumentFragment();\n        }\n        docFrag.append(input);\n        // emits when hidden input is autofilled\n        input.addEventListener(\"input\", hiddenInputInputHandler);\n        defaultSyncHiddenFormInput(component, input, value);\n    });\n    if (docFrag) {\n        el.append(docFrag);\n    }\n    extra.forEach((input) => {\n        removeHiddenInputChangeEventListener(input);\n        input.remove();\n    });\n}\nfunction defaultSyncHiddenFormInput(component, input, value) {\n    const { defaultValue, disabled, form, name, required } = component;\n    // keep in sync to prevent losing reset value\n    input.defaultValue = defaultValue;\n    input.disabled = disabled;\n    input.name = name;\n    input.required = required;\n    input.tabIndex = -1;\n    // we set the attr as the prop is read-only\n    if (form) {\n        input.setAttribute(\"form\", form);\n    }\n    else {\n        input.removeAttribute(\"form\");\n    }\n    if (isCheckable(component)) {\n        input.checked = component.checked;\n        // keep in sync to prevent losing reset value\n        input.defaultChecked = component.defaultChecked;\n        // heuristic to support default/on mode from https://html.spec.whatwg.org/multipage/input.html#dom-input-value-default-on\n        input.value = component.checked ? value || \"on\" : \"\";\n    }\n    else {\n        input.value = value || \"\";\n    }\n    component.syncHiddenFormInput?.(input);\n}\n/**\n * Helper to render the slot for form-associated component's hidden input.\n *\n * If the component has a default slot, this must be placed at the bottom of the component's root container to ensure it is the last child.\n *\n * render(): VNode {\n *   <Host>\n *     <div class={CSS.container}>\n *     // ...\n *     <HiddenFormInputSlot component={this} />\n *     </div>\n *   </Host>\n * }\n *\n * Note that the hidden-form-input Sass mixin must be added to the component's style to apply specific styles.\n *\n * @param root0\n * @param root0.component\n */\nconst HiddenFormInputSlot = ({ component, }) => {\n    syncHiddenFormInput(component);\n    return h(\"slot\", { name: hiddenFormInputSlotName });\n};\n\nexport { HiddenFormInputSlot as H, afterConnectDefaultValueSet as a, connectForm as c, disconnectForm as d, findAssociatedForm as f, internalHiddenInputInputEvent as i, resetForm as r, submitForm as s };\n\n//# sourceMappingURL=form.js.map"],"names":["componentsWithInputEvent","getClearValidationEventName","componentTag","part","index","hiddenFormInputSlotName","isCheckable","component","onFormResetMap","formComponentSet","hasRegisteredFormComponentParent","form","formComponentEl","closestElementCrossShadowBoundary","formComponentRegisterEventName","event","element","clearFormValidation","setInvalidFormValidation","message","displayValidationMessage","hiddenInput","formComponent","componentTagParts","clearValidationEvent","submitForm","formEl","invalidEls","el","resetForm","connectForm","value","associatedForm","findAssociatedForm","boundOnFormReset","onFormReset","queryElementRoots","disconnectForm","internalHiddenInputInputEvent","hiddenInputInputHandler","removeHiddenInputChangeEventListener","input","syncHiddenFormInput","name","ownerDocument","inputs","values","extra","seen","valueMatch","val","defaultSyncHiddenFormInput","docFrag","defaultValue","disabled","required","HiddenFormInputSlot","h"],"mappings":"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","x_google_ignoreList":[0]}