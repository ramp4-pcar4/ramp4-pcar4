{"version":3,"file":"index-Bf_D00Xk.js","sources":["../../src/geo/map/overview-map.ts","../../src/fixtures/overviewmap/api/overviewmap.ts","../../src/fixtures/overviewmap/overviewmap.vue","../../src/fixtures/overviewmap/lang/lang.csv?raw","../../src/fixtures/overviewmap/index.ts"],"sourcesContent":["import { markRaw } from 'vue';\nimport { Basemap, CommonMapAPI, GraphicLayer, InstanceAPI } from '@/api/internal';\nimport { Graphic, LayerType, PolygonStyle } from '@/geo/api';\nimport type { Extent, RampMapConfig } from '@/geo/api';\nimport { EsriMapView } from '@/geo/esri';\nimport { useConfigStore } from '@/stores/config';\nimport { useOverviewmapStore } from '@/fixtures/overviewmap/store';\n\nexport class OverviewMapAPI extends CommonMapAPI {\n    protected overviewGraphicLayer: GraphicLayer;\n    overviewmapStore: any;\n\n    /**\n     * @constructor\n     * @param {InstanceAPI} iApi the RAMP instance\n     */\n    constructor(iApi: InstanceAPI) {\n        super(iApi);\n        this.overviewGraphicLayer = this.$iApi.geo.layer.createLayer({\n            id: 'RampOverviewGraphic',\n            layerType: LayerType.GRAPHIC,\n            url: '',\n            cosmetic: true\n        }) as GraphicLayer;\n        this.overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\n    }\n\n    /**\n     * Will generate a ESRI map view and add it to the page\n     * Must provide the basemap or basemap id to be used when creating the map view\n     *\n     * @param {string | Basemap} basemap the id of the basemap that should be used when creating the map view\n     * @protected\n     */\n    protected createMapView(basemap: string | Basemap): void {\n        if (!basemap) {\n            throw new Error('Attempted to create overview map view without a basemap');\n        }\n\n        const bm: Basemap = typeof basemap === 'string' ? this.findBasemap(basemap) : basemap;\n\n        this.applyBasemap(bm);\n\n        // TODO: This assumes that the overview map will be synced with the main map's tile schema, so it just uses the extent/sr from the main map\n        //       Revisit this when enhancing the overview map to be able to use a different tile schema than the main map\n        this._rampExtentSet = this.$iApi.geo.map.getExtentSet().clone();\n        this._rampSR = this._rampExtentSet.sr.clone();\n\n        const expandFactor: number = this.overviewmapStore.expandFactor;\n\n        // create esri view with config\n        this.esriView = markRaw(\n            new EsriMapView({\n                map: this.esriMap,\n                container: this._targetDiv,\n                constraints: {\n                    rotationEnabled: false\n                },\n                spatialReference: this._rampSR.toESRI(),\n                extent: this.$iApi.geo.map.getExtent().toESRI().expand(expandFactor) // use the expanded main map extent\n            })\n        );\n\n        // Remove all ui components\n        this.esriView.ui.components = [];\n\n        this.handlers.push({\n            type: 'mouse-wheel',\n            handler: this.esriView.on('mouse-wheel', esriMouseWheel => {\n                esriMouseWheel.stopPropagation();\n            })\n        });\n\n        this.handlers.push({\n            type: 'double-click',\n            handler: this.esriView.on('double-click', esriDoubleClick => {\n                esriDoubleClick.stopPropagation();\n            })\n        });\n\n        this.handlers.push({\n            type: 'key-down',\n            handler: this.esriView.on('key-down', esriKeyDown => {\n                esriKeyDown.stopPropagation();\n            })\n        });\n\n        this.handlers.push({\n            type: 'key-up',\n            handler: this.esriView.on('key-up', esriKeyUp => {\n                esriKeyUp.stopPropagation();\n            })\n        });\n\n        this.handlers.push({\n            type: 'drag',\n            handler: this.esriView.on('drag', esriDrag => {\n                esriDrag.stopPropagation();\n                this.mapDrag(esriDrag);\n            })\n        });\n\n        this.esriView.container.addEventListener('touchmove', e => {\n            // need this for panning and zooming to work on mobile devices / touchscreens\n            // touchmove stops the drag event (what the MapView reacts to) from firing properly\n            e.preventDefault();\n        });\n\n        // most browsers have a webgl context limit of 16 (one instance of RAMP can use 2 - map and overview map).\n        // once the number of contexts is higher than the limit, the oldest context will be lost.\n        // when instance is visible on screen, if its overview context is lost then recover it.\n        this.esriView.watch('fatalError', () => {\n            const observer = new IntersectionObserver(entries => {\n                entries.forEach(entry => {\n                    if (entry.isIntersecting) {\n                        this.esriView?.tryFatalErrorRecovery();\n                        observer.disconnect();\n                    }\n                });\n            });\n            observer.observe(this.esriView!.container);\n        });\n\n        // as of ESRI v4.26, we need to marinate until .when() is done.\n        // otherwise, something happens too fast and the initial calls to view.goTo() grouse quite a lot,\n        // and ends up breaking the overview.\n        this.esriView.when(() => {\n            this._viewPromise.resolveMe();\n            this.created = true;\n        });\n    }\n\n    async addMapGraphicLayer() {\n        if (!this.esriMap) {\n            this.noMapErr();\n            return;\n        }\n\n        const overviewGraphic = new Graphic(this.$iApi.geo.map.getExtent(), 'overview-graphic');\n\n        const borderColour = this.overviewmapStore.borderColour ?? '#FF0000';\n        const borderWidth = this.overviewmapStore.borderWidth ?? 1;\n        const areaColour = this.overviewmapStore.areaColour ?? '#000000';\n        const areaOpacity = this.overviewmapStore.areaOpacity ?? 0.25;\n\n        // generate hex colour with alpha\n        const areaFill = `${areaColour}${Math.round(areaOpacity * 255).toString(16)}`;\n\n        overviewGraphic.style = new PolygonStyle({\n            fill: { colour: areaFill },\n            outline: {\n                colour: borderColour,\n                width: borderWidth\n            }\n        });\n\n        await this.overviewGraphicLayer.initiate();\n        await this.overviewGraphicLayer.addGraphic(overviewGraphic);\n        this.esriMap?.add(this.overviewGraphicLayer.esriLayer!);\n    }\n\n    async removeMapGraphicLayer() {\n        if (!this.esriMap) {\n            this.noMapErr();\n            return;\n        }\n\n        if (!this.overviewGraphicLayer.esriLayer) {\n            throw new Error(\n                'Attempted to remove layer from the map without an esri layer. Likely layer.initiate() was not called or had not finished.'\n            );\n        }\n\n        this.overviewGraphicLayer.removeGraphic();\n        this.esriMap.remove(this.overviewGraphicLayer.esriLayer);\n\n        // This removes the reference to .esriLayer so must happen after the esriMap.remove()\n        await this.overviewGraphicLayer.terminate();\n    }\n\n    /**\n     * Destroys the ESRI map view\n     *\n     * @protected\n     */\n    protected destroyMapView(): void {\n        // override the method to remove this listener\n        this.esriView?.container.removeEventListener('touchmove', e => {\n            e.preventDefault();\n        });\n        super.destroyMapView();\n    }\n\n    /**\n     * Searches the local basemap list and main map basemaps for a basemap with the given id\n     * Throws error if basemap could not be found\n     *\n     * @param {string} id basemap id\n     * @returns {Basemap} the found basemap\n     * @protected\n     */\n    findBasemap(id: string): Basemap {\n        const bm: Basemap | undefined = this._basemapStore.find(bms => bms.id === id);\n        if (bm) {\n            return bm;\n        } else {\n            // search the basemaps in the main map config\n            const configStore = useConfigStore(this.$vApp.$pinia);\n            const mainMapConfig: RampMapConfig = configStore.config.map;\n            if (mainMapConfig) {\n                const bmConfig = mainMapConfig.basemaps.find(bm => bm.id === id);\n                if (bmConfig) {\n                    return new Basemap(bmConfig);\n                }\n            }\n        }\n\n        throw new Error(`Invalid basemap id requested: ${id}`);\n    }\n\n    /**\n     * Sets the overview map's basemap to the basemap with the given id.\n     * Will refresh the map view if set basemap uses different tile schema.\n     *\n     * Should only be called by the overview map component\n     *\n     * @param {string} basemapId the basemap id\n     * @returns {boolean} indicates if the schema has changed\n     */\n    setBasemap(basemapId: string): boolean {\n        if (!this.esriView || !this.esriMap) {\n            this.noMapErr();\n            return false;\n        }\n\n        const bm: Basemap = this.findBasemap(basemapId);\n\n        // get the current basemap\n        const currBm: Basemap | undefined = this.getCurrentBasemapId()\n            ? this.findBasemap(this.getCurrentBasemapId()!)\n            : undefined;\n\n        const differentSchema: boolean = currBm?.tileSchemaId !== bm.tileSchemaId;\n\n        if (differentSchema) {\n            this.destroyMapView();\n            this.createMapView(bm);\n        } else {\n            this.applyBasemap(bm);\n        }\n\n        return differentSchema;\n    }\n\n    /**\n     * Initial esri extent of graphic during drag\n     *\n     * @private\n     */\n    private startExtent: __esri.Extent | null = null;\n\n    /**\n     * Moves graphic and zooms main map if extent graphic is dragged\n     *\n     * @param {__esri.ViewDragEvent} esriDrag\n     * @private\n     */\n    private async mapDrag(esriDrag: __esri.ViewDragEvent) {\n        if (esriDrag.native.pointerType === 'mouse') {\n            if (esriDrag.action === 'start') {\n                // check if drag hits graphic, if so set start extent\n                if (await this.cursorHitTest(esriDrag)) {\n                    this.startExtent = markRaw(\n                        this.overviewGraphicLayer.getEsriGraphic('overview-graphic')!.geometry\n                    ) as __esri.Extent;\n                }\n            } else if (this.startExtent) {\n                // determine delta in map coords from drag origin to current drag point and update extent graphic\n                const origin = this.esriView!.toMap(esriDrag.origin);\n                const pos = this.esriView!.toMap({\n                    x: esriDrag.x,\n                    y: esriDrag.y\n                });\n                const newExtent = this.startExtent.clone().offset(pos.x - origin.x, pos.y - origin.y, 0);\n                this.overviewGraphicLayer.getEsriGraphic('overview-graphic')!.geometry = newExtent;\n\n                if (esriDrag.action === 'end') {\n                    // zoom main map once drag is done\n                    this.$iApi.geo.map.zoomMapTo(this.$iApi.geo.geom.geomEsriToRamp(newExtent), undefined, false);\n                    this.startExtent = null;\n                }\n            }\n        }\n    }\n\n    /**\n     * Updates overviewmap extent and graphic based on main map extent\n     *\n     * @param {Extent} newExtent new main map extent\n     * @returns {Promise<void>} A promise that resolves when the overviewmap has finished updating\n     */\n    updateOverview(newExtent: Extent): Promise<void> {\n        const expandFactor: number = this.overviewmapStore.expandFactor;\n\n        const zoomPromise = this.zoomMapTo(newExtent.expand(expandFactor), undefined, false);\n\n        const graphic = this.overviewGraphicLayer.getLocalGraphic('overview-graphic');\n\n        // Instead of directly changing graphic geometry, we need to remove graphic, change geometry, and re add graphic.\n        // This is because of a glitch where changing the geometry directly sometimes causes multiple indicator rectangles\n        // to appear in the overview map (https://github.com/ramp4-pcar4/ramp4-pcar4/issues/1493).\n        // We suspect that this is an ESRI bug, and are implementing this hack as a workaround for now.\n        this.overviewGraphicLayer.removeGraphic(graphic);\n        graphic!.geometry = newExtent;\n        this.overviewGraphicLayer.addGraphic(graphic!);\n\n        return zoomPromise;\n    }\n\n    /**\n     * Checks if mouse event intersects with extent graphic\n     *\n     * @param {MouseEvent} e\n     * @returns {Promise<boolean>}\n     */\n    async cursorHitTest(e: MouseEvent | __esri.MapViewScreenPoint): Promise<boolean> {\n        const hitTestResult = await this.esriView!.hitTest(e);\n        return hitTestResult.results.length > 0;\n    }\n}\n","import { FixtureInstance } from '@/api';\nimport { useOverviewmapStore } from '../store';\nimport type { OverviewmapConfig } from '../store';\n\nexport class OverviewmapAPI extends FixtureInstance {\n    /**\n     * Parses the overview map config JSON snippet from the config file and save to the fixture store.\n     *\n     * @param {OverviewmapConfig} [OverviewmapConfig]\n     * @memberof OverviewmapAPI\n     */\n    _parseConfig(overviewmapConfig?: OverviewmapConfig) {\n        const overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\n\n        overviewmapStore.basemaps = overviewmapConfig?.basemaps || {};\n        overviewmapStore.mapConfig.basemaps = overviewmapConfig ? Object.values(overviewmapConfig.basemaps) : [];\n        overviewmapStore.startMinimized = overviewmapConfig?.startMinimized ?? true;\n        overviewmapStore.expandFactor = overviewmapConfig?.expandFactor ?? 1.5;\n        overviewmapStore.borderColour = overviewmapConfig?.borderColour ?? '#FF0000';\n        overviewmapStore.borderWidth = overviewmapConfig?.borderWidth ?? 1;\n        overviewmapStore.areaColour = overviewmapConfig?.areaColour ?? '#000000';\n        overviewmapStore.areaOpacity = overviewmapConfig?.areaOpacity ?? 0.25;\n    }\n\n    get config(): OverviewmapConfig {\n        return super.config;\n    }\n}\n","<template>\n    <div class=\"relative\" ref=\"el\">\n        <div\n            :style=\"mapStyle()\"\n            class=\"pointer-events-auto absolute top-0 right-0 mt-12 mr-12 shadow-tm border-4 border-solid border-white bg-white transition-all duration-300 ease-out\"\n        >\n            <!-- map -->\n            <div class=\"relative h-full w-full overflow-hidden\">\n                <div\n                    class=\"overviewmap absolute top-0 right-0 h-192 w-192\"\n                    :class=\"{ 'cursor-move': hoverOnExtent }\"\n                    @mousemove=\"cursorHitTest\"\n                ></div>\n            </div>\n            <!-- toggle -->\n            <div class=\"absolute h-30 w-30 top-0 right-0\">\n                <button\n                    type=\"button\"\n                    tabindex=\"0\"\n                    class=\"cursor-pointer absolute h-full w-full\"\n                    @click=\"minimized = !minimized\"\n                    :content=\"t(minimized ? 'overviewmap.expand' : 'overviewmap.minimize')\"\n                    :aria-label=\"t(minimized ? 'overviewmap.expand' : 'overviewmap.minimize')\"\n                    v-tippy=\"{ placement: 'left', hideOnClick: false }\"\n                >\n                    <svg\n                        class=\"absolute fill-current text-gray-500 transition-all duration-300 ease-out\"\n                        :style=\"toggleStyle()\"\n                        xmlns=\"http://www.w3.org/2000/svg\"\n                        fit=\"\"\n                        height=\"100%\"\n                        width=\"100%\"\n                        preserveAspectRatio=\"xMidYMid meet\"\n                        viewBox=\"0 0 24 24\"\n                        focusable=\"false\"\n                    >\n                        <g id=\"apple-keyboard-control\">\n                            <path\n                                d=\"M 19.7782,11.7782L 18.364,13.1924L 12,6.82843L 5.63604,13.1924L 4.22183,11.7782L 12,4L 19.7782,11.7782 Z \"\n                            ></path>\n                        </g>\n                    </svg>\n                </button>\n            </div>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject, onBeforeUnmount, onMounted, reactive, ref } from 'vue';\n\nimport type { BasemapChange, Extent, RampBasemapConfig } from '@/geo/api';\nimport { GlobalEvents, InstanceAPI, OverviewMapAPI } from '@/api/internal';\nimport { useOverviewmapStore } from './store';\nimport { debounce } from 'throttle-debounce';\nimport { useI18n } from 'vue-i18n';\nimport { useConfigStore } from '@/stores/config';\n\nconst overviewmapStore = useOverviewmapStore();\nconst { t } = useI18n();\nconst iApi = inject('iApi') as InstanceAPI;\nconst configStore = useConfigStore();\nconst el = ref();\n\nconst activeBasemap = computed<RampBasemapConfig>(() => configStore.activeBasemapConfig as RampBasemapConfig);\nconst mapConfig = computed(() => overviewmapStore.mapConfig);\nconst basemaps = computed(() => overviewmapStore.basemaps as { [key: string]: RampBasemapConfig });\nconst startMinimized = computed(() => overviewmapStore.startMinimized);\nlet overviewMap = reactive(new OverviewMapAPI(iApi));\nconst minimized = ref(true);\nconst hoverOnExtent = ref(false);\nconst handlers = reactive<Array<string>>([]);\n\nonMounted(() => {\n    iApi.geo.map.viewPromise.then(async () => {\n        _adaptBasemap();\n        overviewMap.createMap(mapConfig.value!, el.value.querySelector('.overviewmap') as HTMLDivElement);\n\n        await overviewMap.viewPromise;\n\n        await overviewMap.addMapGraphicLayer();\n\n        minimized.value = startMinimized.value!;\n\n        // update the overview map with the current map extent\n        let updatePromise = overviewMap.updateOverview(iApi.geo.map.getExtent());\n        // update the overview map whenever the extent changes\n        handlers.push(\n            iApi.event.on(\n                GlobalEvents.MAP_EXTENTCHANGE,\n                debounce(100, (newExtent: Extent) => {\n                    updatePromise.then(() => {\n                        overviewMap.updateOverview(newExtent);\n                    });\n                })\n            )\n        );\n\n        // adapt the overview map's basemap whenever the main map is created\n        handlers.push(\n            iApi.event.on(GlobalEvents.MAP_CREATED, () => {\n                _adaptBasemap();\n            })\n        );\n\n        // adapt the overview map's basemap whenever the main map refreshes\n        handlers.push(\n            iApi.event.on(GlobalEvents.MAP_REFRESH_END, () => {\n                _adaptBasemap();\n            })\n        );\n\n        // adapt the overview map's basemap when the main map's basemap changes\n        // note that this handler is for the same schema basemap change case where the overview map is using the main map's basemap\n        handlers.push(\n            iApi.event.on(GlobalEvents.MAP_BASEMAPCHANGE, async (payload: BasemapChange) => {\n                if (!payload.schemaChanged && overviewMap.created) {\n                    if (activeBasemap.value && basemaps.value[activeBasemap.value.tileSchemaId] === undefined) {\n                        await overviewMap.removeMapGraphicLayer();\n                        overviewMap.setBasemap(payload.basemapId);\n                        await overviewMap.addMapGraphicLayer();\n                    }\n                }\n            })\n        );\n    });\n});\n\nonBeforeUnmount(() => {\n    // Remove all event handlers for this component\n    handlers.forEach(handler => iApi.event.off(handler));\n\n    overviewMap.destroyMap();\n});\n\nconst cursorHitTest = async (e: MouseEvent) => {\n    hoverOnExtent.value = !minimized.value && (await overviewMap.cursorHitTest(e));\n};\n\nconst mapStyle = () => {\n    return {\n        height: `${minimized.value ? 48 : 200}px`,\n        width: `${minimized.value ? 48 : 200}px`\n    };\n};\n\nconst toggleStyle = () => {\n    return {\n        top: `${minimized.value ? -6 : -3}px`,\n        right: `${minimized.value ? -6 : -3}px`,\n        transform: `rotate(${minimized.value ? 225 : 45}deg)`\n    };\n};\n\n/**\n * Adapts the overview map's basemap (and projection) to match that of the main map.\n * Will run when the overview map is being set up for the first time, and then whenever the main map refreshes.\n *\n * When looking for a suitable basemap to use, this method will first check the overview map config for any\n * provided basemaps that has a matching tile schema with the main map's basemap.\n *\n * If no suitable basemap could be found, it will use the same basemap as the main map.\n */\nconst _adaptBasemap = () => {\n    // try to find a suitable basemap\n\n    if (!activeBasemap.value) {\n        console.error('Overview Map could not obtain the basemap config used by the main map');\n        return;\n    }\n\n    try {\n        const tileSchemaId: string | undefined = activeBasemap.value?.tileSchemaId;\n\n        if (!tileSchemaId) {\n            throw new Error('Overview Map could not obtain the tile schema of the main map');\n        }\n\n        // find a basemap in this tile schema\n        const basemap = basemaps.value[tileSchemaId];\n\n        if (!basemap) {\n            throw new Error(\n                'Overview Map could not find a suitable basemap that matches the tile schema of the main map'\n            );\n        }\n\n        // override the intial basemap id in the overview map config\n        if (!overviewMap.created) {\n            overviewmapStore.updateInitialBasemap(basemap.id);\n        }\n\n        // set the basemap if the map has been created\n        if (overviewMap.created) {\n            overviewMap.viewPromise.then(() => overviewMap.setBasemap(basemap.id));\n        }\n    } catch (err) {\n        // if we errored above, just use the main map's basemap\n\n        // do we want this warning? will throw on every map refresh if no basemaps have been provided in the config (which is valid)\n        //   JR: no, as it made me investigate what the problem was. If we want to put a warning for an error that is not the\n        //       hardcoded one thrown above, we should compare the error text and only console if different. Can also shorten the\n        //       above to a unique key of sorts, since it wont be visibile to eyes.\n        // console.warn(`${err}. Will default to the main map's basemap.`);\n\n        // override the intial basemap id in the overview map config\n        if (!overviewMap.created) {\n            overviewmapStore.updateInitialBasemap(activeBasemap.value.id);\n        }\n\n        // set the basemap once the map loads\n        overviewMap.viewPromise.then(() => overviewMap.setBasemap(activeBasemap.value.id));\n    }\n};\n</script>\n\n<style lang=\"scss\" scoped>\n.overviewmap::before {\n    @apply absolute w-0 h-0 top-0 right-0 border-solid;\n    border-width: 0 40px 40px 0;\n    border-color: transparent #eee transparent transparent;\n    content: '';\n}\n</style>\n","export default \"key,enValue,enValid,frValue,frValid\\noverviewmap.expand,Expand Overview,1,Développer l'aperçu,1\\noverviewmap.minimize,Minimize Overview,1,Réduire l'aperçu,1\"","import { OverviewmapAPI } from './api/overviewmap';\nimport { type OverviewmapConfig, useOverviewmapStore } from './store/index';\nimport OverviewmapV from './overviewmap.vue';\nimport messages from './lang/lang.csv?raw';\n\nclass OverviewmapFixture extends OverviewmapAPI {\n    added() {\n        // console.log(`[fixture] ${this.id} added`);\n\n        Object.entries(messages).forEach(value => (<any>this.$iApi.$i18n).mergeLocaleMessage(...value));\n\n        this._parseConfig(this.config);\n        const unwatch = this.$vApp.$watch(\n            () => this.config,\n            (value: OverviewmapConfig | undefined) => this._parseConfig(value)\n        );\n\n        const { destroy, el } = this.mount(OverviewmapV, {\n            app: this.$element\n        });\n        const innerShell = this.$vApp.$el.getElementsByClassName('inner-shell')[0];\n        innerShell.appendChild(el.childNodes[0]);\n\n        // override the removed method here to get access to scope\n        this.removed = () => {\n            // console.log(`[fixture] ${this.id} removed`);\n            unwatch();\n            destroy();\n\n            const overviewmapStore = useOverviewmapStore(this.$vApp.$pinia);\n            overviewmapStore.$reset();\n        };\n    }\n}\n\nexport default OverviewmapFixture;\n"],"names":["OverviewMapAPI","CommonMapAPI","iApi","LayerType","useOverviewmapStore","basemap","bm","expandFactor","markRaw","EsriMapView","esriMouseWheel","esriDoubleClick","esriKeyDown","esriKeyUp","esriDrag","e","observer","entries","entry","overviewGraphic","Graphic","borderColour","borderWidth","areaColour","areaOpacity","areaFill","PolygonStyle","id","bms","mainMapConfig","useConfigStore","bmConfig","Basemap","basemapId","differentSchema","origin","pos","newExtent","zoomPromise","graphic","OverviewmapAPI","FixtureInstance","overviewmapConfig","overviewmapStore","t","useI18n","inject","configStore","el","ref","activeBasemap","computed","mapConfig","basemaps","startMinimized","overviewMap","reactive","minimized","hoverOnExtent","handlers","onMounted","_adaptBasemap","updatePromise","GlobalEvents","debounce","payload","onBeforeUnmount","handler","cursorHitTest","mapStyle","toggleStyle","tileSchemaId","messages","OverviewmapFixture","value","unwatch","destroy","OverviewmapV"],"mappings":"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"}