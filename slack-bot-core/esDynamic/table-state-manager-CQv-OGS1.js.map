{"version":3,"file":"table-state-manager-CQv-OGS1.js","sources":["../../src/fixtures/grid/store/column-state-manager.ts","../../src/fixtures/grid/store/table-state-manager.ts"],"sourcesContent":["/**\n * State manager for columns in datagrid.\n */\nexport default class ColumnStateManager {\n    constructor(columnConfig: any) {\n        this.columnConfig = columnConfig;\n        this._field = columnConfig?.field;\n        this._title = columnConfig?.title;\n        this._visible = columnConfig.visible ?? true;\n        this._width = columnConfig?.width;\n        this._sort = columnConfig.sort ?? 'none';\n        this._searchable = columnConfig.searchable ?? true;\n        this._filter = {\n            type: columnConfig?.filter?.type ?? 'string',\n            value: columnConfig?.filter?.value ?? '',\n            min: columnConfig?.filter?.min ?? null,\n            max: columnConfig?.filter?.max ?? null,\n            static: columnConfig?.filter?.static ?? false\n        };\n        this._template = columnConfig.template ?? '';\n    }\n\n    /**\n     * Returns the field of the column.\n     *\n     * @memberof ColumnStateManager\n     */\n    get field() {\n        return this._field;\n    }\n\n    /**\n     * Returns the title of the column.\n     *\n     * @memberof ColumnStateManager\n     */\n    get title() {\n        return this._title;\n    }\n\n    /**\n     * Sets the title of the column.\n     *\n     * @memberof ColumnStateManager\n     */\n    set title(val) {\n        this._title = val;\n    }\n\n    /**\n     * Returns whether column is visible.\n     *\n     * @memberof ColumnStateManager\n     */\n    get visible() {\n        return this._visible;\n    }\n\n    /**\n     * Sets column visibility.\n     *\n     * @memberof ColumnStateManager\n     */\n    set visible(val) {\n        this._visible = val;\n    }\n\n    /**\n     * Returns the column width.\n     *\n     * @memberof ColumnStateManager\n     */\n    get width() {\n        return this._width;\n    }\n\n    /**\n     * Sets the column width.\n     *\n     * @memberof ColumnStateManager\n     */\n    set width(val) {\n        this._width = val;\n    }\n\n    /**\n     * Returns whether the column is sorted.\n     *\n     * @memberof ColumnStateManager\n     */\n    get sort() {\n        return this._sort;\n    }\n\n    /**\n     * Sets the column to be sorted.\n     *\n     * @memberof ColumnStateManager\n     */\n    set sort(val) {\n        this._sort = val;\n    }\n\n    /**\n     * Returns whether the column search is currently enabled.\n     *\n     * @memberof ColumnStateManager\n     */\n    get searchable() {\n        return this._searchable;\n    }\n\n    /**\n     * Sets the column search to enabled or disabled.\n     *\n     * @memberof ColumnStateManager\n     */\n    set searchable(val) {\n        this._searchable = val;\n    }\n\n    /**\n     * Returns the filter configuration of the column.\n     *\n     * @memberof ColumnStateManager\n     */\n    get filter() {\n        return this._filter;\n    }\n\n    /**\n     * Sets the filter configuration of the column.\n     *\n     * @memberof ColumnStateManager\n     */\n    set filter(val) {\n        this._filter = val;\n    }\n\n    /**\n     * Sets the vue template of the column\n     * @memberof ColumnStateManager\n     */\n    set template(val: string) {\n        this._template = val;\n    }\n\n    get template(): string {\n        return this._template;\n    }\n}\n\nexport default interface ColumnStateManager {\n    columnConfig: any;\n    _field: string;\n    _title: string;\n    _visible: boolean;\n    _width: number;\n    _sort: string;\n    _searchable: boolean;\n    _filter: any;\n    _template: string;\n}\n","import ColumnStateManager from '../store/column-state-manager';\nimport type { ActionButtonDefinition, TableStateOptions } from './grid-state';\n\n/**\n * Saves relevant enhancedTable states so that it can be reset on reload/reopen. A PanelStateManager is linked to a BaseLayer.\n * setters are called each time enhancedTable states are updated, getters are called each time enhancedTable is reloaded/reopened.\n * States to save and reset:\n *      - displayed rows (on symbology and layer visibility updates)\n *      - column filters\n *      - whether table maximized is in maximized or split view\n */\nexport default class TableStateManager {\n    constructor(options?: TableStateOptions) {\n        this.state = options ?? {};\n        this._title = options?.title ?? '';\n        this._showFilter = options?.showFilter ?? true;\n        this._filterByExtent = options?.filterByExtent ?? false;\n        this._columns = {};\n        this._open = true;\n        this._filtered = true;\n        this._search = options?.search ?? true;\n        this._searchFilter = options?.searchFilter ?? '';\n        this._applyToMap = options?.applyToMap ?? false;\n        this._controls = options?.controls ?? ['zoom', 'details'];\n\n        this.parsecolumns();\n    }\n\n    /**\n     * Parses any given configurations of columns.\n     *\n     * @memberof TableStateManager\n     */\n    parsecolumns() {\n        if (this.state.columns) {\n            this.state.columns.forEach((columnConfig: any) => {\n                this._columns[columnConfig.field] = new ColumnStateManager(columnConfig);\n            });\n        }\n    }\n\n    /**\n     * Returns the stored filter value for the given column field.\n     *\n     * @param {*} colDefField\n     * @param {string} range\n     * @returns {string | number}\n     * @memberof TableStateManager\n     */\n    getColumnFilterValue(colDefField: any, range?: string): string | number {\n        const filter = this._columns[colDefField].filter;\n        if (range === 'min') {\n            return filter.min;\n        } else if (range === 'max') {\n            return filter.max;\n        } else {\n            return filter.value;\n        }\n    }\n\n    /**\n     * Saves the current value of the filter for the given column field.\n     *\n     * @param {*} colDefField\n     * @param {(string | number)} filterValue\n     * @param {string} range\n     * @memberof TableStateManager\n     */\n    setColumnFilterValue(colDefField: any, filterValue: string | number, range?: string) {\n        let newFilterValue = filterValue;\n        if (filterValue && typeof filterValue === 'string') {\n            const escRegex = /[(!\"#$%&'+,.\\\\/:;<=>?@[\\]^`{|}~)]/g;\n            newFilterValue = filterValue.replace(escRegex, '\\\\$&');\n        }\n\n        if (range === 'min') {\n            this._columns[colDefField].filter.min = newFilterValue;\n        } else if (range === 'max') {\n            this._columns[colDefField].filter.max = newFilterValue;\n        } else {\n            this._columns[colDefField].filter.value = newFilterValue;\n        }\n\n        if (this._columns[colDefField].filter.value !== '') {\n            this._filtered = true;\n        } else {\n            this._checkFilters();\n        }\n    }\n\n    /**\n     * Clears all saved filters.\n     *\n     * @memberof TableStateManager\n     */\n    clearFilters() {\n        Object.entries(this._columns).forEach(([, config]) => {\n            if (!config.filter.static) {\n                config.filter.min = null;\n                config.filter.max = null;\n                config.filter.value = '';\n            }\n        });\n        this._filterByExtent = false;\n        this._filtered = false;\n        this._searchFilter = '';\n    }\n\n    _checkFilters() {\n        this._filtered = Object.values(this._columns).some(config => {\n            return config.filter.value !== '' || config.filter.min || config.filter.max;\n        });\n    }\n\n    get filtered() {\n        return this._filtered;\n    }\n\n    /**\n     * Returns the title of the datatable.\n     *\n     * @memberof TableStateManager\n     */\n    get title() {\n        return this._title;\n    }\n\n    /**\n     * Sets the title of the datatable.\n     *\n     * @memberof TableStateManager\n     */\n    set title(val) {\n        this._title = val;\n    }\n\n    /**\n     * Returns whether column filters are enabled for the table.\n     *\n     * @memberof TableStateManager\n     */\n    get colFilter() {\n        return this._showFilter;\n    }\n\n    /**\n     * Sets column filters to on or off.\n     *\n     * @memberof TableStateManager\n     */\n    set colFilter(val) {\n        this._showFilter = val;\n    }\n\n    /**\n     * Returns whether the grid is filtering by map extent.\n     *\n     * @memberof TableStateManager\n     */\n    get filterByExtent() {\n        return this._filterByExtent;\n    }\n\n    /**\n     * Sets the extent filter to on or off.\n     *\n     * @memberof TableStateManager\n     */\n    set filterByExtent(val) {\n        this._filterByExtent = val;\n    }\n\n    /**\n     * Returns whether the grid is currently open.\n     *\n     * @memberof TableStateManager\n     */\n    get open() {\n        return this._open;\n    }\n\n    /**\n     * Sets the grid status to open or closed.\n     *\n     * @memberof TableStateManager\n     */\n    set open(val) {\n        this._open = val;\n    }\n\n    /**\n     * Returns whether the global search is currently enabled.\n     *\n     * @memberof TableStateManager\n     */\n    get search() {\n        return this._search;\n    }\n\n    /**\n     * Sets the global search to enabled or disabled.\n     *\n     * @memberof TableStateManager\n     */\n    set search(val) {\n        this._search = val;\n    }\n\n    /**\n     * Returns the value of the global search.\n     *\n     * @memberof TableStateManager\n     */\n    get searchFilter() {\n        return this._searchFilter;\n    }\n\n    /**\n     * Sets the value of the global search.\n     *\n     * @memberof TableStateManager\n     */\n    set searchFilter(val) {\n        this._searchFilter = val;\n    }\n\n    /**\n     * Returns whether grid filters should apply to the map.\n     *\n     * @memberof TableStateManager\n     */\n    get applyToMap() {\n        return this._applyToMap;\n    }\n\n    /**\n     * Sets the grid to enable or disable filtering results on the map.\n     *\n     * @memberof TableStateManager\n     */\n    set applyToMap(val) {\n        this._applyToMap = val;\n    }\n\n    /**\n     * Returns an array of column configs.\n     *\n     * @memberof TableStateManager\n     */\n    get columns() {\n        return this._columns;\n    }\n\n    /**\n     * Sets column configs\n     *\n     * @memberof TableStateManager\n     */\n    set columns(val) {\n        this._columns = val;\n    }\n\n    /**\n     * Returns an array of grid action buttons.\n     *\n     * @memberof TableStateManager\n     */\n    get controls() {\n        return this._controls;\n    }\n}\n\nexport default interface TableStateManager {\n    state: any;\n    _title: string;\n    _showFilter: boolean;\n    _filterByExtent: boolean;\n    _open: boolean;\n    _columns: { [field: string]: ColumnStateManager };\n    _filtered: boolean;\n    _search: boolean;\n    _searchFilter: string;\n    _applyToMap: boolean;\n    _controls: (string | ActionButtonDefinition)[];\n}\n"],"names":["ColumnStateManager","columnConfig","val","TableStateManager","options","colDefField","range","filter","filterValue","newFilterValue","escRegex","config"],"mappings":"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"}