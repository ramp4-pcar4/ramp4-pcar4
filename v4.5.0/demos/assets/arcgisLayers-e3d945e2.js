import { _ as __vitePreload } from './preload-helper-a4975f27.js';
import { C as d$1, t, c as s, Z as h, r as r$1, _ as qt, L, $ as a$1 } from './main-5658cd6e.js';
import { t as t$1, r } from './fetchService-6c0072b8.js';
import { a } from './lazyLayerLoader-944c55cd.js';

const y={FeatureLayer:!0,SceneLayer:!0};async function m(e){const r=e.properties?.customParameters,a=await d(e.url,r),t={...e.properties,url:e.url};if(!a.sublayerIds)return null!=a.layerOrTableId&&(t.layerId=a.layerOrTableId,t.sourceJSON=a.sourceJSON),new a.Constructor(t);const s=new((await __vitePreload(() => import('./GroupLayer-c42e00f3.js'),true?["./GroupLayer-c42e00f3.js","./main-5658cd6e.js","./preload-helper-a4975f27.js","./main-2af48127.css","./lazyLayerLoader-944c55cd.js"]:void 0,import.meta.url)).default)({title:a.parsedUrl.title});return f(s,a,t),s}function p(e,r){return e?e.find((e=>e.id===r)):null}function f(e,r,t){function s(e,s){const l={...t,layerId:e,sublayerTitleMode:"service-name"};return r$1(s)&&(l.sourceJSON=s),new r.Constructor(l)}r.sublayerIds.forEach((a=>{const t=s(a,p(r.sublayerInfos,a));e.add(t);})),r.tableIds.forEach((a=>{const t=s(a,p(r.tableInfos,a));e.tables.add(t);}));}async function d(a,t$2){let s$1=d$1(a);if(t(s$1)&&(s$1=await I(a,t$2)),t(s$1))throw new s("arcgis-layers:url-mismatch","The url '${url}' is not a valid arcgis resource",{url:a});const{serverType:o,sublayer:n}=s$1;let c;const m={FeatureServer:"FeatureLayer",StreamServer:"StreamLayer",VectorTileServer:"VectorTileLayer"};switch(o){case"MapServer":if(null!=n)c="FeatureLayer";else {c=await v(a,t$2)?"TileLayer":"MapImageLayer";}break;case"ImageServer":{const e=await t$1(a,{customParameters:t$2}),{tileInfo:r,cacheType:s}=e;c=r?"LERC"!==r?.format?.toUpperCase()||s&&"elevation"!==s.toLowerCase()?"ImageryTileLayer":"ElevationLayer":"ImageryLayer";break}case"SceneServer":{const e=await t$1(s$1.url.path,{customParameters:t$2});if(c="SceneLayer",e){const r=e?.layers;if("Voxel"===e?.layerType)c="VoxelLayer";else if(r?.length){const e=r[0]?.layerType;null!=e&&null!=a$1[e]&&(c=a$1[e]);}}break}default:c=m[o];}const p="FeatureServer"===o,f={parsedUrl:s$1,Constructor:null,layerOrTableId:p?n:void 0,sublayerIds:null,tableIds:null};if(y[c]&&null==n){const e=await S(a,o,t$2);p&&(f.sublayerInfos=e.layerInfos,f.tableInfos=e.tableInfos);1!==e.layerIds.length+e.tableIds.length?(f.sublayerIds=e.layerIds,f.tableIds=e.tableIds):p&&(f.layerOrTableId=e.layerIds[0]??e.tableIds[0],f.sourceJSON=e.layerInfos?.[0]??e.tableInfos?.[0]);}return f.Constructor=await w(c),f}async function I(e,r){const l=await t$1(e,{customParameters:r});let n=null,u=null;const c=l.type;if("Feature Layer"===c||"Table"===c?(n="FeatureServer",u=l.id??null):"indexedVector"===c?n="VectorTileServer":l.hasOwnProperty("mapName")?n="MapServer":l.hasOwnProperty("bandCount")&&l.hasOwnProperty("pixelSizeX")?n="ImageServer":l.hasOwnProperty("maxRecordCount")&&l.hasOwnProperty("allowGeometryUpdates")?n="FeatureServer":l.hasOwnProperty("streamUrls")?n="StreamServer":b(l)?(n="SceneServer",u=l.id):l.hasOwnProperty("layers")&&b(l.layers?.[0])&&(n="SceneServer"),!n)return null;const y=null!=u?h(e):null;return {title:r$1(y)&&l.name||qt(e),serverType:n,sublayer:u,url:{path:r$1(y)?y.serviceUrl:L(e).path}}}function b(e){return null!=e&&e.hasOwnProperty("store")&&e.hasOwnProperty("id")&&"number"==typeof e.id}async function S(e,r$1,a){let t,s=!1;if("FeatureServer"===r$1){const r$1=await r(e,{customParameters:a});s=!!r$1.layersJSON,t=r$1.layersJSON||r$1.serviceJSON;}else t=await t$1(e,{customParameters:a});const l=t?.layers,o=t?.tables;return {layerIds:l?.map((e=>e.id)).reverse()||[],tableIds:o?.map((e=>e.id)).reverse()||[],layerInfos:s?l:[],tableInfos:s?o:[]}}async function w(e){return (0, a[e])()}async function v(e,r){return (await t$1(e,{customParameters:r})).tileInfo}

export { m as fromUrl };
