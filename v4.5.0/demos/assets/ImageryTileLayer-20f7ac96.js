import { je as m$1, f7 as j$1, r as r$1, lI as S$1, p as s$1, c as s, jJ as v$1, bh as w$3, lJ as g, w as w$4, t as t$2, b as e$1, db as b$1, d7 as S$2, U as U$1, lK as y, K as c$3, fK as p$1, lL as n$3, dc as F$1, dd as D$1, de as m$2, kj as v$2, lM as f$2, lN as a$1, lO as s$2, lP as u$2, lQ as p$2, e as e$2, y as y$1, dQ as f$3, k as a$2, dA as l$1, lR as c$4, lS as w$5, f as f$4, lT as l$2, d6 as d$3, df as f$5, lU as h$2, lV as m$4, lW as d$4, lX as $$2, lY as S$3, ab as R, lZ as v$3, l_ as V$1, l$ as L, m0 as j$2, d8 as T$1, m1 as n$4, m2 as r$2, m3 as u$3, bb as x$2, da as R$1, d9 as p$3, E as E$2, m4 as g$1, m5 as j$3, h as has, m6 as a$3, l7 as n$5, hB as i$2, L as L$1, l8 as z$1, m7 as S$4, m8 as m$6, d5 as m$7, m9 as r$3, ma as v$4, mb as N, mc as U$2, md as R$2, me as n$6, mf as B, mg as L$2, mh as D$2, dF as n$7, dJ as t$3, dH as c$6, dI as _$1, fO as o$1, fR as a$4, ga as p$4, dG as p$5, dK as O$1, dL as w$6, ee as y$2, mi as c$7, fU as p$6, bp as l$3, ge as T$2, dz as o$2, mj as o$3, dP as c$8, bw as k$1, mk as d$5, dN as o$4, a4 as b$2 } from './main-5658cd6e.js';
import { a, x as x$1, h as h$1, d as d$2, m as m$3 } from './RawBlockCache-bb17f2af.js';
import { T, U, j, o as oe, n as ne, Q as Q$1, J, $ as $$1, V, C as C$1 } from './rasterProjectionHelper-37018e9e.js';
import { C as C$2, f as f$6, i as i$1, m as m$5, c as c$5, h as h$3 } from './utils-924d992b.js';
import './preload-helper-a4975f27.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const $=8,X=256;let K=class extends(m$1(l$1)){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"};}async init(){const e=T();this.addResolvingPromise(e),await this.when();}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:j$1.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=U(e.spatialReference);return r$1(t)&&e.extent.width>=t/2}set url(e){this._set("url",S$1(e,s$1.getLogger(this.declaredClass)));}async open(e){throw new s("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,o={}){const r=o.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],o)}async identify(e,t={}){e=v$1(w$3,e).clone().normalize();const{multidimensionalDefinition:i,timeExtent:o}=t,{rasterInfo:r}=this,{hasMultidimensionalTranspose:l,multidimensionalInfo:c}=r;let{transposedVariableName:m}=t;const f=r$1(c)&&l&&(null!=o||g(i));if(f&&!m){m=r$1(i)&&i.length>0?i[0].variableName??void 0:c.variables[0].name,t={...t,transposedVariableName:m};}t=this._getRequestOptionsWithSliceId(t);const{spatialReference:u,extent:p}=r,{datumTransformation:d}=t;let x=j(e,u,d);if(!p.intersects(x))return {location:x,value:null};if(r$1(r.transform)){const e=r.transform.inverseTransform(x);if(!r.nativeExtent.intersects(e))return {location:e,value:null};x=e;}let y=0;const g$1=r$1(m)&&r$1(c)&&r.hasMultidimensionalTranspose;if("Function"===this.datasetFormat){const e=this.primaryRasters.rasters[0];if(g$1)return e.identify(x,t);const{pixelSize:i}=r,o=3,a=i.x*o/2,l=i.y*o/2,c=new w$4({xmin:x.x-a,xmax:x.x+a,ymin:x.y-l,ymax:x.y+l,spatialReference:u}),m={interpolation:"nearest"},{pixelBlock:f}=await e.fetchPixels(c,o,o,m),{pixelBlock:h}=await this.fetchPixels(c,o,o,m);if(t$2(f))return {location:x,value:null};const p=Math.floor(o*o*.5),d=!f.mask||f.mask[p]?f.pixels.map((e=>e[p])):null;let y;return r$1(h)&&(y=!h.mask||h.mask[p]?h.pixels.map((e=>e[p])):void 0),{location:x,value:d,processedValue:y,pyramidLevel:0}}if(!g$1)if(t.srcResolution){y=oe(t.srcResolution,r,this.ioConfig.sampling).pyramidLevel;}else if(y=await this.computeBestPyramidLevelForLocation(e,t),null==y)return {location:x,value:null};const I=this.identifyPixelLocation(x,y,null,g$1);if(null===I)return {location:x,value:null};const{row:w,col:k,rowOffset:S,colOffset:B,blockWidth:P}=I,M=m??e$1(t.sliceId),W=a(this.url,M),_=`${y}/${w}/${k}`;let C=x$1(W,null,_);t$2(C)&&(C=this.fetchRawTile(y,w,k,t),h$1(W,null,_,C));const j$1=await C;if(t$2(j$1)||!j$1.pixels?.length)return {location:x,value:null};const H=S*P+B;return this._processIdentifyResult(j$1,{srcLocation:x,position:H,pyramidLevel:y,useTransposedTile:!!g$1,requestSomeSlices:f,identifyOptions:t})}async fetchPixels(e,t,i,o={}){if(e=ne(e),(o=this._getRequestOptionsWithSliceId(o)).requestRawData)return this._fetchPixels(e,t,i,o);const r=U(e.spatialReference),n=Q$1(e);if(t$2(r)||0===n||1===n&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,o);if(n>=3)return {extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:c}=e,m=Math.round(r/(c-l)*t),f=m-Math.round((r/2-l)/(c-l)*t);let h=0;const u=[];for(let s=0;s<=n;s++){const p=new w$4({xmin:0===s?l:-r/2,xmax:s===n?c-r*s:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),d=0===s?m-f:s===n?t-h:m;h+=d,u.push(d);const x=o.disableWrapAround&&s>0?null:this._fetchPixels(p,d,i,o);a.push(x);}const p=(await Promise.all(a)).map((e=>e?.pixelBlock));let d=null;const x={width:t,height:i};if(this.rasterJobHandler){d=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:p,srcMosaicSize:x,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:u},o)).pixelBlock;}else d=b$1(p,x,{blockWidths:u});return {extent:e,srcExtent:J(e,this.rasterInfo.spatialReference,o.datumTransformation),pixelBlock:d}}async fetchRawPixels(e,t,i,o={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,o),{nativeExtent:s,nativePixelSize:a,storageInfo:l}=this.rasterInfo,c=2**e,m=a.x*c,f=a.y*c,h=new w$4({xmin:s.xmin+m*t.x,xmax:s.xmin+m*(t.x+i.width-1),ymin:s.ymax-f*(t.y+i.height-1),ymax:s.ymax-f*t.y,spatialReference:s.spatialReference});if(!r)return {extent:h,srcExtent:h,pixelBlock:null};const{pixelBlocks:u,mosaicSize:p}=r;if(1===u.length&&r$1(u[0])&&u[0].width===i.width&&u[0].height===i.height)return {extent:h,srcExtent:h,pixelBlock:r.pixelBlocks[0]};const d=e>0?l.pyramidBlockWidth:l.blockWidth,x=e>0?l.pyramidBlockHeight:l.blockHeight,y={x:t.x%d,y:t.y%x};let g;if(this.rasterJobHandler){g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:u,srcMosaicSize:p,destDimension:i,clipOffset:y,clipSize:i,coefs:null,sampleSpacing:null,interpolation:o.interpolation,alignmentInfo:null,blockWidths:null},o)).pixelBlock;}else g=b$1(u,p,{clipOffset:y,clipSize:i});return {extent:h,srcExtent:h,pixelBlock:g}}fetchRawTile(e,t,o,r){throw new s("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return J(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return !this.rasterJobHandler||t.useCanvas?S$2(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,i,o=0){const{customFetchParameters:r}=this.ioConfig,{range:n,query:s,headers:a}=i;o=o??i.retryCount??this.ioConfig.retryCount;const l=n?{Range:`bytes=${n.from}-${n.to}`}:null;try{return await U$1(e,{...i,query:{...s,...r},headers:{...a,...l}})}catch(c){if(o>0)return o--,this.request(e,i,o);throw c}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return t$2(t)||t$2(e)||0===e.length?null:y(e,t)}getTileExtentFromTileInfo(e,t,i,o){const r=c$3(o.lodAt(e));return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,o.origin,o.spatialReference,o.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:o}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let s=Math.max(o.x,o.y),a=1/.0254*96*s;for(let e=0;e<=n;e++)r.push(new p$1({level:n-e,resolution:s,scale:a})),s*=2,a*=2;const l=new w$3({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new j$1({origin:l,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0;}}createRemoteDatasetStorageInfo(e,t=512,i=512,o){const{width:r,height:n,nativeExtent:s,pixelSize:a,spatialReference:l}=e,c=new w$3({x:s.xmin,y:s.ymax,spatialReference:l});null==o&&(o=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const m=this.computeBlockBoundary(s,512,512,{x:s.xmin,y:s.ymax},[a],o);e.storageInfo=new n$3({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:o,blockBoundary:m});}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,o,r,n=0,s=2){if(1===r.length&&n>0){r=[...r];let{x:e,y:t}=r[0];for(let i=0;i<n;i++)e*=s,t*=s,r.push({x:e,y:t});}const a=[],{x:l,y:c}=o;for(let m=0;m<r.length;m++){const{x:o,y:n}=r[m];a.push({minCol:Math.floor((e.xmin-l+.1*o)/t/o),maxCol:Math.floor((e.xmax-l-.1*o)/t/o),minRow:Math.floor((c-e.ymax+.1*n)/i/n),maxRow:Math.floor((c-e.ymin-.1*n)/i/n)});}return a}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:o}=this.rasterInfo.storageInfo;if(0===e)return t;if(r$1(i)&&i.length)return i[e-1];const r=o**e;return {x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,o){const{spatialReference:r,nativeExtent:s,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:c,transposeInfo:m}=a,f=o&&r$1(m)?m.tileSize[0]:a.blockWidth,h=o&&r$1(m)?m.tileSize[1]:a.blockHeight,u=j(e,r,i);if(!s.intersects(u))return null;if(t<0||t>l)return null;const p=this.getPyramidPixelSize(t),{x:d,y:x}=p,y=(c.y-u.y)/x/h,g=(u.x-c.x)/d/f,I=Math.min(h-1,Math.floor((y-Math.floor(y))*h)),R=Math.min(f-1,Math.floor((g-Math.floor(g))*f));return {pyramidLevel:t,row:Math.floor(y),col:Math.floor(g),rowOffset:I,colOffset:R,blockWidth:f,srcLocation:u}}getTileExtent(e,t,i,o,r,n){const[s,a]=n,l=o.x+i*s*e.x,c=l+s*e.x,m=o.y-t*a*e.y,f=m-a*e.y;return new w$4({xmin:l,xmax:c,ymin:f,ymax:m,spatialReference:r})}getBlockWidthHeight(e){return {blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const o=this.rasterInfo.storageInfo.blockBoundary[e];return !o||o.maxRow<t||o.maxCol<i||o.minRow>t||o.minCol>i}async _fetchPixels(e,t,i,o={}){let r=Q$1(e);if(r>=2)return {extent:e,pixelBlock:null};const s=this._getSourceDataInfo(e,t,i,o),{pyramidLevel:l,pyramidResolution:c,srcResolution:m,srcExtent:f,srcWidth:h,srcHeight:u}=s;if(0===h||0===u)return {extent:e,srcExtent:f,pixelBlock:null};const p=e$1(this.rasterInfo.transform),d="gcs-shift"===p?.type,x=r$1(U(e.spatialReference));!d&&x||(r=Q$1(s.srcExtent,d));const y=this.rasterInfo.storageInfo,g={x:Math.floor((f.xmin-y.origin.x)/c.x+.1),y:Math.floor((y.origin.y-f.ymax)/c.y+.1)},I=await this._fetchRawTiles(l,g,{width:h,height:u,wrapCount:r},o);if(!I)return {extent:e,srcExtent:f,pixelBlock:null};const R=l>0?y.pyramidBlockWidth:y.blockWidth,w=l>0?y.pyramidBlockHeight:y.blockHeight,k=R===h&&w===u&&g.x%R==0&&g.y%w==0,S=new w$3({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),v=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:T$1}=o;if(!v&&k&&1===I.pixelBlocks.length&&R===t&&w===i&&m.x===S.x&&m.y===S.y)return {extent:e,srcExtent:f,pixelBlock:I.pixelBlocks[0]};const b=x&&r$1(U(f.spatialReference)),B=o.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");B&&!this.rasterJobHandler&&await T();const P=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:S.toJSON(),datumTransformation:T$1,rasterTransform:p,hasWrapAround:r>0||b,isAdaptive:!1!==this.ioConfig.optimizeProjectionAccuracy,includeGCSGrid:B},o):$$1({projectedExtent:e,srcBufferExtent:I.extent,pixelSize:S,datumTransformation:T$1,rasterTransform:p,hasWrapAround:r>0||b,isAdaptive:!1,includeGCSGrid:B});let M;const W=!o.requestRawData,E={rows:P.spacing[0],cols:P.spacing[1]},D=e$1(this._getRasterTileAlignmentInfo(l,I.extent.xmin)),{pixelBlocks:z,mosaicSize:F,isPartiallyFilled:O}=I;let G=null;if(this.rasterJobHandler){const e=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:z,srcMosaicSize:F,destDimension:W?{width:t,height:i}:null,coefs:W?P.coefficients:null,sampleSpacing:W?E:null,projectDirections:B,gcsGrid:B?P.gcsGrid:null,isUV:"vector-uv"===this.rasterInfo.dataType,interpolation:o.interpolation,alignmentInfo:D,blockWidths:null},o);({pixelBlock:M,localNorthDirections:G}=e);}else {const e=b$1(z,F,{alignmentInfo:D});M=W?F$1(e,{width:t,height:i},P.coefficients,E,o.interpolation):e,B&&P.gcsGrid&&(G=D$1({width:t,height:i},P.gcsGrid),M=m$2(M,this.rasterInfo.dataType,G));}return o.requestRawData||B?{srcExtent:f,pixelBlock:M,transformGrid:P,localNorthDirections:G,extent:e,isPartiallyFilled:O}:{srcExtent:f,extent:e,pixelBlock:M}}async _fetchRawTiles(e,t,i,o){const{origin:r,blockBoundary:s}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:c,y:m}=t,{width:f,height:h,wrapCount:u}=i;const p=this._getRasterTileAlignmentInfo(e,0);o.buffer&&(c-=o.buffer.cols,m-=o.buffer.rows,f+=2*o.buffer.cols,h+=2*o.buffer.rows);let d=0,x=0,y=0;if(u&&r$1(p)){({worldColumnCountFromOrigin:x,originColumnOffset:y,rightPadding:d}=p);x*p.blockWidth-d>=c+f&&(d=0);}const g=Math.floor(c/a),I=Math.floor(m/l),R=Math.floor((c+f+d-1)/a),w=Math.floor((m+h+d-1)/l),k=s[e];if(!k)return null;const{minRow:S,minCol:v,maxCol:T,maxRow:b}=k;if(0===u&&(w<S||R<v||I>b||g>T))return null;const B=new Array;let P=!1;const M=null==this.ioConfig.allowPartialFill?o.allowPartialFill:this.ioConfig.allowPartialFill;for(let E=I;E<=w;E++)for(let t=g;t<=R;t++){let i=t;if(!o.disableWrapAround&&u&&r$1(p)&&x<=t&&(i=t-x-y),E>=S&&i>=v&&b>=E&&T>=i){const t=this._fetchRawTile(e,E,i,o);M?B.push(new Promise((e=>{t.then((t=>e(t))).catch((()=>{P=!0,e(null);}));}))):B.push(t);}else B.push(Promise.resolve(null));}if(0===B.length)return null;const W=await Promise.all(B),_={height:(w-I+1)*l,width:(R-g+1)*a},{spatialReference:C}=this.rasterInfo,j=this.getPyramidPixelSize(e),{x:H,y:L}=j;return {extent:new w$4({xmin:r.x+g*a*H,xmax:r.x+(R+1)*a*H,ymin:r.y-(w+1)*l*L,ymax:r.y-I*l*L,spatialReference:C}),pixelBlocks:W,mosaicSize:_,isPartiallyFilled:P}}_fetchRawTile(e,t,i,o){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a$1,maxCol:l,maxRow:c}=r;if(t<n||i<a$1||t>c||i>l)return Promise.resolve(null);const f=a(this.url,o.sliceId),h=`${e}/${t}/${i}`;let u=x$1(f,o.registryId,h);if(t$2(u)){const r=new AbortController;u=this.fetchRawTile(e,t,i,{...o,signal:r.signal}),h$1(f,o.registryId,h,u,r),u.catch((()=>d$2(f,o.registryId,h)));}return o.signal&&v$2(o,(()=>{m$3(f,o.registryId,h);})),u}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if(!(2===t&&"vector-magdir"===i||"vector-uv"===i)||2!==e?.length||!e[0]?.length)return null;const o=e[0].length;if("vector-magdir"===i){const t=e[1].map((e=>(e+360)%360));return [e[0],t]}const[r,n]=e,s=[],a=[];for(let l=0;l<o;l++){const[e,t]=f$2([r[l],n[l]]);s.push(e),a.push(t);}return [s,a]}_getRasterTileAlignmentInfo(e,t){return null==this._rasterTileAlighmentInfo&&(this._rasterTileAlighmentInfo=V(this.rasterInfo)),t$2(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,o={}){const r={datumTransformation:o.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};o.srcResolution&&(r.srcResolution=o.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:s,srcHeight:a,pyramidLevel:l}=r,c=s/t,m=a/i,f=l<n&&c*m>=16,h=l===n&&this._requireTooManySrcTiles(s,a,t,i);if(f||h||(0===s||0===a)){const s=new w$3({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let a=C$1(s,this.rasterInfo.spatialReference,e,r.datumTransformation);const h=!a||o.srcResolution&&a.x+a.y<o.srcResolution.x+o.srcResolution.y;if(f&&o.srcResolution&&h){const e=Math.round(Math.log(Math.max(c,m))/Math.LN2)-1;if(n-l+3>=e){const t=2**e;a={x:o.srcResolution.x*t,y:o.srcResolution.y*t};}}a&&(r.srcResolution=a,this._updateSourceDataInfo(e,r));}return this._requireTooManySrcTiles(r.srcWidth,r.srcHeight,t,i)&&(r.srcWidth=0,r.srcHeight=0),r}_requireTooManySrcTiles(e,t,i,o){const{tileInfo:r}=this.rasterInfo.storageInfo;return Math.ceil(e/r.size[0])*Math.ceil(t/r.size[1])>=X||e/i>$||t/o>$}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:o,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:s,excessiveReading:l}=oe(o,this.rasterInfo,this.ioConfig.sampling);if(l)return;let c=t.srcExtent||J(e,i,r);if(null==c)return;const m=e$1(this.rasterInfo.transform);m&&(c=m.inverseTransform(c)),t.srcExtent=c;const f=Math.ceil((c.xmax-c.xmin)/s.x-.1),h=Math.ceil((c.ymax-c.ymin)/s.y-.1);t.pyramidLevel=n,t.pyramidResolution=s,t.srcWidth=f,t.srcHeight=h;}_getRequestOptionsWithSliceId(e){return r$1(this.rasterInfo.multidimensionalInfo)&&null==e.sliceId&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:o,pyramidLevel:r,useTransposedTile:l}=t,c=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[o]))return {location:i,value:null};const{multidimensionalInfo:m}=this.rasterInfo;if(t$2(m)||!l){const t=e.pixels.map((e=>e[o])),n={location:i,value:t,pyramidLevel:r},s=this._computeMagDirValues(t.map((e=>[e])));return s?.length&&(n.magdirValue=s.map((e=>e[0]))),n}let f=e.pixels.map((e=>e.slice(o*c,o*c+c))),h=this._computeMagDirValues(f);const{requestSomeSlices:u,identifyOptions:p}=t;let d=a$1(m,p.transposedVariableName);if(u){const e=s$2(d,e$1(p.multidimensionalDefinition),e$1(p.timeExtent));f=f.map((t=>e.map((e=>t[e])))),h=h?.map((t=>e.map((e=>t[e])))),d=e.map((e=>d[e]));}const y=e.noDataValues||this.rasterInfo.noDataValue,g={pixels:f,pixelType:e.pixelType};let I;r$1(y)&&(u$2(g,y),I=g.mask);return {location:i,value:null,dataSeries:d.map(((e,t)=>{const i={value:0===I?.[t]?null:f.map((e=>e[t])),multidimensionalDefinition:e.multidimensionalDefinition.map((e=>new p$2({...e,isSlice:!0})))};return h?.length&&(i.magdirValue=[h[0][t],h[1][t]]),i})),pyramidLevel:r}}};e$2([y$1()],K.prototype,"_rasterTileAlighmentInfo",void 0),e$2([y$1({readOnly:!0})],K.prototype,"_isGlobalWrappableSource",null),e$2([y$1(f$3)],K.prototype,"url",null),e$2([y$1({type:String,json:{write:!0}})],K.prototype,"datasetName",void 0),e$2([y$1({type:String,json:{write:!0}})],K.prototype,"datasetFormat",void 0),e$2([y$1()],K.prototype,"hasUniqueSourceStorageInfo",void 0),e$2([y$1()],K.prototype,"rasterInfo",void 0),e$2([y$1()],K.prototype,"ioConfig",void 0),e$2([y$1()],K.prototype,"sourceJSON",void 0),K=e$2([a$2("esri.layers.support.rasterDatasets.BaseRaster")],K);const Q=K;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
let n$2=class n extends Q{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null;}async open(r){await this.init();const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:this.primaryRasters=e.getPrimaryRasters();const{rasters:s$1,rasterIds:a}=this.primaryRasters,o=s$1.map((t=>t.rasterInfo?void 0:t.open(r)));await Promise.all(o);const i=s$1.map((({rasterInfo:r})=>r)),n=e.bind({rasterInfos:i,rasterIds:a});if(!n.success||0===i.length)throw new s("raster-function:open",`cannot bind the function: ${n.error??""}`);await this.syncJobHandler();const c=i[0];this.hasUniqueSourceStorageInfo=1===i.length||i.slice(1).every((r=>this._hasSameStorageInfo(r,c))),this.set("sourceJSON",s$1[0].sourceJSON),this.set("rasterInfo",e.rasterInfo);}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async fetchPixels(r,t,a,o={}){const{rasters:i,rasterIds:n}=this.primaryRasters,c=i.map((e=>e.fetchPixels(r,t,a,o))),p=await Promise.all(c),l=p.map((r=>r.pixelBlock));if(o.skipRasterFunction||l.every((r=>t$2(r))))return p[0];const m=p.find((r=>r$1(r.pixelBlock)))?.extent??r,u=this.rasterJobHandler?await this.rasterJobHandler.process({extent:m,primaryPixelBlocks:l,primaryRasterIds:n}):this.rasterFunction.process({extent:m,primaryPixelBlocks:l,primaryRasterIds:n});return {...p[0],pixelBlock:u}}_hasSameStorageInfo(r,t){const{storageInfo:e,pixelSize:s,spatialReference:a,extent:o}=r,{storageInfo:i,pixelSize:n,spatialReference:c,extent:p}=t;return s.x===n.x&&s.y===n.y&&a.equals(c)&&o.equals(p)&&e.blockHeight===i.blockHeight&&e.blockWidth===i.blockWidth&&e.maximumPyramidLevel===i.maximumPyramidLevel}};e$2([y$1({type:String,json:{write:!0}})],n$2.prototype,"datasetFormat",void 0),e$2([y$1()],n$2.prototype,"tileType",void 0),e$2([y$1()],n$2.prototype,"rasterFunction",void 0),e$2([y$1()],n$2.prototype,"primaryRasters",void 0),n$2=e$2([a$2("esri.layers.support.rasterDatasets.FunctionRaster")],n$2);const c$2=n$2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const O=s$1.getLogger("esri.layers.mixins.ImageryTileMixin"),z=s$1=>{let z=class extends s$1{constructor(...t){super(...t),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation="nearest",this.multidimensionalSubset=null,this.raster=null,this.rasterFunction=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster="Function"===t[0]?.raster?.datasetFormat;}get fullExtent(){return this.rasterInfo?.extent}set multidimensionalDefinition(t){this._set("multidimensionalDefinition",t),this.updateRenderer();}get tileInfo(){return this.rasterInfo?.storageInfo.tileInfo}set url(t){this._set("url",S$1(t,O));}set renderer(t){this._set("renderer",t),this.updateRenderer();}async convertVectorFieldData(t,e){if(t$2(t)||!this.rasterInfo)return null;const r=this._rasterJobHandler.instance,i=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:t,dataType:i},e):d$3(t,i)}async createFlowMesh(t,e){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(t,e):f$5(t.meshType,t.simulationSettings,t.flowData,r$1(e.signal)?e.signal:(new AbortController).signal)}normalizeRasterFetchOptions(t){const{multidimensionalInfo:e}=this.rasterInfo??{};if(t$2(e))return t;let r=t.multidimensionalDefinition||this.multidimensionalDefinition;!t$2(r)&&r.length||(r=h$2(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const i=t.timeExtent||this.timeExtent;if(r$1(r)&&r$1(i)&&(r$1(i.start)||r$1(i.end))){r=r.map((t=>t.clone()));const s=e.variables.find((({name:t})=>t===r[0].variableName))?.dimensions?.find((({name:t})=>"StdTime"===t)),a=r.find((({dimensionName:t})=>"StdTime"===t));if(!s||!a)return {...t,multidimensionalDefinition:null};const{start:l,end:u}=i,m=t$2(l)?null:l.getTime(),d=t$2(u)?null:u.getTime(),c=m??d,h=d??m;if(r$1(s.values)){const t=s.values.filter((t=>{if(Array.isArray(t)){if(c===h)return t[0]<=c&&t[1]>=c;const e=t[0]<=c&&t[1]>c||t[0]<h&&t[1]>=h,r=t[0]>=c&&t[1]<=h||t[0]<c&&t[1]>h;return e||r}return c===h?t===c:t>=c&&t<=h}));if(t.length){const e=t.sort(((t,e)=>{if(c===h)return (t[0]??t)-(e[0]??e);return Math.abs((t[1]??t)-h)-Math.abs((e[1]??e)-h)}))[0];a.values=[e];}else r=null;}else if(s.hasRegularIntervals&&s.extent){const[t,e]=s.extent;c>e||h<t?r=null:a.values=c===h?[c]:[Math.max(t,c),Math.min(e,h)];}}return r$1(r)&&m$4(r,this.multidimensionalSubset)?{...t,multidimensionalDefinition:null}:{...t,multidimensionalDefinition:r}}async updateRasterFunction(){if("imagery-tile"!==this.type||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&"Function"===this.raster.datasetFormat){const t=this.raster.rasterFunction.toJSON();return !this.rasterFunction&&t&&this._set("rasterFunction",w$5.fromJSON(t)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let t,e=this.raster,r=!1;"Function"===e.datasetFormat?(t=e.primaryRasters.rasters,e=t[0],r=!0):t=[e];const{rasterFunction:i}=this;if(i){const r={raster:e};t.length>1&&t.forEach((t=>r[t.url]=t));const s=C$2(i.rasterFunctionDefinition??i.toJSON(),r),n=new c$2({rasterFunction:s});n.rasterJobHandler=this._rasterJobHandler.instance,await n.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=n;}else this.raster=e,this._cachedRasterFunctionJson=null;if(this._cachedRendererJson=null,!r&&!i)return;const{bandIds:s}=this,{bandCount:n}=this.raster.rasterInfo,o=s?.length?s.some((t=>t>=n)):n>=3;s&&(o||"raster-stretch"!==this.renderer.type)&&this._set("bandIds",null),this._configDefaultRenderer("auto");}async updateRenderer(){const{loaded:t,symbolizer:e}=this;if(!t||!e)return;const{rasterInfo:r}=this.raster,i=d$4(r,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset})?.name,s=$$2({...this.renderer.toJSON(),variableName:i});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(s))return;const n=this._rasterJobHandler.instance;n&&(e.rasterInfo=S$3(r,i),e.rendererJSON=s,e.bind(),await n.updateSymbolizer(e),this._cachedRendererJson=s);}async applyRenderer(t,e){const r=t&&t.pixelBlock;if(!(r$1(r)&&r.pixels&&r.pixels.length>0))return null;let i;await this.updateRenderer();const s=this._rasterJobHandler.instance,n=this.bandIds??[];return i=s?await s.symbolize({...t,simpleStretchParams:e,bandIds:n}):this.symbolizer.symbolize({...t,simpleStretchParams:e,bandIds:n}),i}getTileUrl(t,e,r){return "RasterTileServer"===this.raster.datasetFormat?`${this.url}/tile/${t}/${e}/${r}`:""}getCompatibleTileInfo(t,e,r=!1){if(!this.loaded||t$2(e))return null;if(r&&t.equals(this.spatialReference))return this.tileInfo;const i=R(t);return j$1.create({size:256,spatialReference:t,origin:i?{x:i.origin[0],y:i.origin[1]}:{x:e.xmin,y:e.ymax}})}getCompatibleFullExtent(t){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(t)||(this._compatibleFullExtent=this.raster.computeExtent(t)),this._compatibleFullExtent):null}async fetchTile(t,e,i,s={}){if(C(this),s.requestAsImageElement){const n=this.getTileUrl(t,e,i);return U$1(n,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:s.signal}).then((t=>t.data))}const{rasterInfo:a}=this;if(r$1(a.multidimensionalInfo)&&(s=this.normalizeRasterFetchOptions(s),t$2(s.multidimensionalDefinition))){const r=s.tileInfo||a.storageInfo.tileInfo;return {extent:this.raster.getTileExtentFromTileInfo(t,e,i,r),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),"raster-shaded-relief"===this.renderer.type&&(s={...s,buffer:{cols:1,rows:1}}),this.raster.fetchTile(t,e,i,s)}async fetchPixels(t,e,r,i={}){return r$1(this.rasterInfo.multidimensionalInfo)&&(i=this.normalizeRasterFetchOptions(i),t$2(i.multidimensionalDefinition))?{extent:t,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),this.raster.fetchPixels(t,e,r,i))}async identify(t,e={}){const{raster:r,rasterInfo:s$1}=this;if(r$1(s$1.multidimensionalInfo)){if(!(s$1.hasMultidimensionalTranspose&&!!(g(e.multidimensionalDefinition)||e.transposedVariableName||e.timeExtent))&&(e=this.normalizeRasterFetchOptions(e),t$2(e.multidimensionalDefinition)))return {location:t,value:null}}const a=this.multidimensionalSubset?.areaOfInterest;if(a&&!a.contains(t))throw new s("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return r.identify(t,e)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++;}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler();}hasStandardTime(){const t=this.rasterInfo?.multidimensionalInfo;if(t$2(t)||"standard-time"!==this.rasterInfo?.dataType)return !1;const e=this.multidimensionalDefinition,r=e?.[0]?.variableName;return t.variables.some((t=>t.name===r&&(!e?.[0].dimensionName||t.dimensions.some((t=>"StdTime"===t.name)))))}getStandardTimeValue(t){return new Date(24*(t-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(t){const e=t??this.rasterInfo?.multidimensionalInfo;return v$3(this.multidimensionalSubset,e)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=h$2(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this._configDefaultRenderer();}_initJobHandler(){if(null!=this._rasterJobHandler.connectionPromise)return this._rasterJobHandler.connectionPromise;const t=new n$4;return this._rasterJobHandler.connectionPromise=t.initialize().then((()=>{C(this),this._rasterJobHandler.instance=t,this.raster.rasterJobHandler=t,this.renderer&&this.updateRenderer(),"Function"===this.raster.datasetFormat&&this.raster.syncJobHandler();})).catch((()=>{})),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null);}_configDefaultInterpolation(){if(null==this.interpolation){C(this);const{raster:t}=this,e=V$1(t.rasterInfo,t.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",e);}}_configDefaultRenderer(t="no"){C(this);const{rasterInfo:e}=this.raster;!this.bandIds&&e.bandCount>1&&(this.bandIds=L(e));const r=d$4(e,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset})?.name;if(!this.renderer||"override"===t){const t=j$2(e,{bandIds:this.bandIds,variableName:r});"WCSServer"===this.raster.datasetFormat&&"raster-stretch"===t.type&&((e.statistics?.[0].max??0)>1e24||(e.statistics?.[0].min??0)<-1e24)&&(t.dynamicRangeAdjustment=!0,t.statistics=null,"none"===t.stretchType&&(t.stretchType="min-max")),this.renderer=t;}const i=$$2({...this.renderer.toJSON(),variableName:r}),s=S$3(e,r);this.symbolizer?(this.symbolizer.rendererJSON=i,this.symbolizer.rasterInfo=s):this.symbolizer=new T$1({rendererJSON:i,rasterInfo:s});const n=this.symbolizer.bind();if(n.success){if("auto"===t){const{colormap:t}=this.raster.rasterInfo,e=this.renderer;if(r$1(t))if("raster-colormap"!==e.type)this._configDefaultRenderer("override");else {const t=j$2(this.raster.rasterInfo);JSON.stringify(t)!==JSON.stringify(e)&&this._configDefaultRenderer("override");}else if("raster-stretch"===e.type){const t=this.bandIds?.length,r=e.statistics?.length;!e.dynamicRangeAdjustment&&r&&t&&r!==t&&this._configDefaultRenderer("override");}}}else O.warn("imagery-tile-mixin",n.error||"The given renderer is not supported by the layer."),"auto"===t&&this._configDefaultRenderer("override");}};function C(t){if(!t.raster||!t.rasterInfo)throw new s("imagery-tile","no raster")}return e$2([y$1()],z.prototype,"_cachedRendererJson",void 0),e$2([y$1()],z.prototype,"_cachedRasterFunctionJson",void 0),e$2([y$1()],z.prototype,"_compatibleFullExtent",void 0),e$2([y$1()],z.prototype,"_isConstructedFromFunctionRaster",void 0),e$2([y$1()],z.prototype,"_rasterJobHandler",void 0),e$2([y$1()],z.prototype,"bandIds",void 0),e$2([y$1({json:{origins:{service:{read:{source:"copyrightText"}}}}})],z.prototype,"copyright",void 0),e$2([y$1({json:{read:!1}})],z.prototype,"fullExtent",null),e$2([y$1()],z.prototype,"interpolation",void 0),e$2([y$1()],z.prototype,"ioConfig",void 0),e$2([y$1({type:[p$2],json:{write:!0}})],z.prototype,"multidimensionalDefinition",null),e$2([y$1({type:c$4,json:{write:!0}})],z.prototype,"multidimensionalSubset",void 0),e$2([y$1()],z.prototype,"raster",void 0),e$2([y$1({type:w$5})],z.prototype,"rasterFunction",void 0),e$2([y$1()],z.prototype,"rasterInfo",void 0),e$2([y$1()],z.prototype,"sourceJSON",void 0),e$2([y$1({readOnly:!0,type:f$4,json:{read:!1}})],z.prototype,"spatialReference",void 0),e$2([y$1({json:{read:!1}})],z.prototype,"tileInfo",null),e$2([y$1(f$3)],z.prototype,"url",null),e$2([y$1({types:l$2})],z.prototype,"renderer",null),e$2([y$1()],z.prototype,"symbolizer",void 0),z=e$2([a$2("esri.layers.ImageryTileMixin")],z),z};

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
function t$1(e){const t=e.fields,r=e.records,n=t.some((e=>"oid"===e.name.toLowerCase()))?"OBJECTID":"OID",i=[{name:n,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map((e=>({name:e.name,type:"esriFieldType"+e.typeName,alias:e.name})))),s=i.map((e=>e.name)),a=[];let o=0,l=0;return r.forEach((e=>{const t={};for(t[n]=o++,l=1;l<s.length;l++)t[s[l]]=e[l-1];a.push({attributes:t});})),{displayFieldName:"",fields:i,features:a}}class r{static get supportedVersions(){return [5]}static parse(r){const n=new DataView(r),i=3&n.getUint8(0);if(3!==i)return {header:{version:i},recordSet:null};const s=n.getUint32(4,!0),a=n.getUint16(8,!0),o=n.getUint16(10,!0),l={version:i,recordCount:s,headerByteCount:a,recordByteCount:o};let p=32;const g=[],u=[];let d;if(3===i){for(;13!==n.getUint8(p);)d=String.fromCharCode(n.getUint8(p+11)).trim(),g.push({name:r$2(new Uint8Array(r,p,11)),type:d,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(d)],length:n.getUint8(p+16)}),p+=32;if(p+=1,g.length>0)for(;u.length<s&&r.byteLength-p>o;){const t=[];32===n.getUint8(p)?(p+=1,g.forEach((n=>{if("C"===n.type)t.push(r$2(new Uint8Array(r,p,n.length)).trim());else if("N"===n.type)t.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim(),10));else if("F"===n.type)t.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim()));else if("D"===n.type){const e=String.fromCharCode.apply(null,new Uint8Array(r,p,n.length)).trim();t.push(new Date(parseInt(e.substring(0,4),10),parseInt(e.substring(4,6),10)-1,parseInt(e.substring(6,8),10)));}p+=n.length;})),u.push(t)):p+=o;}}return {header:l,fields:g,records:u,recordSet:t$1({fields:g,records:u})}}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const x=new Map;x.set("int16","esriFieldTypeSmallInteger"),x.set("int32","esriFieldTypeInteger"),x.set("int64","esriFieldTypeInteger"),x.set("float32","esriFieldTypeSingle"),x.set("float64","esriFieldTypeDouble"),x.set("text","esriFieldTypeString");const S=8;let I$2=class I extends Q{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF";}async open(e){await this.init();const{data:r}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(r))throw new s("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:o,rasterInfo:i}=this._parseHeader(r);if("thematic"===i.dataType){const e=await this._fetchAuxiliaryInformation();i.attributeTable=e;}this._set("storageInfo",o),this._set("rasterInfo",i),this.ioConfig.retryCount=this.ioConfig.retryCount||0;}async fetchRawTile(e,t,r,o={}){const{transposeInfo:i}=this.rasterInfo.storageInfo,{transposedVariableName:s}=o,a=!(!i||!s),n=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(n<0)return null;const l=this._buildCacheFilePath(n,t,r,o.multidimensionalDefinition,s),f=this._getIndexRecordFromBundle(t,r,a),m=await this.request(l,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:o.signal});if(!m)return null;const c=new Uint8Array(m.data),p=this._getTileEndAndContentType(c,f);if(0===p.recordSize)return null;const d=await this.request(l,{range:{from:p.position,to:p.position+p.recordSize},responseType:"array-buffer",signal:o.signal});if(!d)return null;const[u,h]=this._getTileSize(a);return this.decodePixelBlock(d.data,{width:u,height:h,planes:null,pixelType:null,returnInterleaved:a})}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&"RasterInfo"===e.type&&!t.some((t=>!e[t]))}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:r,histograms:o,colormap:i,blockWidth:s,blockHeight:m,firstPyramidLevel:c,maximumPyramidLevel:p}=e,d=e.statistics&&e.statistics.map((e=>({min:e.min,max:e.max,avg:e.mean,stddev:e.standardDeviation,median:e.median,mode:e.mode}))),u=e.extent.spatialReference,x=e.geodataXform?.spatialReference,I=new f$4(u?.wkid||u?.wkt?u:x);let w=new w$4({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:I});const _=new w$3({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:I}),v=Math.round((w.xmax-w.xmin)/_.x),b=Math.round((w.ymax-w.ymin)/_.y),z=this._parseTransform(e.geodataXform),T=z?w:null;z&&(w=z.forwardTransform(w),_.x=(w.xmax-w.xmin)/v,_.y=(w.ymax-w.ymin)/b);const k=e.properties??{},j=e.format.toLowerCase().replace("cache/",""),C=new w$3(e.origin.x,e.origin.y,I);let R,F,P,H;if(i&&i.colors)for(R=[],F=0;F<i.colors.length;F++)P=i.colors[F],H=i.values?i.values[F]:F,R.push([H,255&P,P<<16>>>24,P<<8>>>24,P>>>24]);const D=e.LODInfos,L=[];for(F=0;F<D.levels.length;F++)L.push(new p$1({level:D.levels[F],resolution:D.resolutions[F],scale:96/.0254*D.resolutions[F]}));const M=new j$1({dpi:96,lods:L,format:j,origin:C,size:[s,m],spatialReference:I}),O={recordSize:S,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*S+64},B=[{maxCol:Math.ceil(v/s)-1,maxRow:Math.ceil(b/m)-1,minCol:0,minRow:0}];let $=2;if(p>0)for(F=0;F<p;F++)B.push({maxCol:Math.ceil(v/$/s)-1,maxRow:Math.ceil(b/$/m)-1,minCol:0,minRow:0}),$*=2;const N=e.mdInfo;let q=null;if(N&&k._yxs){const e=k._yxs;q={packetSize:e.PacketSize,tileSize:[e.TileXSize,e.TileYSize]};}return {storageInfo:O,rasterInfo:new u$3({width:v,height:b,pixelType:t,bandCount:r,extent:w,nativeExtent:T,transform:z,spatialReference:I,pixelSize:_,keyProperties:k,statistics:d,histograms:o,multidimensionalInfo:N,colormap:R,storageInfo:new n$3({blockWidth:s,blockHeight:m,pyramidBlockWidth:s,pyramidBlockHeight:m,origin:C,tileInfo:M,transposeInfo:q,firstPyramidLevel:c,maximumPyramidLevel:p,blockBoundary:B})})}}_parseTransform(e){if(!f$6(e))throw new s("cloudraster:open","the data contains unsupported geodata transform types");const r=i$1(e);if("identity"===r.type)return null;if("polynomial"!==r.type||!r.forwardCoefficients?.length||!r.inverseCoefficients?.length)throw new s("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return r}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then((e=>e.data)).catch((()=>null)),r$1=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then((e=>e.data)).catch((()=>null)),o=await Promise.all([t,r$1]);let i;if(o[0]){let e=o[0].fields;const t=o[0].values;if(e&&t){e=e.map((e=>({type:"OID"===e.name?"esriFieldTypeOID":x.get(e.type),name:e.name,alias:e.alias||e.name})));const r=t.map((e=>({attributes:e})));e&&t&&(i={fields:e,features:r});}}if(!i&&o[1]){i=r.parse(o[1]).recordSet;}return x$2.fromJSON(i)}_buildCacheFilePath(e,t,o,i,s){const a=this._getPackageSize(!!s),n=Math.floor(t/a)*a,l=Math.floor(o/a)*a,f="R"+this._toHexString4(n)+"C"+this._toHexString4(l);let m="L";m+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:c}=this.rasterInfo,p=i?.[0];if(t$2(c)||!p)return `${this.url}/_alllayers/${m}/${f}.bundle`;let d="_yxs";if(!s){d=c.variables.find((e=>e.name===p.variableName)).dimensions[0].values.indexOf(p.values[0]).toString(16);const e=4-d.length;for(let t=0;t<e;t++)d="0"+d;d="S"+d;}const u=this._getVariableFolderName(s||p.variableName);return `${this.url}/_alllayers/${u}/${d}/${m}/${f}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&r$1(t)?t.packetSize??0:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:r}=t;return e&&r$1(r)?r.tileSize:t.tileInfo.size}_getVariableFolderName(e){return ""===(e=e.trim())?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,r=!1){const o=this._getPackageSize(r),i=o*(e%o)+t%o;if(i<0)throw new Error("Invalid level / row / col");return 20+i*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const r=e.subarray(t,t+8);let o,i=0;for(o=0;o<5;o++)i|=(255&r[o])<<8*o;const s=0xffffffffff&i;for(i=0,o=5;o<8;o++)i|=(255&r[o])<<8*(o-5);return {position:s,recordSize:0xffffffffff&i}}_toHexString4(e){let t=e.toString(16);if(4!==t.length){let e=4-t.length;for(;e-- >0;)t="0"+t;}return t}};e$2([y$1({readOnly:!0})],I$2.prototype,"storageInfo",void 0),e$2([y$1({type:String,json:{write:!0}})],I$2.prototype,"datasetFormat",void 0),I$2=e$2([a$2("esri.layers.support.rasterDatasets.CloudRaster")],I$2);const w$2=I$2;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
let h=class extends Q{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.data=null;}async open(t){await this.init();const e=this.data,{pixelBlock:s,statistics:r,histograms:i,name:o,keyProperties:m,nativeExtent:n,transform:l}=this.data,{width:h,height:f,pixelType:d}=s,u=e.extent??new w$4({xmin:-.5,ymin:.5,xmax:h-.5,ymax:f-.5,spatialReference:new f$4({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,x={x:u.width/h,y:u.height/f},g=new u$3({width:h,height:f,pixelType:d,extent:u,nativeExtent:n,transform:l,pixelSize:x,spatialReference:u.spatialReference,bandCount:s.pixels.length,keyProperties:m||{},statistics:r,isPseudoSpatialReference:y,histograms:i});this.createRemoteDatasetStorageInfo(g,512,512),this._set("rasterInfo",g),this.updateTileInfo(),await this._buildInMemoryRaster(s,{width:512,height:512},t),this.datasetName=o,this.url="/InMemory/"+o;}fetchRawTile(t,e,s,r={}){const i=this._pixelBlockTiles.get(`${t}/${e}/${s}`);return Promise.resolve(i)}async _buildInMemoryRaster(t,i,o){const a=this.rasterInfo.storageInfo.maximumPyramidLevel,m=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:i,maximumPyramidLevel:a},o):Promise.resolve(R$1(t,i,a)),p=r$1(this.rasterInfo.statistics),c=r$1(this.rasterInfo.histograms),h=p?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},o):Promise.resolve(p$3(t)),f=await E$2([m,h]);if(!f[0].value&&f[1].value)throw new s("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=f[0].value,p||(this.rasterInfo.statistics=f[1].value?.statistics),c||(this.rasterInfo.histograms=f[1].value?.histograms);}};e$2([y$1({type:String,json:{write:!0}})],h.prototype,"datasetFormat",void 0),e$2([y$1()],h.prototype,"data",void 0),h=e$2([a$2("esri.layers.support.rasterDatasets.InMemoryRaster")],h);const f$1=h;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
function n$1(e,t){if(!e||!t)return [];let l=t;t.includes("/")?(l=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const r=[];if(t){const u=n$1(e,l);for(let e=0;e<u.length;e++){n$1(u[e],t).forEach((n=>r.push(n)));}return r}const u=e.getElementsByTagNameNS("*",l);if(!u||0===u.length)return [];for(let n=0;n<u.length;n++)r.push(u[n]||u.item[n]);return r}function e(t,l){if(!t||!l)return null;let r=l;l.includes("/")?(r=l.slice(0,l.indexOf("/")),l=l.slice(l.indexOf("/")+1)):l="";const u=n$1(t,r);return u.length>0?l?e(u[0],l):u[0]:null}function t(n,t=null){const l=t?e(n,t):n;let r;return l?(r=l.textContent||l.nodeValue,r?r.trim():null):null}function l(e,t){const l=n$1(e,t),r=[];let u;for(let n=0;n<l.length;n++)u=l[n].textContent||l[n].nodeValue,u&&(u=u.trim(),""!==u&&r.push(u));return r}function u$1(n,e){return l(n,e).map((n=>Number(n)))}function o(n,e){const l=t(n,e);return Number(l)}function i(n,e){const t=n?.nodeName?.toLowerCase(),l=e.toLowerCase();return t.slice(t.lastIndexOf(":")+1)===l}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
function f(e,t){if(!e||!t)return null;const n=[];for(let r=0;r<e.length;r++)n.push(e[r]),n.push(t[r]);return n}function u(e$1){const t$1=e(e$1,"GeodataXform"),r=m(o(t$1,"SpatialReference/WKID")||t(t$1,"SpatialReference/WKT"));if("typens:PolynomialXform"!==t$1.getAttribute("xsi:type"))return {spatialReference:r,transform:null};const o$1=o(t$1,"PolynomialOrder")??1,u=u$1(t$1,"CoeffX/Double"),c=u$1(t$1,"CoeffY/Double"),d=u$1(t$1,"InverseCoeffX/Double"),p=u$1(t$1,"InverseCoeffY/Double"),S=f(u,c),C=f(d,p);return {spatialReference:r,transform:S&&C&&S.length&&C.length?new m$5({spatialReference:r,polynomialOrder:o$1,forwardCoefficients:S,inverseCoefficients:C}):null}}function c$1(e$1){const t$1=o(e$1,"NoDataValue"),i=e(e$1,"Histograms/HistItem"),l=o(i,"HistMin"),o$1=o(i,"HistMax"),f=o(i,"BucketCount"),u=t(i,"HistCounts")?.split("|").map((e=>Number(e)));let c,m,d,p;n$1(e$1,"Metadata/MDI").forEach((e=>{const t=Number(e.textContent??e.nodeValue);switch(e.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":c=t;break;case"STATISTICS_MAXIMUM":m=t;break;case"STATISTICS_MEAN":d=t;break;case"STATISTICS_STDDEV":p=t;}}));const S=o(e$1,"Metadata/SourceBandIndex");return {noDataValue:t$1,histogram:u?.length&&null!=l&&null!=o$1?{min:l,max:o$1,size:f||u.length,counts:u}:null,sourceBandIndex:S,statistics:null!=c&&null!=m?{min:c,max:m,avg:d,stddev:p}:null}}function m(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&0!==t)return new f$4({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const n=e.indexOf("VERTCS"),r=e.indexOf("PROJCS"),s=r>-1?r:e.indexOf("GEOGCS");if(-1===s)return null;const a=e.slice(s,e.lastIndexOf("]",n)+1).trim(),i=e.slice(n,e.lastIndexOf("]")).trim();t=d$1(a);const l=new f$4(t?{wkid:t}:{wkt:a}),f=d$1(i);return f&&(l.vcsWkid=f),l}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=d$1(e),new f$4(0!==t?{wkid:t}:{wkt:e})):null}function d$1(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map((e=>e.trim())).filter((e=>""!==e)),n=t[t.length-1].split(","),r=n[0]?.toLowerCase();if(("epsg"===r||"esri"===r)&&e.endsWith('"]]')){const e=Number(n[1]);if(!isNaN(e)&&0!==e)return e}return 0}function p(s){if("pamdataset"!==s?.documentElement.tagName?.toLowerCase())return {};const a={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};s.documentElement.childNodes.forEach((e=>{if(1===e.nodeType)if(i(e,"SRS")){if(!a.spatialReference){const t$1=t(e);a.spatialReference=m(t$1);}}else if(i(e,"Metadata"))if("xml:ESRI"===e.getAttribute("domain")){const{spatialReference:t,transform:n}=u(e);a.transform=n,a.spatialReference||(a.spatialReference=t);}else {n$1(e,"MDI").forEach((e=>a.metadata[e.getAttribute("key")]=t(e)));}else if(i(e,"PAMRasterBand")){const t=c$1(e);null!=t.sourceBandIndex&&null==a.rasterBands[t.sourceBandIndex]?a.rasterBands[t.sourceBandIndex]=t:a.rasterBands.push(t);}}));const i$1=a.rasterBands;if(i$1.length){const t=!!i$1[0].statistics;a.statistics=t?i$1.map((e=>e.statistics)).filter(r$1):null;const n=!!i$1[0].histogram;a.histograms=n?i$1.map((e=>e.histogram)).filter(r$1):null;}return a}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
let d=class extends Q{async open(t){await this.init();const e=await this._fetchData(t);let{spatialReference:s,statistics:r,histograms:a,transform:o}=await this._fetchAuxiliaryData(t);const i=!s;i&&(s=new f$4({wkid:3857})),a?.length&&null==r&&(r=g$1(a));const{width:n,height:l}=e;let p=new w$4({xmin:-.5,ymin:.5-l,xmax:n-.5,ymax:.5,spatialReference:s});const f=o?o.forwardTransform(p):p;let d=!0;if(o){const t=o.forwardCoefficients;d=t&&0===t[1]&&0===t[2],d&&(o=null,p=f);}const w=new f$1({data:{extent:f,nativeExtent:p,transform:o,pixelBlock:e,statistics:r,histograms:a,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:i}});await w.open(),w.data=null,this._set("rasterInfo",w.rasterInfo),this._inMemoryRaster=w;}fetchRawTile(t,e,s,r={}){return this._inMemoryRaster.fetchRawTile(t,e,s,r)}async _fetchData(t){const{data:s$1}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=j$3(s$1).toUpperCase();if("JPG"!==r&&"PNG"!==r&&"GIF"!==r&&"BMP"!==r)throw new s("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const a=r.toLowerCase(),o="gif"===a||"bmp"===a||!has("ios"),i=await this.decodePixelBlock(s$1,{format:a,useCanvas:o,hasNoZlibMask:!0});if(null==i)throw new s("image-aux-raster:open","the data cannot be decoded");return i}async _fetchAuxiliaryData(t){const e=e$1(t?.signal),o=this.ioConfig.skipExtensions??[],i=o.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),n=this.datasetFormat,m="JPG"===n?"jgw":"PNG"===n?"pgw":"BMP"===n?"bpw":null,p$1=m&&o.includes(m)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+m,{responseType:"text",signal:e}),c=await E$2([i,p$1]);if(e?.aborted)throw a$3();const u=p(c[0].value?.data);if(!u.transform){const t=c[1].value?c[1].value.data.split("\n").slice(0,6).map((t=>Number(t))):null;u.transform=6===t?.length?new m$5({forwardCoefficients:[t[4],t[5],t[0],-t[1],t[2],-t[3]]}):null;}return u}};e$2([y$1({type:String,json:{write:!0}})],d.prototype,"datasetFormat",void 0),d=e$2([a$2("esri.layers.support.rasterDatasets.ImageAuxRaster")],d);const w$1=d;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
let I$1=class I extends Q{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null;}async open(e){await this.init();const r=e&&e.signal,a=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:r});a.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const o=a.data;if(this.sourceJSON=o,!o)throw new s("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!o.tileInfo)throw new s("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const n=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=o.cacheType,null==this.tileType&&(n.includes(o.tileInfo.format.toLowerCase())?this.tileType="Map":"lerc"===o.tileInfo.format.toLowerCase()?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=o.name?.slice(o.name.indexOf("/")+1)??"";const c=await this._fetchRasterInfo({signal:r});if(t$2(c))throw new s("image-server-raster:open","cannot initialize image service");const p="Map"===this.tileType?n$5(o.tileInfo,o):j$1.fromJSON(o.tileInfo);i$2(p);const[y,d]=this._computeMinMaxLOD(c,p),{extent:x,pixelSize:g}=c,v=.5/c.width*g.x,S=Math.max(g.x,g.y),{lods:I}=p;("Map"!==this.tileType&&0!==o.maxScale||Math.abs(g.x-g.y)>v||!I.some((e=>Math.abs(e.resolution-S)<v)))&&(g.x=g.y=y.resolution,c.width=Math.ceil((x.xmax-x.xmin)/g.x-.1),c.height=Math.ceil((x.ymax-x.ymin)/g.y-.1));const w=y.level-d.level,[j,T]=p.size,b=[],M=[];I.forEach(((e,t)=>{e.level>=d.level&&e.level<=y.level&&b.push({x:e.resolution,y:e.resolution}),t<I.length-1&&M.push(Math.round(10*e.resolution/I[t+1].resolution)/10);})),b.sort(((e,t)=>e.x-t.x));const _=this.computeBlockBoundary(x,j,T,p.origin,b,w),R=b.length>1?b.slice(1):null;let z;o.transposeInfo&&(z={tileSize:[o.transposeInfo.rows,o.transposeInfo.cols],packetSize:c.keyProperties?._yxs.PacketSize??0});const P=M.length<=1||M.length>=3&&M.slice(0,M.length-1).every((e=>e===M[0]))?M[0]??2:Math.round(10/(d.resolution/y.resolution)**(-1/w))/10;if(c.storageInfo=new n$3({blockWidth:p.size[0],blockHeight:p.size[1],pyramidBlockWidth:p.size[0],pyramidBlockHeight:p.size[1],pyramidResolutions:R,pyramidScalingFactor:P,compression:p.format,origin:p.origin,firstPyramidLevel:1,maximumPyramidLevel:w,tileInfo:p,transposeInfo:z,blockBoundary:_}),this._fixGCSShift(c),this._set("rasterInfo",c),o.capabilities.toLowerCase().includes("tilemap")){const e={tileInfo:c.storageInfo.tileInfo,parsedUrl:L$1(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new z$1({layer:e});}}async fetchRawTile(e,t,i,s={}){const{storageInfo:l,extent:o}=this.rasterInfo,{transposeInfo:n}=l,c=r$1(n)&&!!s.transposedVariableName;if(this._slices&&!c&&null==s.sliceId)return null;const m=c?0:l.maximumPyramidLevel-e+this._levelOffset,h=`${this.url}/tile/${m}/${t}/${i}`,u=this._slices?c?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:f}=await this.request(h,{query:u,responseType:"array-buffer",signal:s.signal});if(!f)return null;const p=c?n.tileSize:l.tileInfo.size,d=await this.decodePixelBlock(f,{width:p[0],height:p[1],planes:null,pixelType:null,isPoint:"Elevation"===this.tileType,returnInterleaved:c,noDataValue:e$1(this.rasterInfo.noDataValue)});if(null==d)return null;const x=l.blockBoundary[e];if("jpg"!==l.compression||i>x.minCol&&i<x.maxCol&&t>x.minRow&&t<x.maxRow)return d;const{origin:g,blockWidth:v,blockHeight:S}=l,{x:I,y:w}=this.getPyramidPixelSize(e),j=Math.round((o.xmin-g.x)/I)%v,T=Math.round((o.xmax-g.x)/I)%v||v,b=Math.round((g.y-o.ymax)/w)%S,M=Math.round((g.y-o.ymin)/w)%S||S,_=i===x.minCol?j:0,R=t===x.minRow?b:0,z=i===x.maxCol?T:v,P=t===x.maxRow?M:S;return S$4(d,{x:_,y:R},{width:z-_,height:P-R}),d}getSliceIndex(e){if(!this._slices||t$2(e)||0===e.length)return null;const t=e;for(let i=0;i<this._slices.length;i++){const e=this._slices[i].multidimensionalDefinition;if(e.length===t.length&&!e.some((e=>{const i=t.find((t=>e.variableName===t.variableName&&t.dimensionName===e.dimensionName));if(!i)return !0;return (Array.isArray(e.values[0])?`${e.values[0][0]}-${e.values[0][1]}`:e.values[0])!==(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])})))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.statistics)),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then((e=>e.data?.histograms)),r=await Promise.all([i,s]);return r[0]&&r[0].forEach((e=>{e.avg=e.mean,e.stddev=e.standardDeviation;})),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,e$1(t.datumTransformation));if(null===i)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let l=r-s+this._levelOffset;const o=i.srcLocation;for(;l>=0;){try{if("available"===await this._tilemapCache.fetchAvailability(l,i.row,i.col,t))break}catch{}if(l--,s++,i=this.identifyPixelLocation(o,s,e$1(t.datumTransformation)),null===i)return null}return -1===l||null==i?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if("Map"===this.tileType){const e=t.fullExtent||t.extent,i=Math.ceil((e.xmax-e.xmin)/t.pixelSizeX-.1),s=Math.ceil((e.ymax-e.ymin)/t.pixelSizeY-.1),r=f$4.fromJSON(t.spatialReference||e.spatialReference),a=new w$3({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:r});return new u$3({width:i,height:s,bandCount:3,extent:w$4.fromJSON(e),spatialReference:r,pixelSize:a,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=m$6(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then((e=>e.data&&e.data.slices)).catch((()=>null)):null,a=await Promise.all([s,r]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0);}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin>-1&&t.xmax>181&&i?.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new c$5,e.extent=e.transform.forwardTransform(t));}_computeMinMaxLOD(e,t){const{pixelSize:i}=e,s=.5/e.width*i.x,{lods:r}=t,a=t.lodAt(Math.max.apply(null,r.map((e=>e.level)))),l=t.lodAt(Math.min.apply(null,r.map((e=>e.level)))),{tileType:o}=this;if("Map"===o)return this._levelOffset=r[0].level,[a,l];if("Raster"===o){return [r.find((e=>e.resolution===i.x))??a,l]}const{minScale:n,maxScale:c}=this.sourceJSON;let m=a;c>0&&(m=r.find((e=>Math.abs(e.scale-c)<s)),m||(m=r.filter((e=>e.scale>c)).sort(((e,t)=>e.scale>t.scale?1:-1))[0]??a));let h=l;return n>0&&(h=r.find((e=>Math.abs(e.scale-n)<s))??l,this._levelOffset=h.level-l.level),[m,h]}};e$2([y$1({type:String,json:{write:!0}})],I$1.prototype,"datasetFormat",void 0),e$2([y$1()],I$1.prototype,"tileType",void 0),I$1=e$2([a$2("esri.layers.support.rasterDatasets.ImageServerRaster")],I$1);const w=I$1;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const I=new Map;I.set("Int8","s8"),I.set("UInt8","u8"),I.set("Int16","s16"),I.set("UInt16","u16"),I.set("Int32","s32"),I.set("UInt32","u32"),I.set("Float32","f32"),I.set("Float64","f32"),I.set("Double64","f32");const b=new Map;b.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),b.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),b.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),b.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let A=class extends Q{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF";}async open(t){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?e$1(t.signal):null,o=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:i,files:a}=this._parseHeader(o.data);if(-1===this.ioConfig.skipExtensions?.indexOf("aux.xml")){const e=await this._fetchAuxiliaryData(t);null!=e&&(i.statistics=e.statistics??i.statistics,i.histograms=e.histograms,e.histograms&&t$2(i.statistics)&&(i.statistics=g$1(e.histograms)));}this._set("rasterInfo",i),this._files=a;const n=await this.request(a.index,{responseType:"array-buffer",signal:e});this._storageIndex=this._parseIndex(n.data);const{blockWidth:l,blockHeight:f}=this.rasterInfo.storageInfo,c=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:m,height:p}=this.rasterInfo,h=[],u=this._getBandSegmentCount();let g=0,y=-1;for(;g<this._storageIndex.length;){y++;const t=Math.ceil(m/l/c**y)-1,e=Math.ceil(p/f/c**y)-1;g+=(t+1)*(e+1)*u*4,h.push({maxRow:e,maxCol:t,minCol:0,minRow:0});}this.rasterInfo.storageInfo.blockBoundary=h,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo();}async fetchRawTile(t,e,r,s={}){const{blockWidth:i,blockHeight:a,blockBoundary:l}=this.rasterInfo.storageInfo,f=l[t];if(!f||f.maxRow<e||f.maxCol<r||f.minRow>e||f.minCol>r)return null;const{bandCount:c,pixelType:m}=this.rasterInfo,{ranges:p,actualTileWidth:h,actualTileHeight:u}=this._getTileLocation(t,e,r);if(!p||0===p.length)return null;if(0===p[0].from&&0===p[0].to){const t=new Uint8Array(i*a);return new m$7({width:i,height:a,pixels:null,mask:t,validPixelCount:0})}const{bandIds:g}=this.ioConfig,d=this._getBandSegmentCount(),y=[];let x=0;for(x=0;x<d;x++)(!g||g.indexOf[x]>-1)&&y.push(this.request(this._files.data,{range:{from:p[x].from,to:p[x].to},responseType:"array-buffer",signal:s.signal}));const w=await Promise.all(y),I=w.map((t=>t.data.byteLength)).reduce(((t,e)=>t+e)),A=new Uint8Array(I);let F=0;for(x=0;x<d;x++)A.set(new Uint8Array(w[x].data),F),F+=w[x].data.byteLength;const _=b.get(this.rasterInfo.storageInfo.compression).decoderFormat,R=await this.decodePixelBlock(A.buffer,{width:i,height:a,format:_,planes:g?.length||c,pixelType:m});if(null==R)return null;if(r$1(this.rasterInfo.noDataValue)&&"lerc"!==_&&!R.mask){const t=this.rasterInfo.noDataValue[0];if(null!=t){const e=R.width*R.height,r=new Uint8Array(e);if(Math.abs(t)>1e24)for(x=0;x<e;x++)Math.abs((R.pixels[0][x]-t)/t)>1e-6&&(r[x]=1);else for(x=0;x<e;x++)R.pixels[0][x]!==t&&(r[x]=1);R.mask=r;}}let S=0,j=0;if(h!==i||u!==a){let t=R.mask;if(t)for(x=0;x<a;x++)if(j=x*i,x<u)for(S=h;S<i;S++)t[j+S]=0;else for(S=0;S<i;S++)t[j+S]=0;else for(t=new Uint8Array(i*a),R.mask=t,x=0;x<u;x++)for(j=x*i,S=0;S<h;S++)t[j+S]=1;}return R}_parseIndex(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,r,s,o,i,a;if(r$3){for(r=new Uint8Array(t),o=new ArrayBuffer(t.byteLength),s=new Uint8Array(o),i=0;i<t.byteLength/4;i++)for(a=0;a<4;a++)s[4*i+a]=r[4*i+3-a];e=new Uint32Array(o);}else e=new Uint32Array(t);return e}_getBandSegmentCount(){return b.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:o,pyramidScalingFactor:i}=this.rasterInfo.storageInfo,{width:a,height:n}=this.rasterInfo,l=this._getBandSegmentCount();let f,c,m,p=0,h=0;for(m=0;m<t;m++)h=i**m,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),p+=f*c;h=i**t,f=Math.ceil(a/s/h),c=Math.ceil(n/o/h),p+=e*f+r,p*=4*l;const u=this._storageIndex.subarray(p,p+4*l);let g=0,d=0;const y=[];for(let x=0;x<l;x++)g=u[4*x+0]*2**32+u[4*x+1],d=g+u[4*x+2]*2**32+u[4*x+3],y.push({from:g,to:d});return {ranges:y,actualTileWidth:r<f-1?s:Math.ceil(a/h)-s*(f-1),actualTileHeight:e<c-1?o:Math.ceil(n/h)-o*(c-1)}}_parseHeader(t$1){const r=e(t$1,"MRF_META/Raster");if(!r)throw new s("mrf:open","not a valid MRF format");const s$1=e(r,"Size"),o=parseInt(s$1.getAttribute("x"),10),i=parseInt(s$1.getAttribute("y"),10),a=parseInt(s$1.getAttribute("c"),10),n=(t(r,"Compression")||"none").toLowerCase();if(!b.has(n))throw new s("mrf:open","currently does not support compression "+n);const c=t(r,"DataType")||"UInt8",p=I.get(c);if(null==p)throw new s("mrf:open","currently does not support pixel type "+c);const g=e(r,"PageSize"),d=parseInt(g.getAttribute("x"),10),A=parseInt(g.getAttribute("y"),10),F=e(r,"DataValues");let _,R;F&&(R=F.getAttribute("NoData"),null!=R&&(_=R.trim().split(" ").map((t=>parseFloat(t)))));if(e(t$1,"MRF_META/CachedSource"))throw new s("mrf:open","currently does not support MRF referencing other data files");const S=e(t$1,"MRF_META/GeoTags"),j=e(S,"BoundingBox");let k,M=!1;if(null!=j){const t$1=parseFloat(j.getAttribute("minx")),e=parseFloat(j.getAttribute("miny")),r=parseFloat(j.getAttribute("maxx")),s=parseFloat(j.getAttribute("maxy")),o=t(S,"Projection")||"";let i=f$4.WGS84;if("LOCAL_CS[]"!==o)if(o.toLowerCase().startsWith("epsg:")){const t=Number(o.slice(5));isNaN(t)||0===t||(i=new f$4({wkid:t}));}else i=m(o)??f$4.WGS84;else M=!0,i=new f$4({wkid:3857});k=new w$4(t$1,e,r,s),k.spatialReference=i;}else M=!0,k=new w$4({xmin:-.5,ymin:.5-i,xmax:o-.5,ymax:.5,spatialReference:new f$4({wkid:3857})});const T=e(t$1,"MRF_META/Rsets"),C=parseInt(T&&T.getAttribute("scale")||"2",10),U=k.spatialReference,B=new n$3({origin:new w$3({x:k.xmin,y:k.ymax,spatialReference:U}),blockWidth:d,blockHeight:A,pyramidBlockWidth:d,pyramidBlockHeight:A,compression:n,pyramidScalingFactor:C}),E=new w$3({x:k.width/o,y:k.height/i,spatialReference:U}),L=new u$3({width:o,height:i,extent:k,isPseudoSpatialReference:M,spatialReference:U,bandCount:a,pixelType:p,pixelSize:E,noDataValue:_,storageInfo:B}),P=t(t$1,"datafile"),O=t(t$1,"IndexFile");return {rasterInfo:L,files:{mrf:this.url,index:O||this.url.replace(".mrf",".idx"),data:P||this.url.replace(".mrf",b.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return p(e)}catch{return null}}};e$2([y$1()],A.prototype,"_files",void 0),e$2([y$1()],A.prototype,"_storageIndex",void 0),e$2([y$1({type:String,json:{write:!0}})],A.prototype,"datasetFormat",void 0),A=e$2([a$2("esri.layers.support.rasterIO.MRFRaster")],A);const F=A;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const E$1=(e,t)=>e.get(t)?.values,k=(e,t)=>e.get(t)?.values?.[0];let D=class extends Q{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF";}async open(e){await this.init();const s$1=e?e$1(e.signal):null,{data:a}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:s$1});if(!a)throw new s("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:n,firstIFDPos:o,isBigTiff:f}=v$4(a),l=[];await this._readIFDs(l,a,n,o,0,f?8:4,s$1);const{imageInfo:u,rasterInfo:c}=this._parseIFDs(l),p=N(l),y=U$2(l);if(this._headerInfo={littleEndian:n,isBigTiff:f,ifds:l,pyramidIFDs:p,maskIFDs:y,...u},this._set("rasterInfo",c),!u.isSupported)throw new s("tiffraster:open","this tiff is not supported: "+u.message);if(!u.tileWidth)throw new s("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");const{skipExtensions:g=[]}=this.ioConfig;if(!g.includes("aux.xml")){const t=await this._fetchAuxiliaryMetaData(e);null!=t&&this._processPAMInfo(t,c);}g.includes("vat.dbf")||1!==c.bandCount||"u8"!==c.pixelType||(c.attributeTable=await this._fetchAuxiliaryTable(e),r$1(c.attributeTable)&&(c.keyProperties.DataType="thematic")),this.updateTileInfo();}async fetchRawTile(e,t,r,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,r))return null;const a=await this._fetchRawTiffTile(e,t,r,!1,s);if(r$1(a)&&this._headerInfo.hasMaskBand){const n=await this._fetchRawTiffTile(e,t,r,!0,s);r$1(n)&&n.pixels[0]instanceof Uint8Array&&(a.mask=n.pixels[0]);}return a}_parseIFDs(e){const t=R$2(e),{width:r,height:i,tileWidth:s,tileHeight:a,planes:n,pixelType:l,compression:u,firstPyramidLevel:p,maximumPyramidLevel:m$1,pyramidBlockWidth:h,pyramidBlockHeight:d,tileBoundary:g,affine:T,metadata:x}=t,I=t.extent.spatialReference?.wkt||t.extent.spatialReference?.wkid;let w=m(I),b=!!t.isPseudoGeographic;null==w&&(b=!0,w=new f$4({wkid:3857}));const D=new w$4({...t.extent,spatialReference:w}),v=new w$3(D?{x:D.xmin,y:D.ymax,spatialReference:w}:{x:0,y:0}),P=new n$3({blockWidth:s,blockHeight:a,pyramidBlockWidth:h,pyramidBlockHeight:d,compression:u,origin:v,firstPyramidLevel:p,maximumPyramidLevel:m$1,blockBoundary:g}),O=new w$3({x:(D.xmax-D.xmin)/r,y:(D.ymax-D.ymin)/i,spatialReference:w}),j=x?{BandProperties:x.bandProperties,DataType:x.dataType}:{};let B=null;const L=k(e[0],"PHOTOMETRICINTERPRETATION"),A=E$1(e[0],"COLORMAP");if(L<=3&&A?.length>3&&A.length%3==0){B=[];const e=A.length/3;for(let t=0;t<e;t++)B.push([t,A[t]>>>8,A[t+e]>>>8,A[t+2*e]>>>8]);}const z=new u$3({width:r,height:i,bandCount:n,pixelType:l,pixelSize:O,storageInfo:P,spatialReference:w,isPseudoSpatialReference:b,keyProperties:j,extent:D,colormap:B,statistics:x?x.statistics:null});return T?.length&&(z.nativeExtent=new w$4({xmin:-.5,ymin:.5-i,xmax:r-.5,ymax:.5,spatialReference:w}),z.transform=new m$5({polynomialOrder:1,forwardCoefficients:[T[2]+T[0]/2,T[5]-T[3]/2,T[0],T[3],-T[1],-T[4]]}),z.extent=z.transform.forwardTransform(z.nativeExtent),z.pixelSize=new w$3({x:(D.xmax-D.xmin)/r,y:(D.ymax-D.ymin)/i,spatialReference:w}),P.origin.x=-.5,P.origin.y=.5),{imageInfo:t,rasterInfo:z}}_processPAMInfo(e,t){if(t.statistics=e.statistics??t.statistics,t.histograms=e.histograms,e.histograms&&t$2(t.statistics)&&(t.statistics=g$1(e.histograms)),e.transform&&t$2(t.transform)){t.transform=e.transform,t.nativeExtent=t.extent;const r=t.transform.forwardTransform(t.nativeExtent);t.pixelSize=new w$3({x:(r.xmax-r.xmin)/t.width,y:(r.ymax-r.ymin)/t.height,spatialReference:t.spatialReference}),t.extent=r;}t.isPseudoSpatialReference&&e.spatialReference&&(t.spatialReference=e.spatialReference);}async _readIFDs(e,t,r,i,s,a=4,n){if(!i)return null;if(i>=t.byteLength||i<0){t=(await this.request(this.url,{range:{from:i+s,to:i+s+this._bufferSize},responseType:"array-buffer",signal:n})).data,s=i+s,i=0;}const o=await this._readIFD(t,r,i,s,n$6.TIFF_TAGS,a,n);if(e.push(o.ifd),!o.nextIFD)return null;await this._readIFDs(e,t,r,o.nextIFD-s,s,a,n);}async _readIFD(e,t,r,s,a=n$6.TIFF_TAGS,n=4,o){if(!e)return null;const f=B(e,t,r,s,a,n);if(f.success){const r=[];if(f.ifd?.forEach((e=>{e.values||r.push(e);})),r.length>0){const a=r.map((e=>e.offlineOffsetSize)).filter(r$1),n=Math.min.apply(null,a.map((e=>e[0])));if(Math.min.apply(null,a.map((e=>e[0]+e[1])))-n<=this._bufferSize){const{data:i}=await this.request(this.url,{range:{from:n,to:n+this._bufferSize},responseType:"array-buffer",signal:o});e=i,s=n,r.forEach((r=>L$2(e,t,r,s)));}}if(f.ifd?.has("GEOKEYDIRECTORY")){const r=f.ifd.get("GEOKEYDIRECTORY"),i=r?.values;if(i&&i.length>4){const a=i[0]+"."+i[1]+"."+i[2],n=await this._readIFD(e,t,r.valueOffset+6-s,s,n$6.GEO_KEYS,2,o);r.data=n.ifd,r.data&&r.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[a]});}}return f}if(f.requiredBufferSize&&f.requiredBufferSize!==e.byteLength){const r=await this.request(this.url,{range:{from:s,to:s+f.requiredBufferSize+4},responseType:"array-buffer",signal:o});return (e=r.data).byteLength<f.requiredBufferSize?null:this._readIFD(e,t,0,s,n$6.TIFF_TAGS,4,o)}}async _fetchRawTiffTile(e,t,r,i,s={}){const a=this._getTileLocation(e,t,r,i);if(!a)return null;const{ranges:n,actualTileWidth:o,actualTileHeight:f,ifd:l}=a,u=n.map((e=>this.request(this.url,{range:e,responseType:"array-buffer",signal:s.signal}))),c=await Promise.all(u),p=c.map((e=>e.data.byteLength)).reduce(((e,t)=>e+t)),m=1===c.length?c[0].data:new ArrayBuffer(p),h=[0],d=[0];if(c.length>1){const e=new Uint8Array(m);for(let t=0,r=0;t<c.length;t++){const i=c[t].data;e.set(new Uint8Array(i),r),h[t]=r,r+=i.byteLength,d[t]=i.byteLength;}}const{blockWidth:y,blockHeight:g}=this.getBlockWidthHeight(e),T=await this.decodePixelBlock(m,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:l,offsets:h,sizes:d},width:y,height:g,planes:null,pixelType:null});if(null==T)return null;let x,I,w;if(o!==y||f!==g){let e=T.mask;if(e)for(x=0;x<g;x++)if(w=x*y,x<f)for(I=o;I<y;I++)e[w+I]=0;else for(I=0;I<y;I++)e[w+I]=0;else for(e=new Uint8Array(y*g),T.mask=e,x=0;x<f;x++)for(w=x*y,I=0;I<o;I++)e[w+I]=1;}return T}_getTileLocation(e,t,r,i=!1){const{firstPyramidLevel:s,blockBoundary:a}=this.rasterInfo.storageInfo,n=0===e?0:e-(s-1),{_headerInfo:o}=this;if(!o)return null;const f=i?o.maskIFDs[n]:0===n?o?.ifds[0]:o?.pyramidIFDs[n-1];if(!f)return null;const l=D$2(f,o),u=E$1(f,"TILEOFFSETS");if(void 0===u)return null;const c=E$1(f,"TILEBYTECOUNTS"),{minRow:p,minCol:m,maxRow:h,maxCol:d}=a[n];if(t>h||r>d||t<p||r<m)return null;const y=k(f,"IMAGEWIDTH"),g=k(f,"IMAGELENGTH"),T=k(f,"TILEWIDTH"),I=k(f,"TILELENGTH"),w=l?this.rasterInfo.bandCount:1,_=w*t*(d+1)+r,b=[{from:u[_],to:u[_+w-1]+c[_+w-1]-1}];if(l){let e=!0;for(let t=0;t<w;t++)if(u[_+t]+c[_+t]!==u[_+t+1]){e=!1;break}if(!e)for(let t=0;t<w;t++)b[t]={from:u[_+t],to:u[_+t]+c[_+t]-1};}const F=u[_],S=c[_];if(null==F||null==S)return null;return {ranges:b,ifd:f,actualTileWidth:r===d&&y%T||T,actualTileHeight:t===h&&g%I||I}}async _fetchAuxiliaryMetaData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return p(t)}catch{return null}}async _fetchAuxiliaryTable(e){try{const{data:t}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:e?.signal}),r$1=r.parse(t);return r$1?.recordSet?x$2.fromJSON(r$1.recordSet):null}catch{return null}}};e$2([y$1()],D.prototype,"_files",void 0),e$2([y$1()],D.prototype,"_headerInfo",void 0),e$2([y$1()],D.prototype,"_bufferSize",void 0),e$2([y$1({type:String,json:{write:!0}})],D.prototype,"datasetFormat",void 0),D=e$2([a$2("esri.layers.support.rasterDatasets.TIFFRaster")],D);const v=D;

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const c=new Map;c.set("CRF",{desc:"Cloud Raster Format",constructor:w$2}),c.set("MRF",{desc:"Meta Raster Format",constructor:F}),c.set("TIFF",{desc:"GeoTIFF",constructor:v}),c.set("RasterTileServer",{desc:"Raster Tile Server",constructor:w}),c.set("JPG",{desc:"JPG Raster Format",constructor:w$1}),c.set("PNG",{desc:"PNG Raster Format",constructor:w$1}),c.set("GIF",{desc:"GIF Raster Format",constructor:w$1}),c.set("BMP",{desc:"BMP Raster Format",constructor:w$1});class n{static get supportedFormats(){const t=new Set;return c.forEach(((e,r)=>t.add(r))),t}static async open(e){const{url:r,ioConfig:s$1,sourceJSON:o}=e;let a=e.datasetFormat;null==a&&r.lastIndexOf(".")&&(a=r.slice(r.lastIndexOf(".")+1).toUpperCase()),"OVR"===a||"TIF"===a?a="TIFF":"JPG"!==a&&"JPEG"!==a&&"JFIF"!==a||(a="JPG"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(a="RasterTileServer");const n={url:r,sourceJSON:o,datasetFormat:a,ioConfig:s$1??{bandIds:null,sampling:null}};let l,i;if(a&&this.supportedFormats.has(a)){if("CRF"===a&&!s$1?.enableCRF)throw new s("rasterfactory:open",`cannot open raster: ${r}`);return l=c.get(a).constructor,i=new l(n),await i.open({signal:e.signal}),i}if(a)throw new s("rasterfactory:open","not a supported format "+a);const u=Array.from(c.keys());let F=0;const m=()=>(a=u[F++],a&&("CRF"!==a||s$1?.enableCRF)?(l=c.get(a).constructor,i=new l(n),i.open({signal:e.signal}).then((()=>i)).catch((()=>m()))):null);return m()}static register(t,e,r){c.has(t.toUpperCase())||c.set(t.toUpperCase(),{desc:e,constructor:r});}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
let C=class extends(n$7(t$3(c$6(_$1(o$1(z(a$4(p$4(p$5(O$1(b$2))))))))))){constructor(...e){super(...e),this._primaryRasters=null,this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null;}normalizeCtorArgs(e,r){return "string"==typeof e?{url:e,...r}:e}load(e){const r=r$1(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(w$6).then((()=>this._openRaster(r)))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[new y$2({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const{rasterInfo:r}=this,t=r?.attributeTable,s=r$1(t)?t.fields:null,i="Raster.";if(s){const r=s.filter((e=>"oid"!==e.type&&"value"!==e.name.toLowerCase())).map((e=>{const r=e.clone();return r.name=i+e.name,r}));e=e.concat(r);}const o=r?.dataType,a=r?.multidimensionalInfo;if(("vector-magdir"===o||"vector-uv"===o)&&r$1(a)){const r=a.variables[0].unit?.trim(),t="Magnitude"+(r?` (${r})`:"");e.push(new y$2({name:"Raster.Magnitude",alias:t,domain:null,editable:!1,type:"double"})),e.push(new y$2({name:"Raster.Direction",alias:"Direction (°)",domain:null,editable:!1,type:"double"}));}return e}set renderer(e){this._set("renderer",e),this.updateRenderer();}readRenderer(e,r,s){const i=r&&r.layerDefinition&&r.layerDefinition.drawingInfo&&r.layerDefinition.drawingInfo.renderer,o=c$7(i,s)||void 0;if(null!=o)return o}createPopupTemplate(e){return p$6({fields:this.rasterFields,title:this.title},e)}async generateRasterInfo(e,r){if(!(e=v$1(w$5,e)))return this._primaryRasters[0].rasterInfo;try{const t={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((e=>t[e.url]=e));const s=C$2(e.toJSON(),t),i=new c$2({rasterFunction:s});return await i.open(r),i.rasterInfo}catch{return null}}write(e,r){const{raster:t}=this;if(this.loaded?"RasterTileServer"===t.datasetFormat&&("Raster"===t.tileType||"Map"===t.tileType):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,r);if(r&&r.messages){const e=`${r.origin}/${r.layerContainerType||"operational-layers"}`;r.messages.push(new s("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${e}'`,{layer:this}));}return null}async _openRaster(e){let r=!1;if(this.raster)this.raster.rasterInfo||await this.raster.open(),"Function"===this.raster.datasetFormat?(r=!0,this._primaryRasters=this.raster.primaryRasters.rasters):this._primaryRasters=[this.raster],this.url=this.raster.url;else {const{rasterFunction:r}=this,t=[this.url];r&&h$3(r.toJSON(),t);const i=await Promise.all(t.map((r=>n.open({url:r,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e})))),n$1=i.findIndex((e=>null==e));if(n$1>-1)throw new s("imagery-tile-layer:open",`cannot open raster: ${t[n$1]}`);if(this._primaryRasters=i,r){const e={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach((r=>e[r.url]=r));const t=C$2(r.rasterFunctionDefinition??r.toJSON(),e),n=new c$2({rasterFunction:t});try{await n.open(),this.raster=n;}catch(s$2){const e=s$1.getLogger(this.declaredClass);s$2 instanceof s&&e.error("imagery-tile-layer:open",s$2.message),e.warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=i[0];}}else this.raster=i[0];}const t=this.raster.rasterInfo;if(!t)throw new s("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("rasterInfo",r?t:this._primaryRasters[0].rasterInfo),this._set("spatialReference",t.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,null!=this.sourceJSON){const e="Map"===this.raster.tileType&&null!=this.sourceJSON.minLOD&&null!=this.sourceJSON.maxLOD?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(e,{origin:"service"});}this.title||(this.title=this.raster.datasetName),"Map"===this.raster.tileType&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(l$3((()=>this.customParameters),(e=>{this.raster&&(this.raster.ioConfig.customFetchParameters=e);})));}};e$2([y$1()],C.prototype,"_primaryRasters",void 0),e$2([y$1({type:[T$2],json:{write:{overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType||"0,1,2"!==this.bandIds?.join(",")}}}}})],C.prototype,"bandIds",void 0),e$2([y$1({json:{write:{overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType||"bilinear"!==this.interpolation}}}}}),o$2(o$3)],C.prototype,"interpolation",void 0),e$2([y$1(c$8)],C.prototype,"legendEnabled",void 0),e$2([y$1({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],C.prototype,"isReference",void 0),e$2([y$1({type:["show","hide"]})],C.prototype,"listMode",void 0),e$2([y$1({json:{read:!0,write:!0}})],C.prototype,"blendMode",void 0),e$2([y$1()],C.prototype,"sourceJSON",void 0),e$2([y$1({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],C.prototype,"version",void 0),e$2([y$1({readOnly:!0,json:{read:!1}})],C.prototype,"type",void 0),e$2([y$1({type:["ArcGISTiledImageServiceLayer"]})],C.prototype,"operationalLayerType",void 0),e$2([y$1({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,r)=>!r.disablePopup},write:{target:"disablePopup",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}},writer(e,r,t){r[t]=!e;}}}})],C.prototype,"popupEnabled",void 0),e$2([y$1({type:k$1,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return {enabled:!this.loaded||"Raster"===this.raster.tileType}}}}})],C.prototype,"popupTemplate",void 0),e$2([y$1({readOnly:!0})],C.prototype,"defaultPopupTemplate",null),e$2([y$1({readOnly:!0,type:[y$2]})],C.prototype,"fields",void 0),e$2([y$1({readOnly:!0,type:[y$2]})],C.prototype,"rasterFields",null),e$2([y$1({types:l$2,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e="raster-stretch"===this.renderer?.type&&"none"===this.renderer.stretchType&&!this.renderer.useGamma;return {enabled:!this.loaded||"Raster"===this.raster.tileType||!e}}},origins:{"web-scene":{types:d$5,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&"vector-field"!==e.type&&"flow"!==e.type})}}}}})],C.prototype,"renderer",null),e$2([o$4("renderer")],C.prototype,"readRenderer",null),C=e$2([a$2("esri.layers.ImageryTileLayer")],C);const E=C;

export { E as default };
