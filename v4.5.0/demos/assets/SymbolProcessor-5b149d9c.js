import { bq as j$1, e, k as a, ez as m, gn as a$1, cq as f, f as f$1, eq as o$1, t as t$1, r as r$1, K as c$1, b as e$1 } from './main-5658cd6e.js';
import { i } from './ExpandedCIM-78770fa3.js';
import { p as p$1 } from './visualVariablesUtils-93e46889.js';
import { S } from './color-6132b2c2.js';
import { x, o, n, E, a as n$1 } from './Matcher-df890909.js';
import { p } from './BaseProcessor-3639b75a.js';
import './preload-helper-a4975f27.js';
import './BidiEngine-7b4fd637.js';
import './GeometryUtils-69e79e12.js';
import './enums-9c1aeae9.js';
import './MaterialKey-99ff6359.js';
import './definitions-281daf3f.js';
import './Rect-e55bfbac.js';
import './quantizationUtils-ec270d9a.js';
import './floatRGBA-0f682c7a.js';
import './visualVariablesUtils-1950eea1.js';
import './enums-1f7f0b0a.js';
import './VertexElementDescriptor-a439aa9a.js';
import './tileUtils-f6baf24c.js';
import './TurboLine-b7a337a5.js';
import './GeometryUtils-7c55c6d6.js';
import './earcut-336027d9.js';
import './devEnvironmentUtils-d73295e7.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
class t{constructor(e){this._remoteClient=e,this._resourceMap=new Map,this._inFlightResourceMap=new Map,this.geometryEngine=null,this.geometryEnginePromise=null;}destroy(){}async fetchResource(t,r){const s=this._resourceMap,i=s.get(t);if(i)return i;let n=this._inFlightResourceMap.get(t);if(n)return n;try{n=this._remoteClient.invoke("tileRenderer.fetchResource",{url:t},{...r}),this._inFlightResourceMap.set(t,n),n.then((e=>(this._inFlightResourceMap.delete(t),s.set(t,e),e)));}catch(o){return j$1(o)?null:{width:0,height:0}}return n}getResource(e){return this._resourceMap.get(e)??null}}

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
function I(e,t){return (!e.minScale||e.minScale>=t)&&(!e.maxScale||e.maxScale<=t)}function v(e){const t=e.message,r={message:{data:{},tileKey:t.tileKey,tileKeyOrigin:t.tileKeyOrigin,version:t.version},transferList:new Array};for(const a in t.data){const e=t.data[a];if(r.message.data[a]=null,r$1(e)){const t=e.stride,i=e.indices.slice(0),o=e.vertices.slice(0),n=e.records.slice(0),l={stride:t,indices:i,vertices:o,records:n,metrics:o$1(e.metrics,(e=>e.slice(0)))};r.transferList.push(i,o,n),r.message.data[a]=l;}}return r}let M=class extends p{constructor(){super(...arguments),this.type="symbol",this._matchers={feature:null,aggregate:null},this._bufferData=new Map,this._bufferIds=new Map;}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))]),this._resourceManagerProxy=new t(this.remoteClient);}destroy(){this._resourceManagerProxy.destroy();}get supportsTileUpdates(){return !0}forEachBufferId(e){this._bufferIds.forEach((t=>{t.forEach(e);}));}async update(e,t){const s=t.schema.processors[0];if("symbol"!==s.type)return;const r=m(this._schema,s);(a$1(r,"mesh")||a$1(r,"target"))&&(e.mesh=!0,e.why?.mesh.push("Symbology changed"),this._schema=s,this._factory=this._createFactory(s),this._factory.update(s,this.tileStore.tileScheme.tileInfo));}onTileMessage(e,t,s,r){return f(r),this._onTileData(e,t,s,r)}onTileClear(e){const t={clear:!0};return this._bufferData.delete(e.key.id),this._bufferIds.delete(e.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t})}onTileError(e,t,s){const r=s.signal,i={tileKey:e.id,error:t};return this.remoteClient.invoke("tileRenderer.onTileError",i,{signal:r})}onTileUpdate(e){for(const t of e.removed)this._bufferData.has(t.key.id)&&this._bufferData.delete(t.key.id),this._bufferIds.has(t.key.id)&&this._bufferIds.delete(t.key.id);for(const t of e.added)this._bufferData.forEach((e=>{for(const s of e)s.message.tileKey===t.id&&this._updateTileMesh("append",t,v(s),[],!1,!1,null);}));}_addBufferData(e,t){this._bufferData.has(e)||this._bufferData.set(e,[]),this._bufferData.get(e)?.push(v(t));}_createFactory(e){const{geometryType:t,objectIdField:r,fields:i}=this.service,a=(e,t)=>this.remoteClient.invoke("tileRenderer.getMaterialItems",e,t),o$2={geometryType:t,fields:i,spatialReference:f$1.fromJSON(this.spatialReference)},n$1=new x(a,this.tileStore.tileScheme.tileInfo),{matcher:l,aggregateMatcher:c}=e.mesh;return this._store=n$1,this._matchers.feature=o(l,n$1,o$2,this._resourceManagerProxy),this._matchers.aggregate=o$1(c,(e=>o(e,n$1,o$2,this._resourceManagerProxy))),new n(t,r,n$1)}async _onTileData(e,t,s,a){f(a);const{type:o,addOrUpdate:l,remove:c,clear:d,end:h}=t,f$1=!!this._schema.mesh.sortKey;if(!l){const t={type:o,addOrUpdate:null,remove:c,clear:d,end:h,sort:f$1};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},a)}const m=this._processFeatures(e,l,s,a,t.status?.version);try{const s=await m;if(t$1(s)){const t={type:o,addOrUpdate:null,remove:c,clear:d,end:h,sort:f$1};return this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:e.id,data:t},a)}const n=[];for(const t of s){let s=!1;const r=t.message.bufferIds,a=e.key.id,o=t.message.tileKey;if(a!==o&&r$1(r)){if(!this.tileStore.get(o)){this._addBufferData(a,t),n.push(t);continue}let e=this._bufferIds.get(o);e||(e=new Set,this._bufferIds.set(o,e));const i=Array.from(r);for(const t of i){if(e.has(t)){s=!0;break}e.add(t);}}s||(this._addBufferData(a,t),n.push(t));}await Promise.all(n.map((s=>{const r=e.key.id===s.message.tileKey,i=r?t.remove:[],n=r&&t.end;return this._updateTileMesh(o,e,s,i,n,!!t.clear,a.signal)})));}catch(u){this._handleError(e,u,a);}}async _updateTileMesh(e,t,r,i,a,l,c){const d=e,h=r.message.tileKey,f$1=!!this._schema.mesh.sortKey;h!==t.key.id&&(a=!1);const m=o$1(r,(e=>e.message)),u=o$1(r,(e=>e.transferList))||[],g={type:d,addOrUpdate:m,remove:i,clear:l,end:a,sort:f$1},p={transferList:e$1(u)||[],signal:c};return f(p),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:h,data:g},p)}async _processFeatures(e,t,s,i,a){if(t$1(t)||!t.hasFeatures)return null;const o={transform:e.transform,hasZ:!1,hasM:!1},l=this._factory,c={viewingMode:"",scale:e.scale},d=await this._matchers.feature,h=await this._matchers.aggregate;f(i);const f$1=this._getLabelInfos(e,t);return await l.analyze(t.getCursor(),this._resourceManagerProxy,d,h,o,c),f(i),this._writeFeatureSet(e,t,o,f$1,l,s,a)}_writeFeatureSet(e,t,s,r,a,o,n){const l=t.getSize(),c=this._schema.mesh.matcher.symbologyType,d=new E(e.key.id,{features:l,records:l,metrics:0},c,o,c!==S.HEATMAP,n),h={viewingMode:"",scale:e.scale},f=t.getCursor();for(;f.next();)try{const t=f.getDisplayId(),o=r$1(r)?r.get(t):null;a.writeCursor(d,f,s,h,e.level,o,this._resourceManagerProxy);}catch(p){}const m=e.tileInfoView.tileInfo.isWrappable;return d.serialize(m)}_handleError(e,t,s){if(!j$1(t)){const r={tileKey:e.id,error:t.message};return this.remoteClient.invoke("tileRenderer.onTileError",r,{signal:s.signal})}return Promise.resolve()}_getLabelingSchemaForScale(e){const t=this._schema.mesh.labels;if(t$1(t))return null;if("subtype"===t.type){const s={type:"subtype",classes:{}};let r=!1;for(const i in t.classes){const a=t.classes[i].filter((t=>I(t,e.scale)));r=r||!!a.length,s.classes[i]=a;}return r?s:null}const s=t.classes.filter((t=>I(t,e.scale)));return s.length?{type:"simple",classes:s}:null}_getLabels(e,t){if("subtype"===t.type){const s=this.service.subtypeField,r=c$1(s,"Expected to find subtype Field"),i=e.readAttribute(r);return null==i?[]:t.classes[i]??[]}return t.classes}_getLabelInfos(e,s){const i$1=this._getLabelingSchemaForScale(e);if(t$1(i$1))return null;const a=new Map,o=s.getCursor();for(;o.next();){const e=o.getDisplayId(),s=[],r=p$1(e),n=r&&1!==o.readAttribute("cluster_count")?"aggregate":"feature",l=this._getLabels(o,i$1);for(const i$1 of l){if(i$1.target!==n)continue;const a=o.getStorage(),l=r&&"feature"===n?a.getComputedStringAtIndex(o.readAttribute("referenceId"),i$1.fieldIndex):a.getComputedStringAtIndex(e,i$1.fieldIndex);if(!l)continue;const c=i(l.toString()),d=c[0],h=c[1];this._store.getMosaicItem(i$1.symbol,n$1(d)).then((e=>{s[i$1.index]={glyphs:e.glyphMosaicItems??[],rtl:h,index:i$1.index};}));}a.set(e,s);}return a}};M=e([a("esri.views.2d.layers.features.processors.SymbolProcessor")],M);const T=M;

export { T as default };
