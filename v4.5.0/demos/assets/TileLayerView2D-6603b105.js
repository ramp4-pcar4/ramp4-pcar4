import { bl as i$1, bm as h, bn as y, bo as r, bp as l$1, ar as E$1, bq as j$1, av as e, p as s$1, e as e$1, y as y$1, k as a$1 } from './main-5658cd6e.js';
import './MagnifierPrograms-8e8ca424.js';
import './Container-1d8ffe9c.js';
import './BufferPool-a16c9fc1.js';
import './color-6132b2c2.js';
import './WGLContainer-ac280853.js';
import './enums-1f7f0b0a.js';
import './Texture-aefe232f.js';
import './ProgramTemplate-cc07a7d7.js';
import './MaterialKey-99ff6359.js';
import './utils-6a1fc53c.js';
import './VertexArrayObject-2ba4bad7.js';
import './StyleDefinition-1998cf52.js';
import './enums-6436e7c1.js';
import './OrderIndependentTransparency-639df392.js';
import './floatRGBA-0f682c7a.js';
import './webgl-debug-e97fec6d.js';
import { a as ae } from './GraphicsView2D-d60c0d5b.js';
import './AttributeStoreView-2c6b7676.js';
import './earcut-336027d9.js';
import './vec3f32-b6e01a26.js';
import { t, o, n as n$1 } from './imageUtils-a987b172.js';
import { f as f$1, u } from './LayerView-cbc55a02.js';
import { n } from './HighlightGraphicContainer-ffe99ebe.js';
import { i } from './RefreshableLayerView-bc0c3310.js';
import { P, S, a } from './drapedUtils-4b0a324f.js';
import './preload-helper-a4975f27.js';
import './_commonjsHelpers-1f64d0d1.js';
import './ExpandedCIM-78770fa3.js';
import './BidiEngine-7b4fd637.js';
import './GeometryUtils-69e79e12.js';
import './enums-9c1aeae9.js';
import './definitions-281daf3f.js';
import './Rect-e55bfbac.js';
import './quantizationUtils-ec270d9a.js';
import './rasterizingUtils-96ef117a.js';
import './GeometryUtils-7c55c6d6.js';
import './imageutils-08b5855d.js';
import './Matcher-df890909.js';
import './visualVariablesUtils-93e46889.js';
import './visualVariablesUtils-1950eea1.js';
import './tileUtils-f6baf24c.js';
import './TurboLine-b7a337a5.js';
import './devEnvironmentUtils-d73295e7.js';
import './CircularArray-017fe5d1.js';
import './ComputedAttributeStorage-8c98a3c7.js';
import './arcadeTimeUtils-53abd942.js';
import './executionError-ed2c63c0.js';
import './centroid-c9063998.js';
import './VertexElementDescriptor-a439aa9a.js';
import './config-c354710d.js';
import './basicInterfaces-9de11baf.js';
import './normalizeUtilsSync-c3a052ce.js';
import './projectionSupport-90bb00b7.js';
import './json-ce6e5728.js';
import './schemaUtils-b103f304.js';
import './util-0ab7a9cb.js';
import './TiledDisplayObject-4282c17d.js';
import './BitmapTileContainer-b1ad1d7a.js';
import './Bitmap-076fab0d.js';
import './TileContainer-76cc62ef.js';
import './BaseGraphicContainer-6190d2a2.js';
import './FeatureContainer-eea18812.js';
import './popupUtils-678d5012.js';

/*
All material copyright ESRI, All Rights Reserved, unless otherwise specified.
See https://js.arcgis.com/4.26/esri/copyright.txt for details.
*/
const T=[0,0];let v=class extends(i(t(f$1(u)))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new i$1,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null;}get resampling(){return !("resampling"in this.layer)||!1!==this.layer.resampling}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this._highlightView?.processUpdate(e);}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null;if(this._tileInfoView=new h(this.layer.tileInfo,this.layer.fullExtent),this._fetchQueue=new y({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(e,i)=>this.fetchTile(e,i)}),this._tileStrategy=new r({cachePolicy:"keep",resampling:this.resampling,acquireTile:e=>this.acquireTile(e),releaseTile:e=>this.releaseTile(e),tileInfoView:this._tileInfoView}),P(this,this.layer)){const e=this._highlightView=new ae({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new n(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new S({createFetchPopupFeaturesQueryGeometry:(e,i)=>a(e,i,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(i,t)=>{e.graphicUpdateHandler({graphic:i,property:t});},layerView:this,updatingHandles:this.updatingHandles});}this.requestUpdate(),this.addAttachHandles(l$1((()=>this.resampling),(()=>{this.doRefresh();}))),super.attach();}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null;}async fetchPopupFeatures(e,i){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(e,i):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):{remove(){}}}moveStart(){this.requestUpdate();}viewChange(){this.requestUpdate();}moveEnd(){this.requestUpdate();}supportsSpatialReference(e){return E$1(this.layer.tileInfo?.spatialReference,e)}async doRefresh(){!this.attached||this.updateRequested||this.suspended||(this._fetchQueue.reset(),this._tileStrategy.tiles.forEach((e=>this._enqueueTileFetch(e))));}isUpdating(){return this._fetchQueue?.updating??!1}acquireTile(e){const i=this._bitmapView.createTile(e),t=i.bitmap;return [t.x,t.y]=this._tileInfoView.getTileCoords(T,i.key),t.resolution=this._tileInfoView.getTileResolution(i.key),[t.width,t.height]=this._tileInfoView.tileInfo.size,this._enqueueTileFetch(i),this._bitmapView.addChild(i),this.requestUpdate(),i}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",(()=>e.destroy())),this.requestUpdate();}async fetchTile(e$1,i={}){const r="tilemapCache"in this.layer?this.layer.tilemapCache:null,{signal:s,resamplingLevel:o$1=0}=i;if(!r)try{return await this._fetchImage(e$1,s)}catch(a){if(!j$1(a)&&!this.resampling)return o(this._tileInfoView.tileInfo.size);if(o$1<3){const t=this._tileInfoView.getTileParentId(e$1.id);if(t){const r=new e(t),s=await this.fetchTile(r,{...i,resamplingLevel:o$1+1});return n$1(this._tileInfoView,s,r,e$1)}}throw a}const l=new e(0,0,0,0);let h;try{if(await r.fetchAvailabilityUpsample(e$1.level,e$1.row,e$1.col,l,{signal:s}),l.level!==e$1.level&&!this.resampling)return o(this._tileInfoView.tileInfo.size);h=await this._fetchImage(l,s);}catch(a){if(j$1(a))throw a;h=await this._fetchImage(e$1,s);}return this.resampling?n$1(this._tileInfoView,h,l,e$1):h}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const i=await this._fetchQueue.push(e.key);e.bitmap.source=i,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",(()=>this.requestUpdate()));}catch(r){j$1(r)||s$1.getLogger(this.declaredClass).error(r);}this.requestUpdate();}}async _fetchImage(e,i){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:i})}};e$1([y$1()],v.prototype,"_fetchQueue",void 0),e$1([y$1()],v.prototype,"resampling",null),v=e$1([a$1("esri.views.2d.layers.TileLayerView2D")],v);const I=v;

export { I as default };
