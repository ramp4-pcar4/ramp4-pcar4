import{bn as h,bo as u}from"./main-DnzmeE4U.js";import{a as M}from"./CIMSymbolHelper-Bcp4nGf3.js";import{CIMSymbolRasterizer as F}from"./CIMSymbolRasterizer-DA73qZaB.js";import{OverrideHelper as R}from"./OverrideHelper-GkMo7t6B.js";import{V as j}from"./utils-BYqzY6_X.js";import{t as S,l as V}from"./utils-C1HQJ6Ct.js";const f=new F(null),g=h(S.size),P=h(S.maxSize),v=h(S.lineWidth),q=1;async function D(o,e,s){const i=e?.size;let t=i!=null&&typeof i=="object"&&"width"in i?i.width:i,l=i!=null&&typeof i=="object"&&"height"in i?i.height:i;if(t==null||l==null)if(s==="esriGeometryPolygon")t=l=e.maxSize?Math.min(e.maxSize,g):g;else{const a=await E(o,e,s);a&&(t=a.width,l=a.height),s==="esriGeometryPolyline"&&(t=e.maxSize?Math.min(e.maxSize,v):v),t=t!=null&&isFinite(t)?Math.min(t,P):g,l=l!=null&&isFinite(l)?Math.max(Math.min(l,P),q):g}return e.style==="legend"&&s==="esriGeometryPolyline"&&(t=v),{width:t,height:l}}async function E(o,e,s){const{feature:i,fieldMap:t,viewParams:l}=e.cimOptions||e,a=await R.resolveSymbolOverrides(o.data,i,null,t,s,null,l);if(!a)return null;(o=o.clone()).data={type:"CIMSymbolReference",symbol:a},o.data.primitiveOverrides=void 0;const r=[];return M.fetchResources(a,f.resourceManager,r),M.fetchFonts(a,f.resourceManager,r),r.length>0&&await Promise.all(r),M.getEnvelope(a,null,f.resourceManager)}async function U(o,e={}){const{node:s,opacity:i,symbolConfig:t}=e,l=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,a=e.cimOptions||e,r=a.geometryType||j(o?.data?.symbol),n=await D(o,e,r),{feature:C,fieldMap:G}=a,I=e?.geometry||l||r!=="esriGeometryPolygon"?"preview":"legend";let x=n;const z=n;if(e?.geometry&&(r==="esriGeometryPolygon"||r==="esriGeometryPolyline")&&(u(n.width)<200||u(n.height)<200)){const b=n.width>n.height?h(200)*n.height/n.width:h(200);x={width:n.width>n.height?h(200):h(200)*n.width/n.height,height:b}}const d=await f.rasterizeCIMSymbolAsync(o,C,x,I,G,r,null,a.viewParams,a.allowScalingUp,e?.geometry?.toJSON());if(!d)return null;const{width:L,height:O}=d,c=document.createElement("canvas");c.width=L,c.height=O,c.getContext("2d").putImageData(d,0,0);const p=u(z.width),w=u(z.height),m=new Image(p,w);m.src=c.toDataURL(),m.ariaLabel=e.ariaLabel??null,m.alt=e.ariaLabel??"",i!=null&&(m.style.opacity=`${i}`);let y=m;if(e.effectView!=null){const b={shape:{type:"image",x:0,y:0,width:p,height:w,src:m.src},fill:null,stroke:null,offset:[0,0]};y=V([[b]],[p,w],{effectView:e.effectView,ariaLabel:e.ariaLabel})}return s&&y&&s.appendChild(y),y}export{U as previewCIMSymbol};
