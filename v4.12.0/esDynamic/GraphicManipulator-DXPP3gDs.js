import{bo as p,a3 as P,d4 as x,a4 as w,a7 as D,eO as G,eP as g,x as a,z as n,K as z,a9 as M,eQ as I}from"./main-DnzmeE4U.js";import{b as d}from"./vec2-BnynUbeJ.js";import{p as H}from"./vec32-BuqRmYBM.js";import{L,O}from"./projection-m8vi7Cxv.js";import{c as E}from"./projectPointToVector-CG1hALQu.js";import{m as k}from"./SketchViewModel-T2dNp9Tt.js";import{h as R}from"./ElevationInfo-DkWlof50.js";import{i as X}from"./drapedUtils-7RfmdK5D.js";function f(t){let s=0,i=0,e=0;return t?(t.type==="cim"&&t.data.symbol&&"symbolLayers"in t.data.symbol&&t.data.symbol.symbolLayers&&t.data.symbol.symbolLayers.map(l=>{l.type==="CIMVectorMarker"&&l.anchorPoint&&(Math.abs(l.anchorPoint.x)>s&&(s=l.anchorPoint.x),Math.abs(l.anchorPoint.y)>i&&(i=l.anchorPoint.y),l.size!=null&&l.size>e&&(e=l.size))}),s=p(s),i=p(i),e=p(e),{offsetX:s,offsetY:i,size:e}):{offsetX:s,offsetY:i,size:e}}let o=class extends P{set graphic(t){this._circleCollisionCache=null,this._originalSymbol=t.symbol,this._set("graphic",t),this.attachSymbolChanged()}get elevationInfo(){const{layer:t}=this.graphic,s=t&&"elevationInfo"in t?t.elevationInfo:null,i=k(this.graphic),e=s?s.offset:0;return new R({mode:i,offset:e})}set focusedSymbol(t){t!==this._get("focusedSymbol")&&(this._set("focusedSymbol",t),this._updateGraphicSymbol(),this._circleCollisionCache=null)}grabbableForEvent(){return!0}set grabbing(t){t!==this._get("grabbing")&&(this._set("grabbing",t),this._updateGraphicSymbol())}set hovering(t){t!==this._get("hovering")&&(this._set("hovering",t),this._updateGraphicSymbol())}set selected(t){t!==this._get("selected")&&(this._set("selected",t),this._updateGraphicSymbol(),this.events.emit("select-changed",{action:t?"select":"deselect"}))}get _focused(){return this._get("hovering")||this._get("grabbing")}constructor(t){super(t),this.layer=null,this.interactive=!0,this.selectable=!1,this.grabbable=!0,this.dragging=!1,this.cursor=null,this.consumesClicks=!0,this.events=new x.EventEmitter,this._circleCollisionCache=null,this._graphicSymbolChangedHandle=null,this._originalSymbol=null}destroy(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this._set("view",null)}intersectionDistance(t){const s=this.graphic;if(s.visible===!1)return null;const i=s.geometry;if(i==null)return null;const e=this._get("focusedSymbol"),l=e??s.symbol;return this.view.type==="2d"?this._intersectDistance2D(this.view,t,i,l):this._intersectDistance3D(this.view,t,s)}attach(){this.attachSymbolChanged(),this.layer!=null&&this.layer.add(this.graphic)}detach(){this.detachSymbolChanged(),this._resetGraphicSymbol(),this.layer!=null&&this.layer.remove(this.graphic)}attachSymbolChanged(){this.detachSymbolChanged(),this._graphicSymbolChangedHandle=w(()=>this.graphic?.symbol,t=>{t!=null&&t!==this.focusedSymbol&&t!==this._originalSymbol&&(this._originalSymbol=t,this._focused&&this.focusedSymbol!=null&&(this.graphic.symbol=this.focusedSymbol))},D)}detachSymbolChanged(){this._graphicSymbolChangedHandle!=null&&(this._graphicSymbolChangedHandle.remove(),this._graphicSymbolChangedHandle=null)}onElevationChange(){}onViewChange(){}_updateGraphicSymbol(){this.graphic.symbol=this._focused&&this.focusedSymbol!=null?this.focusedSymbol:this._originalSymbol}_resetGraphicSymbol(){this.graphic.symbol=this._originalSymbol}_intersectDistance2D(t,s,i,e){if((e=e||G(i))==null)return null;const l=1;let h=this._circleCollisionCache;if(i.type==="point"&&e.type==="cim"&&e.data.symbol?.type==="CIMPointSymbol"&&e.data.symbol.symbolLayers){const{offsetX:c,offsetY:r,size:y}=f(e),m=g(s,S),u=y/2,b=t.toScreen(i),v=b.x+c,C=b.y+r;return d(m,[v,C])<u*u?l:null}if(i.type!=="point"||e.type!=="simple-marker")return X(s,i,t)?l:null;if(h==null||!h.originalPoint.equals(i)){const c=i,r=t.spatialReference;if(L(c.spatialReference,r)){const y=O(c,r);h={originalPoint:c.clone(),mapPoint:y,radiusPx:p(e.size)},this._circleCollisionCache=h}}if(h!=null){const c=g(s,S),r=t.toScreen?.(h.mapPoint);if(!r)return null;const y=h.radiusPx,m=r.x+p(e.xoffset),u=r.y-p(e.yoffset);return d(c,[m,u])<y*y?l:null}return null}_intersectDistance3D(t,s,i){const e=t.toMap(s,{include:[i]});return e&&E(e,_,t.renderSpatialReference)?H(_,t.state.camera.eye):null}};a([n({constructOnly:!0,nonNullable:!0})],o.prototype,"graphic",null),a([n()],o.prototype,"elevationInfo",null),a([n({constructOnly:!0,nonNullable:!0})],o.prototype,"view",void 0),a([n({value:null})],o.prototype,"focusedSymbol",null),a([n({constructOnly:!0})],o.prototype,"layer",void 0),a([n()],o.prototype,"interactive",void 0),a([n()],o.prototype,"selectable",void 0),a([n()],o.prototype,"grabbable",void 0),a([n({value:!1})],o.prototype,"grabbing",null),a([n()],o.prototype,"dragging",void 0),a([n()],o.prototype,"hovering",null),a([n({value:!1})],o.prototype,"selected",null),a([n()],o.prototype,"cursor",void 0),o=a([z("esri.views.interactive.GraphicManipulator")],o);const _=M(),S=I();export{o as S,f as s};
