import{s as d,bq as ee,bC as F,aJ as se,T as te,hE as D,df as $,hF as _,bk as w,b7 as m,X as l,bg as oe,Q as re,eE as ne,bc as ae,eD as ie,n as ce}from"./main-DnzmeE4U.js";import{r as le}from"./uuid-Dj9mdEVg.js";import{m as ue,b as pe,a as k,i as I,N as de}from"./External-BcEXC8Ad.js";import{F as fe,m as me,s as ge,u as he,k as we}from"./FeatureType-MZ846Ius.js";import{N as ye}from"./MeshTransform-CvTryVbE.js";import{i as be,n as Pe}from"./meshFeatureAttributes-72y3WnNN.js";const y="upload-assets",b=()=>new Error;class Te extends d{constructor(){super(`${y}:unsupported`,"Layer does not support asset uploads.",b())}}let ve=class extends d{constructor(){super(`${y}:no-glb-support`,"Layer does not support glb.",b())}},xe=class extends d{constructor(){super(`${y}:no-supported-source`,"No supported external source found",b())}};class Ae extends d{constructor(){super(`${y}:not-base-64`,"Expected gltf data in base64 format after conversion.",b())}}let Fe=class extends d{constructor(){super(`${y}:unable-to-prepare-options`,"Unable to prepare uploadAsset request options.",b())}},$e=class extends d{constructor(e,s){super(`${y}:bad-response`,`Bad response. Uploaded ${e} items and received ${s} results.`,b())}};class Ee extends d{constructor(s,t){super(`${y}-layer:upload-failed`,`Failed to upload mesh file ${s}. Error code: ${t?.code??"-1"}. Error message: ${t?.messages??"unknown"}`,b())}}let R=class extends d{constructor(e){super(`${y}-layer:unsupported-format`,`The service allowed us to upload an asset of FormatID ${e}, but it does not list it in its supported formats.`,b())}},Me=class extends d{constructor(){super(`${y}:convert3D-failed`,"convert3D failed.")}},Ne=class extends d{constructor(){super("invalid-input:no-model","No supported model found")}},je=class extends d{constructor(){super("invalid-input:multiple-models","Multiple supported models found")}};function C(e){const s=1/ee(e,1);return s!==1?new ye({scale:[s,s,s]}):void 0}const E={upload:{createFromFiles:.8,loadMesh:.2},uploadAssetBlobs:{prepareAssetItems:.9,uploadAssetItems:.1},uploadConvertibleSource:{uploadEditSource:.5,serviceAssetsToGlb:.5},uploadLocalMesh:{meshToAssetBlob:.5,uploadAssetBlobs:.5}};function P(e,s=o=>{},t){return new Se(e,s,t)}let Se=class{constructor(e,s=o=>{},t){if(this.onProgress=s,this.taskName=t,this._progressMap=new Map,this._startTime=void 0,this._timingsMap=new Map,typeof e=="number"){this._weights={};for(let o=0;o<e;o++){const r=o,n=1/e;this._weights[r]=n,this._progressMap.set(r,0)}}else this._weights=e;this.emitProgress()}emitProgress(){let e=0;for(const[s,t]of this._progressMap.entries())e+=t*this._weights[s];if(e===1&&F("enable-feature:esri-3dofl-upload-timings")){const s=Math.round(performance.now()-(this._startTime??0))/1e3;console.log(`${this.taskName} done in ${s} sec`);for(const[t,o]of this._timingsMap){const r=Math.round(o.end-o.start)/1e3,n=Math.round(r/s*100);console.log(this.taskName??"Task",{stepKey:t,stepTime:r,relativeTime:n})}}this.onProgress(e)}setProgress(e,s){if(this._progressMap.set(e,s),F("enable-feature:esri-3dofl-upload-timings")){const t=performance.now();this._startTime??=t;const o=se(this._timingsMap,e,()=>({start:t,end:0}));s===1&&(o.end=t)}this.emitProgress()}simulate(e,s){return O(t=>this.setProgress(e,t),s)}makeOnProgress(e){return s=>this.setProgress(e,s)}};function O(e=t=>{},s=Ce){const t=performance.now();e(0);const o=setInterval(()=>{const r=performance.now()-t,n=1-Math.exp(-r/s);e(n)},Re);return te(()=>{clearInterval(o),e(1)})}function De(e,s=ke){return D(_(e*U/s))}function _e(e,s=Ie){return D(_(e*U/s))}const ke=10,Ie=10,U=8e-6,Re=$(50),Ce=$(1e3),q=1e6,B=20*q,Oe=2e9,Ue=3;async function qe({data:e,name:s,description:t},o,r){let n=null;try{const a=w(o,"uploads"),i=w(a,"info"),{data:u}=await m(i,{query:{f:"json"},responseType:"json"});l(r);const g=oe(o),h=u.maxUploadFileSize*q,f=g?Oe:h,c=g?Math.min(B,h):B;if(e.size>f)throw new Error("Data too large");const G=w(a,"register"),{data:M}=await m(G,{query:{f:"json",itemName:Be(s),description:t},responseType:"json",method:"post"});if(l(r),!M.success)throw new Error("Registration failed");const{itemID:K}=M.item;n=w(a,K);const Q=w(n,"uploadPart"),N=Math.ceil(e.size/c),T=new Array;for(let p=0;p<N;++p)T.push(e.slice(p*c,Math.min((p+1)*c,e.size)));const v=T.slice().reverse(),j=new Array,W=P(N,r?.onProgress,"uploadItem"),X=async()=>{for(;v.length!==0;){const p=T.length-v.length,x=v.pop(),A=new FormData,Y=W.simulate(p,De(x.size));try{A.append("f","json"),A.append("file",x),A.append("partId",`${p}`);const{data:Z}=await m(Q,{timeout:0,body:A,responseType:"json",method:"post"});if(l(r),!Z.success)throw new Error("Part upload failed")}finally{Y.remove()}}};for(let p=0;p<Ue&&v.length!==0;++p)j.push(X());await Promise.all(j);const V=w(n,"commit"),{data:S}=await m(V,{query:{f:"json",parts:T.map((p,x)=>x).join(",")},responseType:"json",method:"post"});if(l(r),!S.success)throw new Error("Commit failed");return S.item}catch(a){if(n!=null){const i=w(n,"delete");await m(i,{query:{f:"json"},responseType:"json",method:"post"})}throw a}}function Be(e){return e.replaceAll("/","_").replaceAll("\\","_")}async function Le(e,s,t){const o=e.length;if(!o)return t?.onProgress?.(1),[];const r=P(o,t?.onProgress,"uploadAssets");return Promise.all(e.map((n,a)=>ze(n,s,{...t,onProgress:r.makeOnProgress(a)})))}async function ze(e,{layer:s,ongoingUploads:t},o){const r=t.get(e);if(r)return r;if(!is(s))throw new Te;if(He(e,s))return o?.onProgress?.(1),e;const n=Je(e,s,o);t.set(e,n);try{await n}finally{t.delete(e)}return e}function He(e,s){const{parsedUrl:t}=s;return t!=null&&e.metadata.externalSources.some(o=>ue(o,t))}async function Je(e,s,t){const{metadata:o}=e,{displaySource:r}=o,n=L(r?.source,s,{checkForConversionRequired:F("enable-feature:georeferenced-uploads")}),a=n!=null?Ge(n,s,t):o.externalSources.length>0?Ke(e,s,t):Qe(e,s,t),i=await a;return l(t),e.addExternalSources([i]),e}async function Ge(e,s,t){return{source:await z(e,s,t),original:!0,unitConversionDisabled:!0}}async function Ke(e,s,t){const o=J(s),{externalSources:r}=e.metadata,n=Xe(r,s);if(!n)throw new xe;const a=P(E.uploadConvertibleSource,t?.onProgress,"uploadConvertibleSource"),i=await z(n,s,{onProgress:a.makeOnProgress("uploadEditSource")});e.addExternalSources([{source:i,original:!0}]);const u=n.reduce((h,{asset:f})=>f instanceof File?h+f.size:h,0),g=a.simulate("serviceAssetsToGlb",_e(u));try{const{source:h,transform:f,origin:c}=await os(i,s,o);return e.transform=f,c&&(e.metadata.georeferenced=!0,t?.useAssetOrigin&&(e.vertexSpace.origin=[c.x,c.y,c.z??0],e.spatialReference=c.spatialReference)),{source:h,unitConversionDisabled:!0}}finally{g.remove()}}async function Qe(e,s,t){const o=P(E.uploadLocalMesh,t?.onProgress,"uploadLocalMesh"),r=We(e,s,{...t,onProgress:o.makeOnProgress("meshToAssetBlob")});return{source:await H([r],s,{...t,onProgress:o.makeOnProgress("uploadAssetBlobs")}),extent:e.extent.clone(),original:!0}}async function We(e,s,t){const o=J(s),r=await e.load(t),n=await r.toBinaryGLTF({origin:r.origin,signal:t?.signal,ignoreLocalTransform:!0,unitConversionDisabled:!0});return l(t),{blob:new Blob([n],{type:"model/gltf-binary"}),assetName:`${le()}.glb`,assetType:o}}function Xe(e,s){for(const t of e){const o=L(t.source,s);if(o)return o}return null}function L(e,{infoFor3D:s},t={}){if(!e)return null;const{supportedFormats:o,editFormats:r}=s,n=de(e),a=new Array,i=fe(s),u=me(s);let g=!1;for(const h of n){const f=Ve(h,o);if(!f)return null;const{assetType:c}=f;if(t.checkForConversionRequired&&(c===i||c===u))return null;r.includes(c)&&(g=!0),a.push(f)}return g?a:null}function Ve(e,s){const t=pe(e,s);return t?{asset:e,assetType:t}:null}async function z(e,s,t){return H(e.map(o=>Ye(o,t)),s,t)}async function H(e,s,t){const o=P(E.uploadAssetBlobs,t?.onProgress,"uploadAssetBlobs"),r=await es(e,s,{...t,onProgress:o.makeOnProgress("prepareAssetItems")});l(t);const n=r.map(({item:i})=>i),{uploadResults:a}=await ss(n,s,{...t,onProgress:o.makeOnProgress("uploadAssetItems")});return l(t),e.map((i,u)=>ts(r[u],a[u],s))}async function Ye(e,s){const{asset:t,assetType:o}=e;if(t instanceof File)return{blob:t,assetName:t.name,assetType:o};const r=await t.toBlob(s);return l(s),{blob:r,assetName:t.assetName,assetType:o}}async function Ze(e,s,t){const{blob:o,assetType:r,assetName:n}=e;let a=null;try{const i=await qe({data:o,name:n},s.url,t);l(t),a={assetType:r,assetUploadId:i.itemID}}catch(i){ae(i),cs().warnOnce(`Service ${s.url} does not support the REST Uploads API.`)}if(!a){const i=await ie(o);if(l(t),!i.isBase64)throw new Ae;a={assetType:r,assetData:i.data}}if(!a)throw new Fe;return{item:a,assetName:n}}function es(e,s,t){const o=P(e.length,t?.onProgress,"prepareAssetItems");return Promise.all(e.map(async(r,n)=>{const a=Ze(await r,s,{...t,onProgress:o.makeOnProgress(n)});return l(t),a}))}async function ss(e,s,t){const o=O(t?.onProgress);try{const r=await m(w(s.parsedUrl.path,"uploadAssets"),{timeout:0,query:{f:"json",assets:JSON.stringify(e)},method:"post",responseType:"json"});if(l(t),r.data.uploadResults.length!==e.length)throw new $e(e.length,r.data.uploadResults.length);return r.data}finally{o.remove()}}function ts(e,s,t){const{success:o}=s;if(!o){const{error:g}=s;throw new Ee(e.assetName,g)}const{assetHash:r}=s,{assetName:n,item:{assetType:a}}=e,{infoFor3D:{supportedFormats:i}}=t,u=ge(a,i);if(!u)throw new R(a);return new k(n,u,[new I(`${t.parsedUrl.path}/assets/${r}`,r)])}async function os(e,s,t){const o=e.map(({assetName:n,parts:a})=>({assetName:n,assetHash:a[0].partHash}));let r;try{const n=w(s.parsedUrl.path,"convert3D"),a=s.capabilities?.operations.supportsAsyncConvert3D;r=(await(a?as:ns)(n,{query:{f:"json",assets:JSON.stringify(o),transportType:"esriTransportTypeUrl",targetFormat:t,async:a},responseType:"json",timeout:0})).data}catch{throw new Me}return rs(s,r)}function rs(e,s){const t={source:s.assets.map(o=>{const r=he(o.contentType,e.infoFor3D.supportedFormats);if(!r)throw new R(r);return new k(o.assetName,o.contentType,[new I(o.assetURL,o.assetHash)])}),origin:void 0,transform:void 0};if(F("enable-feature:georeferenced-uploads")&&s.transform){if(t.transform=be(s.transform),s.spatialReference){const o=re.fromJSON(s.spatialReference);t.origin=Pe(s.transform,o)}}else t.transform=C(e.spatialReference);return t}function ns(e,s){return m(e,s)}async function as(e,s){const t=(await m(e,s)).data.statusUrl;for(;;){const o=(await m(t,{query:{f:"json"},responseType:"json"})).data;switch(o.status){case"Completed":return m(o.resultUrl,{query:{f:"json"},responseType:"json"});case"CompletedWithErrors":throw new Error(o.status);case"Failed ImportChanges":case"InProgress":case"Pending":case"ExportAttachments":case"ExportChanges":case"ExportingData":case"ExportingSnapshot":case"ImportAttachments":case"ProvisioningReplica":case"UnRegisteringReplica":break;default:throw new Error}await ne(ls)}}function is(e){return!!e.infoFor3D&&!!e.url}function J({infoFor3D:e}){const s=we(e);if(!s)throw new ve;return s}function cs(){return ce.getLogger("esri.layers.graphics.sources.support.uploadAssets")}const ls=$(1e3),us=Object.freeze(Object.defineProperty({__proto__:null,uploadAssets:Le},Symbol.toStringTag,{value:"Module"}));export{Ne as i,je as m,C as t,us as u};
