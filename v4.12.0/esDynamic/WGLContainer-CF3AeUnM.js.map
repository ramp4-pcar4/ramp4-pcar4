{"version":3,"file":"WGLContainer-CF3AeUnM.js","sources":["../../node_modules/@arcgis/core/core/libs/gl-matrix-2/factories/vec4f32.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrush.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/shaderRepository.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/sources/resolver.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/BackgroundPrograms.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/BrushClip.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/DefaultVertexAttributeLayouts.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushStencil.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/TiledDisplayObject.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/AFeatureTile.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/FreeList.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureDisplayList.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/ReshufflePlan.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/PooledUint32Array.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/Buffer.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/cpuMapped/MappedMesh.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/util/Reader.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/mesh/meshDebugUtils.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/FeatureTile.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/shaders/TileInfoPrograms.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushTileDebugInfo.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLBackground.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLCircle.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLFill.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLLine.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/GeometryUtils.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/brushes/WGLBrushVTLSymbol.js","../../node_modules/@arcgis/core/views/2d/engine/brushes.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/Mesh2D.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/ClippingInfo.js","../../node_modules/@arcgis/core/views/2d/engine/webgl/WGLContainer.js"],"sourcesContent":["/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nfunction n(){return new Float32Array(4)}function t(n){const t=new Float32Array(4);return t[0]=n[0],t[1]=n[1],t[2]=n[2],t[3]=n[3],t}function r(n,t,r,e){const o=new Float32Array(4);return o[0]=n,o[1]=t,o[2]=r,o[3]=e,o}function e(n,t){return new Float32Array(n,t,4)}function o(){return n()}function u(){return r(1,1,1,1)}function c(){return r(1,0,0,0)}function i(){return r(0,1,0,0)}function a(){return r(0,0,1,0)}function f(){return r(0,0,0,1)}const l=o(),_=u(),s=c(),y=i(),w=a(),N=f(),T=Object.freeze(Object.defineProperty({__proto__:null,ONES:_,UNIT_W:N,UNIT_X:s,UNIT_Y:y,UNIT_Z:w,ZEROS:l,clone:t,create:n,createView:e,fromValues:r,ones:u,unitW:f,unitX:c,unitY:i,unitZ:a,zeros:o},Symbol.toStringTag,{value:\"Module\"}));export{_ as ONES,N as UNIT_W,s as UNIT_X,y as UNIT_Y,w as UNIT_Z,l as ZEROS,t as clone,n as create,e as createView,r as fromValues,u as ones,f as unitW,c as unitX,i as unitY,a as unitZ,T as v,o as zeros};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(){this.name=this.constructor.name||\"UnnamedBrush\",this.brushEffect=null}prepareState(t,r){}draw(t,r,s){}drawMany(t,r,s){for(const a of r)a.visible&&this.draw(t,a,s)}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst e={background:{\"background.frag\":\"uniform lowp vec4 u_color;\\nvoid main() {\\ngl_FragColor = u_color;\\n}\",\"background.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump vec2 u_coord_range;\\nuniform mediump float u_depth;\\nvoid main() {\\nvec3 v_pos = u_dvsMat3 * vec3(u_coord_range * a_pos, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\n}\"},bitBlit:{\"bitBlit.frag\":\"uniform lowp sampler2D u_tex;\\nuniform lowp float u_opacity;\\nvarying mediump vec2 v_uv;\\nvoid main() {\\nlowp vec4 color = texture2D(u_tex, v_uv);\\ngl_FragColor = color * u_opacity;\\n}\",\"bitBlit.vert\":\"attribute vec2 a_pos;\\nattribute vec2 a_tex;\\nvarying mediump vec2 v_uv;\\nvoid main(void) {\\ngl_Position = vec4(a_pos , 0.0, 1.0);\\nv_uv = a_tex;\\n}\"},debug:{overlay:{\"overlay.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvoid main(void) {\\ngl_FragColor = v_color;\\n}\",\"overlay.vert\":\"attribute vec3 a_PositionAndFlags;\\nuniform mat3 u_dvsMat3;\\nuniform vec4 u_colors[4];\\nuniform float u_opacities[4];\\nvarying vec4 v_color;\\nvoid main(void) {\\nvec2 position = a_PositionAndFlags.xy;\\nfloat flags = a_PositionAndFlags.z;\\nint colorIndex = int(mod(flags, 4.0));\\nvec4 color;\\nfor (int i = 0; i < 4; i++) {\\ncolor = u_colors[i];\\nif (i == colorIndex) {\\nbreak;\\n}\\n}\\nint opacityIndex = int(mod(floor(flags / 4.0), 4.0));\\nfloat opacity;\\nfor (int i = 0; i < 4; i++) {\\nopacity = u_opacities[i];\\nif (i == opacityIndex) {\\nbreak;\\n}\\n}\\nv_color = color * opacity;\\ngl_Position = vec4((u_dvsMat3 * vec3(position, 1.0)).xy, 0.0, 1.0);\\n}\"}},dot:{dot:{\"dot.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nuniform highp float u_tileZoomFactor;\\nvoid main()\\n{\\nfloat dist = length(gl_PointCoord - vec2(.5, .5)) * 2.;\\nfloat alpha = smoothstep(0., 1., v_invEdgeRatio * (dist - v_dotRatio) + 1.);\\ngl_FragColor = v_color * alpha;\\n}\",\"dot.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nuniform sampler2D u_texture;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp float u_tileZoomFactor;\\nuniform highp float u_dotSize;\\nuniform highp float u_pixelRatio;\\nvarying vec2 v_pos;\\nvarying vec4 v_color;\\nvarying float v_dotRatio;\\nvarying float v_invEdgeRatio;\\nconst float EPSILON = 0.000001;\\nvoid main()\\n{\\nmat3 tileToTileTexture = mat3(  1., 0., 0.,\\n0., -1., 0.,\\n0., 1., 1.  );\\nvec3 texCoords = tileToTileTexture * vec3(a_pos.xy / 512., 1.);\\nv_color = texture2D(u_texture, texCoords.xy);\\nfloat smoothEdgeWidth = max(u_dotSize / 2., 1.) ;\\nfloat z = 0.;\\nz += 2.0 * step(v_color.a, EPSILON);\\ngl_PointSize = (smoothEdgeWidth + u_dotSize);\\ngl_Position = vec4((u_dvsMat3 * vec3(a_pos + .5, 1.)).xy, z, 1.);\\nv_dotRatio = u_dotSize / gl_PointSize;\\nv_invEdgeRatio = -1. / ( smoothEdgeWidth / gl_PointSize );\\ngl_PointSize  *= (u_pixelRatio * u_tileZoomFactor);\\n}\"}},filtering:{\"bicubic.glsl\":\"vec4 computeWeights(float v) {\\nfloat b = 1.0 / 6.0;\\nfloat v2 = v * v;\\nfloat v3 = v2 * v;\\nfloat w0 = b * (-v3 + 3.0 * v2 - 3.0 * v + 1.0);\\nfloat w1 = b * (3.0 * v3  - 6.0 * v2 + 4.0);\\nfloat w2 = b * (-3.0 * v3 + 3.0 * v2 + 3.0 * v + 1.0);\\nfloat w3 = b * v3;\\nreturn vec4(w0, w1, w2, w3);\\n}\\nvec4 bicubicOffsetsAndWeights(float v) {\\nvec4 w = computeWeights(v);\\nfloat g0 = w.x + w.y;\\nfloat g1 = w.z + w.w;\\nfloat h0 = 1.0 - (w.y / g0) + v;\\nfloat h1 = 1.0 + (w.w / g1) - v;\\nreturn vec4(h0, h1, g0, g1);\\n}\\nvec4 sampleBicubicBSpline(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 eX = vec2(1.0 / texSize.x, 0.0);\\nvec2 eY = vec2(0.0, 1.0 / texSize.y);\\nvec2 texel = coords * texSize - 0.5;\\nvec3 hgX = bicubicOffsetsAndWeights(fract(texel).x).xyz;\\nvec3 hgY = bicubicOffsetsAndWeights(fract(texel).y).xyz;\\nvec2 coords10 = coords + hgX.x * eX;\\nvec2 coords00 = coords - hgX.y * eX;\\nvec2 coords11 = coords10 + hgY.x * eY;\\nvec2 coords01 = coords00 + hgY.x * eY;\\ncoords10 = coords10 - hgY.y * eY;\\ncoords00 = coords00 - hgY.y * eY;\\nvec4 color00 = texture2D(sampler, coords00);\\nvec4 color10 = texture2D(sampler, coords10);\\nvec4 color01 = texture2D(sampler, coords01);\\nvec4 color11 = texture2D(sampler, coords11);\\ncolor00 = mix(color00, color01, hgY.z);\\ncolor10 = mix(color10, color11, hgY.z);\\ncolor00 = mix(color00, color10, hgX.z);\\nreturn color00;\\n}\",\"bilinear.glsl\":\"vec4 sampleBilinear(sampler2D sampler, vec2 coords, vec2 texSize) {\\nvec2 texelStart = floor(coords * texSize);\\nvec2 coord0 = texelStart / texSize;\\nvec2 coord1 = (texelStart +  vec2(1.0, 0.0)) / texSize;\\nvec2 coord2 = (texelStart +  vec2(0.0, 1.0)) / texSize;\\nvec2 coord3 = (texelStart +  vec2(1.0, 1.0)) / texSize;\\nvec4 color0 = texture2D(sampler, coord0);\\nvec4 color1 = texture2D(sampler, coord1);\\nvec4 color2 = texture2D(sampler, coord2);\\nvec4 color3 = texture2D(sampler, coord3);\\nvec2 blend = fract(coords * texSize);\\nvec4 color01 = mix(color0, color1, blend.x);\\nvec4 color23 = mix(color2, color3, blend.x);\\nvec4 color = mix(color01, color23, blend.y);\\n#ifdef NNEDGE\\nfloat alpha = floor(color0.a * color1.a * color2.a * color3.a + 0.5);\\ncolor = color * alpha + (1.0 - alpha) * texture2D(sampler, coords);\\n#endif\\nreturn color;\\n}\",\"epx.glsl\":\"vec4 sampleEPX(sampler2D sampler, float size, vec2 coords, vec2 texSize) {\\nvec2 invSize = 1.0 / texSize;\\nvec2 texel = coords * texSize;\\nvec2 texel_i = floor(texel);\\nvec2 texel_frac = fract(texel);\\nvec4 colorP = texture2D(sampler, texel_i * invSize);\\nvec4 colorP1 = vec4(colorP);\\nvec4 colorP2 = vec4(colorP);\\nvec4 colorP3 = vec4(colorP);\\nvec4 colorP4 = vec4(colorP);\\nvec4 colorA = texture2D(sampler, (texel_i - vec2(0.0, 1.0)) * invSize);\\nvec4 colorB = texture2D(sampler, (texel_i + vec2(1.0, 0.0)) * invSize);\\nvec4 colorC = texture2D(sampler, (texel_i - vec2(1.0, 0.0)) * invSize);\\nvec4 colorD = texture2D(sampler, (texel_i + vec2(0.0, 1.0)) * invSize);\\nif (colorC == colorA && colorC != colorD && colorA != colorB) {\\ncolorP1 = colorA;\\n}\\nif (colorA == colorB && colorA != colorC && colorB != colorD) {\\ncolorP2 = colorB;\\n}\\nif (colorD == colorC && colorD != colorB && colorC != colorA) {\\ncolorP3 = colorC;\\n}\\nif (colorB == colorD && colorB != colorA && colorD != colorC) {\\ncolorP4 = colorD;\\n}\\nvec4 colorP12 = mix(colorP1, colorP2, texel_frac.x);\\nvec4 colorP34 = mix(colorP1, colorP2, texel_frac.x);\\nreturn mix(colorP12, colorP34, texel_frac.y);\\n}\"},heatmap:{heatmapResolve:{\"heatmapResolve.frag\":\"precision highp float;\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 4.0\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform sampler2D u_texture;\\nuniform sampler2D u_gradient;\\nuniform vec2 u_densityMinAndInvRange;\\nuniform float u_densityNormalization;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 data = texture2D(u_texture, v_uv);\\nfloat density = data.r * COMPRESSION_FACTOR;\\ndensity *= u_densityNormalization;\\ndensity = (density - u_densityMinAndInvRange.x) * u_densityMinAndInvRange.y;\\nvec4 color = texture2D(u_gradient, vec2(density, 0.5));\\ngl_FragColor = vec4(color.rgb * color.a, color.a);\\n}\",\"heatmapResolve.vert\":\"precision highp float;\\nattribute vec2 a_pos;\\nvarying vec2 v_uv;\\nvoid main() {\\nv_uv = a_pos;\\ngl_Position = vec4(a_pos * 2.0 - 1.0, 1., 1.);\\n}\"}},highlight:{\"blur.frag\":\"varying mediump vec2 v_texcoord;\\nuniform mediump vec4 u_direction;\\nuniform mediump mat4 u_channelSelector;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_texture;\\nmediump float gauss1(mediump vec2 dir) {\\nreturn exp(-dot(dir, dir) / (2.0 * u_sigma * u_sigma));\\n}\\nmediump vec4 selectChannel(mediump vec4 sample) {\\nreturn u_channelSelector * sample;\\n}\\nvoid accumGauss1(mediump float i, inout mediump float tot, inout mediump float weight) {\\nmediump float w = gauss1(i * u_direction.xy);\\ntot += selectChannel(texture2D(u_texture, v_texcoord + i * u_direction.zw))[3] * w;\\nweight += w;\\n}\\nvoid main(void) {\\nmediump float tot = 0.0;\\nmediump float weight = 0.0;\\naccumGauss1(-5.0, tot, weight);\\naccumGauss1(-4.0, tot, weight);\\naccumGauss1(-3.0, tot, weight);\\naccumGauss1(-2.0, tot, weight);\\naccumGauss1(-1.0, tot, weight);\\naccumGauss1(0.0, tot, weight);\\naccumGauss1(1.0, tot, weight);\\naccumGauss1(2.0, tot, weight);\\naccumGauss1(3.0, tot, weight);\\naccumGauss1(4.0, tot, weight);\\naccumGauss1(5.0, tot, weight);\\ngl_FragColor = vec4(0.0, 0.0, 0.0, tot / weight);\\n}\",\"highlight.frag\":\"varying mediump vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform mediump float u_sigma;\\nuniform sampler2D u_shade;\\nuniform mediump vec2 u_minMaxDistance;\\nmediump float estimateDistance() {\\nmediump float y = texture2D(u_texture, v_texcoord)[3];\\nconst mediump float y0 = 0.5;\\nmediump float m0 = 1.0 / (sqrt(2.0 * 3.1415) * u_sigma);\\nmediump float d = (y - y0) / m0;\\nreturn d;\\n}\\nmediump vec4 shade(mediump float d) {\\nmediump float mappedDistance = (d - u_minMaxDistance.x) / (u_minMaxDistance.y - u_minMaxDistance.x);\\nmappedDistance = clamp(mappedDistance, 0.0, 1.0);\\nreturn texture2D(u_shade, vec2(mappedDistance, 0.5));\\n}\\nvoid main(void) {\\nmediump float d = estimateDistance();\\ngl_FragColor = shade(d);\\n}\",\"textured.vert\":\"attribute mediump vec2 a_position;\\nattribute mediump vec2 a_texcoord;\\nvarying mediump vec2 v_texcoord;\\nvoid main(void) {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},materials:{\"attributeData.glsl\":\"uniform highp sampler2D filterFlags;\\nuniform highp sampler2D animation;\\nuniform highp sampler2D gpgpu;\\nuniform highp sampler2D visualVariableData;\\nuniform highp sampler2D dataDriven0;\\nuniform highp sampler2D dataDriven1;\\nuniform highp sampler2D dataDriven2;\\nuniform float size;\\nhighp vec2 getAttributeDataCoords(in highp vec3 id) {\\nhighp vec3  texel = unpackDisplayIdTexel(id);\\nhighp float u32 = float(int(texel.r) + int(texel.g) * 256 + int(texel.b) * 256 * 256);\\nhighp float col = mod(u32, size);\\nhighp float row = (u32 - col) / size;\\nhighp float u = col / size;\\nhighp float v = row / size;\\nreturn vec2(u, v);\\n}\\nhighp vec2 getAttributeDataTextureCoords(in highp vec3 id) {\\nreturn (getAttributeDataCoords(id) * 2.0) - 1.0 + (.5 / vec2(size));\\n}\\nhighp vec4 getFilterData(in highp vec3 id) {\\nvec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(filterFlags, coords);\\n}\\nhighp vec4 getAnimation(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(animation, coords);\\n}\\nhighp vec4 getVisualVariableData(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(visualVariableData, coords);\\n}\\nhighp vec4 getDataDriven0(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven0, coords);\\n}\\nhighp vec4 getDataDriven1(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven1, coords);\\n}\\nhighp vec4 getGPGPU(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(gpgpu, coords);\\n}\\nhighp vec4 getDataDriven2(in highp vec3 id) {\\nhighp vec2 coords = getAttributeDataCoords(id);\\nreturn texture2D(dataDriven2, coords);\\n}\\nfloat u88VVToFloat(in vec2 v) {\\nbool isMagic = v.x == 255.0 && v.y == 255.0;\\nif (isMagic) {\\nreturn NAN_MAGIC_NUMBER;\\n}\\nreturn (v.x + v.y * float(0x100)) - 32768.0;\\n}\",\"barycentric.glsl\":\"float inTriangle(vec3 bary) {\\nvec3 absBary = abs(bary);\\nreturn step((absBary.x + absBary.y + absBary.z), 1.05);\\n}\\nvec3 xyToBarycentric(in vec2 pos, in vec2 v0,  in vec2 v1, in vec2 v2) {\\nmat3 xyToBarycentricMat3 = mat3(\\nv1.x * v2.y - v2.x * v1.y, v2.x * v0.y - v0.x * v2.y, v0.x * v1.y - v1.x * v0.y,\\nv1.y - v2.y, v2.y - v0.y, v0.y - v1.y,\\nv2.x - v1.x, v0.x - v2.x, v1.x - v0.x\\n);\\nfloat A2 = v0.x * (v1.y - v2.y) + v1.x * (v2.y - v0.y) + v2.x * (v0.y - v1.y);\\nreturn (1. / A2) * xyToBarycentricMat3 * vec3(1., pos);\\n}\",\"constants.glsl\":\"const float C_DEG_TO_RAD = 3.14159265359 / 180.0;\\nconst float C_256_TO_RAD = 3.14159265359 / 128.0;\\nconst float C_RAD_TO_DEG = 180.0 / 3.141592654;\\nconst float POSITION_PRECISION = 1.0 / 8.0;\\nconst float FILL_POSITION_PRECISION = 1.0 / 1.0;\\nconst float SOFT_EDGE_RATIO = 1.0;\\nconst float THIN_LINE_WIDTH_FACTOR = 1.1;\\nconst float THIN_LINE_HALF_WIDTH = 1.0;\\nconst float EXTRUDE_SCALE_PLACEMENT_PADDING = 1.0 / 4.0;\\nconst float OFFSET_PRECISION = 1.0 / 8.0;\\nconst float OUTLINE_SCALE = 1.0 / 5.0;\\nconst float SDF_FONT_SIZE = 24.0;\\nconst float MAX_SDF_DISTANCE = 8.0;\\nconst float PLACEMENT_PADDING = 8.0;\\nconst float EPSILON = 0.00001;\\nconst float EPSILON_HITTEST = 0.05;\\nconst int MAX_FILTER_COUNT = 2;\\nconst int ATTR_VV_SIZE = 0;\\nconst int ATTR_VV_COLOR = 1;\\nconst int ATTR_VV_OPACITY = 2;\\nconst int ATTR_VV_ROTATION = 3;\\nconst highp float NAN_MAGIC_NUMBER = 1e-30;\\nconst int BITSET_GENERIC_LOCK_COLOR = 1;\\nconst int BITSET_GENERIC_CONSIDER_ALPHA_ONLY = 4;\\nconst int BITSET_MARKER_ALIGNMENT_MAP = 0;\\nconst int BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE = 2;\\nconst int BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY = 3;\\nconst int BITSET_TYPE_FILL_OUTLINE = 0;\\nconst int BITSET_FILL_RANDOM_PATTERN_OFFSET = 2;\\nconst int BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR = 3;\\nconst int BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR = 5;\\nconst int BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR = 6;\\nconst int BITSET_LINE_SCALE_DASH = 2;\",fill:{\"common.glsl\":\"#include <materials/symbologyTypeUtils.glsl>\\n#ifdef PATTERN\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform lowp vec4 u_isActive[ 2 ];\\nuniform highp float u_dotValue;\\nuniform highp float u_tileDotsOverArea;\\nuniform highp float u_dotTextureDotCount;\\nuniform mediump float u_tileZoomFactor;\\n#endif\\nvarying highp vec3 v_id;\\nvarying lowp vec4 v_color;\\nvarying lowp float v_opacity;\\nvarying mediump vec4 v_aux1;\\n#ifdef PATTERN\\nvarying mediump vec2 v_tileTextureCoord;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvarying lowp float v_isOutline;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvarying highp vec2 v_dotTextureCoords;\\nvarying highp vec4 v_dotThresholds[ 2 ];\\n#endif\",\"fill.frag\":\"precision highp float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/fill/common.glsl>\\n#ifdef PATTERN\\nuniform lowp sampler2D u_texture;\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nuniform mediump mat4 u_dotColors[ 2 ];\\nuniform sampler2D u_dotTextures[ 2 ];\\nuniform vec4 u_dotBackgroundColor;\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\nlowp vec4 drawLine() {\\nfloat v_lineWidth = v_aux1.x;\\nvec2  v_normal    = v_aux1.yz;\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineWidth,\\nv_opacity,\\nv_id\\n);\\nreturn shadeLine(inputs);\\n}\\n#endif\\nlowp vec4 drawFill() {\\nlowp vec4 out_color = vec4(0.);\\n#ifdef HITTEST\\nout_color = v_color;\\n#elif defined(PATTERN)\\nmediump vec4 v_tlbr = v_aux1;\\nmediump vec2 normalizedTextureCoord = mod(v_tileTextureCoord, 1.0);\\nmediump vec2 samplePos = mix(v_tlbr.xy, v_tlbr.zw, normalizedTextureCoord);\\nlowp vec4 color = texture2D(u_texture, samplePos);\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\nout_color = v_opacity * v_color * color;\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY && !defined(HIGHLIGHT)\\nvec4 textureThresholds0 = texture2D(u_dotTextures[0], v_dotTextureCoords);\\nvec4 textureThresholds1 = texture2D(u_dotTextures[1], v_dotTextureCoords);\\nvec4 difference0 = v_dotThresholds[0] - textureThresholds0;\\nvec4 difference1 = v_dotThresholds[1] - textureThresholds1;\\n#ifdef DD_DOT_BLENDING\\nvec4 isPositive0 = step(0.0, difference0);\\nvec4 isPositive1 = step(0.0, difference1);\\nfloat weightSum = dot(isPositive0, difference0) + dot(isPositive1, difference1);\\nfloat lessThanEqZero = step(weightSum, 0.0);\\nfloat greaterThanZero = 1.0 - lessThanEqZero ;\\nfloat divisor = (weightSum + lessThanEqZero);\\nvec4 weights0 = difference0 * isPositive0 / divisor;\\nvec4 weights1 = difference1 * isPositive1 / divisor;\\nvec4 dotColor = u_dotColors[0] * weights0 + u_dotColors[1] * weights1;\\nvec4 preEffectColor = greaterThanZero * dotColor + lessThanEqZero * u_dotBackgroundColor;\\n#else\\nfloat diffMax = max(max4(difference0), max4(difference1));\\nfloat lessThanZero = step(diffMax, 0.0);\\nfloat greaterOrEqZero = 1.0 - lessThanZero;\\nvec4 isMax0 = step(diffMax, difference0);\\nvec4 isMax1 = step(diffMax, difference1);\\nvec4 dotColor = u_dotColors[0] * isMax0 + u_dotColors[1] * isMax1;\\nvec4 preEffectColor = greaterOrEqZero * dotColor + lessThanZero * u_dotBackgroundColor;\\n#endif\\nout_color = preEffectColor;\\n#else\\nout_color = v_opacity * v_color;\\n#endif\\n#ifdef HIGHLIGHT\\nout_color.a = 1.0;\\n#endif\\nreturn out_color;\\n}\\nvoid main() {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (v_isOutline > 0.5) {\\ngl_FragColor = drawLine();\\n} else {\\ngl_FragColor = drawFill();\\n}\\n#else\\ngl_FragColor = drawFill();\\n#endif\\n}\",\"fill.vert\":\"#include <materials/symbologyTypeUtils.glsl>\\n#define PACKED_LINE\\nprecision highp float;\\nattribute float a_bitset;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nattribute float a_inverseArea;\\nvec4 a_color = vec4(0.0, 0.0, 0.0, 1.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#else\\nattribute vec4 a_color;\\nattribute vec4 a_aux2;\\nattribute vec4 a_aux3;\\n#ifndef SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\nattribute vec4 a_aux1;\\nattribute vec2 a_zoomRange;\\n#else\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\n#endif\\n#endif\\nuniform vec2 u_tileOffset;\\nuniform vec2 u_maxIntNumOfCrossing;\\n#include <util/encoding.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/fill/common.glsl>\\n#include <materials/fill/hittest.glsl>\\nconst float INV_SCALE_COMPRESSION_FACTOR = 1.0 / 128.0;\\nconst float MAX_REPRESENTABLE_INT = 16777216.0;\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 dotThreshold(vec4 featureAttrOverFeatureArea, float dotValue, float tileDotsOverArea) {\\nreturn featureAttrOverFeatureArea * (1.0 / dotValue)  * (1.0 / tileDotsOverArea);\\n}\\n#endif\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\nvoid drawLine(out lowp vec4 out_color, out highp vec3 out_pos) {\\nLineData outputs = buildLine(\\nout_pos,\\na_id,\\na_pos,\\na_color,\\n(a_aux3.xy - 128.) / 16.,\\n(a_aux3.zw - 128.) / 16.,\\n0.,\\na_aux2.z / 16.,\\na_bitset,\\nvec4(0.),\\nvec2(0.),\\na_aux2.w / 16.\\n);\\nv_id      = outputs.id;\\nv_opacity = outputs.opacity;\\nv_aux1    = vec4(outputs.lineHalfWidth, outputs.normal, 0.);\\nout_color = outputs.color;\\n}\\n#endif\\nvoid drawFill(out lowp vec4 out_color, out highp vec3 out_pos) {\\nfloat a_bitSet = a_bitset;\\nout_color = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nmat3 tileToTileNormalized = mat3(  2. / 512.,  0.,  0.,\\n0., -2. / 512.,  0.,\\n-1.,  1.,  1.  );\\nout_pos   = tileToTileNormalized * vec3((a_pos * FILL_POSITION_PRECISION), 1.);\\n#else\\nout_pos   = u_dvsMat3 * vec3(a_pos * FILL_POSITION_PRECISION, 1.);\\n#endif\\n#ifdef PATTERN\\nvec4  a_tlbr   = a_aux1;\\nfloat a_width  = a_aux2.x;\\nfloat a_height = a_aux2.y;\\nvec2  a_offset = a_aux2.zw;\\nvec2  a_scale  = a_aux3.xy;\\nfloat a_angle  = a_aux3.z;\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_WIDTH_PRECISION_FACTOR) > 0.5) {\\na_width *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nif (getBit(a_bitset, BITSET_FILL_HAS_PATTERN_HEIGHT_PRECISION_FACTOR) > 0.5) {\\na_height *= INV_SCALE_COMPRESSION_FACTOR;\\n}\\nvec2 scale = INV_SCALE_COMPRESSION_FACTOR * a_scale;\\nfloat width = u_zoomFactor * a_width * scale.x;\\nfloat height = u_zoomFactor * a_height * scale.y;\\nfloat angle = C_256_TO_RAD * a_angle;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nfloat dx = 0.0;\\nfloat dy = 0.0;\\nif (getBit(a_bitset, BITSET_FILL_RANDOM_PATTERN_OFFSET) > 0.5) {\\nfloat id = rgba2float(vec4(a_id, 0.0));\\ndx = rand(vec2(id, 0.0));\\ndy = rand(vec2(0.0, id));\\n}\\nmat3 patternMatrix = mat3(cosA / width, sinA / height, 0,\\n-sinA / width, cosA / height, 0,\\ndx,            dy,           1);\\nvec2 patternSize = vec2(a_width, a_height);\\nvec2 numPatternsPerMaxInt = vec2(MAX_REPRESENTABLE_INT) / patternSize;\\nvec2 maxIntCrossingOffsetCorrection = patternSize * fract(u_maxIntNumOfCrossing * numPatternsPerMaxInt);\\nvec2 tileOffset = u_tileOffset + maxIntCrossingOffsetCorrection - 0.5 * patternSize;\\ntileOffset = vec2(tileOffset.x * cosA - tileOffset.y * sinA, tileOffset.x * sinA + tileOffset.y * cosA);\\ntileOffset = mod(tileOffset, patternSize);\\nvec2 symbolOffset = u_zoomFactor * scale * vec2(a_offset - tileOffset) / vec2(width, height);\\nv_tileTextureCoord = (patternMatrix * vec3(a_pos * FILL_POSITION_PRECISION, 1.0)).xy - symbolOffset;\\nv_aux1 = a_tlbr / u_mosaicSize.xyxy;\\nv_sampleAlphaOnly = getBit(a_bitset, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\nif (getBit(a_bitSet, BITSET_FILL_HAS_UNRESOLVED_REPLACEMENT_COLOR) > 0.5) {\\n#ifdef VV_COLOR\\nv_sampleAlphaOnly *= (1.0 - float(isNan(VV_ADATA[ATTR_VV_COLOR]))) * (1.0 - getBit(a_bitSet, BITSET_GENERIC_LOCK_COLOR));\\n#else\\nv_sampleAlphaOnly = 0.0;\\n#endif\\n}\\n#elif SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_DOT_DENSITY\\nvec4 ddAttributeData0 = getAttributeData2(a_id) * u_isActive[0] * a_inverseArea;\\nvec4 ddAttributeData1 = getAttributeData3(a_id) * u_isActive[1] * a_inverseArea;\\nfloat size = u_tileZoomFactor * 512.0 * 1.0 / u_pixelRatio;\\nv_dotThresholds[0] = dotThreshold(ddAttributeData0, u_dotValue, u_tileDotsOverArea);\\nv_dotThresholds[1] = dotThreshold(ddAttributeData1, u_dotValue, u_tileDotsOverArea);\\nv_dotTextureCoords = (a_pos * FILL_POSITION_PRECISION + 0.5) / size;\\n#endif\\n}\\n#ifdef HITTEST\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nif (getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE) > 0.5) {\\nout_pos = vec3(0., 0., 2.);\\nreturn;\\n}\\n#endif\\nhittestFill(out_color, out_pos);\\ngl_PointSize = 1.0;\\n}\\n#elif defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nvoid draw(out lowp vec4 out_color, out highp vec3 out_pos) {\\nv_isOutline = getBit(a_bitset, BITSET_TYPE_FILL_OUTLINE);\\nif (v_isOutline > 0.5) {\\ndrawLine(out_color, out_pos);\\n} else {\\ndrawFill(out_color, out_pos);\\n}\\n}\\n#else\\n#define draw drawFill\\n#endif\\nvoid main()\\n{\\nINIT;\\nhighp vec3 pos  = vec3(0.);\\nhighp vec4 color  = vec4(0.);\\ndraw(color, pos);\\nv_color = color;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\",\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestFill(\\nout lowp vec4 out_color,\\nout highp vec3 out_pos\\n) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * FILL_POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * FILL_POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * FILL_POSITION_PRECISION, 1.);\\nfloat hittestDist = u_hittestDist;\\nfloat dist = distPointTriangle(u_hittestPos, pos.xy, pos1.xy, pos2.xy);\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist < 0. || dist >= hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist == 0. ? (1. / 255.) : 0.);\\n}\\n#endif\"},hittest:{\"common.glsl\":\"#ifdef HITTEST\\nuniform float hittestDist;\\nuniform highp vec2 hittestPos;\\nfloat projectScalar(vec2 a, vec2 b) {\\nreturn dot(a, normalize(b));\\n}\\nfloat distPointSegment(vec2 p0, vec2 p1, vec2 p2) {\\nvec2 L = p2 - p1;\\nvec2 A = p0 - p1;\\nfloat projAL = projectScalar(A, L);\\nfloat t = clamp(projAL / length(L), 0., 1.);\\nreturn distance(p0, p1 + t * (p2 - p1));\\n}\\nvoid hittestMarker(out lowp vec4 out_color, out highp vec3 out_pos, in highp vec3 pos, float size) {\\nfloat dist = distance(pos, vec3(hittestPos, 1.));\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif ((dist - size) > hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, (dist - size) < 0. ? (1. / 255.) : 0.);\\n}\\nfloat intersectPointTriangleBary(vec2 p, vec2 a, vec2 b, vec2 c) {\\nreturn inTriangle(xyToBarycentric(p, a, b, c));\\n}\\nfloat distPointTriangle(vec2 p, vec2 a, vec2 b, vec2 c) {\\nvec2 ba = b - a;\\nvec2 ca = c - a;\\nfloat crossProduct = ba.x * ca.y - ca.x * ba.y;\\nbool isParallel = crossProduct < EPSILON_HITTEST && crossProduct > -EPSILON_HITTEST;\\nif (isParallel) {\\nreturn -1.;\\n}\\nif (intersectPointTriangleBary(p.xy, a, b, c) == 1.) {\\nreturn 0.;\\n}\\nfloat distAB = distPointSegment(p, a, b);\\nfloat distBC = distPointSegment(p, b, c);\\nfloat distCA = distPointSegment(p, c, a);\\nreturn min(min(distAB, distBC), distCA);\\n}\\n#endif\"},icon:{\"common.glsl\":\"#include <util/encoding.glsl>\\nuniform lowp vec2 u_mosaicSize;\\nvarying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying highp vec4 v_sizeTex;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nuniform lowp sampler2D u_texture;\\n#ifdef SDF\\nvarying lowp vec4 v_outlineColor;\\nvarying mediump float v_outlineWidth;\\nvarying mediump float v_distRatio;\\nvarying mediump float v_overridingOutlineColor;\\nvarying mediump float v_isThin;\\n#endif\\n#ifdef SDF\\nvec4 getColor(vec2 v_size, vec2 v_tex) {\\n#ifdef HITTEST\\nlowp vec4 fillPixelColor = vec4(1.0);\\n#else\\nlowp vec4 fillPixelColor = v_color;\\n#endif\\nfloat d = 0.5 - rgba2float(texture2D(u_texture, v_tex));\\nfloat size = max(v_size.x, v_size.y);\\nfloat dist = d * size * SOFT_EDGE_RATIO * v_distRatio;\\nfillPixelColor *= clamp(0.5 - dist, 0.0, 1.0);\\nfloat outlineWidth = v_outlineWidth;\\n#ifdef HIGHLIGHT\\noutlineWidth = max(outlineWidth, 4.0 * v_isThin);\\n#endif\\nif (outlineWidth > 0.25) {\\nlowp vec4 outlinePixelColor = v_overridingOutlineColor * v_color + (1.0 - v_overridingOutlineColor) * v_outlineColor;\\nfloat clampedOutlineSize = min(outlineWidth, size);\\noutlinePixelColor *= clamp(0.5 - abs(dist) + clampedOutlineSize * 0.5, 0.0, 1.0);\\nreturn v_opacity * ((1.0 - outlinePixelColor.a) * fillPixelColor + outlinePixelColor);\\n}\\nreturn v_opacity * fillPixelColor;\\n}\\n#else\\nvec4 getColor(vec2 _v_size, vec2 v_tex) {\\nlowp vec4 texColor = texture2D(u_texture, v_tex);\\nreturn v_opacity * texColor * v_color;\\n}\\n#endif\",heatmapAccumulate:{\"common.glsl\":\"varying lowp vec4 v_hittestResult;\\nvarying mediump vec2 v_offsetFromCenter;\\nvarying highp float v_fieldValue;\",\"heatmapAccumulate.frag\":\"precision mediump float;\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\n#ifdef HEATMAP_PRECISION_HALF_FLOAT\\n#define COMPRESSION_FACTOR 0.25\\n#else\\n#define COMPRESSION_FACTOR 1.0\\n#endif\\nuniform lowp sampler2D u_texture;\\nvoid main() {\\n#ifdef HITTEST\\ngl_FragColor = v_hittestResult;\\n#else\\nfloat radius = length(v_offsetFromCenter);\\nfloat shapeWeight = step(radius, 1.0);\\nfloat oneMinusRadiusSquared = 1.0 - radius * radius;\\nfloat kernelWeight = oneMinusRadiusSquared * oneMinusRadiusSquared;\\ngl_FragColor = vec4(shapeWeight * kernelWeight * v_fieldValue * COMPRESSION_FACTOR);\\n#endif\\n}\",\"heatmapAccumulate.vert\":\"precision highp float;\\nattribute vec2 a_vertexOffset;\\nvec4 a_color = vec4(0.0);\\nvec2 a_zoomRange = vec2(0.0, 10000.0);\\nuniform float u_radius;\\nuniform float u_isFieldActive;\\n#include <materials/vcommon.glsl>\\n#include <materials/hittest/common.glsl>\\n#include <materials/icon/heatmapAccumulate/common.glsl>\\nvoid main() {\\nfloat filterFlags = getFilterFlags();\\n#ifdef HITTEST\\nhighp vec4 out_hittestResult = vec4(0.);\\nhighp vec3 out_pos = vec3(0.);\\nvec3 pos = u_viewMat3 * u_tileMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nhittestMarker(out_hittestResult, out_pos, pos, u_radius);\\nv_hittestResult = out_hittestResult;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(a_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\nv_offsetFromCenter = sign(a_vertexOffset);\\nv_fieldValue = getAttributeData2(a_id).x * u_isFieldActive + 1.0 - u_isFieldActive;\\nvec3 centerPos = u_dvsMat3 * vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec3 vertexPos = centerPos + u_displayViewMat3 * vec3(v_offsetFromCenter, 0.0) * u_radius;\\ngl_Position = vec4(clip(a_color, vertexPos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},\"hittest.glsl\":\"#ifdef HITTEST\\n#include <materials/hittest/common.glsl>\\nattribute vec2 a_vertexOffset1;\\nattribute vec2 a_vertexOffset2;\\nattribute vec2 a_texCoords1;\\nattribute vec2 a_texCoords2;\\nvec2 getTextureCoords(in vec3 bary, in vec2 texCoords0, in vec2 texCoords1, in vec2 texCoords2) {\\nreturn texCoords0 * bary.x + texCoords1 * bary.y + texCoords2 * bary.z;\\n}\\nvoid hittestIcon(\\ninout lowp vec4 out_color,\\nout highp vec3 out_pos,\\nin vec3 pos,\\nin vec3 offset,\\nin vec2 size,\\nin float scaleFactor,\\nin float isMapAligned\\n) {\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nvec3 posBase = u_viewMat3 * u_tileMat3  * pos;\\nvec3 offset1 = scaleFactor * vec3(a_vertexOffset1 / 16.0, 0.);\\nvec3 offset2 = scaleFactor * vec3(a_vertexOffset2 / 16.0, 0.);\\nvec2 pos0    = (posBase + getMatrixNoDisplay(isMapAligned) * offset).xy;\\nvec2 pos1    = (posBase + getMatrixNoDisplay(isMapAligned) * offset1).xy;\\nvec2 pos2    = (posBase + getMatrixNoDisplay(isMapAligned) * offset2).xy;\\nvec3 bary0 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary1 = xyToBarycentric(u_hittestPos + vec2(0., -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary2 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, -u_hittestDist), pos0, pos1, pos2);\\nvec3 bary3 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary4 = xyToBarycentric(u_hittestPos, pos0, pos1, pos2);\\nvec3 bary5 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, 0.), pos0, pos1, pos2);\\nvec3 bary6 = xyToBarycentric(u_hittestPos + vec2(-u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec3 bary7 = xyToBarycentric(u_hittestPos + vec2(0., u_hittestDist), pos0, pos1, pos2);\\nvec3 bary8 = xyToBarycentric(u_hittestPos + vec2(u_hittestDist, u_hittestDist), pos0, pos1, pos2);\\nvec2 tex0 = a_texCoords  / u_mosaicSize;\\nvec2 tex1 = a_texCoords1 / u_mosaicSize;\\nvec2 tex2 = a_texCoords2 / u_mosaicSize;\\nfloat alphaSum = 0.;\\nalphaSum += inTriangle(bary0) * getColor(size, getTextureCoords(bary0, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary1) * getColor(size, getTextureCoords(bary1, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary2) * getColor(size, getTextureCoords(bary2, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary3) * getColor(size, getTextureCoords(bary3, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary4) * getColor(size, getTextureCoords(bary4, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary5) * getColor(size, getTextureCoords(bary5, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary6) * getColor(size, getTextureCoords(bary6, tex0, tex1, tex2)).a;\\nalphaSum += inTriangle(bary7) * getColor(size, getTextureCoords(bary7, tex0, tex1, tex2)).a;\\nout_pos.z += step(alphaSum, .05) * 2.0;\\nout_color = vec4(1. / 255., 0., 0., alphaSum / 255.);\\n}\\n#endif\",\"icon.frag\":\"precision mediump float;\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/icon/common.glsl>\\nvoid main()\\n{\\n#ifdef HITTEST\\nvec4 color = v_color;\\n#else\\nvec4 color = getColor(v_sizeTex.xy, v_sizeTex.zw);\\n#endif\\n#ifdef HIGHLIGHT\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"icon.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_outlineColor;\\nattribute vec4 a_sizeAndOutlineWidth;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nattribute vec2 a_bitSetAndDistRatio;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/icon/common.glsl>\\n#include <materials/icon/hittest.glsl>\\nfloat getMarkerScaleFactor(inout vec2 size, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat f = getSize(size.y) / size.y;\\nfloat sizeFactor = size.y / referenceSize;\\nreturn getSize(referenceSize) / referenceSize;\\n#else\\nreturn 1.;\\n#endif\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_bitSet = a_bitSetAndDistRatio.x;\\nvec3  pos           = vec3(a_pos * POSITION_PRECISION, 1.0);\\nvec2  size          = a_sizeAndOutlineWidth.xy * a_sizeAndOutlineWidth.xy / 128.0;\\nvec3  offset        = vec3(a_vertexOffset / 16.0, 0.);\\nfloat outlineSize   = a_sizeAndOutlineWidth.z * a_sizeAndOutlineWidth.z / 128.0;\\nfloat isMapAligned  = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nfloat referenceSize = a_sizeAndOutlineWidth.w * a_sizeAndOutlineWidth.w / 128.0;\\nfloat scaleSymbolProportionally = getBit(a_bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\nfloat scaleFactor               = getMarkerScaleFactor(size, referenceSize);\\nsize.xy     *= scaleFactor;\\noffset.xy   *= scaleFactor;\\noutlineSize *= scaleSymbolProportionally * (scaleFactor - 1.0) + 1.0;\\nvec2 v_tex   = a_texCoords / u_mosaicSize;\\nfloat filterFlags = getFilterFlags();\\nv_color    = getColor(a_color, a_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nv_opacity  = getOpacity();\\nv_id       = norm(a_id);\\nv_pos      = u_dvsMat3 * pos + getMatrix(isMapAligned) * getRotation()  * offset;\\nv_sizeTex  = vec4(size.xy, v_tex.xy);\\n#ifdef SDF\\nv_isThin   = getBit(a_bitSet, BITSET_MARKER_OUTLINE_ALLOW_COLOR_OVERRIDE);\\n#ifdef VV_COLOR\\nv_overridingOutlineColor = v_isThin;\\n#else\\nv_overridingOutlineColor = 0.0;\\n#endif\\nv_outlineWidth = min(outlineSize, max(max(size.x, size.y) - 0.99, 0.0));\\nv_outlineColor = a_outlineColor;\\nv_distRatio = a_bitSetAndDistRatio.y / 128.0;\\n#endif\\n#ifdef HITTEST\\nhighp vec4 out_color = vec4(0.);\\nhighp vec3 out_pos   = vec3(0.);\\nhittestIcon(out_color, out_pos, pos, offset, size, scaleFactor, isMapAligned);\\nv_color = out_color;\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},label:{\"common.glsl\":\"uniform mediump float u_zoomLevel;\\nuniform mediump float u_mapRotation;\\nuniform mediump float u_mapAligned;\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying mediump vec2 v_tex;\\nvarying mediump vec4 v_color;\\nvarying lowp vec4 v_animation;\",\"label.frag\":\"#include <materials/text/text.frag>\",\"label.vert\":\"precision highp float;\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texAndSize;\\nattribute vec4 a_refSymbolAndPlacementOffset;\\nattribute vec4 a_glyphData;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nuniform float u_mapRotation;\\nuniform float u_mapAligned;\\nfloat getZ(in float minZoom, in float maxZoom, in float angle) {\\nfloat glyphAngle = angle * 360.0 / 254.0;\\nfloat mapAngle = u_mapRotation * 360.0 / 254.0;\\nfloat diffAngle = min(360.0 - abs(mapAngle - glyphAngle), abs(mapAngle - glyphAngle));\\nfloat z = 0.0;\\nz += u_mapAligned * (2.0 * (1.0 - step(minZoom, u_currentZoom)));\\nz += u_mapAligned * 2.0 * step(90.0, diffAngle);\\nz += 2.0 * (1.0 - step(u_currentZoom, maxZoom));\\nreturn z;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat groupMinZoom    = getMinZoom();\\nfloat glyphMinZoom    = a_glyphData.x;\\nfloat glyphMaxZoom    = a_glyphData.y;\\nfloat glyphAngle      = a_glyphData.z;\\nfloat a_isBackground  = a_glyphData.w;\\nfloat a_minZoom          = max(groupMinZoom, glyphMinZoom);\\nfloat a_placementPadding = a_refSymbolAndPlacementOffset.x * EXTRUDE_SCALE_PLACEMENT_PADDING;\\nvec2  a_placementDir     = unpack_u8_nf32(a_refSymbolAndPlacementOffset.zw);\\nfloat a_refSymbolSize    = a_refSymbolAndPlacementOffset.y;\\nfloat fontSize           = a_texAndSize.z;\\nfloat haloSize           = a_texAndSize.w * OUTLINE_SCALE;\\nvec2  vertexOffset = a_vertexOffset * OFFSET_PRECISION;\\nvec3  pos          = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat z            = getZ(a_minZoom, glyphMaxZoom, glyphAngle);\\nfloat fontScale    = fontSize / SDF_FONT_SIZE;\\nfloat halfSize     = getSize(a_refSymbolSize) / 2.0;\\nfloat animation    = pow(getAnimationState(), vec4(2.0)).r;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor = (isBackground + isText) * a_color;\\nv_color     = animation * ((1.0 - u_isHaloPass) * nonHaloColor + (u_isHaloPass * a_haloColor));\\nv_opacity   = 1.0;\\nv_tex       = a_texCoords / u_mosaicSize;\\nv_edgeDistanceOffset = u_isHaloPass * haloSize / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\nvec2 placementOffset = a_placementDir * (halfSize + a_placementPadding);\\nvec3 glyphOffset     = u_displayMat3 * vec3(vertexOffset + placementOffset, 0.0);\\nvec3 v_pos           = vec3((u_dvsMat3 * pos + glyphOffset).xy, z);\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\ngl_Position = vec4(v_pos, 1.0);\\n#ifdef DEBUG\\nv_color = vec4(a_color.rgb, z == 0.0 ? 1.0 : 0.645);\\n#endif\\n}\"},line:{\"common.glsl\":\"varying lowp vec4 v_color;\\nvarying highp vec3 v_id;\\nvarying mediump vec2 v_normal;\\nvarying mediump float v_lineHalfWidth;\\nvarying lowp float v_opacity;\\n#ifdef PATTERN\\nvarying mediump vec4 v_tlbr;\\nvarying mediump vec2 v_patternSize;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nvarying highp float v_accumulatedDistance;\\n#endif\\n#ifdef SDF\\nvarying mediump float v_lineWidthRatio;\\n#endif\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\\n#ifdef HITTEST\\nattribute vec2 a_pos1;\\nattribute vec2 a_pos2;\\nvoid hittestLine(out lowp vec4 out_color, out highp vec3 out_pos, float halfWidth) {\\nvec3 pos        = u_viewMat3 * u_tileMat3 * vec3(a_pos  * POSITION_PRECISION, 1.);\\nvec3 pos1       = u_viewMat3 * u_tileMat3 * vec3(a_pos1 * POSITION_PRECISION, 1.);\\nvec3 pos2       = u_viewMat3 * u_tileMat3 * vec3(a_pos2 * POSITION_PRECISION, 1.);\\nvec3 outTextureCoords = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nfloat dist = min(distPointSegment(u_hittestPos, pos.xy, pos1.xy),\\ndistPointSegment(u_hittestPos, pos.xy, pos2.xy)) - halfWidth;\\nout_pos = vec3(getAttributeDataTextureCoords(a_id), 0.0);\\nif (dist >= u_hittestDist) {\\nout_pos.z += 2.0;\\n}\\nout_color = vec4(1. / 255., 0, 0, dist <= 0. ? (1. / 255.) : 0.);\\n}\\n#endif\",\"line.frag\":\"precision lowp float;\\n#include <util/encoding.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.frag>\\n#ifdef HITTEST\\nvoid main() {\\ngl_FragColor = v_color;\\n}\\n#else\\nvoid main() {\\nLineData inputs = LineData(\\nv_color,\\nv_normal,\\nv_lineHalfWidth,\\nv_opacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr,\\nv_patternSize,\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance,\\n#endif\\n#endif\\nv_id\\n);\\ngl_FragColor = shadeLine(inputs);\\n}\\n#endif\",\"line.vert\":\"precision highp float;\\nattribute vec4 a_color;\\nattribute vec4 a_offsetAndNormal;\\nattribute vec2 a_accumulatedDistanceAndHalfWidth;\\nattribute vec4 a_tlbr;\\nattribute vec4 a_segmentDirection;\\nattribute vec2 a_aux;\\nattribute vec2 a_zoomRange;\\n#include <materials/vcommon.glsl>\\n#include <materials/symbologyTypeUtils.glsl>\\n#include <materials/line/common.glsl>\\n#include <materials/line/hittest.glsl>\\n#include <materials/shared/line/common.glsl>\\n#include <materials/shared/line/line.vert>\\n#ifdef HITTEST\\nvoid draw() {\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat a_halfWidth = a_accumulatedDistanceAndHalfWidth.y / 16.;\\nfloat a_cimHalfWidth = a_aux.x / 16. ;\\nvec2  a_offset = a_offsetAndNormal.xy / 16.;\\nfloat baseWidth = getBaseLineHalfWidth(a_halfWidth, a_cimHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nhighp vec3 pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestLine(v_color, pos, halfWidth);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#else\\nvoid draw()\\n{\\nhighp vec3 pos = vec3(0.);\\nLineData outputs = buildLine(\\npos,\\na_id,\\na_pos,\\na_color,\\na_offsetAndNormal.xy / 16.,\\na_offsetAndNormal.zw / 16.,\\na_accumulatedDistanceAndHalfWidth.x,\\na_accumulatedDistanceAndHalfWidth.y / 16.,\\na_segmentDirection.w,\\na_tlbr,\\na_segmentDirection.xy / 16.,\\na_aux.x / 16.\\n);\\nv_id              = outputs.id;\\nv_color           = outputs.color;\\nv_normal          = outputs.normal;\\nv_lineHalfWidth   = outputs.lineHalfWidth;\\nv_opacity         = outputs.opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nv_tlbr          = outputs.tlbr;\\nv_patternSize   = outputs.patternSize;\\n#endif\\n#ifdef SDF\\nv_lineWidthRatio = outputs.lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nv_accumulatedDistance = outputs.accumulatedDistance;\\n#endif\\n#endif\\ngl_Position = vec4(clip(outputs.color, pos, getFilterFlags(), a_zoomRange), 1.0);\\n}\\n#endif\\nvoid main() {\\nINIT;\\ndraw();\\n}\"},pie:{\"pie.common.glsl\":\"uniform float outlineWidth;\\nuniform mediump float sectorThreshold;\\nvarying vec3  v_id;\\nvarying vec3  v_pos;\\nvarying vec2  v_offset;\\nvarying vec4  v_color;\\nvarying float v_size;\\nvarying float v_numOfEntries;\\nvarying float v_maxSectorAngle;\\nvarying vec2  v_filteredSectorToColorId[numberOfFields];\\nvarying vec2  v_texCoords;\\nvarying float v_outlineWidth;\\nvarying float v_opacity;\\nstruct FilteredChartInfo {\\nfloat endSectorAngle;\\nint colorId;\\n};\",\"pie.frag\":\"precision highp float;\\n#include <util/atan2.glsl>\\n#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/pie/pie.common.glsl>\\nuniform lowp vec4 colors[numberOfFields];\\nuniform lowp vec4 defaultColor;\\nuniform lowp vec4 othersColor;\\nuniform lowp vec4 outlineColor;\\nuniform float donutRatio;\\nlowp vec4 getSectorColor(in int index, in vec2 filteredSectorToColorId[numberOfFields]) {\\nmediump int colorIndex = int(filteredSectorToColorId[index].y);\\nreturn colors[colorIndex];\\n}\\nconst int OTHER_SECTOR_ID = 255;\\n#ifdef HITTEST\\nvec4 getColor() {\\nfloat distanceSize = length(v_offset) * v_size;\\nfloat donutSize = donutRatio * v_size;\\nfloat alpha = step(donutSize, distanceSize) * (1.0 - step(v_size, distanceSize));\\nreturn v_color;\\n}\\n#else\\nvec4 getColor() {\\nfloat angle = 90.0 - C_RAD_TO_DEG * atan2(v_offset.y, v_offset.x);\\nif (angle < 0.0) {\\nangle += 360.0;\\n} else if (angle > 360.0) {\\nangle = mod(angle, 360.0);\\n}\\nint numOfEntries = int(v_numOfEntries);\\nfloat maxSectorAngle = v_maxSectorAngle;\\nlowp vec4 fillColor = (maxSectorAngle > 0.0 || sectorThreshold > 0.0) ? othersColor : defaultColor;\\nlowp vec4 prevColor = vec4(0.0);\\nlowp vec4 nextColor = vec4(0.0);\\nfloat startSectorAngle = 0.0;\\nfloat endSectorAngle = 0.0;\\nif (angle < maxSectorAngle) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nstartSectorAngle = endSectorAngle;\\nendSectorAngle = v_filteredSectorToColorId[index].x;\\nif (endSectorAngle > angle) {\\nfillColor = getSectorColor(index, v_filteredSectorToColorId);\\nprevColor = sectorThreshold != 0.0 && index == 0 && abs(360.0 - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index > 0 ? index - 1 : numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = sectorThreshold != 0.0 && abs(endSectorAngle - maxSectorAngle) < EPSILON ? othersColor :\\ngetSectorColor(index < numOfEntries - 1 ? index + 1 : 0, v_filteredSectorToColorId);\\nbreak;\\n}\\nif (index == numOfEntries - 1) {\\nbreak;\\n}\\n}\\n} else {\\nprevColor = getSectorColor(numOfEntries - 1, v_filteredSectorToColorId);\\nnextColor = getSectorColor(0, v_filteredSectorToColorId);\\nstartSectorAngle = maxSectorAngle;\\nendSectorAngle = 360.0;\\n}\\nlowp vec4 outlineColor = outlineColor;\\nfloat offset = length(v_offset);\\nfloat distanceSize = offset * v_size;\\nif (startSectorAngle != 0.0 || endSectorAngle != 360.0) {\\nfloat distanceToStartSector = (angle - startSectorAngle);\\nfloat distanceToEndSector = (endSectorAngle - angle);\\nfloat sectorThreshold = 0.6;\\nfloat beginSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToStartSector * offset);\\nfloat endSectorAlpha = smoothstep(0.0, sectorThreshold, distanceToEndSector * offset);\\nif (endSectorAlpha > 0.0) {\\nfillColor = mix(nextColor, fillColor, endSectorAlpha);\\n} else if (beginSectorAlpha > 0.0) {\\nfillColor = mix(prevColor, fillColor, beginSectorAlpha);\\n}\\n}\\nfloat donutSize = donutRatio * (v_size - v_outlineWidth);\\nfloat endOfDonut = donutSize - v_outlineWidth;\\nfloat aaThreshold = 0.75;\\nfloat innerCircleAlpha = endOfDonut - aaThreshold > 0.0 ? smoothstep(endOfDonut - aaThreshold, endOfDonut + aaThreshold, distanceSize) : 1.0;\\nfloat outerCircleAlpha = 1.0 - smoothstep(v_size - aaThreshold, v_size + aaThreshold , distanceSize);\\nfloat circleAlpha = innerCircleAlpha * outerCircleAlpha;\\nfloat startOfOutline = v_size - v_outlineWidth;\\nif (startOfOutline > 0.0 && v_outlineWidth > 0.25) {\\nfloat outlineFactor = smoothstep(startOfOutline - aaThreshold, startOfOutline + aaThreshold, distanceSize);\\nfloat innerLineFactor = donutSize - aaThreshold > 0.0 ? 1.0 - smoothstep(donutSize - aaThreshold, donutSize + aaThreshold , distanceSize) : 0.0;\\nfillColor = mix(fillColor, outlineColor, innerLineFactor + outlineFactor);\\n}\\nreturn v_opacity * circleAlpha * fillColor;\\n}\\n#endif\\nvoid main()\\n{\\nvec4 color = getColor();\\n#ifdef highlight\\ncolor.a = step(1.0 / 255.0, color.a);\\n#endif\\ngl_FragColor = color;\\n}\",\"pie.vert\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/barycentric.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/pie/pie.common.glsl>\\n#include <materials/hittest/common.glsl>\\nattribute float a_bitSet;\\nattribute vec2  a_offset;\\nattribute vec2  a_texCoords;\\nattribute vec2  a_size;\\nattribute float a_referenceSize;\\nattribute vec2  a_zoomRange;\\nint filterValue(in float sectorAngle,\\nin int currentIndex,\\ninout FilteredChartInfo filteredInfo,\\ninout vec2 filteredSectorToColorId[numberOfFields]) {\\nif (sectorAngle > sectorThreshold * 360.0) {\\nfilteredInfo.endSectorAngle += sectorAngle;\\nfilteredSectorToColorId[filteredInfo.colorId] = vec2(filteredInfo.endSectorAngle, currentIndex);\\n++filteredInfo.colorId;\\n}\\nreturn 0;\\n}\\nint filterValues(inout vec2 filteredSectorToColorId[numberOfFields],\\ninout FilteredChartInfo filteredInfo,\\nin float sectorAngles[numberOfFields]) {\\nfor (int index = 0; index < numberOfFields; ++index) {\\nfloat sectorValue = sectorAngles[index];\\nfilterValue(sectorValue, index, filteredInfo, filteredSectorToColorId);\\n}\\nreturn filteredInfo.colorId;\\n}\\nvec2 getMarkerSize(inout vec2 offset, inout vec2 baseSize, inout float outlineSize, in float a_referenceSize, in float bitSet) {\\nvec2 outSize = baseSize;\\n#ifdef VV_SIZE\\nfloat r = getSize(a_referenceSize, currentScale) / a_referenceSize;\\noutSize.xy *= r;\\noffset.xy *= r;\\nfloat scaleSymbolProportionally = getBit(bitSet, BITSET_MARKER_SCALE_SYMBOLS_PROPORTIONALLY);\\noutlineSize *= scaleSymbolProportionally * (r - 1.0) + 1.0;\\n#endif\\nreturn outSize;\\n}\\nvec3 getOffset(in vec2 in_offset, float a_bitSet) {\\nfloat isMapAligned = getBit(a_bitSet, BITSET_MARKER_ALIGNMENT_MAP);\\nvec3  offset       = vec3(in_offset, 0.0);\\nreturn getMatrix(isMapAligned) * offset;\\n}\\nfloat filterNaNValues(in float value) {\\nreturn value != NAN_MAGIC_NUMBER && value > 0.0 ? value : 0.0;\\n}\\nvoid main()\\n{\\nINIT;\\nvec2  a_size   = a_size;\\nvec2  a_offset = a_offset / 16.0;\\nfloat outlineSize = outlineWidth;\\nfloat a_bitSet = a_bitSet;\\nfloat a_referenceSize = a_referenceSize;\\nvec2 a_texCoords = a_texCoords / 4.0;\\nvec2 markerSize = getMarkerSize(a_offset, a_size, outlineSize, a_referenceSize, a_bitSet);\\nfloat filterFlags = getFilterFlags();\\nvec3  pos         = vec3(a_pos / 10.0, 1.0);\\nv_opacity      = getOpacity();\\nv_id           = norm(a_id);\\nv_pos          = displayViewScreenMat3 * pos + getOffset(a_offset, a_bitSet);\\nv_offset       = sign(a_texCoords - 0.5);\\nv_size         = max(markerSize.x, markerSize.y);\\nv_outlineWidth = outlineSize;\\nfloat attributeData[10];\\nvec4 attributeData3 = getDataDriven0(a_id);\\nattributeData[0] = filterNaNValues(attributeData3.x);\\nattributeData[1] = filterNaNValues(attributeData3.y);\\nattributeData[2] = filterNaNValues(attributeData3.z);\\nattributeData[3] = filterNaNValues(attributeData3.w);\\n#if (numberOfFields > 4)\\nvec4 attributeData4 = getDataDriven1(a_id);\\nattributeData[4] = filterNaNValues(attributeData4.x);\\nattributeData[5] = filterNaNValues(attributeData4.y);\\nattributeData[6] = filterNaNValues(attributeData4.z);\\nattributeData[7] = filterNaNValues(attributeData4.w);\\n#endif\\n#if (numberOfFields > 8)\\nvec4 attributeData5 = getDataDriven2(a_id);\\nattributeData[8] = filterNaNValues(attributeData5.x);\\nattributeData[9] = filterNaNValues(attributeData5.y);\\n#endif\\nfloat sum = 0.0;\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsum += attributeData[i];\\n}\\nfloat sectorAngles[numberOfFields];\\nfor (int i = 0; i < numberOfFields; ++i) {\\nsectorAngles[i] = 360.0 * attributeData[i] / sum;\\n}\\nvec2 filteredSectorToColorId[numberOfFields];\\nFilteredChartInfo filteredInfo = FilteredChartInfo(0.0, 0);\\nint numOfEntries = filterValues(filteredSectorToColorId, filteredInfo, sectorAngles);\\nv_numOfEntries = float(numOfEntries);\\nv_maxSectorAngle = filteredInfo.endSectorAngle;\\nv_filteredSectorToColorId = filteredSectorToColorId;\\n#ifdef HITTEST\\nhighp vec3 out_pos = vec3(0.0);\\nv_color            = vec4(0.0);\\nhittestMarker(v_color, out_pos, viewMat3 * tileMat3 *  pos, v_size);\\ngl_PointSize = 1.0;\\ngl_Position = vec4(clip(v_color, out_pos, filterFlags, a_zoomRange), 1.0);\\n#else\\ngl_Position = vec4(clip(v_color, v_pos, filterFlags, a_zoomRange), 1.0);\\n#endif\\n}\"},shared:{line:{\"common.glsl\":\"#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nuniform mediump vec2 u_mosaicSize;\\nvarying mediump float v_sampleAlphaOnly;\\n#endif\\nstruct LineData {\\nlowp vec4 color;\\nmediump vec2 normal;\\nmediump float lineHalfWidth;\\nlowp float opacity;\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nmediump vec4 tlbr;\\nmediump vec2 patternSize;\\n#endif\\n#ifdef SDF\\nmediump float lineWidthRatio;\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nhighp float accumulatedDistance;\\n#endif\\n#endif\\nhighp vec3 id;\\n};\",\"line.frag\":\"uniform lowp float u_blur;\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && !defined(HIGHLIGHT)\\n#if defined(PATTERN) || defined(SDF)\\nuniform sampler2D u_texture;\\nuniform highp float u_pixelRatio;\\n#endif\\n#endif\\n#if defined(SDF) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float adjustedPatternWidth = line.patternSize.x * 2.0 * line.lineWidthRatio;\\nmediump float relativeTexX = fract(line.accumulatedDistance / adjustedPatternWidth);\\nmediump float relativeTexY = 0.5 + 0.25 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nmediump float d = rgba2float(texture2D(u_texture, texCoord)) - 0.5;\\nfloat dist = d * line.lineHalfWidth;\\nreturn line.opacity * clamp(0.5 - dist, 0.0, 1.0) * line.color;\\n}\\n#elif defined(PATTERN) && !defined(HIGHLIGHT) && !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE)\\nlowp vec4 getLineColor(LineData line) {\\nmediump float lineHalfWidth = line.lineHalfWidth;\\nmediump float adjustedPatternHeight = line.patternSize.y * 2.0 * lineHalfWidth / line.patternSize.x;\\nmediump float relativeTexY = fract(line.accumulatedDistance / adjustedPatternHeight);\\nmediump float relativeTexX = 0.5 + 0.5 * line.normal.y;\\nmediump vec2 texCoord = mix(line.tlbr.xy, line.tlbr.zw, vec2(relativeTexX, relativeTexY));\\nlowp vec4 color = texture2D(u_texture, texCoord);\\n#ifdef VV_COLOR\\nif (v_sampleAlphaOnly > 0.5) {\\ncolor.rgb = vec3(color.a);\\n}\\n#endif\\nreturn line.opacity * line.color * color;\\n}\\n#else\\nlowp vec4 getLineColor(LineData line) {\\nreturn line.opacity * line.color;\\n}\\n#endif\\nvec4 shadeLine(LineData line)\\n{\\nmediump float thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(line.lineHalfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nmediump float fragDist = length(line.normal) * line.lineHalfWidth;\\nlowp float alpha = clamp(thinLineFactor * (line.lineHalfWidth - fragDist) / (u_blur + thinLineFactor - 1.0), 0.0, 1.0);\\nlowp vec4 out_color = getLineColor(line) * alpha;\\n#ifdef HIGHLIGHT\\nout_color.a = step(1.0 / 255.0, out_color.a);\\n#endif\\n#ifdef ID\\nif (out_color.a < 1.0 / 255.0) {\\ndiscard;\\n}\\nout_color = vec4(line.id, 0.0);\\n#endif\\nreturn out_color;\\n}\",\"line.vert\":\"float getBaseLineHalfWidth(in float lineHalfWidth, in float referenceHalfWidth) {\\n#ifdef VV_SIZE\\nfloat refLineWidth = 2.0 * referenceHalfWidth;\\nreturn 0.5 * (lineHalfWidth / max(referenceHalfWidth, EPSILON)) * getSize(refLineWidth);\\n#else\\nreturn lineHalfWidth;\\n#endif\\n}\\nfloat getLineHalfWidth(in float baseWidth, in float aa) {\\nfloat halfWidth = max(baseWidth + aa, 0.45) + 0.1 * aa;\\n#ifdef HIGHLIGHT\\nhalfWidth = max(halfWidth, 2.0);\\n#endif\\nreturn halfWidth;\\n}\\nvec2 getDist(in vec2 offset, in float halfWidth) {\\nfloat thinLineFactor = max(THIN_LINE_WIDTH_FACTOR * step(halfWidth, THIN_LINE_HALF_WIDTH), 1.0);\\nreturn thinLineFactor * halfWidth * offset;\\n}\\nLineData buildLine(\\nout vec3 out_pos,\\nin vec3 in_id,\\nin vec2 in_pos,\\nin vec4 in_color,\\nin vec2 in_offset,\\nin vec2 in_normal,\\nin float in_accumulatedDist,\\nin float in_lineHalfWidth,\\nin float in_bitSet,\\nin vec4 in_tlbr,\\nin vec2 in_segmentDirection,\\nin float in_referenceHalfWidth\\n)\\n{\\nfloat aa        = 0.5 * u_antialiasing;\\nfloat baseWidth = getBaseLineHalfWidth(in_lineHalfWidth, in_referenceHalfWidth);\\nfloat halfWidth = getLineHalfWidth(baseWidth, aa);\\nfloat z         = 2.0 * step(baseWidth, 0.0);\\nvec2  dist      = getDist(in_offset, halfWidth);\\nvec3  offset    = u_displayViewMat3 * vec3(dist, 0.0);\\nvec3  pos       = u_dvsMat3 * vec3(in_pos * POSITION_PRECISION, 1.0) + offset;\\n#ifdef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\nvec4  color     = in_color;\\nfloat opacity   = 1.0;\\n#else\\nvec4  color     = getColor(in_color, in_bitSet, BITSET_GENERIC_LOCK_COLOR);\\nfloat opacity   = getOpacity();\\n#ifdef SDF\\nconst float SDF_PATTERN_HALF_WIDTH = 15.5;\\nfloat scaleDash = getBit(in_bitSet, BITSET_LINE_SCALE_DASH);\\nfloat lineWidthRatio = (scaleDash * max(halfWidth - 0.55 * u_antialiasing, 0.25) + (1.0 - scaleDash)) / SDF_PATTERN_HALF_WIDTH;\\n#endif\\n#endif\\n#if !defined(SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE) && defined(PATTERN)\\nv_sampleAlphaOnly = getBit(in_bitSet, BITSET_GENERIC_CONSIDER_ALPHA_ONLY);\\n#endif\\nout_pos = vec3(pos.xy, z);\\nreturn LineData(\\ncolor,\\nin_normal,\\nhalfWidth,\\nopacity,\\n#ifndef SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#ifdef PATTERN\\nin_tlbr / u_mosaicSize.xyxy,\\nvec2(in_tlbr.z - in_tlbr.x, in_tlbr.w - in_tlbr.y),\\n#endif\\n#ifdef SDF\\nlineWidthRatio,\\n#endif\\n#if defined(PATTERN) || defined(SDF)\\nin_accumulatedDist * u_zoomFactor + dot(in_segmentDirection, dist),\\n#endif\\n#endif\\nnorm(in_id)\\n);\\n}\"}},\"symbologyTypeUtils.glsl\":\"#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_OUTLINE_FILL_LIKE\\n#endif\\n#if SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_SIMPLE || SYMBOLOGY_TYPE == SYMBOLOGY_TYPE_OUTLINE_FILL_SIMPLE\\n#define SYMBOLOGY_TYPE_IS_SIMPLE_LIKE\\n#endif\",text:{\"common.glsl\":\"uniform highp vec2 u_mosaicSize;\\nvarying highp vec3 v_id;\\nvarying mediump vec3 v_pos;\\nvarying lowp float v_opacity;\\nvarying lowp vec4 v_color;\\nvarying highp vec2 v_tex;\\nvarying mediump float v_antialiasingWidth;\\nvarying mediump float v_edgeDistanceOffset;\\nvarying lowp float v_transparency;\",\"hittest.glsl\":\"#include <materials/hittest/common.glsl>\",\"text.frag\":\"precision mediump float;\\n#include <materials/text/common.glsl>\\nuniform lowp sampler2D u_texture;\\n#ifdef HITTEST\\nvec4 getColor() {\\nreturn v_color;\\n}\\n#else\\nvec4 getColor()\\n{\\nfloat SDF_CUTOFF = (2.0 / 8.0);\\nfloat SDF_BASE_EDGE_DIST = 1.0 - SDF_CUTOFF;\\nlowp float dist = texture2D(u_texture, v_tex).a;\\nmediump float edge = SDF_BASE_EDGE_DIST - v_edgeDistanceOffset;\\n#ifdef HIGHLIGHT\\nedge /= 2.0;\\n#endif\\nlowp float aa = v_antialiasingWidth;\\nlowp float alpha = smoothstep(edge - aa, edge + aa, dist);\\nreturn alpha * v_color * v_opacity;\\n}\\n#endif\\nvoid main()\\n{\\ngl_FragColor = getColor();\\n}\",\"text.vert\":\"precision highp float;\\n#include <materials/utils.glsl>\\n#include <materials/vcommon.glsl>\\n#include <materials/text/common.glsl>\\n#include <materials/text/hittest.glsl>\\nattribute vec4 a_color;\\nattribute vec4 a_haloColor;\\nattribute vec4 a_texFontSize;\\nattribute vec4 a_aux;\\nattribute vec2 a_zoomRange;\\nattribute vec2 a_vertexOffset;\\nattribute vec2 a_texCoords;\\nuniform float u_isHaloPass;\\nuniform float u_isBackgroundPass;\\nfloat getTextSize(inout vec2 offset, inout float baseSize, in float referenceSize) {\\n#ifdef VV_SIZE\\nfloat r = getSize(referenceSize) / referenceSize;\\nbaseSize *= r;\\noffset.xy *= r;\\nreturn baseSize;\\n#endif\\nreturn baseSize;\\n}\\nvoid main()\\n{\\nINIT;\\nfloat a_isBackground  = a_aux.y;\\nfloat a_referenceSize = a_aux.z * a_aux.z / 256.0;\\nfloat a_bitSet        = a_aux.w;\\nfloat a_fontSize      = a_texFontSize.z;\\nvec2  a_offset        = a_vertexOffset * OFFSET_PRECISION;\\nvec3  in_pos        = vec3(a_pos * POSITION_PRECISION, 1.0);\\nfloat fontSize      = getTextSize(a_offset, a_fontSize, a_referenceSize);\\nfloat fontScale     = fontSize / SDF_FONT_SIZE;\\nvec3  offset        = getRotation() * vec3(a_offset, 0.0);\\nmat3  extrudeMatrix = getBit(a_bitSet, 0) == 1.0 ? u_displayViewMat3 : u_displayMat3;\\nfloat isText = 1.0 - a_isBackground;\\nfloat isBackground = u_isBackgroundPass * a_isBackground;\\nvec4  nonHaloColor  = (isBackground * a_color) + (isText * getColor(a_color, a_bitSet, 1));\\nv_color   = u_isHaloPass * a_haloColor + (1.0 - u_isHaloPass) * nonHaloColor;\\nv_opacity = getOpacity();\\nv_id      = norm(a_id);\\nv_tex     = a_texCoords / u_mosaicSize;\\nv_pos     = u_dvsMat3 * in_pos + extrudeMatrix * offset;\\nfloat isHidden = u_isBackgroundPass * isText + (1.0 - u_isBackgroundPass) * a_isBackground;\\nv_pos.z += 2.0 * isHidden;\\nv_edgeDistanceOffset = u_isHaloPass * OUTLINE_SCALE * a_texFontSize.w / fontScale / MAX_SDF_DISTANCE;\\nv_antialiasingWidth  = 0.105 * SDF_FONT_SIZE / fontSize / u_pixelRatio;\\n#ifdef HITTEST\\nhighp vec3 out_pos  = vec3(0.);\\nv_color = vec4(0.);\\nhittestMarker(v_color, out_pos, u_viewMat3 * u_tileMat3 *  vec3(a_pos * POSITION_PRECISION, 1.0)\\n+ u_tileMat3 * offset, fontSize / 2.);\\ngl_PointSize = 1.;\\ngl_Position = vec4(clip(v_color, out_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#else\\ngl_Position =  vec4(clip(v_color, v_pos, getFilterFlags(), a_zoomRange), 1.0);\\n#endif\\n}\"},\"utils.glsl\":\"float rshift(in float u32, in int amount) {\\nreturn floor(u32 / pow(2.0, float(amount)));\\n}\\nfloat getBit(in float bitset, in int bitIndex) {\\nfloat offset = pow(2.0, float(bitIndex));\\nreturn mod(floor(bitset / offset), 2.0);\\n}\\nconst int maxHighlightReasons = 6;\\nfloat getFilterBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex + maxHighlightReasons);\\n}\\nfloat getHighlightBit(in float bitset, in int bitIndex) {\\nreturn getBit(bitset, bitIndex);\\n}\\nhighp vec3 unpackDisplayIdTexel(in highp vec3 bitset) {\\nfloat isAggregate = getBit(bitset.b, 7);\\nreturn (1.0 - isAggregate) * bitset + isAggregate * (vec3(bitset.rgb) - vec3(0.0, 0.0, float(0x80)));\\n}\\nvec4 unpack(in float u32) {\\nfloat r = mod(rshift(u32, 0), 255.0);\\nfloat g = mod(rshift(u32, 8), 255.0);\\nfloat b = mod(rshift(u32, 16), 255.0);\\nfloat a = mod(rshift(u32, 24), 255.0);\\nreturn vec4(r, g, b, a);\\n}\\nvec3 norm(in vec3 v) {\\nreturn v /= 255.0;\\n}\\nvec4 norm(in vec4 v) {\\nreturn v /= 255.0;\\n}\\nfloat max4(vec4 target) {\\nreturn max(max(max(target.x, target.y), target.z), target.w);\\n}\\nvec2 unpack_u8_nf32(vec2 bytes) {\\nreturn (bytes - 127.0) / 127.0;\\n}\\nhighp float rand(in vec2 co) {\\nhighp float a = 12.9898;\\nhighp float b = 78.233;\\nhighp float c = 43758.5453;\\nhighp float dt = dot(co, vec2(a,b));\\nhighp float sn = mod(dt, 3.14);\\nreturn fract(sin(sn) * c);\\n}\",\"vcommon.glsl\":\"#include <materials/constants.glsl>\\n#include <materials/utils.glsl>\\n#include <materials/attributeData.glsl>\\n#include <materials/vv.glsl>\\n#include <materials/barycentric.glsl>\\nattribute vec2 a_pos;\\nattribute highp vec3 a_id;\\nuniform highp mat3 displayViewScreenMat3;\\nuniform highp mat3 displayViewMat3;\\nuniform highp mat3 displayMat3;\\nuniform highp mat3 tileMat3;\\nuniform highp mat3 viewMat3;\\nuniform highp float pixelRatio;\\nuniform mediump float zoomFactor;\\nuniform mediump float antialiasing;\\nuniform mediump float currentScale;\\nuniform mediump float currentZoom;\\nuniform mediump float metersPerSRUnit;\\nvec4 VV_ADATA = vec4(0.0);\\nvoid loadVisualVariableData(inout vec4 target) {\\ntarget.rgba = getVisualVariableData(a_id);\\n}\\n#ifdef VV\\n#define INIT loadVisualVariableData(VV_ADATA)\\n#else\\n#define INIT\\n#endif\\nvec4 getColor(in vec4 a_color, in float a_bitSet, int index) {\\n#ifdef VV_COLOR\\nfloat isColorLocked   = getBit(a_bitSet, index);\\nreturn getVVColor(VV_ADATA[ATTR_VV_COLOR], a_color, isColorLocked);\\n#else\\nreturn a_color;\\n#endif\\n}\\nfloat getOpacity() {\\n#ifdef VV_OPACITY\\nreturn getVVOpacity(VV_ADATA[ATTR_VV_OPACITY]);\\n#else\\nreturn 1.0;\\n#endif\\n}\\nfloat getSize(in float in_size, in float currentScale) {\\n#ifdef VV_SIZE\\nreturn getVVSize(in_size, VV_ADATA[ATTR_VV_SIZE], currentScale);\\n#else\\nreturn in_size;\\n#endif\\n}\\nmat3 getRotation() {\\n#ifdef VV_ROTATION\\nreturn getVVRotationMat3(mod(VV_ADATA[ATTR_VV_ROTATION], 360.0));\\n#else\\nreturn mat3(1.0);\\n#endif\\n}\\nfloat getFilterFlags() {\\n#ifdef IGNORES_SAMPLER_PRECISION\\nreturn ceil(getFilterData(a_id).x * 255.0);\\n#else\\nreturn getFilterData(a_id).x * 255.0;\\n#endif\\n}\\nvec4 getAnimationState() {\\nreturn getAnimation(a_id);\\n}\\nfloat getMinZoom() {\\nvec4 data0 = getFilterData(a_id) * 255.0;\\nreturn data0.g;\\n}\\nmat3 getMatrixNoDisplay(float isMapAligned) {\\nreturn isMapAligned * viewMat3 * tileMat3 + (1.0 - isMapAligned) * tileMat3;\\n}\\nmat3 getMatrix(float isMapAligned) {\\nreturn isMapAligned * displayViewMat3 + (1.0 - isMapAligned) * displayMat3;\\n}\\nfloat checkHighlightBit(float filterFlags, int index) {\\nreturn getHighlightBit(filterFlags, index);\\n}\\nfloat checkHighlight(float filterFlags) {\\nfloat result = checkHighlightBit(filterFlags, 0);\\nfor (int i = 1; i < maxHighlightReasons; i++) {\\nresult = result + checkHighlightBit(filterFlags, i);\\n}\\nreturn step(0.1, result);\\n}\\nvec3 clip(inout vec4 color, inout vec3 pos, in float filterFlags, in vec2 minMaxZoom) {\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 0));\\n#ifdef inside\\npos.z += 2.0 * (1.0 - getFilterBit(filterFlags, 1));\\n#elif defined(outside)\\npos.z += 2.0 * getFilterBit(filterFlags, 1);\\n#elif defined(highlight)\\n#if !defined(highlight_all)\\npos.z += 2.0 * (1.0 - checkHighlight(filterFlags));\\n#endif\\n#endif\\npos.z += 2.0 * (step(minMaxZoom.y, currentZoom) + (1.0 - step(minMaxZoom.x, currentZoom)));\\nreturn pos;\\n}\",\"vv.glsl\":\"#if defined(VV_SIZE_MIN_MAX_VALUE) || defined(VV_SIZE_SCALE_STOPS) || defined(VV_SIZE_FIELD_STOPS) || defined(VV_SIZE_UNIT_VALUE)\\n#define VV_SIZE\\n#endif\\n#if defined(VV_COLOR) || defined(VV_SIZE) || defined(VV_OPACITY) || defined(VV_ROTATION)\\n#define VV\\n#endif\\n#ifdef VV_COLOR\\nuniform highp float colorValues[8];\\nuniform vec4 colors[8];\\n#endif\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nuniform highp vec4 minMaxValueAndSize;\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nuniform highp float values[8];\\nuniform float sizes[8];\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nuniform highp float unitMeterRatio;\\n#endif\\n#ifdef VV_OPACITY\\nuniform highp float opacityValues[8];\\nuniform float opacities[8];\\n#endif\\n#ifdef VV_ROTATION\\nuniform lowp float rotationType;\\n#endif\\nbool isNan(float val) {\\nreturn (val == NAN_MAGIC_NUMBER);\\n}\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nfloat getVVMinMaxSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nfloat interpolationRatio = (sizeValue  - minMaxValueAndSize.x) / (minMaxValueAndSize.y - minMaxValueAndSize.x);\\ninterpolationRatio = clamp(interpolationRatio, 0.0, 1.0);\\nreturn minMaxValueAndSize.z + interpolationRatio * (minMaxValueAndSize.w - minMaxValueAndSize.z);\\n}\\n#endif\\n#ifdef VV_SIZE_SCALE_STOPS\\nfloat getVVScaleStopsSize(float currentScale) {\\nfloat outSize;\\nif (currentScale <= values[0]) {\\noutSize = sizes[0];\\n} else {\\nif (currentScale >= values[7]) {\\noutSize = sizes[7];\\n} else {\\nint index;\\nindex = -1;\\nfor (int i = 0; i < 8; i++) {\\nif (values[i] > currentScale) {\\nindex = i;\\nbreak;\\n}\\n}\\nint prevIndex = index - 1;\\nfloat a = currentScale - values[prevIndex];\\nfloat b = values[index] - values[prevIndex];\\noutSize = mix(sizes[prevIndex], sizes[index], a / b);\\n}\\n}\\nreturn outSize;\\n}\\n#endif\\n#ifdef VV_SIZE_FIELD_STOPS\\nconst int VV_SIZE_N = 8;\\nfloat getVVStopsSize(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nif (sizeValue <= values[0]) {\\nreturn sizes[0];\\n}\\nif (sizeValue >= values[VV_SIZE_N - 1]) {\\nreturn sizes[VV_SIZE_N - 1];\\n}\\nfor (int i = 1; i < VV_SIZE_N; ++i) {\\nif (values[i] >= sizeValue) {\\nfloat f = (sizeValue - values[i-1]) / (values[i] - values[i-1]);\\nreturn mix(sizes[i-1], sizes[i], f);\\n}\\n}\\nreturn sizes[VV_SIZE_N - 1];\\n}\\n#endif\\n#ifdef VV_SIZE_UNIT_VALUE\\nfloat getVVUnitValue(float sizeValue, float fallback) {\\nif (isNan(sizeValue)) {\\nreturn fallback;\\n}\\nreturn sizeValue * (metersPerSRUnit / unitMeterRatio);\\n}\\n#endif\\n#ifdef VV_OPACITY\\nconst int VV_OPACITY_N = 8;\\nfloat getVVOpacity(float opacityValue) {\\nif (isNan(opacityValue)) {\\nreturn 1.0;\\n}\\nif (opacityValue <= opacityValues[0]) {\\nreturn opacities[0];\\n}\\nfor (int i = 1; i < VV_OPACITY_N; ++i) {\\nif (opacityValues[i] >= opacityValue) {\\nfloat f = (opacityValue - opacityValues[i-1]) / (opacityValues[i] - opacityValues[i-1]);\\nreturn mix(opacities[i-1], opacities[i], f);\\n}\\n}\\nreturn opacities[VV_OPACITY_N - 1];\\n}\\n#endif\\n#ifdef VV_ROTATION\\nmat4 getVVRotation(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat4(1, 0, 0, 0,\\n0, 1, 0, 0,\\n0, 0, 1, 0,\\n0, 0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat4(cosA, sinA, 0, 0,\\n-sinA,  cosA, 0, 0,\\n0,     0, 1, 0,\\n0,     0, 0, 1);\\n}\\nmat3 getVVRotationMat3(float rotationValue) {\\nif (isNan(rotationValue)) {\\nreturn mat3(1, 0, 0,\\n0, 1, 0,\\n0, 0, 1);\\n}\\nfloat rotation = rotationValue;\\nif (rotationType == 1.0) {\\nrotation = 90.0 - rotation;\\n}\\nfloat angle = C_DEG_TO_RAD * -rotation;\\nfloat sinA = sin(angle);\\nfloat cosA = cos(angle);\\nreturn mat3(cosA, -sinA, 0,\\nsinA, cosA, 0,\\n0,    0,    1);\\n}\\n#endif\\n#ifdef VV_COLOR\\nconst int VV_COLOR_N = 8;\\nvec4 getVVColor(float colorValue, vec4 fallback, float isColorLocked) {\\nif (isNan(colorValue) || isColorLocked == 1.0) {\\nreturn fallback;\\n}\\nif (colorValue <= colorValues[0]) {\\nreturn colors[0];\\n}\\nfor (int i = 1; i < VV_COLOR_N; ++i) {\\nif (colorValues[i] >= colorValue) {\\nfloat f = (colorValue - colorValues[i-1]) / (colorValues[i] - colorValues[i-1]);\\nreturn mix(colors[i-1], colors[i], f);\\n}\\n}\\nreturn colors[VV_COLOR_N - 1];\\n}\\n#endif\\nfloat getVVSize(in float size, in float vvSize, in float currentScale)  {\\n#ifdef VV_SIZE_MIN_MAX_VALUE\\nreturn getVVMinMaxSize(vvSize, size);\\n#elif defined(VV_SIZE_SCALE_STOPS)\\nfloat outSize = getVVScaleStopsSize(currentScale);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_FIELD_STOPS)\\nfloat outSize = getVVStopsSize(vvSize, size);\\nreturn isNan(outSize) ? size : outSize;\\n#elif defined(VV_SIZE_UNIT_VALUE)\\nreturn getVVUnitValue(vvSize, size);\\n#else\\nreturn size;\\n#endif\\n}\"},\"post-processing\":{blit:{\"blit.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_FragColor = texture2D(u_texture, v_uv);\\n}\"},bloom:{composite:{\"composite.frag\":\"precision mediump float;\\nvarying vec2 v_uv;\\nuniform sampler2D u_blurTexture1;\\nuniform sampler2D u_blurTexture2;\\nuniform sampler2D u_blurTexture3;\\nuniform sampler2D u_blurTexture4;\\nuniform sampler2D u_blurTexture5;\\nuniform float u_bloomStrength;\\nuniform float u_bloomRadius;\\nuniform float u_bloomFactors[NUMMIPS];\\nuniform vec3 u_bloomTintColors[NUMMIPS];\\nfloat lerpBloomFactor(const in float factor) {\\nfloat mirrorFactor = 1.2 - factor;\\nreturn mix(factor, mirrorFactor, u_bloomRadius);\\n}\\nvoid main() {\\nvec4 color = u_bloomStrength * (\\nlerpBloomFactor(u_bloomFactors[0]) * vec4(u_bloomTintColors[0], 1.0) * texture2D(u_blurTexture1, v_uv) +\\nlerpBloomFactor(u_bloomFactors[1]) * vec4(u_bloomTintColors[1], 1.0) * texture2D(u_blurTexture2, v_uv) +\\nlerpBloomFactor(u_bloomFactors[2]) * vec4(u_bloomTintColors[2], 1.0) * texture2D(u_blurTexture3, v_uv) +\\nlerpBloomFactor(u_bloomFactors[3]) * vec4(u_bloomTintColors[3], 1.0) * texture2D(u_blurTexture4, v_uv) +\\nlerpBloomFactor(u_bloomFactors[4]) * vec4(u_bloomTintColors[4], 1.0) * texture2D(u_blurTexture5, v_uv)\\n);\\ngl_FragColor = clamp(color, 0.0, 1.0);\\n}\"},gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\n#define SIGMA RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = float(SIGMA);\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},luminosityHighPass:{\"luminosityHighPass.frag\":\"precision mediump float;\\nuniform sampler2D u_texture;\\nuniform vec3 u_defaultColor;\\nuniform float u_defaultOpacity;\\nuniform float u_luminosityThreshold;\\nuniform float u_smoothWidth;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 texel = texture2D(u_texture, v_uv);\\nvec3 luma = vec3(0.299, 0.587, 0.114);\\nfloat v = dot(texel.xyz, luma);\\nvec4 outputColor = vec4(u_defaultColor.rgb, u_defaultOpacity);\\nfloat alpha = smoothstep(u_luminosityThreshold, u_luminosityThreshold + u_smoothWidth, v);\\ngl_FragColor = mix(outputColor, texel, alpha);\\n}\"}},blur:{gaussianBlur:{\"gaussianBlur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nuniform vec2 u_direction;\\nuniform float u_sigma;\\nvarying vec2 v_uv;\\n#define KERNEL_RADIUS RADIUS\\nfloat gaussianPdf(in float x, in float sigma) {\\nreturn 0.39894 * exp(-0.5 * x * x / ( sigma * sigma)) / sigma;\\n}\\nvoid main() {\\nvec2 invSize = 1.0 / u_texSize;\\nfloat fSigma = u_sigma;\\nfloat weightSum = gaussianPdf(0.0, fSigma);\\nvec4 pixelColorSum = texture2D(u_colorTexture, v_uv) * weightSum;\\nfor (int i = 1; i < KERNEL_RADIUS; i ++) {\\nfloat x = float(i);\\nfloat w = gaussianPdf(x, fSigma);\\nvec2 uvOffset = u_direction * invSize * x;\\nvec4 sample1 = texture2D(u_colorTexture, v_uv + uvOffset);\\nvec4 sample2 = texture2D(u_colorTexture, v_uv - uvOffset);\\npixelColorSum += (sample1 + sample2) * w;\\nweightSum += 2.0 * w;\\n}\\ngl_FragColor = pixelColorSum /weightSum;\\n}\"},\"radial-blur\":{\"radial-blur.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nconst float sampleDist = 1.0;\\nconst float sampleStrength = 2.2;\\nvoid main(void) {\\nfloat samples[10];\\nsamples[0] = -0.08;\\nsamples[1] = -0.05;\\nsamples[2] = -0.03;\\nsamples[3] = -0.02;\\nsamples[4] = -0.01;\\nsamples[5] =  0.01;\\nsamples[6] =  0.02;\\nsamples[7] =  0.03;\\nsamples[8] =  0.05;\\nsamples[9] =  0.08;\\nvec2 dir = 0.5 - v_uv;\\nfloat dist = sqrt(dir.x * dir.x + dir.y * dir.y);\\ndir = dir / dist;\\nvec4 color = texture2D(u_colorTexture,v_uv);\\nvec4 sum = color;\\nfor (int i = 0; i < 10; i++) {\\nsum += texture2D(u_colorTexture, v_uv + dir * samples[i] * sampleDist);\\n}\\nsum *= 1.0 / 11.0;\\nfloat t = dist * sampleStrength;\\nt = clamp(t, 0.0, 1.0);\\ngl_FragColor = mix(color, sum, t);\\n}\"}},dra:{\"dra.frag\":\"precision mediump float;\\nuniform sampler2D u_minColor;\\nuniform sampler2D u_maxColor;\\nuniform sampler2D u_texture;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 minColor = texture2D(u_minColor, vec2(0.5));\\nvec4 maxColor = texture2D(u_maxColor, vec2(0.5));\\nvec4 color = texture2D(u_texture, v_uv);\\nvec3 minColorUnpremultiply = minColor.rgb / minColor.a;\\nvec3 maxColorUnpremultiply = maxColor.rgb / maxColor.a;\\nvec3 colorUnpremultiply = color.rgb / color.a;\\nvec3 range = maxColorUnpremultiply - minColorUnpremultiply;\\ngl_FragColor = vec4(color.a * (colorUnpremultiply - minColorUnpremultiply) / range, color.a);\\n}\",\"min-max\":{\"min-max.frag\":\"#extension GL_EXT_draw_buffers : require\\nprecision mediump float;\\n#define CELL_SIZE 2\\nuniform sampler2D u_minTexture;\\nuniform sampler2D u_maxTexture;\\nuniform vec2 u_srcResolution;\\nuniform vec2 u_dstResolution;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec2 srcPixel = floor(gl_FragCoord.xy) * float(CELL_SIZE);\\nvec2 onePixel = vec2(1.0) / u_srcResolution;\\nvec2 uv = (srcPixel + 0.5) / u_srcResolution;\\nvec4 minColor = vec4(1.0);\\nvec4 maxColor = vec4(0.0);\\nfor (int y = 0; y < CELL_SIZE; ++y) {\\nfor (int x = 0; x < CELL_SIZE; ++x) {\\nvec2 offset = uv + vec2(x, y) * onePixel;\\nminColor = min(minColor, texture2D(u_minTexture, offset));\\nmaxColor = max(maxColor, texture2D(u_maxTexture, offset));\\n}\\n}\\ngl_FragData[0] = minColor;\\ngl_FragData[1] = maxColor;\\n}\"}},\"drop-shadow\":{composite:{\"composite.frag\":\"precision mediump float;\\nuniform sampler2D u_layerFBOTexture;\\nuniform sampler2D u_blurTexture;\\nuniform vec4 u_shadowColor;\\nuniform vec2 u_shadowOffset;\\nuniform highp mat3 u_displayViewMat3;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec3 offset = u_displayViewMat3 * vec3(u_shadowOffset, 0.0);\\nvec4 layerColor = texture2D(u_layerFBOTexture, v_uv);\\nvec4 blurColor = texture2D(u_blurTexture, v_uv - offset.xy / 2.0);\\ngl_FragColor = ((1.0 - layerColor.a) * blurColor.a * u_shadowColor + layerColor);\\n}\"}},\"edge-detect\":{\"frei-chen\":{\"frei-chen.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform vec2 u_texSize;\\nvarying vec2 v_uv;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[9];\\nconst mat3 g0 = mat3( 0.3535533845424652, 0, -0.3535533845424652, 0.5, 0, -0.5, 0.3535533845424652, 0, -0.3535533845424652 );\\nconst mat3 g1 = mat3( 0.3535533845424652, 0.5, 0.3535533845424652, 0, 0, 0, -0.3535533845424652, -0.5, -0.3535533845424652 );\\nconst mat3 g2 = mat3( 0, 0.3535533845424652, -0.5, -0.3535533845424652, 0, 0.3535533845424652, 0.5, -0.3535533845424652, 0 );\\nconst mat3 g3 = mat3( 0.5, -0.3535533845424652, 0, -0.3535533845424652, 0, 0.3535533845424652, 0, 0.3535533845424652, -0.5 );\\nconst mat3 g4 = mat3( 0, -0.5, 0, 0.5, 0, 0.5, 0, -0.5, 0 );\\nconst mat3 g5 = mat3( -0.5, 0, 0.5, 0, 0, 0, 0.5, 0, -0.5 );\\nconst mat3 g6 = mat3( 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.6666666865348816, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204 );\\nconst mat3 g7 = mat3( -0.3333333432674408, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, 0.6666666865348816, 0.1666666716337204, -0.3333333432674408, 0.1666666716337204, -0.3333333432674408 );\\nconst mat3 g8 = mat3( 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408, 0.3333333432674408 );\\nvoid main() {\\nG[0] = g0,\\nG[1] = g1,\\nG[2] = g2,\\nG[3] = g3,\\nG[4] = g4,\\nG[5] = g5,\\nG[6] = g6,\\nG[7] = g7,\\nG[8] = g8;\\nmat3 I;\\nfloat cnv[9];\\nvec3 sample;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D(u_colorTexture, v_uv + texel * vec2(i - 1.0,j - 1.0)).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 9; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nfloat M = (cnv[0] + cnv[1]) + (cnv[2] + cnv[3]);\\nfloat S = (cnv[4] + cnv[5]) + (cnv[6] + cnv[7]) + (cnv[8] + M);\\ngl_FragColor = vec4(vec3(sqrt(M / S)), texture2D(u_colorTexture, v_uv).a);\\n}\"},sobel:{\"sobel.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 2.0, 1.0, 0.0, 0.0, 0.0, -1.0, -2.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 0.0, -1.0, 2.0, 0.0, -2.0, 1.0, 0.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\ngl_FragColor = vec4(vec3(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1])), texture2D(u_colorTexture, v_uv).a);\\n}\"}},\"edge-enhance\":{\"edge-enhance.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nvarying vec2 v_uv;\\nuniform vec2 u_texSize;\\nvec2 texel = vec2(1.0 / u_texSize.x, 1.0 / u_texSize.y);\\nmat3 G[2];\\nconst mat3 g0 = mat3( 1.0, 0.0, -1.0, 1.0, 0.0, -1.0, 1.0, 0.0, -1.0 );\\nconst mat3 g1 = mat3( 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, -1.0, -1.0, -1.0 );\\nvoid main() {\\nmat3 I;\\nfloat cnv[2];\\nvec3 sample;\\nG[0] = g0;\\nG[1] = g1;\\nfor (float i = 0.0; i < 3.0; i++) {\\nfor (float j = 0.0; j < 3.0; j++) {\\nsample = texture2D( u_colorTexture, v_uv + texel * vec2(i-1.0,j-1.0) ).rgb;\\nI[int(i)][int(j)] = length(sample);\\n}\\n}\\nfor (int i = 0; i < 2; i++) {\\nfloat dp3 = dot(G[i][0], I[0]) + dot(G[i][1], I[1]) + dot(G[i][2], I[2]);\\ncnv[i] = dp3 * dp3;\\n}\\nvec4 color = texture2D(u_colorTexture, v_uv);\\ngl_FragColor = vec4(0.5 * sqrt(cnv[0] * cnv[0] + cnv[1] * cnv[1]) * color);\\n}\"},filterEffect:{\"filterEffect.frag\":\"precision mediump float;\\nuniform sampler2D u_colorTexture;\\nuniform mat4 u_coefficients;\\nvarying vec2 v_uv;\\nvoid main() {\\nvec4 color = texture2D(u_colorTexture, v_uv);\\nvec4 rgbw = u_coefficients * vec4(color.a > 0.0 ? color.rgb / color.a : vec3(0.0), 1.0);\\nfloat a = color.a;\\ngl_FragColor = vec4(a * rgbw.rgb, a);\\n}\"},pp:{\"pp.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying vec2 v_uv;\\nvoid main() {\\ngl_Position = vec4(a_position, 0.0, 1.0);\\nv_uv = (a_position + 1.0) / 2.0;\\n}\"}},raster:{common:{\"common.glsl\":\"uniform sampler2D u_image;\\nuniform int u_bandCount;\\nuniform bool u_flipY;\\nuniform float u_opacity;\\nuniform int u_resampling;\\nuniform vec2 u_srcImageSize;\\n#ifdef APPLY_PROJECTION\\n#include <raster/common/projection.glsl>\\n#endif\\n#ifdef BICUBIC\\n#include <filtering/bicubic.glsl>\\n#endif\\n#ifdef BILINEAR\\n#include <filtering/bilinear.glsl>\\n#endif\\nvec2 getPixelLocation(vec2 coords) {\\nvec2 targetLocation = u_flipY ? vec2(coords.s, 1.0 - coords.t) : coords;\\n#ifdef APPLY_PROJECTION\\ntargetLocation = projectPixelLocation(targetLocation);\\n#endif\\nreturn targetLocation;\\n}\\nbool isOutside(vec2 coords){\\nif (coords.t>1.00001 ||coords.t<-0.00001 || coords.s>1.00001 ||coords.s<-0.00001) {\\nreturn true;\\n} else {\\nreturn false;\\n}\\n}\\nvec4 getPixel(vec2 pixelLocation) {\\n#ifdef BICUBIC\\nvec4 color = sampleBicubicBSpline(u_image, pixelLocation, u_srcImageSize);\\n#elif defined(BILINEAR)\\nvec4 color = sampleBilinear(u_image, pixelLocation, u_srcImageSize);\\n#else\\nvec4 color = texture2D(u_image, pixelLocation);\\n#endif\\nreturn color;\\n}\",\"common.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform highp float u_scale;\\nuniform highp vec2 u_offset;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos * u_scale + u_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\",\"contrastBrightness.glsl\":\"uniform float u_contrastOffset;\\nuniform float u_brightnessOffset;\\nvec4 adjustContrastBrightness(vec4 currentPixel, bool isFloat) {\\nvec4 pixelValue = isFloat ? currentPixel * 255.0 : currentPixel;\\nfloat maxI = 255.0;\\nfloat mid = 128.0;\\nfloat c = u_contrastOffset;\\nfloat b = u_brightnessOffset;\\nvec4 v;\\nif (c > 0.0 && c < 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) / (2.0 * (100.0 - c)) + mid;\\n} else if (c <= 0.0 && c > -100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + 2.0 * maxI * b) * (100.0 + c) / 20000.0 + mid;\\n} else if (c == 100.0) {\\nv = (200.0 * pixelValue - 100.0 * maxI + (maxI + 1.0) * (100.0 - c) + 2.0 * maxI * b);\\nv = (sign(v) + 1.0) / 2.0;\\n} else if (c == -100.0) {\\nv = vec4(mid, mid, mid, currentPixel.a);\\n}\\nvec3 rgb = clamp(v.rgb / 255.0, 0.0, 1.0);\\nreturn vec4(rgb, currentPixel.a);\\n}\",\"getSurfaceValues.glsl\":\"#include <raster/common/mirror.glsl>\\nvoid getSurfaceValues(sampler2D imageTexture, vec2 texCoord, vec2 srcImageSize, inout float values[10]) {\\nvec2 onePixel = 1.0 / srcImageSize;\\nvec4 va = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, -1.0)));\\nvec4 vb = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, -1.0)));\\nvec4 vc = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, -1.0)));\\nvec4 vd = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 0.0)));\\nvec4 ve = texture2D(imageTexture, mirror(texCoord));\\nvec4 vf = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 0.0)));\\nvec4 vg = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(-1.0, 1.0)));\\nvec4 vh = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(0.0, 1.0)));\\nvec4 vi = texture2D(imageTexture, mirror(texCoord + onePixel * vec2(1.0, 1.0)));\\nfloat alpha = va.a * vb.a * vc.a * vd.a * ve.a * vf.a * vg.a * vh.a * vi.a;\\nvalues[0] = va.r;\\nvalues[1] = vb.r;\\nvalues[2] = vc.r;\\nvalues[3] = vd.r;\\nvalues[4] = ve.r;\\nvalues[5] = vf.r;\\nvalues[6] = vg.r;\\nvalues[7] = vh.r;\\nvalues[8] = vi.r;\\nvalues[9] = alpha;\\n}\",\"inverse.glsl\":\"float invertValue(float value) {\\nfloat s = sign(value);\\nreturn (s * s) / (value + abs(s) - 1.0);\\n}\",\"mirror.glsl\":\"vec2 mirror(vec2 pos) {\\nvec2 pos1 = abs(pos);\\nreturn step(pos1, vec2(1.0, 1.0)) * pos1 + step(1.0, pos1) * (2.0 - pos1);\\n}\",\"projection.glsl\":\"uniform sampler2D u_transformGrid;\\nuniform vec2 u_transformSpacing;\\nuniform vec2 u_transformGridSize;\\nuniform vec2 u_targetImageSize;\\nvec2 projectPixelLocation(vec2 coords) {\\n#ifdef LOOKUP_PROJECTION\\nvec4 pv = texture2D(u_transformGrid, coords);\\nreturn vec2(pv.r, pv.g);\\n#endif\\nvec2 index_image = floor(coords * u_targetImageSize);\\nvec2 oneTransformPixel = vec2(0.25 / u_transformGridSize.s, 1.0 / u_transformGridSize.t);\\nvec2 index_transform = floor(index_image / u_transformSpacing) / u_transformGridSize;\\nvec2 pos = fract((index_image + vec2(0.5, 0.5)) / u_transformSpacing);\\nvec2 srcLocation;\\nvec2 transform_location = index_transform + oneTransformPixel * 0.5;\\nif (pos.s <= pos.t) {\\nvec4 ll_abc = texture2D(u_transformGrid, vec2(transform_location.s, transform_location.t));\\nvec4 ll_def = texture2D(u_transformGrid, vec2(transform_location.s + oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ll_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ll_def.rgb, vec3(pos, 1.0));\\n} else {\\nvec4 ur_abc = texture2D(u_transformGrid, vec2(transform_location.s + 2.0 * oneTransformPixel.s, transform_location.t));\\nvec4 ur_def = texture2D(u_transformGrid, vec2(transform_location.s + 3.0 * oneTransformPixel.s, transform_location.t));\\nsrcLocation.s = dot(ur_abc.rgb, vec3(pos, 1.0));\\nsrcLocation.t = dot(ur_def.rgb, vec3(pos, 1.0));\\n}\\nreturn srcLocation;\\n}\"},flow:{\"getFadeOpacity.glsl\":\"uniform float u_decayRate;\\nuniform float u_fadeToZero;\\nfloat getFadeOpacity(float x) {\\nfloat cutOff = mix(0.0, exp(-u_decayRate), u_fadeToZero);\\nreturn (exp(-u_decayRate * x) - cutOff) / (1.0 - cutOff);\\n}\",\"getFragmentColor.glsl\":\"vec4 getFragmentColor(vec4 color, float dist, float size, float featheringSize) {\\nfloat featheringStart = clamp(0.5 - featheringSize / size, 0.0, 0.5);\\nif (dist > featheringStart) {\\ncolor *= 1.0 - (dist - featheringStart) / (0.5 - featheringStart);\\n}\\nreturn color;\\n}\",imagery:{\"imagery.frag\":\"precision highp float;\\nvarying vec2 v_texcoord;\\nuniform sampler2D u_texture;\\nuniform float u_Min;\\nuniform float u_Max;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nfloat getIntensity(float v) {\\nreturn u_Min + v * (u_Max - u_Min);\\n}\\nvoid main(void) {\\nvec4 sampled = texture2D(u_texture, v_texcoord);\\nfloat intensity = getIntensity(sampled.r);\\ngl_FragColor = getColor(intensity);\\ngl_FragColor.a *= getOpacity(sampled.r);\\ngl_FragColor.a *= sampled.a;\\ngl_FragColor.rgb *= gl_FragColor.a;\\n}\",\"imagery.vert\":\"attribute vec2 a_position;\\nattribute vec2 a_texcoord;\\nuniform mat3 u_dvsMat3;\\nvarying vec2 v_texcoord;\\nvoid main(void) {\\nvec2 xy = (u_dvsMat3 * vec3(a_position, 1.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_texcoord = a_texcoord;\\n}\"},particles:{\"particles.frag\":\"precision highp float;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/getFragmentColor.glsl>\\nvoid main(void) {\\ngl_FragColor = getFragmentColor(v_color, length(v_texcoord - 0.5), v_size, u_featheringSize);\\n}\",\"particles.vert\":\"attribute vec4 a_xyts0;\\nattribute vec4 a_xyts1;\\nattribute vec4 a_typeIdDurationSeed;\\nattribute vec4 a_extrudeInfo;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nvarying vec4 v_color;\\nvarying vec2 v_texcoord;\\nvarying float v_size;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/vv.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nvec2 position0 = a_xyts0.xy;\\nfloat t0 = a_xyts0.z;\\nfloat speed0 = a_xyts0.w;\\nvec2 position1 = a_xyts1.xy;\\nfloat t1 = a_xyts1.z;\\nfloat speed1 = a_xyts1.w;\\nfloat type = a_typeIdDurationSeed.x;\\nfloat id = a_typeIdDurationSeed.y;\\nfloat duration = a_typeIdDurationSeed.z;\\nfloat seed = a_typeIdDurationSeed.w;\\nvec2 e0 = a_extrudeInfo.xy;\\nvec2 e1 = a_extrudeInfo.zw;\\nfloat animationPeriod = duration + u_trailLength;\\nfloat scaledTime = u_time * u_flowSpeed;\\nfloat randomizedTime = scaledTime + seed * animationPeriod;\\nfloat t = mod(randomizedTime, animationPeriod);\\nfloat fUnclamped = (t - t0) / (t1 - t0);\\nfloat f = clamp(fUnclamped, 0.0, 1.0);\\nfloat clampedTime = mix(t0, t1, f);\\nfloat speed = mix(speed0, speed1, f);\\nvec2 extrude;\\nvec2 position;\\nfloat fadeOpacity;\\nfloat introOpacity;\\nif (type == 2.0) {\\nif (fUnclamped < 0.0 || (fUnclamped > 1.0 && t1 != duration)) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nvec2 ortho = mix(e0, e1, f);\\nvec2 parallel;\\nparallel = normalize(position1 - position0) * 0.5;\\nif (id == 1.0) {\\nextrude = ortho;\\nv_texcoord = vec2(0.5, 0.0);\\n} else if (id == 2.0) {\\nextrude = -ortho;\\nv_texcoord = vec2(0.5, 1.0);\\n} else if (id == 3.0) {\\nextrude = ortho + parallel;\\nv_texcoord = vec2(1.0, 0.0);\\n} else if (id == 4.0) {\\nextrude = -ortho + parallel;\\nv_texcoord = vec2(1.0, 1.0);\\n}\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else {\\nif (fUnclamped < 0.0) {\\ngl_Position = vec4(0.0, 0.0, -2.0, 1.0);\\nreturn;\\n}\\nif (id == 1.0) {\\nextrude = e0;\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 2.0) {\\nextrude = -e0;\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - t0) / u_trailLength);\\nintroOpacity = 1.0 - exp(-t0);\\nv_size = getSize(speed0);\\nv_color = getColor(speed0);\\nv_color.a *= getOpacity(speed0);\\nposition = position0;\\n} else if (id == 3.0) {\\nextrude = mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 0.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n} else if (id == 4.0) {\\nextrude = -mix(e0, e1, f);\\nv_texcoord = vec2(0.5, 1.0);\\nfadeOpacity = getFadeOpacity((t - clampedTime) / u_trailLength);\\nintroOpacity = 1.0 - exp(-clampedTime);\\nv_size = getSize(speed);\\nv_color = getColor(speed);\\nv_color.a *= getOpacity(speed);\\nposition = mix(position0, position1, f);\\n}\\n}\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(extrude * v_size, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_color.a *= fadeOpacity;\\nv_color.a *= mix(1.0, introOpacity, u_introFade);\\nv_color.rgb *= v_color.a;\\n}\"},streamlines:{\"streamlines.frag\":\"precision highp float;\\nvarying float v_side;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_size;\\nuniform float u_time;\\nuniform float u_trailLength;\\nuniform float u_flowSpeed;\\nuniform float u_featheringSize;\\nuniform float u_introFade;\\n#include <raster/flow/getFragmentColor.glsl>\\n#include <raster/flow/getFadeOpacity.glsl>\\nvoid main(void) {\\nfloat t = mod(v_timeSeed * (v_totalTime + u_trailLength) + u_time * u_flowSpeed, v_totalTime + u_trailLength) - v_time;\\nvec4 color = v_color * step(0.0, t) * getFadeOpacity(t / u_trailLength);\\ncolor *= mix(1.0, 1.0 - exp(-v_time), u_introFade);\\ngl_FragColor = getFragmentColor(color, length((v_side + 1.0) / 2.0 - 0.5), v_size, u_featheringSize);\\n}\",\"streamlines.vert\":\"attribute vec3 a_positionAndSide;\\nattribute vec3 a_timeInfo;\\nattribute vec2 a_extrude;\\nattribute float a_speed;\\nuniform mat3 u_dvsMat3;\\nuniform mat3 u_displayViewMat3;\\nvarying float v_time;\\nvarying float v_totalTime;\\nvarying float v_timeSeed;\\nvarying vec4 v_color;\\nvarying float v_side;\\nvarying float v_size;\\nuniform float u_featheringSize;\\n#include <raster/flow/vv.glsl>\\nvoid main(void) {\\nvec4 lineColor = getColor(a_speed);\\nfloat lineOpacity = getOpacity(a_speed);\\nfloat lineSize = getSize(a_speed);\\nvec2 position = a_positionAndSide.xy;\\nv_side = a_positionAndSide.z;\\nvec2 xy = (u_dvsMat3 * vec3(position, 1.0) + u_displayViewMat3 * vec3(a_extrude * lineSize, 0.0)).xy;\\ngl_Position = vec4(xy, 0.0, 1.0);\\nv_time = a_timeInfo.x;\\nv_totalTime = a_timeInfo.y;\\nv_timeSeed = a_timeInfo.z;\\nv_color = lineColor;\\nv_color.a *= lineOpacity;\\nv_color.rgb *= v_color.a;\\nv_size = lineSize;\\n}\"},\"vv.glsl\":\"#define MAX_STOPS 8\\n#ifdef VV_COLOR\\nuniform float u_color_stops[MAX_STOPS];\\nuniform vec4 u_color_values[MAX_STOPS];\\nuniform int u_color_count;\\n#else\\nuniform vec4 u_color;\\n#endif\\n#ifdef VV_OPACITY\\nuniform float u_opacity_stops[MAX_STOPS];\\nuniform float u_opacity_values[MAX_STOPS];\\nuniform int u_opacity_count;\\n#else\\nuniform float u_opacity;\\n#endif\\n#ifdef VV_SIZE\\nuniform float u_size_stops[MAX_STOPS];\\nuniform float u_size_values[MAX_STOPS];\\nuniform int u_size_count;\\n#else\\nuniform float u_size;\\n#endif\\nuniform float u_featheringOffset;\\nvec4 getColor(float x) {\\n#ifdef VV_COLOR\\nvec4 color = u_color_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_color_count) {\\nbreak;\\n}\\nfloat x1 = u_color_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_color_stops[i];\\nvec4 y2 = u_color_values[i];\\nif (x < x2) {\\nvec4 y1 = u_color_values[i - 1];\\ncolor = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\ncolor = y2;\\n}\\n}\\n}\\n#else\\nvec4 color = u_color;\\n#endif\\nreturn color;\\n}\\nfloat getOpacity(float x) {\\n#ifdef VV_OPACITY\\nfloat opacity = u_opacity_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_opacity_count) {\\nbreak;\\n}\\nfloat x1 = u_opacity_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_opacity_stops[i];\\nfloat y2 = u_opacity_values[i];\\nif (x < x2) {\\nfloat y1 = u_opacity_values[i - 1];\\nopacity = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nopacity = y2;\\n}\\n}\\n}\\n#else\\nfloat opacity = u_opacity;\\n#endif\\nreturn opacity;\\n}\\nfloat getSize(float x) {\\n#ifdef VV_SIZE\\nfloat size = u_size_values[0];\\n{\\nfor (int i = 1; i < MAX_STOPS; i++) {\\nif (i >= u_size_count) {\\nbreak;\\n}\\nfloat x1 = u_size_stops[i - 1];\\nif (x < x1) {\\nbreak;\\n}\\nfloat x2 = u_size_stops[i];\\nfloat y2 = u_size_values[i];\\nif (x < x2) {\\nfloat y1 = u_size_values[i - 1];\\nsize = y1 + (y2 - y1) * (x - x1) / (x2 - x1);\\n} else {\\nsize = y2;\\n}\\n}\\n}\\n#else\\nfloat size = u_size;\\n#endif\\nreturn size + 2.0 * u_featheringSize * u_featheringOffset;\\n}\"},hillshade:{\"hillshade.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform int u_hillshadeType;\\nuniform float u_sinZcosAs[6];\\nuniform float u_sinZsinAs[6];\\nuniform float u_cosZs[6];\\nuniform float u_weights[6];\\nuniform vec2 u_factor;\\nuniform float u_minValue;\\nuniform float u_maxValue;\\nuniform float u_scaling;\\n#include <raster/lut/colorize.glsl>\\n#include <raster/common/getSurfaceValues.glsl>\\nvec3 rgb2hsv(vec3 c) {\\nvec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\\nvec4 p = c.g < c.b ? vec4(c.bg, K.wz) : vec4(c.gb, K.xy);\\nvec4 q = c.r < p.x ? vec4(p.xyw, c.r) : vec4(c.r, p.yzx);\\nfloat d = q.x - min(q.w, q.y);\\nfloat e = 1.0e-10;\\nreturn vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), min(d / (q.x + e), 1.0), q.x);\\n}\\nvec3 hsv2rgb(vec3 c) {\\nvec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\\nvec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\\nreturn c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);\\n}\\nvec4 overlay(float val, float minValue, float maxValue, float hillshade) {\\nval = clamp((val - minValue) / (maxValue - minValue), 0.0, 1.0);\\nvec4 rgb = colorize(vec4(val, val, val, 1.0), 255.0);\\nvec3 hsv = rgb2hsv(rgb.xyz);\\nhsv.z = hillshade;\\nreturn vec4(hsv2rgb(hsv) * u_scaling, 1.0) * rgb.a;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nif (currentPixel.a == 0.0) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nfloat pv[10];\\ngetSurfaceValues(u_image, pixelLocation, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * u_factor.s;\\nfloat dzy = (pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * u_factor.t;\\nfloat dzd = sqrt(1.0 + dzx * dzx + dzy * dzy);\\nfloat hillshade = 0.0;\\nif (u_hillshadeType == 0){\\nfloat cosDelta = u_sinZsinAs[0] * dzy - u_sinZcosAs[0] * dzx;\\nfloat z = (u_cosZs[0] + cosDelta) / dzd;\\nif (z < 0.0)  z = 0.0;\\nhillshade = z;\\n} else {\\nfor (int k = 0; k < 6; k++) {\\nfloat cosDelta = u_sinZsinAs[k] * dzy - u_sinZcosAs[k] * dzx;\\nfloat z = (u_cosZs[k] + cosDelta) / dzd;\\nif (z < 0.0) z = 0.0;\\nhillshade = hillshade + z * u_weights[k];\\nif (k == 5) break;\\n}\\n}\\n#ifdef APPLY_COLORMAP\\nvec4 result = overlay(pv[4], u_minValue, u_maxValue, hillshade) * alpha * u_opacity;\\n#else\\nhillshade *= u_scaling;\\nvec4 result = vec4(hillshade, hillshade, hillshade, 1.0) * alpha * u_opacity;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = vec4(floor(result.xyz + 0.5), result.a);\\n#endif\\ngl_FragColor = result;\\n}\"},lut:{\"colorize.glsl\":\"uniform sampler2D u_colormap;\\nuniform float u_colormapOffset;\\nuniform float u_colormapMaxIndex;\\nvec4 colorize(vec4 currentPixel, float scaleFactor) {\\nfloat clrIndex = clamp(currentPixel.r * scaleFactor - u_colormapOffset, 0.0, u_colormapMaxIndex);\\nvec2 clrPosition = vec2((clrIndex + 0.5) / (u_colormapMaxIndex + 1.0), 0.0);\\nvec4 color = texture2D(u_colormap, clrPosition);\\nvec4 result = vec4(color.rgb, color.a * currentPixel.a);\\nreturn result;\\n}\\nvec4 colorizeNoClamp(vec4 currentPixel, float scaleFactor) {\\nfloat value = currentPixel.r * scaleFactor - u_colormapOffset;\\nvec4 result = colorize(currentPixel, scaleFactor);\\nreturn result * step(0.0, value) * step(value, u_colormapMaxIndex);\\n}\",\"lut.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\nvec4 result = colorizeNoClamp(currentPixel, 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * u_opacity;\\n}\"},magdir:{\"magdir.frag\":\"precision mediump float;\\nvarying vec4 v_color;\\nuniform lowp float u_opacity;\\nvoid main() {\\ngl_FragColor = v_color * u_opacity;\\n}\",\"magdir.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nuniform float u_rotation;\\nuniform vec4 u_colors[12];\\nvarying vec4 v_color;\\nvoid main()\\n{\\nfloat angle = a_offset.y + u_rotation;\\n#ifndef ROTATION_GEOGRAPHIC\\nangle = 3.14159265359 * 2.0 - angle - 3.14159265359 / 2.0;\\n#endif\\nvec2 offset = vec2(cos(angle), sin(angle)) * a_offset.x;\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 pos = a_pos + offset * sizePercentage * u_symbolSize;\\nv_color = u_colors[int(a_vv.x)];\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},reproject:{\"reproject.frag\":\"precision mediump float;\\nvarying vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\n}\",\"reproject.vert\":\"precision mediump float;\\nattribute vec2 a_position;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_position;\\ngl_Position = vec4(2.0 * (a_position - 0.5), 0.0, 1.0);\\n}\"},rfx:{aspect:{\"aspect.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nconst float pi = 3.14159265359;\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) / (8.0 * u_cellSize[0]);\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) / (8.0 * u_cellSize[1]);\\nalpha *= sign(abs(dzx) + abs(dzy));\\nfloat aspect_rad = (dzx == 0.0) ? (step(0.0, dzy) * 0.5 * pi + step(dzy, 0.0) * 1.5 * pi) : mod((2.5 * pi + atan(dzy, -dzx)), 2.0 * pi);\\nfloat aspect = aspect_rad * 180.0 / pi;\\ngl_FragColor = vec4(aspect, aspect, aspect, 1.0) * alpha;\\n}\"},bandarithmetic:{\"bandarithmetic.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nuniform float u_adjustments[3];\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index;\\n#ifdef NDXI\\nindex = (nir - red) * invertValue(nir + red);\\n#elif defined(SR)\\nindex = nir * invertValue(red);\\n#elif defined(CI)\\nindex = nir * invertValue(red) - 1.0;\\n#elif defined(SAVI)\\nindex = (nir - red) * invertValue(nir + red + u_adjustments[0]) * (1.0 + u_adjustments[0]);\\n#elif defined(TSAVI)\\nfloat s = u_adjustments[0];\\nfloat a = u_adjustments[1];\\nfloat x = u_adjustments[2];\\nfloat y = -a * s + x * (1.0 + s * s);\\nindex = (s * (nir - s * red - a)) * invertValue(a * nir + red + y);\\n#elif defined(MSAVI)\\nfloat nir2 = 2.0 * nir + 1.0;\\nindex = 0.5 * (nir2 - sqrt(nir2 * nir2 - 8.0 * (nir - red)));\\n#elif defined(GEMI)\\nfloat eta = (2.0 * (nir * nir - red * red) + 1.5 * nir + 0.5 * red) * invertValue(nir + red + 0.5);\\nindex = eta * (1.0 - 0.25 * eta) - (red - 0.125) * invertValue(1.0 - red);\\n#elif defined(PVI)\\nfloat a = u_adjustments[0];\\nfloat b = u_adjustments[1];\\nfloat y = sqrt(1.0 + a * a);\\nindex = (nir - a * red - b) * invertValue(y);\\n#elif defined(VARI)\\nindex = (pv2.g - pv2.r) * invertValue(pv2.g + pv2.r - pv2.b);\\n#elif defined(MTVI)\\nfloat green = pv2.b;\\nfloat v = sqrt(pow((2.0 * nir + 1.0), 2.0) - (6.0 * nir - 5.0 * sqrt(red)) - 0.5);\\nindex = 1.5 * (1.2 * (nir - green) - 2.5 * (red - green)) * invertValue(v);\\n#elif defined(RTVICORE)\\nfloat green = pv2.b;\\nindex = 100.0 * (nir - red) - 10.0 * (nir - green);\\n#elif defined(EVI)\\nfloat blue = pv2.b;\\nfloat denom = nir + 6.0 * red - 7.5 * blue + 1.0;\\nindex =  (2.5 * (nir - red)) * invertValue(denom);\\n#elif defined(WNDWI)\\nfloat g = pv2.r;\\nfloat n = pv2.g;\\nfloat s = pv2.b;\\nfloat a = u_adjustments[0];\\nfloat denom = g + a * n + (1.0 - a) * s;\\nindex = (g - a * n - (1.0 - a) * s) * invertValue(denom);\\n#elif defined(BAI)\\nindex = invertValue(pow((0.1 - red), 2.0) + pow((0.06 - nir), 2.0));\\n#else\\ngl_FragColor = pv;\\nreturn;\\n#endif\\n#ifdef ROUND_OUTPUT\\nindex = floor(index + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},colormap2rgb:{\"colormap2rgb.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/lut/colorize.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = colorizeNoClamp(vec4(pv.r, pv.r, pv.r, 1.0), 1.0);\\ngl_FragColor = vec4(result.xyz * 255.0, 1.0) * result.a * pv.a;\\n}\"},compositeband:{\"compositeband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\nuniform sampler2D u_image2;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\nfloat alpha = pv0.a;\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\nalpha *= pv1.a;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\nalpha = alpha * pv1.a * pv2.a;\\n#endif\\ngl_FragColor = vec4(a, b, c, alpha);\\n}\"},computechange:{\"computechange.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef DIFFERENCE\\nresult = a - b;\\n#elif defined(RELATIVE)\\nresult = (a - b) * invertValue(max(abs(a), abs(b)));\\n#endif\\nbool isInvalid = result < u_domainRange.s || result > u_domainRange.t;\\nresult = isInvalid ? 0.0 : result;\\nalpha *= float(!isInvalid);\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},contrast:{\"contrast.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#include <raster/common/contrastBrightness.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec4 result = adjustContrastBrightness(pv, false);\\ngl_FragColor = vec4(floor(result.rgb * 255.0 + 0.5), result.a);\\n}\"},convolution:{\"convolution.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\nuniform float u_kernel[25];\\n#include <raster/common/mirror.glsl>\\nvoid main() {\\nvec3 rgb = vec3(0.0, 0.0, 0.0);\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat alpha = 1.0;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\nrgb += pv.rgb * u_kernel[row * KERNEL_SIZE_COLS + col];\\nalpha *= pv.a;\\n}\\n}\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},curvature:{\"curvature.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform float u_zlFactor;\\nuniform vec2 u_srcImageSize;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat d = ((pv[3] + pv[5]) * 0.5 - pv[4]);\\nfloat e = ((pv[1] + pv[7]) * 0.5 - pv[4]);\\nfloat curvature = 0.0;\\n#ifdef STANDARD\\ncurvature = -u_zlFactor * (d + e);\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n#else\\nfloat f = (-pv[0] + pv[2] + pv[6] - pv[8]) / 4.0;\\nfloat g = (-pv[3] + pv[5]) / 2.0;\\nfloat h = (pv[1] - pv[7]) / 2.0;\\nfloat g2 = g * g;\\nfloat h2 = h * h;\\n#ifdef PROFILE\\ncurvature = (u_zlFactor * (d * g2 + e * h2 + f * g * h)) / (g2 + h2);\\n#else\\ncurvature = (-u_zlFactor * (d * h2 + e * g2 - f * g * h)) / (g2 + h2);\\n#endif\\n#endif\\ngl_FragColor = vec4(curvature, curvature, curvature, alpha);\\n}\"},extractband:{\"extractband.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\ngl_FragColor = vec4(pv2, pv.a);\\n}\"},focalstatistics:{\"focalstatistics.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_srcImageSize;\\n#define KERNEL_SIZE_ROWS ROWS\\n#define KERNEL_SIZE_COLS COLS\\nuniform vec2 u_clampRange;\\n#include <raster/common/mirror.glsl>\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec2 resolution = 1.0 / u_srcImageSize;\\nfloat rowOffset = -float(floor(float(KERNEL_SIZE_ROWS) / 2.0));\\nfloat colOffset = -float(floor(float(KERNEL_SIZE_COLS) / 2.0));\\nfloat count = 0.0;\\n#ifdef STDDEV\\nvec3 sum = vec3(0.0, 0.0, 0.0);\\nvec3 sum2 = vec3(0.0, 0.0, 0.0);\\n#endif\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nvec3 rgb = currentPixel.rgb;\\nfor (int row = 0; row < KERNEL_SIZE_ROWS; row++) {\\nfloat pos_row = rowOffset + float(row);\\nfor (int col = 0; col < KERNEL_SIZE_COLS; col++) {\\nvec2 pos = v_texcoord + vec2(colOffset + float(col), pos_row) * resolution;\\nvec4 pv = texture2D(u_image, mirror(pos));\\ncount += pv.a;\\n#ifdef MIN\\nrgb = min(rgb, pv.rgb);\\n#elif defined(MAX)\\nrgb = max(rgb, pv.rgb);\\n#elif defined(MEAN)\\nrgb += pv.rgb;\\n#elif defined(STDDEV)\\nsum += pv.rgb;\\nsum2 += (pv.rgb * pv.rgb);\\n#endif\\n}\\n}\\n#ifdef MEAN\\nrgb *= invertValue(count);\\n#elif defined(STDDEV)\\nrgb = sqrt((sum2 - sum * sum * invertValue(count)) * invertValue(count));\\n#endif\\nfloat alpha = step(0.9999, count);\\nrgb = clamp(rgb, u_clampRange.s, u_clampRange.t);\\n#ifdef FILL\\nrgb = (1.0 - currentPixel.a) * rgb + currentPixel.a * currentPixel.rgb;\\n#endif\\ngl_FragColor = vec4(rgb * alpha, alpha);\\n}\"},grayscale:{\"grayscale.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec3 u_weights;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat value = dot(u_weights, pv.rgb);\\ngl_FragColor = vec4(value, value, value, pv.a);\\n}\"},local:{\"local.frag\":\"precision highp float;\\nuniform sampler2D u_image;\\nuniform sampler2D u_image1;\\n#ifdef ONE_CONSTANT\\nuniform float u_image1Const;\\n#ifdef TWO_CONSTANT\\nuniform float u_image2Const;\\n#endif\\nuniform mat3 u_imageSwap;\\n#endif\\nvarying vec2 v_texcoord;\\nuniform vec2 u_domainRange;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv0 = texture2D(u_image, v_texcoord);\\nfloat a = pv0.r;\\n#ifdef TWO_IMAGES\\n#ifdef ONE_CONSTANT\\nfloat b = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, 0);\\na = abc.s;\\nb = abc.t;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\n#endif\\n#elif defined(CONDITIONAL)\\n#ifdef TWO_CONSTANT\\nfloat b = u_image1Const;\\nfloat c = u_image2Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#elif defined(ONE_CONSTANT)\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = u_image1Const;\\nvec3 abc = u_imageSwap * vec3(a, b, c);\\na = abc.s;\\nb = abc.t;\\nc = abc.p;\\n#else\\nvec4 pv1 = texture2D(u_image1, v_texcoord);\\nvec4 pv2 = texture2D(u_image2, v_texcoord);\\nfloat b = pv1.r;\\nfloat c = pv2.r;\\n#endif\\n#endif\\nfloat result = a;\\nfloat alpha = pv0.a;\\n#ifdef PLUS\\nresult = a + b;\\n#elif defined(MINUS)\\nresult = a - b;\\n#elif defined(TIMES)\\nresult = a * b;\\n#elif defined(DIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOATDIVIDE)\\nresult = a * invertValue(b);\\nalpha *= float(abs(sign(b)));\\n#elif defined(FLOORDIVIDE)\\nresult = floor(a * invertValue(b));\\nalpha *= float(abs(sign(b)));\\n#elif defined(SQUARE)\\nresult = a * a;\\n#elif defined(SQRT)\\nresult = sqrt(a);\\n#elif defined(POWER)\\nresult = pow(a, b);\\n#elif defined(LN)\\nresult = a <= 0.0 ? 0.0: log(a);\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_1_0)\\nresult = a <= 0.0 ? 0.0: log2(a) * invertValue(log2(10.0));\\nalpha *= float(a > 0.0);\\n#elif defined(LOG_2)\\nresult = a <= 0.0 ? 0.0: log2(a);\\nalpha *= float(a > 0.0);\\n#elif defined(EXP)\\nresult = exp(a);\\n#elif defined(EXP_1_0)\\nresult = pow(10.0, a);\\n#elif defined(EXP_2)\\nresult = pow(2.0, a);\\n#elif defined(ROUNDDOWN)\\nresult = floor(a);\\n#elif defined(ROUNDUP)\\nresult = ceil(a);\\n#elif defined(INT)\\nresult = float(sign(a)) * floor(abs(a));\\n#elif defined(MOD)\\nresult = mod(a, b);\\n#elif defined(NEGATE)\\nresult = -a;\\n#elif defined(ABS)\\nresult = abs(a);\\n#elif defined(ACOS)\\nresult = abs(a) > 1.0 ? 0.0: acos(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ACOSH)\\nresult = acosh(a);\\n#elif defined(ASIN)\\nresult = abs(a) > 1.0 ? 0.0: asin(a);\\nalpha *= step(abs(a), 1.00001);\\n#elif defined(ASINH)\\nresult = asinh(a);\\n#elif defined(ATAN)\\nresult = atan(a);\\n#elif defined(ATANH)\\nresult = abs(a) > 1.0 ? 0.0: atanh(a);\\nalpha *= step(abs(a), 1.0);\\n#elif defined(ATAN_2)\\nresult = atan(a, b);\\n#elif defined(COS)\\nresult = cos(a);\\n#elif defined(COSH)\\nresult = cosh(a);\\n#elif defined(SIN)\\nresult = sin(a);\\n#elif defined(SINH)\\nresult = sinh(a);\\n#elif defined(TAN)\\nresult = tan(a);\\n#elif defined(TANH)\\nresult = tanh(a);\\n#elif defined(BITWISEAND)\\nresult = float(int(a) & int(b));\\n#elif defined(BITWISEOR)\\nresult = float(int(a) | int(b));\\n#elif defined(BITWISELEFTSHIFT)\\nresult = float(int(a) << int(b));\\n#elif defined(BITWISERIGHTSHIFT)\\nresult = float(int(a) >> int(b));\\n#elif defined(BITWISENOT)\\nresult = float(~(int(a)));\\n#elif defined(BITWISEXOR)\\nresult = float(int(a) ^ int(b));\\n#elif defined(BOOLEANAND)\\nresult = float((a != 0.0) && (b != 0.0));\\n#elif defined(BOOLEANNOT)\\nresult = float(a == 0.0);\\n#elif defined(BOOLEANOR)\\nresult = float((a != 0.0) || (b != 0.0));\\n#elif defined(BOOLEANXOR)\\nresult = float((a != 0.0) ^^ (b != 0.0));\\n#elif defined(GREATERTHAN)\\nresult = float(a > b);\\n#elif defined(GREATERTHANEQUAL)\\nresult = float(a >= b);\\n#elif defined(LESSTHAN)\\nresult = float(a < b);\\n#elif defined(LESSTHANEQUAL)\\nresult = float(a <= b);\\n#elif defined(EQUALTO)\\nresult = float(a == b);\\n#elif defined(NOTEQUAL)\\nresult = float(a != b);\\n#elif defined(ISNULL)\\nresult = float(alpha == 0.0);\\nalpha = 1.0;\\n#elif defined(SETNULL)\\nfloat maskValue = float(a == 0.0);\\nresult = maskValue * b;\\nalpha *= maskValue;\\n#elif defined(CONDITIONAL)\\nfloat weight = float(abs(sign(a)));\\nresult = weight * b + (1.0 - weight) * c;\\n#endif\\nfloat rangeFactor = step(u_domainRange.s, result) * step(result, u_domainRange.t);\\nresult *= rangeFactor;\\nalpha *= rangeFactor;\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},mask:{\"mask.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_INCLUDED_RANGES 6\\n#define LEN_NODATA_VALUES 6\\nuniform highp float u_includedRanges[6];\\nuniform highp float u_noDataValues[6];\\nfloat maskFactor(float bandValue, float fromValue, float to) {\\nfloat factor = 1.0;\\nfor (int i = 0; i < LEN_NODATA_VALUES; i++) {\\nfactor *= float(u_noDataValues[i] != bandValue);\\n}\\nfactor *= step(fromValue, bandValue) * step(bandValue, to);\\nreturn factor;\\n}\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat redFactor = maskFactor(pv.r, u_includedRanges[0], u_includedRanges[1]);\\n#ifdef MULTI_BAND\\nfloat greenFactor = maskFactor(pv.g, u_includedRanges[2], u_includedRanges[3]);\\nfloat blueFactor = maskFactor(pv.b, u_includedRanges[4], u_includedRanges[5]);\\nfloat maskFactor = redFactor * greenFactor * blueFactor;\\ngl_FragColor = pv * maskFactor;\\n#else\\ngl_FragColor = pv * redFactor;\\n#endif\\n}\"},ndvi:{\"ndvi.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform mediump mat3 u_bandIndexMat3;\\n#include <raster/common/inverse.glsl>\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nvec3 pv2 = u_bandIndexMat3 * pv.rgb;\\nfloat nir = pv2.r;\\nfloat red = pv2.g;\\nfloat index = (nir - red) * invertValue(nir + red);\\n#ifdef SCALED\\nindex = floor((index + 1.0) * 100.0 + 0.5);\\n#endif\\ngl_FragColor = vec4(index, index, index, pv.a);\\n}\"},remap:{\"remap.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\n#define LEN_REMAP_RANGES 18\\n#define LEN_NODATA_RANGES 12\\nuniform highp float u_rangeMaps[18];\\nuniform highp float u_noDataRanges[12];\\nuniform highp float u_unmatchMask;\\nuniform vec2 u_clampRange;\\nvoid main() {\\nvec4 pv = texture2D(u_image, v_texcoord);\\nfloat factor = 1.0;\\nfloat bandValue = pv.r;\\nfor (int i = 0; i < LEN_NODATA_RANGES; i+=2) {\\nfloat inside = 1.0 - step(u_noDataRanges[i], bandValue) * step(bandValue, u_noDataRanges[i+1]);\\nfactor *= inside;\\n}\\nfloat mapValue = 0.0;\\nfloat includeMask = 0.0;\\nfor (int i = 0; i < LEN_REMAP_RANGES; i+=3) {\\nfloat stepMask = step(u_rangeMaps[i], bandValue) * step(bandValue, u_rangeMaps[i+1]);\\nincludeMask = (1.0 - stepMask) * includeMask + stepMask;\\nmapValue = (1.0 - stepMask) * mapValue + stepMask * u_rangeMaps[i+2];\\n}\\nbandValue = factor * (mapValue + (1.0 - includeMask) * u_unmatchMask * pv.r);\\nfloat bandMask = factor * max(u_unmatchMask, includeMask);\\nbandValue = clamp(bandValue, u_clampRange.s, u_clampRange.t);\\ngl_FragColor = vec4(bandValue, bandValue, bandValue, bandMask * pv.a);\\n}\"},slope:{\"slope.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying vec2 v_texcoord;\\nuniform vec2 u_cellSize;\\nuniform float u_zFactor;\\nuniform vec2 u_srcImageSize;\\nuniform float u_pixelSizePower;\\nuniform float u_pixelSizeFactor;\\n#include <raster/common/getSurfaceValues.glsl>\\nvoid main() {\\nfloat pv[10];\\ngetSurfaceValues(u_image, v_texcoord, u_srcImageSize, pv);\\nfloat alpha = pv[9];\\nfloat xf = (u_zFactor + pow(u_cellSize[0], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[0]);\\nfloat yf = (u_zFactor + pow(u_cellSize[1], u_pixelSizePower) * u_pixelSizeFactor) / (8.0 * u_cellSize[1]);\\nfloat dzx = (pv[2] + 2.0 * pv[5] + pv[8] - pv[0] - 2.0 * pv[3] - pv[6]) * xf;\\nfloat dzy = -(pv[6] + 2.0 * pv[7] + pv[8] - pv[0] - 2.0 * pv[1] - pv[2]) * yf;\\nfloat rise2run = sqrt(dzx * dzx + dzy * dzy);\\n#ifdef PERCENT_RISE\\nfloat result = rise2run * 100.0;\\n#else\\nfloat result = atan(rise2run) * 57.2957795;\\n#endif\\n#ifdef ROUND_OUTPUT\\nresult = floor(result + 0.5);\\n#endif\\ngl_FragColor = vec4(result, result, result, alpha);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nuniform sampler2D u_image;\\nvarying highp vec2 v_texcoord;\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, float gamma, float gammaCorrection) {\\nval = clamp(val, minCutOff, maxCutOff);\\nfloat stretchedVal;\\n#ifdef USE_GAMMA\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\ntempf -= step(1.0, gamma) * sign(gamma - 1.0) * pow(1.0 / outRange, relativeVal * gammaCorrection);\\nstretchedVal = tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput;\\nstretchedVal = clamp(stretchedVal, minOutput, maxOutput);\\n#else\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n#endif\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec4 currentPixel = texture2D(u_image, v_texcoord);\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_gamma[0], u_gammaCorrection[0]);\\n#ifdef MULTI_BAND\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, currentPixel.a);\\n#else\\ngl_FragColor = vec4(redVal, redVal, redVal, currentPixel.a);\\n#endif\\n}\"},vs:{\"vs.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nvarying highp vec2 v_texcoord;\\nvoid main()\\n{\\nv_texcoord = a_pos;\\ngl_Position = vec4(u_dvsMat3 * vec3(a_pos * u_coordScale, 1.0), 1.0);\\n}\"}},scalar:{\"scalar.frag\":\"precision mediump float;\\nuniform lowp float u_opacity;\\nvarying vec2 v_pos;\\nconst vec4 outlineColor = vec4(0.2, 0.2, 0.2, 1.0);\\nconst float outlineSize = 0.02;\\nconst float innerRadius = 0.25;\\nconst float outerRadius = 0.42;\\nconst float innerSquareLength = 0.15;\\nvoid main() {\\nmediump float dist = length(v_pos);\\nmediump float fillalpha1 = smoothstep(outerRadius, outerRadius + outlineSize, dist);\\nfillalpha1 *= (1.0-smoothstep(outerRadius + outlineSize, outerRadius + 0.1 + outlineSize, dist));\\n#ifdef INNER_CIRCLE\\nmediump float fillalpha2 = smoothstep(innerRadius, innerRadius + outlineSize, dist);\\nfillalpha2 *= (1.0-smoothstep(innerRadius + outlineSize, innerRadius + 0.1 + outlineSize, dist));\\n#else\\nmediump float fillalpha2 = (abs(v_pos.x) < innerSquareLength ? 1.0 : 0.0) * (abs(v_pos.y) < innerSquareLength ? 1.0 : 0.0);\\n#endif\\ngl_FragColor = (fillalpha2 + fillalpha1) * outlineColor * u_opacity;\\n}\",\"scalar.vert\":\"precision mediump float;\\nattribute vec2 a_pos;\\nattribute vec2 a_offset;\\nattribute vec2 a_vv;\\nuniform highp mat3 u_dvsMat3;\\nuniform highp vec2 u_coordScale;\\nuniform vec2 u_symbolSize;\\nuniform vec2 u_symbolPercentRange;\\nuniform vec2 u_dataRange;\\nvarying vec2 v_pos;\\nvoid main()\\n{\\n#ifdef DATA_RANGE\\nfloat valuePercentage = clamp((a_vv.y - u_dataRange.x) / (u_dataRange.y - u_dataRange.x), 0.0, 1.0);\\nfloat sizeRatio = u_symbolPercentRange.x + valuePercentage * (u_symbolPercentRange.y - u_symbolPercentRange.x);\\nfloat sizePercentage = clamp(sizeRatio, u_symbolPercentRange.x, u_symbolPercentRange.y);\\n#else\\nfloat sizePercentage = (u_symbolPercentRange.x + u_symbolPercentRange.y) / 2.0;\\n#endif\\nvec2 size = u_symbolSize * sizePercentage;\\nvec2 pos = a_pos + a_offset * size;\\nv_pos = a_offset;\\ngl_Position = vec4(u_dvsMat3 * vec3(pos * u_coordScale, 1.0), 1.0);\\n}\"},stretch:{\"stretch.frag\":\"precision mediump float;\\nvarying highp vec2 v_texcoord;\\n#include <raster/common/common.glsl>\\nuniform float u_minCutOff[3];\\nuniform float u_maxCutOff[3];\\nuniform float u_minOutput;\\nuniform float u_maxOutput;\\nuniform float u_factor[3];\\nuniform bool u_useGamma;\\nuniform float u_gamma[3];\\nuniform float u_gammaCorrection[3];\\n#include <raster/lut/colorize.glsl>\\nfloat stretchOneValue(float val, float minCutOff, float maxCutOff, float minOutput, float maxOutput, float factor, bool useGamma, float gamma, float gammaCorrection) {\\nif (val >= maxCutOff) {\\nreturn maxOutput;\\n} else if (val <= minCutOff) {\\nreturn minOutput;\\n}\\nfloat stretchedVal;\\nif (useGamma) {\\nfloat tempf = 1.0;\\nfloat outRange = maxOutput - minOutput;\\nfloat relativeVal = (val - minCutOff) / (maxCutOff - minCutOff);\\nif (gamma > 1.0) {\\ntempf -= pow(1.0 / outRange, relativeVal * gammaCorrection);\\n}\\nstretchedVal = (tempf * outRange * pow(relativeVal, 1.0 / gamma) + minOutput) / 255.0;\\n} else {\\nstretchedVal = minOutput + (val - minCutOff) * factor;\\n}\\n#ifdef ROUND_OUTPUT\\nstretchedVal = floor(stretchedVal + 0.5);\\n#endif\\nreturn stretchedVal;\\n}\\nvoid main() {\\nvec2 pixelLocation = getPixelLocation(v_texcoord);\\nif (isOutside(pixelLocation)) {\\ngl_FragColor = vec4(0.0, 0.0, 0.0, 0.0);\\nreturn;\\n}\\nvec4 currentPixel = getPixel(pixelLocation);\\n#ifdef NOOP\\ngl_FragColor = vec4(currentPixel.rgb, 1.0) * currentPixel.a * u_opacity;\\nreturn;\\n#endif\\nif (u_bandCount == 1) {\\nfloat grayVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\n#ifdef APPLY_COLORMAP\\nvec4 result = colorize(vec4(grayVal, grayVal, grayVal, 1.0), u_useGamma ? 255.0 : 1.0);\\ngl_FragColor = vec4(result.xyz, 1.0) * result.a * currentPixel.a * u_opacity;\\n#else\\ngl_FragColor = vec4(grayVal, grayVal, grayVal, 1.0) * currentPixel.a * u_opacity;\\n#endif\\n} else {\\nfloat redVal = stretchOneValue(currentPixel.r, u_minCutOff[0], u_maxCutOff[0], u_minOutput, u_maxOutput, u_factor[0], u_useGamma, u_gamma[0], u_gammaCorrection[0]);\\nfloat greenVal = stretchOneValue(currentPixel.g, u_minCutOff[1], u_maxCutOff[1], u_minOutput, u_maxOutput, u_factor[1], u_useGamma, u_gamma[1], u_gammaCorrection[1]);\\nfloat blueVal = stretchOneValue(currentPixel.b, u_minCutOff[2], u_maxCutOff[2], u_minOutput, u_maxOutput, u_factor[2], u_useGamma, u_gamma[2], u_gammaCorrection[2]);\\ngl_FragColor = vec4(redVal, greenVal, blueVal, 1.0) * currentPixel.a * u_opacity;\\n}\\n}\"}},stencil:{\"stencil.frag\":\"void main() {\\ngl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\",\"stencil.vert\":\"attribute vec2 a_pos;\\nuniform mat3 u_worldExtent;\\nvoid main() {\\ngl_Position = vec4(u_worldExtent * vec3(a_pos, 1.0), 1.0);\\n}\"},test:{\"TestShader.common.glsl\":\"#ifndef RETURN_RED\\nvarying    vec4      v_color;\\n#endif\\nvarying    vec2      v_offset;\",\"TestShader.frag\":\"precision highp float;\\n#include <test/TestShader.common.glsl>\\nvoid main() {\\nif (v_offset.x > -.5 && v_offset.y > -.5 && v_offset.x < .5 && v_offset.y < .5) {\\ndiscard;\\n}\\n#ifdef RETURN_RED\\ngl_FragColor = vec4(1., 0., 0., 1.);\\n#else\\ngl_FragColor = v_color;\\n#endif\\n}\",\"TestShader.vert\":\"const float POS_PRECISION_FACTOR = 10.;\\nconst float OFFSET_PRECISION_FACTOR = 10.;\\nconst float SIZE_PRECISION_FACTOR = 10.;\\nattribute  vec2      a_pos_packed;\\nattribute  vec2      a_offset_packed;\\nattribute  float     a_size_packed;\\n#ifdef DATA_DRIVEN_COLOR\\nconst float u_dataDrivenColor_validValues[4] = float[4](0., 0., 1., 0.);\\nuniform    vec4      u_dataDrivenColor_colorFallback;\\nuniform    vec4      u_dataDrivenColor_color;\\n#endif\\nuniform    float     u_view_zoomLevel;\\n#include <test/TestShader.common.glsl>\\n#ifdef DATA_DRIVEN_COLOR\\nvec4 getColor(float value) {\\nint index = -1;\\nfor (int i = 0; i < 4; i++) {\\nif (u_dataDrivenColor_validValues[i] == value) {\\nindex = i;\\nbreak;\\n}\\n}\\nif (index == -1) {\\nreturn u_dataDrivenColor_colorFallback;\\n}\\nreturn u_dataDrivenColor_color;\\n}\\n#endif\\nvoid main() {\\nvec2  a_pos = a_pos_packed / POS_PRECISION_FACTOR;\\nvec2  a_offset = a_offset_packed / OFFSET_PRECISION_FACTOR;\\nfloat a_size = a_size_packed / SIZE_PRECISION_FACTOR;\\nvec4 color = vec4(1., 0., 0., 1.);\\n#ifdef DATA_DRIVEN_COLOR\\ncolor = getColor(1.);\\n#endif\\nvec2 offsetScaled = a_offset * a_size;\\nvec4 pos = vec4(a_pos.xy + offsetScaled, 0., 1.);\\ngl_Position = pos;\\n#ifndef RETURN_RED\\nv_color = color;\\n#endif\\nv_offset = a_offset;\\n}\"},tileInfo:{\"tileInfo.frag\":\"uniform mediump sampler2D u_texture;\\nvarying mediump vec2 v_tex;\\nvoid main(void) {\\nlowp vec4 color = texture2D(u_texture, v_tex);\\ncolor.rgb *= color.a;\\ngl_FragColor = color;\\n}\",\"tileInfo.vert\":\"attribute vec2 a_pos;\\nuniform highp mat3 u_dvsMat3;\\nuniform mediump float u_depth;\\nuniform mediump vec2 u_coord_ratio;\\nuniform mediump vec2 u_delta;\\nuniform mediump vec2 u_dimensions;\\nvarying mediump vec2 v_tex;\\nvoid main() {\\nmediump vec2 offset = u_coord_ratio * vec2(u_delta + a_pos * u_dimensions);\\nvec3 v_pos = u_dvsMat3 * vec3(offset, 1.0);\\ngl_Position = vec4(v_pos.xy, 0.0, 1.0);\\nv_tex = a_pos;\\n}\"},util:{\"atan2.glsl\":\"float atan2(in float y, in float x) {\\nfloat t0, t1, t2, t3, t4;\\nt3 = abs(x);\\nt1 = abs(y);\\nt0 = max(t3, t1);\\nt1 = min(t3, t1);\\nt3 = 1.0 / t0;\\nt3 = t1 * t3;\\nt4 = t3 * t3;\\nt0 =         - 0.013480470;\\nt0 = t0 * t4 + 0.057477314;\\nt0 = t0 * t4 - 0.121239071;\\nt0 = t0 * t4 + 0.195635925;\\nt0 = t0 * t4 - 0.332994597;\\nt0 = t0 * t4 + 0.999995630;\\nt3 = t0 * t3;\\nt3 = (abs(y) > abs(x)) ? 1.570796327 - t3 : t3;\\nt3 = x < 0.0 ?  3.141592654 - t3 : t3;\\nt3 = y < 0.0 ? -t3 : t3;\\nreturn t3;\\n}\",\"encoding.glsl\":\"const vec4 rgba2float_factors = vec4(\\n255.0 / (256.0),\\n255.0 / (256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0),\\n255.0 / (256.0 * 256.0 * 256.0 * 256.0)\\n);\\nfloat rgba2float(vec4 rgba) {\\nreturn dot(rgba, rgba2float_factors);\\n}\"}};export{e as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./shaderRepository.js\";import{ShaderCompiler as e}from\"../../../../../webgl/ShaderCompiler.js\";function o(r){return function(e){let o=r;return e.split(\"/\").forEach((r=>{o&&(o=o[r])})),o}}const t=new e(o(r));function n(r){return t.resolveIncludes(r)}export{n as resolveIncludes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as r}from\"./sources/resolver.js\";const e={shaders:{vertexShader:r(\"background/background.vert\"),fragmentShader:r(\"background/background.frag\")},attributes:new Map([[\"a_pos\",0]])};export{e as background};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{createProgramDescriptor as e}from\"../Utils.js\";import t from\"./WGLBrush.js\";import{background as s}from\"../shaders/BackgroundPrograms.js\";import{StencilOperation as o,CompareFunction as i,PrimitiveType as a,DataType as n}from\"../../../../webgl/enums.js\";import{createProgram as l}from\"../../../../webgl/ProgramTemplate.js\";const m=()=>e(\"clip\",{geometry:[{location:0,name:\"a_pos\",count:2,type:n.SHORT}]});class p extends t{constructor(){super(...arguments),this._color=r(0,1,0,1)}dispose(){this._program&&this._program.dispose()}prepareState({context:r}){r.setStencilTestEnabled(!0),r.setBlendingEnabled(!1),r.setFaceCullingEnabled(!1),r.setColorMask(!1,!1,!1,!1),r.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),r.setStencilWriteMask(255),r.setStencilFunction(i.ALWAYS,0,255)}draw(r,e){const{context:t,state:o,requestRender:i,allowDelayedRender:p}=r,c=m(),d=e.getVAO(t,o,c.attributes,c.bufferLayouts);null!=d.indexBuffer&&(this._program||(this._program=l(t,s)),!p||null==i||this._program.compiled?(t.useProgram(this._program),this._program.setUniform2fv(\"u_coord_range\",[1,1]),this._program.setUniform4fv(\"u_color\",this._color),this._program.setUniformMatrix3fv(\"u_dvsMat3\",o.displayMat3),t.bindVAO(d),t.drawElements(a.TRIANGLES,d.indexBuffer.size,n.UNSIGNED_INT,0),t.bindVAO()):i())}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{DataType as e}from\"../../../webgl/enums.js\";import{VertexElementDescriptor as o}from\"../../../webgl/VertexElementDescriptor.js\";const r=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,2)]]]),t=new Map([[\"geometry\",[new o(\"a_pos\",2,e.BYTE,0,4),new o(\"a_tex\",2,e.BYTE,2,4)]]]),n=new Map([[\"geometry\",[new o(\"a_pos\",2,e.UNSIGNED_SHORT,0,4)]]]);export{r as Pos2b,n as Pos2us,t as PosTex2b};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as r}from\"../DefaultVertexAttributeLayouts.js\";import t from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{BufferObject as s}from\"../../../../webgl/BufferObject.js\";import{StencilOperation as o,Face as a,CompareFunction as l,PrimitiveType as n,Usage as d}from\"../../../../webgl/enums.js\";import{createProgram as m}from\"../../../../webgl/ProgramTemplate.js\";import{VertexArrayObject as c}from\"../../../../webgl/VertexArrayObject.js\";class _ extends t{constructor(){super(...arguments),this._color=e(1,0,0,1),this._initialized=!1}dispose(){this._solidProgram&&(this._solidProgram.dispose(),this._solidProgram=null),this._solidVertexArrayObject&&(this._solidVertexArrayObject.dispose(),this._solidVertexArrayObject=null)}prepareState({context:e}){e.setDepthWriteEnabled(!1),e.setDepthTestEnabled(!1),e.setStencilTestEnabled(!0),e.setBlendingEnabled(!1),e.setColorMask(!1,!1,!1,!1),e.setStencilOp(o.KEEP,o.KEEP,o.REPLACE),e.setStencilWriteMask(255)}draw(e,r){const{context:t,requestRender:i,allowDelayedRender:s}=e;this._initialized||this._initialize(t),!s||null==i||this._solidProgram.compiled?(t.setStencilFunctionSeparate(a.FRONT_AND_BACK,l.GREATER,r.stencilRef,255),t.bindVAO(this._solidVertexArrayObject),t.useProgram(this._solidProgram),this._solidProgram.setUniformMatrix3fv(\"u_dvsMat3\",r.transforms.displayViewScreenMat3),this._solidProgram.setUniform2fv(\"u_coord_range\",[r.rangeX,r.rangeY]),this._solidProgram.setUniform1f(\"u_depth\",0),this._solidProgram.setUniform4fv(\"u_color\",this._color),t.drawArrays(n.TRIANGLE_STRIP,0,4),t.bindVAO()):i()}_initialize(e){if(this._initialized)return!0;const t=m(e,i);if(!t)return!1;const o=new Int8Array([0,0,1,0,0,1,1,1]),a=s.createVertex(e,d.STATIC_DRAW,o),l=new c(e,i.attributes,r,new Map([[\"geometry\",a]]));return this._solidProgram=t,this._solidVertexArrayObject=l,this._initialized=!0,!0}}export{_ as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as e}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import s from\"../../tiling/TileKey.js\";class r extends i{constructor(t,e,i,r,n,o,h=n,l=o){super(),this.tileDebugInfoTexture=null,this.debugInfo={display:{length:0,minOrderedLength:0,minUnorderedLength:0,triangleCount:0},memory:{bytesUsed:0,bytesReserved:0}},this._destroyed=!1,this.key=new s(t),this.resolution=e,this.x=i,this.y=r,this.width=n,this.height=o,this.rangeX=h,this.rangeY=l}destroy(){this.tileDebugInfoTexture&&(this.tileDebugInfoTexture.dispose(),this.tileDebugInfoTexture=null),this._destroyed=!0}get debugSlot(){let t=this;for(;t.parent!==this._stage;){if(!t.parent)return 0;t=t.parent}return this._stage.children.indexOf(t)}setTransform(i){const s=this.resolution/(i.resolution*i.pixelRatio),r=this.transforms.tileMat3,[n,o]=i.toScreenNoRotation([0,0],[this.x,this.y]),h=this.width/this.rangeX*s,l=this.height/this.rangeY*s;t(r,h,0,0,0,l,0,n,o,1),e(this.transforms.displayViewScreenMat3,i.displayViewMat3,r)}get destroyed(){return this._destroyed}}export{r as TiledDisplayObject};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{set as t,multiply as s}from\"../../../../core/libs/gl-matrix-2/math/mat2d.js\";import{create as r}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{set as i,multiply as e,invert as o}from\"../../../../core/libs/gl-matrix-2/math/mat3.js\";import{create as a}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{i as m,q as n}from\"../../../../chunks/vec32.js\";import{create as l}from\"../../../../core/libs/gl-matrix-2/factories/vec3f32.js\";import{tileSize as c}from\"./definitions.js\";import{TiledDisplayObject as h}from\"./TiledDisplayObject.js\";const f=a(),p=l();class d extends h{constructor(t,s,r,i){super(t,s,r,i,c,c)}destroy(){super.destroy()}setTransform(o){const a=this.resolution/o.resolution,m=this.transforms.tileMat3,[n,l]=o.toScreenNoRotation([0,0],[this.x,this.y]),c=this.width/this.rangeX*a,h=this.height/this.rangeY*a;i(m,c,0,0,0,h,0,n,l,1),e(this.transforms.displayViewScreenMat3,o.displayViewMat3,m);const f=t(r(),c,0,0,h,n,l);s(this.transforms.labelMat2d,o.viewMat2d,f)}_createTransforms(){return{labelMat2d:r(),tileMat3:a(),displayViewScreenMat3:a()}}containsScreenPoint(t,s,r){const i=e(f,t.viewMat3,this.transforms.tileMat3),a=o(f,i);if(null==a)return!0;m(p,...s,1);const l=n(p,p,a),c=r*(this.resolution/t.resolution);return l[0]>=-c&&l[0]<this.width+c&&l[1]>=-c&&l[1]<this.height+c}}export{d as AFeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(a){if(this.next=null,!Array.isArray(a))return void(this.data=a);this.data=a[0];let e=this;for(let n=1;n<a.length;n++)e.next=new t([a[n]]),e=e.next}*values(){let t=this;for(;t;)yield t.data,t=t.next}forEach(t){let a=this;for(;a;)t(a.data),a=a.next}get last(){return this.next?this.next.last:this}}class a{constructor(a){this._head=null,null!=a&&(this._head=new t(a))}get head(){return this._head}maxAvailableSpace(){if(null==this._head)return 0;let t=0;return this._head.forEach((a=>{const e=a.end-a.start;t=Math.max(t,e)})),t}firstFit(t){if(null==this._head)return null;let a=null,e=this._head;for(;e;){const n=e.data.end-e.data.start;if(n===t)return a?a.next=e.next:this._head=e.next,e.data.start;if(n>t){const a=e.data.start;return e.data.start+=t,a}a=e,e=e.next}return null}free(a,e){const n=a+e;if(null==this._head){const e=new t({start:a,end:n});return void(this._head=e)}if(n<=this._head.data.start){if(n===this._head.data.start)return void(this._head.data.start-=e);const r=new t({start:a,end:n});return r.next=this._head,void(this._head=r)}let r=this._head,d=r.next;for(;d;){if(d.data.start>=n){if(r.data.end===a){if(r.data.end+=e,r.data.end===d.data.start){const t=d.data.end-d.data.start;return r.data.end+=t,void(r.next=d.next)}return}if(d.data.start===n)return void(d.data.start-=e);const s=new t({start:a,end:n});return s.next=r.next,void(r.next=s)}r=d,d=d.next}if(a===r.data.end)return void(r.data.end+=e);const s=new t({start:a,end:n});r.next=s}clear(){this._head=null}}export{a as FreeList,t as List};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{FeatureBatchingStrategy as t,FeatureSymbologyDrawOrder as e}from\"./enums.js\";import{List as n}from\"./cpuMapped/FreeList.js\";import{isHittest as i}from\"./shaderGraph/techniques/featureTechniqueUtils.js\";import{PrimitiveType as a,DataType as s}from\"../../../webgl/enums.js\";function r(t,e){return t<<16|255&e}function d(t){return 255&t}class h{constructor(t,e,n,i,a){this.instance=t,this.materialKey=e,this.target=n,this.start=i,this.count=a}get textureKey(){return d(this.materialKey)}get indexEnd(){return this.start+this.count}extend(t){this.count+=t}render(t){this.instance.techniqueRef.render(t,this)}getStencilReference(){return this.target.stencilRef}getAttributePrecisionPackFactors(){const t=this.instance.instanceId;return this.target.getMesh(t).getAttributePrecisionPackFactors()}draw(t,e){i(t)?this.drawCompute(t.context,e):this.drawGeometry(t.context,e)}drawCompute(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getComputeVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT/3;t.bindVAO(i),t.drawElements(a.POINTS,this.count/3,s.UNSIGNED_INT,r),t.bindVAO(null)}drawGeometry(t,e){const n=this.instance.instanceId,i=this.target.getMesh(n).getGeometryVAO(t,e),r=this.start*Uint32Array.BYTES_PER_ELEMENT;t.bindVAO(i),t.drawElements(a.TRIANGLES,this.count,s.UNSIGNED_INT,r),t.bindVAO(null)}}class l{constructor(){this._length=0,this._minOrderedLength=0,this._materialKeys=new Set}static fromDisplayEntities(t,e,n,i){const a=new l;for(const s of t.values())for(const t of s.records){const s=n.getInstance(t.instanceId),d=r(s.instanceId,t.textureKey);a.addRecord(s,d,t.indexStart,t.indexCount,t.vertexStart,t.vertexCount,e,i)}return a}get length(){return this._length}get minOrderedLength(){return this._minOrderedLength}get minUnorderedLength(){return this._materialKeys.size}render(t,e){const{drawPhase:n}=t;for(const i of this.infos()){const a=i.instance.techniqueRef;a.drawPhase&n&&(null==e||a.type===e)&&i.render(t)}}addRecord(i,a,s,r,d,l,o,c){let u=s,_=r;if(_||(u=d,_=l),!_)return;if(null==this._head){const t=new h(i,a,o,u,_);return this._head=new n(t),this._tail=this._head,this._length++,void this._minOrderedLength++}if(c===t.STRICT_ORDER)return this._insert(i,a,o,u,_,this._tail,null);let g=null,m=this._head;const f=i.instanceId,E=i.techniqueRef.symbologyPlane;if(c===t.STRICT_MARKERS_AND_TEXT&&(E===e.MARKER||E===e.TEXT))return this._insert(i,a,o,u,_,this._tail,null);for(;m;){const t=m.data.instance,e=t.instanceId,n=t.techniqueRef.symbologyPlane,s=g?.data.instance.instanceId;if(E<n||f===s&&f!==e)return this._insert(i,a,o,u,_,g,m);g=m,m=m.next}this._insert(i,a,o,u,_,g,null)}*infos(){if(null!=this._head)for(const t of this._head.values())yield t}_insert(t,e,i,a,s,r,d){if(null==r&&null==d){const r=new h(t,e,i,a,s);return this._head=new n(r),this._tail=this._head,this._length++,void this._minOrderedLength++}return e!==this._tail.data.materialKey&&this._minOrderedLength++,this._materialKeys.add(e),null==r&&null!=d?this._insertAtHead(t,e,i,a,s,d):null!=r&&null==d?this._insertAtEnd(t,e,i,a,s,r):null!=r&&null!=d?this._insertAtMiddle(t,e,i,a,s,r,d):void 0}_insertAtHead(t,e,i,a,s,r){const d=a+s;if(e===r.data.materialKey&&i===r.data.target&&d===r.data.start)r.data.start=a,r.data.count+=s;else{const d=new h(t,e,i,a,s);this._head=new n(d),this._head.next=r,this._length++}}_insertAtEnd(t,e,i,a,s,r){if(r.data.materialKey===e&&r.data.indexEnd===a)r.data.count+=s;else{const d=new h(t,e,i,a,s);this._tail=new n(d),r.next=this._tail,this._length++}}_insertAtMiddle(t,e,i,a,s,r,d){const l=a+s;if(r.data.materialKey===e&&r.data.target===i&&r.data.indexEnd===a)r.data.count+=s,r.data.materialKey===d.data.materialKey&&r.data.target===d.data.target&&r.data.indexEnd===d.data.start&&(r.data.count+=d.data.count,r.next=d.next,this._length--);else if(e===d.data.materialKey&&i===d.data.target&&l===d.data.start)d.data.start=a,d.data.count+=s;else{const l=new h(t,e,i,a,s),o=new n(l);r.next=o,o.next=d,this._length++}}}export{l as DisplayList,h as DisplayListInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._indexOnly=t,this.vertex={count:0,operations:[]},this.index={count:0,operations:[]}}copyRecord(t){let e=0;this._indexOnly||(e=this.vertex.count-t.vertexStart,this.vertex.operations.push({srcFrom:t.vertexStart,dstFrom:this.vertex.count,count:t.vertexCount,mutate:0}),t.vertexStart=this.vertex.count,this.vertex.count+=t.vertexCount);let n=!1;if(this._indexOnly&&this.index.operations.length>=1){const e=this.index.operations[this.index.operations.length-1];e.srcFrom+e.count===t.indexStart&&(e.count+=t.indexCount,n=!0)}n||this.index.operations.push({srcFrom:t.indexStart,dstFrom:this.index.count,count:t.indexCount,mutate:e}),t.indexStart=this.index.count,this.index.count+=t.indexCount}}export{t as ReshufflePlan};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import{assertIsSome as t}from\"../../../../core/maybe.js\";import{FreeList as e}from\"./cpuMapped/FreeList.js\";const r=has(\"esri-2d-log-allocations\");class s{static create(t,e){const r=e.acquireUint32Array(t);return new s(r,e)}constructor(t,e){this._array=t,this._pool=e}get array(){return this._array}get length(){return this._array.length}getUint32View(t,e){return new Uint32Array(this._array.buffer,t+this._array.byteOffset,e)}expand(t){if(t<=this._array.byteLength)return;const e=this._pool.acquireUint32Array(t);e.set(this._array),this._pool.releaseUint32Array(this._array),this._array=e}destroy(){this._pool.releaseUint32Array(this._array)}}class a{constructor(){this._data=new ArrayBuffer(a.BYTE_LENGTH),this._freeList=new e({start:0,end:this._data.byteLength})}static get BYTE_LENGTH(){return 16e6}get buffer(){return this._data}acquireUint32Array(t){const e=this._freeList.firstFit(t);return null==e?null:new Uint32Array(this._data,e,t/Uint32Array.BYTES_PER_ELEMENT)}releaseUint32Array(t){this._freeList.free(t.byteOffset,t.byteLength)}}class i{constructor(){this._pages=[],this._pagesByBuffer=new Map,this._bytesAllocated=0}destroy(){this._pages=[],this._pagesByBuffer=null}get _bytesTotal(){return this._pages.length*a.BYTE_LENGTH}acquireUint32Array(e){if(this._bytesAllocated+=e,r&&console.log(`Allocating ${e}, (${this._bytesAllocated} / ${this._bytesTotal})`),e>=a.BYTE_LENGTH)return new Uint32Array(e/Uint32Array.BYTES_PER_ELEMENT);for(const t of this._pages){const r=t.acquireUint32Array(e);if(null!=r)return r}const s=this._addPage().acquireUint32Array(e);return t(s,\"Expected to allocate page\"),s}releaseUint32Array(t){this._bytesAllocated-=t.byteLength,r&&console.log(`Freeing ${t.byteLength}, (${this._bytesAllocated} / ${this._bytesTotal})`);const e=this._pagesByBuffer.get(t.buffer);e&&e.releaseUint32Array(t)}_addPage(){const t=new a;return this._pages.push(t),this._pagesByBuffer.set(t.buffer,t),t}}export{i as ArrayBufferPool,s as PooledUint32Array};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../../core/has.js\";import{assertIsSome as t}from\"../../../../../core/maybe.js\";import{PooledUint32Array as i}from\"../PooledUint32Array.js\";import{FreeList as e}from\"./FreeList.js\";import{BufferObject as r}from\"../../../../webgl/BufferObject.js\";import{Usage as s}from\"../../../../webgl/enums.js\";const n=1.25,h=32767,a=h<<16|h;class d{constructor(t,e,r,s){this._pool=s;const n=i.create(e*r*Uint32Array.BYTES_PER_ELEMENT,this._pool);this.size=e,this.strideInt=r,this.bufferType=t,this.dirty={start:1/0,end:0},this.memoryStats={bytesUsed:0,bytesReserved:e*r*Uint32Array.BYTES_PER_ELEMENT},this._gpu=null,this._cpu=n,this.clear()}get elementSize(){return this._cpu.length/this.strideInt}get intSize(){return this.fillPointer*this.strideInt}get byteSize(){return this.intSize*Uint32Array.BYTES_PER_ELEMENT}get invalidated(){return this.bufferSize>0&&!this._gpu}get invalidatedComputeBuffer(){return this.bufferSize>0&&!this._gpuComputeTriangles}invalidate(){this._invalidateTriangleBuffer(),this._gpu?.dispose(),this._gpu=null}_invalidateTriangleBuffer(){this._gpuComputeTriangles?.dispose(),this._gpuComputeTriangles=null}destroy(){this._gpu?.dispose(),this._gpuComputeTriangles?.dispose(),this._cpu?.destroy()}clear(){this.dirty.start=1/0,this.dirty.end=0,this.freeList=new e({start:0,end:this._cpu.length/this.strideInt}),this.fillPointer=0}ensure(t){if(this.maxAvailableSpace()>=t)return;if(t*this.strideInt>this._cpu.length-this.fillPointer){this.invalidate();const i=this._cpu.length/this.strideInt,e=Math.round((i+t)*n),r=e*this.strideInt;this._cpu.expand(r*Uint32Array.BYTES_PER_ELEMENT),this.freeList.free(i,e-i),this.memoryStats.bytesReserved+=(e-i)*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}}set(t,i){this._cpu.array[t]!==i&&(this._cpu.array[t]=i,this.dirty.start=Math.min(t,this.dirty.start),this.dirty.end=Math.max(t+1,this.dirty.end))}getGPUBuffer(t,i=!1){if(!this.bufferSize)return null;if(i){if(\"index\"!==this.bufferType)throw new Error(\"Tired to get triangle buffer, but target is not an index buffer\");return null==this._gpuComputeTriangles&&(this._gpuComputeTriangles=this._createComputeBuffer(t)),this._gpuComputeTriangles}return null==this._gpu&&(this._gpu=this._createBuffer(t)),this._gpu}getView(t,i){return this._cpu.getUint32View(t,i/Uint32Array.BYTES_PER_ELEMENT)}get bufferSize(){return this._cpu.length/this.strideInt}maxAvailableSpace(){return this.freeList.maxAvailableSpace()}insert(i,e,r,s){const n=r*this.strideInt;if(!n)return 0;const h=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,a=new Uint32Array(i,h,n),d=this.freeList.firstFit(r);t(d,\"First fit region must be defined\");const u=d*this.strideInt,o=n;if(this._cpu.array.set(a,u),0!==s)for(let t=0;t<a.length;t++)this._cpu.array[t+u]+=s;return this.dirty.start=Math.min(this.dirty.start,u),this.dirty.end=Math.max(this.dirty.end,u+o),this.fillPointer=Math.max(this.fillPointer,u+o),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d}copyFrom(i,e,r,s,n){const h=r*this.strideInt;if(!h)return 0;const a=e*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,d=i._cpu.getUint32View(a,h),u=this.freeList.firstFit(r);t(u,\"First fit region must be defined\");const o=u*this.strideInt,f=h;if(this._cpu.array.set(d,o),0!==s)for(let t=0;t<h;t++)this._cpu.array[o+t*this.strideInt+n]+=s;return this.dirty.start=Math.min(this.dirty.start,o),this.dirty.end=Math.max(this.dirty.end,o+f),this.fillPointer=Math.max(this.fillPointer,o+f),this.memoryStats.bytesUsed+=r*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,u}free(t,i,e){const r=t*this.strideInt,s=(t+i)*this.strideInt;if(!0===e)for(let n=t;n!==t+i;n++)this._cpu.array[n*this.strideInt]=a;this.dirty.start=Math.min(this.dirty.start,r),this.dirty.end=Math.max(this.dirty.end,s),this.freeList.free(t,i),this.memoryStats.bytesUsed-=i*this.strideInt*Uint32Array.BYTES_PER_ELEMENT}upload(){if(this.dirty.end){if(this._invalidateTriangleBuffer(),null==this._gpu)return this.dirty.start=1/0,void(this.dirty.end=0);this._gpu.setSubData(this._cpu.array,this.dirty.start,this.dirty.start,this.dirty.end),this.dirty.start=1/0,this.dirty.end=0}}reshuffle(t,e){if(0===e.length)return;const r=this.byteSize,s=t*this.strideInt*Uint32Array.BYTES_PER_ELEMENT,n=r>s,h=this._cpu,a=i.create(s,this._pool);n||a.array.set(this._cpu.getUint32View(0,this.intSize));for(const i of e)if(n||i.srcFrom!==i.dstFrom||0!==i.mutate){this.dirty.start=Math.min(this.dirty.start,i.dstFrom*this.strideInt),this.dirty.end=Math.max(this.dirty.end,(i.dstFrom+i.count)*this.strideInt);for(let t=0;t<i.count;t++){const e=(i.dstFrom+t)*this.strideInt,r=(i.srcFrom+t)*this.strideInt;for(let t=0;t<this.strideInt;t++)a.array[e+t]=h.array[r+t]+i.mutate}}this._cpu.destroy(),this._cpu=a,n&&this.invalidate(),this.freeList.clear(),this.memoryStats.bytesUsed=this.memoryStats.bytesReserved=s}_createBuffer(t){const i=s.DYNAMIC_DRAW;return\"index\"===this.bufferType?r.createIndex(t,i,this._cpu.array):r.createVertex(t,i,this._cpu.array)}_createComputeBuffer(t){const i=s.DYNAMIC_DRAW,e=new Uint32Array(this.fillPointer/3);for(let r=0;r<this.fillPointer;r+=3)e[r/3]=this._cpu.array[r];return r.createIndex(t,i,e)}}export{d as MappedBuffer};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{destroyMaybe as e}from\"../../../../../core/maybe.js\";import{i1616to32 as t}from\"../number.js\";import{MappedBuffer as r}from\"./Buffer.js\";import{unpackDataView as i}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import{PrimitiveType as s}from\"../../../../webgl/enums.js\";import{VertexArrayObject as o}from\"../../../../webgl/VertexArrayObject.js\";const f=1e3;function n(e,t){const r=e.attributes.filter((e=>t.locations.has(e.name))).map((t=>({name:t.name,type:t.type,count:t.count,divisor:0,normalized:t.normalized??!1,offset:t.offset,stride:e.stride})));return new Map([[\"geometry\",r]])}function u(e,t){const r=[],i=e.attributes.filter((e=>t.locations.has(e.name)));for(const s of i){r.push({name:s.name,type:s.type,count:s.count,divisor:0,normalized:s.normalized??!1,offset:s.offset,stride:e.stride});const i=t.computeAttributeMap[s.name];null!=i&&2===i.length&&(r.push({name:i[0],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+e.stride,stride:e.stride}),r.push({name:i[1],count:s.count,divisor:0,type:s.type,normalized:s.normalized??!1,offset:s.offset+2*e.stride,stride:e.stride}))}return new Map([[\"geometry\",r]])}class a{constructor(e,t){if(this._bufferPool=e,this._layout=t,this._invalidatedGeometry=!1,this._invalidatedCompute=!1,this._position=this._layout.attributes.find((e=>\"pos\"===e.name||\"position\"===e.name)),!this._position)throw new Error(\"InternalError: Unable to find position attribute\")}destroy(){this._indexBuffer=e(this._indexBuffer),this._vertexBuffer=e(this._vertexBuffer),this._computeVAO?.disposeVAOOnly(),this._geometryVAO?.disposeVAOOnly()}get layout(){return this._layout}getDrawArgs(e,t,r,i){return i?{primitive:s.POINTS,count:t/3,offset:r/3}:{primitive:e,count:t,offset:r}}getAttributePrecisionPackFactors(){const e={};for(const t of this.layout.attributes)t.packPrecisionFactor&&(e[t.name]=t.packPrecisionFactor);return e}getDebugVertexInfo(e=!1,t){if(!this._vertexBuffer)return null;const r=this._layout,s=r.stride,o=this._vertexBuffer.getView(0,this._vertexBuffer.byteSize),f=[];if(e)if(null==t)console.log(\"must provide location info to see compute attributes\");else for(const i of r.attributes){const e=t.computeAttributeMap[i.name];null!=e&&2===e.length&&(f.push({...i,name:e[0],offset:i.offset+s}),f.push({...i,name:e[1],offset:i.offset+2*s}))}const n=new DataView(o.slice().buffer);let u=o.byteLength/s;e&&(u=this._indexBuffer.fillPointer/3);const a=this._indexBuffer.getView(0,this._indexBuffer.byteSize);let h=0;const d=[];for(let m=0;m<u;m++){if(e){h=a[3*m]*s}const t={};for(const e of[...r.attributes,...f]){let r=`${e.offset} ${e.name}`,s=i(n,e,h);if(e.packPrecisionFactor)if(r+=` (precision: ${e.packPrecisionFactor})`,\"number\"==typeof s)s/=e.packPrecisionFactor;else for(let t=0;t<s.length;t++)s[t]/=e.packPrecisionFactor;t[r]=s}h+=s,d.push(t)}return{vertices:d,layout:r}}_ensure(e,t){if(this._vertexBuffer&&this._indexBuffer)this._indexBuffer.ensure(Math.max(e,1e3)),this._vertexBuffer.ensure(Math.max(t,1e3));else{const i=this._layout.stride/Uint32Array.BYTES_PER_ELEMENT;this._indexBuffer=new r(\"index\",Math.max(e,f),1,this._bufferPool),this._vertexBuffer=new r(\"vertex\",Math.max(t,f),i,this._bufferPool)}}append(e){const t=e.layout.stride,r=e.indices.byteLength/Uint32Array.BYTES_PER_ELEMENT,i=e.vertices.byteLength/t;this._ensure(r,i);const{vertices:s,indices:o}=e,f=this._vertexBuffer.insert(s,0,s.byteLength/t,0);return{vertexFrom:f,indexFrom:this._indexBuffer.insert(o,0,o.byteLength/4,f)}}copyRecordFrom(e,r,i,s){const{indexStart:o,indexCount:f,vertexStart:n,vertexCount:u}=r;this._ensure(f,u);const a=e._position,h=i*(a.packPrecisionFactor??1),d=s*(a.packPrecisionFactor??1),m=a.offset,c=t(h,d),l=this._vertexBuffer.copyFrom(e._vertexBuffer,n,u,c,m),_=this._indexBuffer.copyFrom(e._indexBuffer,o,f,l-n,0),p=r.clone();return p.vertexStart=l,p.indexStart=_,p.overlaps=0,p}remove(e,t,r,i){this._indexBuffer.free(e,t),this._vertexBuffer.free(r,i)}upload(){this._invalidatedGeometry=!0,this._invalidatedCompute=!0}getGeometryVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedGeometry){(this._vertexBuffer.invalidated||this._indexBuffer.invalidated)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._geometryVAO?.disposeVAOOnly(),this._geometryVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!1),i=this._vertexBuffer.getGPUBuffer(e);this._geometryVAO||(this._geometryVAO=new o(e,t.locations,n(this.layout,t),new Map([[\"geometry\",i]]),r)),this._invalidatedGeometry=!1}return this._geometryVAO}getComputeVAO(e,t){if(!this._vertexBuffer||!this._indexBuffer||!this._vertexBuffer.bufferSize)return null;if(this._invalidatedCompute){(this._vertexBuffer.invalidated||this._indexBuffer.invalidatedComputeBuffer)&&(this._vertexBuffer.invalidate(),this._indexBuffer.invalidate(),this._computeVAO?.disposeVAOOnly(),this._computeVAO=null),this._vertexBuffer.upload(),this._indexBuffer.upload();const r=this._indexBuffer.getGPUBuffer(e,!0),i=this._vertexBuffer.getGPUBuffer(e);this._computeVAO||(this._computeVAO=new o(e,t.locations,u(this.layout,t),new Map([[\"geometry\",i]]),r),this._invalidatedCompute=!1)}return this._computeVAO}get memoryStats(){return{bytesUsed:this._vertexBuffer.memoryStats.bytesUsed+this._indexBuffer.memoryStats.bytesUsed,bytesReserved:this._vertexBuffer.memoryStats.bytesReserved+this._indexBuffer.memoryStats.bytesReserved,vertex:this._vertexBuffer.memoryStats,index:this._indexBuffer.memoryStats}}reshuffle(e){this._vertexBuffer&&this._vertexBuffer.reshuffle(e.vertex.count,e.vertex.operations),this._indexBuffer&&this._indexBuffer.reshuffle(e.index.count,e.index.operations)}}export{a as MappedMesh};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nclass t{constructor(t){this._pos=0,this._buffer=t,this._i32View=new Int32Array(this._buffer),this._f32View=new Float32Array(this._buffer)}readInt32(){return this._i32View[this._pos++]}readF32(){return this._f32View[this._pos++]}}export{t as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport t from\"../DisplayEntity.js\";import{unpackDataView as e}from\"../shaderGraph/techniques/mesh/dataViewUtils.js\";import i from\"../util/Reader.js\";import{deserializeList as r}from\"../util/serializationUtils.js\";function o(e){if(!e)return null;return{entities:r(new i(e.entities),t),vertexData:e.data.map(a)}}function a(t){const i=t.layout.stride,r=new DataView(t.vertices),o=[],a=t.vertices.byteLength/i;let s=0;for(let n=0;n<a;n++){const a={};for(const i of t.layout.attributes){let t=`${i.offset} ${i.name}`,o=e(r,i,s);if(i.packPrecisionFactor)if(t+=` (precision: ${i.packPrecisionFactor})`,\"number\"==typeof o)o/=i.packPrecisionFactor;else for(let e=0;e<o.length;e++)o[e]/=i.packPrecisionFactor;a[t]=o}s+=i,o.push(a)}return{vertices:o,layout:t.layout}}export{o as debugMeshDataInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport has from\"../../../../core/has.js\";import e from\"../../../../core/Logger.js\";import{create as t}from\"../../../../core/libs/gl-matrix-2/factories/mat2df32.js\";import{AFeatureTile as s}from\"./AFeatureTile.js\";import{RESHUFFLING_EXEMPT_MEMORY_BYTES as i,RESHUFFLING_TARGET_MEMORY_EFFICIENCY as r,RESHUFFLING_EXEMPT_DRAW_CALLS as o,RESHUFFLING_TARGET_DRAW_EFFICIENCY as d,tileSize as n}from\"./definitions.js\";import h from\"./DisplayEntity.js\";import{FeatureBatchingStrategy as a}from\"./enums.js\";import{DisplayList as l}from\"./FeatureDisplayList.js\";import{ReshufflePlan as f}from\"./ReshufflePlan.js\";import{LabelMetric as u}from\"./collisions/LabelMetric.js\";import{MappedMesh as p}from\"./cpuMapped/MappedMesh.js\";import{debugMeshDataInfo as _}from\"./mesh/meshDebugUtils.js\";import m from\"./util/Reader.js\";import{deserializeList as c}from\"./util/serializationUtils.js\";const y=()=>e.getLogger(\"esri.views.2d.engine.webgl.FeatureTile\");let g=0;class b extends s{constructor(e,s,i,r,o=!1){super(e,s,i,r),this._meshes=new Map,this._entities=[],this._invalidated=!1,this._nextUploadAllowed=!1,this.tileAge=g++,this._metrics=[],this._entityIds=new Set,this._entityIdsFromBuffer=new Set,this._attributeEpoch=0,this._encounteredEnd=!1,this._objectIdMap=null,this.visible=!0,this.transforms.labelMat2d=t(),this.enableDeferredUploads=o}destroy(){super.destroy(),this.clear()}clear(){for(const e of this._meshes.values())e.destroy();this._meshes.clear(),this._entities=[],this._metrics=[],this._displayList=null,this._invalidated=!0,this._entityIds.clear(),this._nextUploadAllowed=!0}beforeRender(e){super.beforeRender(e),this._needsReshuffle&&e.reshuffleManager.schedule(this)}tryReady(e){const t=this._invalidated&&!this._uploadAllowed;return!(this.isReady||t||!this._encounteredEnd||!(e>=this._attributeEpoch))&&(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.ready [epoch=${e}]`),this.ready(),this.requestRender(),!0)}get labelMetrics(){return this._metrics}get hasData(){return!!this._meshes.size}get hasAnimations(){return!!this._objectIdMap}get needsUpload(){return this._invalidated}get _uploadAllowed(){return!this.enableDeferredUploads||this._nextUploadAllowed}upload(){this._nextUploadAllowed=!0}getDisplayList(e,t){if(this._uploadAllowed&&this._invalidated){this._entities.sort(((e,t)=>{const s=t.sortKey,i=e.sortKey;return i===s?e.id-t.id:i-s})),t===a.BATCHING&&this.reshuffle(!0),this._displayList=l.fromDisplayEntities(this._entities,this,e,t);for(const e of this._meshes.values())e.upload();this.debugInfo.display.length=this._displayList.length,this.debugInfo.display.minOrderedLength=this._displayList.minOrderedLength,this.debugInfo.display.minUnorderedLength=this._displayList.minUnorderedLength,this.requestRender(),this._invalidated=!1,this._nextUploadAllowed=!1}return this._displayList}getMesh(e){if(!this._meshes.has(e))throw new Error(`InternalError: Unable to find VAO for instance: ${e}`);return this._meshes.get(e)}getSortKeys(e){const t=new Map;for(const{id:s,sortKey:i}of this._entities)if(e.has(s)&&t.set(s,i),t.size===e.size)break;return t}onMessage(e){if(e.objectIdMap)for(const t in e.objectIdMap)this._objectIdMap||(this._objectIdMap={}),this._objectIdMap[t]=e.objectIdMap[t];switch(e.type){case\"append\":this._onAppendMessage(e);break;case\"update\":this._onUpdateMessage(e)}if(this._aggregateMemoryStats(),this.requestRender(),e.end){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.end [epoch=${e.attributeEpoch}]`),!e.attributeEpoch)throw new Error(\"InternalError: Attribute epoch not defined.\");this._attributeEpoch=e.attributeEpoch,this._encounteredEnd=!0}}_onAppendMessage(e){if(has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.append`,{append:_(e?.append)}),e.clear&&this.clear(),!e.append)return;const t=c(new m(e.append.entities),h);this._insert(t,e.append.data,!1)}_onUpdateMessage(e){has(\"esri-2d-update-debug\")&&console.debug(`Tile[${this.key.id}] FeatureTile.update`,{isPixelBuffer:e.isPixelBuffer,modify:_(e.modify),remove:e.remove});const t=c(new m(e.modify.entities),h),s=t.map((e=>e.id)),i=e.isPixelBuffer??!1,r=[...e.remove,...s];i?this._removeByIdsFromBuffer(r):this._removeByIds(r),this._insert(t,e.modify.data,i)}reshuffle(e=!1){if(this.destroyed)return;const t=new Map;for(const s of this._entities)for(const i of s.records){const s=this._meshes.get(i.instanceId);let r=t.get(s);r||(r=new f(e),t.set(s,r)),r.copyRecord(i)}for(const[s,i]of t)s.reshuffle(i);this._invalidated=!0,this._aggregateMemoryStats(),has(\"esri-2d-update-debug\")&&y().info(`Tile ${this.key.id} was reshuffled.`)}copyPixelBufferedEntitesFrom(e,t,s,i){const r=s*n,o=i*n;for(const d of e._entities){let s=null;for(const i of d.records)if(i.overlaps&t){const t=e.getMesh(i.instanceId),n=this._ensureMesh(i.instanceId,t.layout).copyRecordFrom(t,i,r,o);s||(s=new h(d.id,d.sortKey),this._entityIdsFromBuffer.add(d.id),this._entities.push(s)),s.records.push(n)}}this._invalidated=!0}_ensureMesh(e,t){return this._meshes.has(e)||this._meshes.set(e,new p(this._stage.bufferPool,t)),this._meshes.get(e)}_insert(e,t,s){if(!e.length)return;this._removeDuplicatedBufferedEntites(e);const i=this._insertVertexData(t);for(const r of e){for(const e of r.records)e.updateBaseOffsets(i.get(e.instanceId));s?this._tryInsertBufferedEntity(r):this._insertEntity(r)}this._invalidated=!0}_insertVertexData(e){const t=new Map;for(const s of e){const{instanceId:e,layout:i}=s,r=this._ensureMesh(e,i).append(s);if(s.metrics){const e=c(new m(s.metrics),u)??[];this._metrics.push(...e)}t.set(e,r)}return t}_insertEntity(e){has(\"esri-2d-update-debug\")&&this._entityIds.has(e.id)&&console.error(`Tile ${this.key.id} insertEnitty: Already have entityId ${e.id}`),this._entityIds.add(e.id),this._entities.push(e)}_tryInsertBufferedEntity(e){this._entityIds.has(e.id)?this._removeRecordsFromMesh(e.records):(this._entityIdsFromBuffer.add(e.id),this._entities.push(e))}_removeDuplicatedBufferedEntites(e){if(!this._entityIdsFromBuffer.size)return;const t=[];for(const s of e)this._entityIdsFromBuffer.has(s.id)&&t.push(s.id);this._removeByIds(t)}_removeByIdsFromBuffer(e){this._removeByIds(e.filter((e=>this._entityIdsFromBuffer.has(e))))}_removeByIds(e){if(0===e.length)return;const t=new Set(e),s=[];for(const i of this._entities)t.has(i.id)?this._remove(i):s.push(i);this._entities=s,this._invalidated=!0}_remove(e){this._removeRecordsFromMesh(e.records),this._entityIds.delete(e.id),this._entityIdsFromBuffer.delete(e.id);for(let t=this._metrics.length-1;t>=0;t--)this._metrics[t].entityTexel===e.id&&this._metrics.splice(t,1)}_removeRecordsFromMesh(e){for(const t of e){const{instanceId:e,indexStart:s,indexCount:i,vertexStart:r,vertexCount:o}=t;this._meshes.get(e)?.remove(s,i,r,o)}}_aggregateMemoryStats(){this.debugInfo.memory.bytesUsed=0,this.debugInfo.memory.bytesReserved=0;for(const e of this._meshes.values())this.debugInfo.memory.bytesUsed+=e.memoryStats.bytesUsed,this.debugInfo.memory.bytesReserved+=e.memoryStats.bytesReserved}get _needsReshuffle(){if(this.destroyed)return!1;const{bytesUsed:e,bytesReserved:t}=this.debugInfo.memory,s=e/t,{minOrderedLength:n,length:h}=this.debugInfo.display;return t>i&&s<r||h>o&&n/h<d}get entityIds(){return this._objectIdMap?this._entities.map((({id:e})=>({objectId:this._objectIdMap[e],displayId:e}))):[]}}export{b as FeatureTile};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{resolveIncludes as e}from\"./sources/resolver.js\";const r={shaders:{vertexShader:e(\"tileInfo/tileInfo.vert\"),fragmentShader:e(\"tileInfo/tileInfo.frag\")},attributes:new Map([[\"a_pos\",0]])};export{r as tileInfo};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{fromValues as e}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{Pos2b as t}from\"../DefaultVertexAttributeLayouts.js\";import{FeatureTile as r}from\"../FeatureTile.js\";import o from\"./WGLBrush.js\";import{background as i}from\"../shaders/BackgroundPrograms.js\";import{tileInfo as s}from\"../shaders/TileInfoPrograms.js\";import{BufferObject as n}from\"../../../../webgl/BufferObject.js\";import{BlendFactor as a,PrimitiveType as l,Usage as f,TextureWrapMode as m,TextureSamplingMode as u}from\"../../../../webgl/enums.js\";import{createProgram as c}from\"../../../../webgl/ProgramTemplate.js\";import{Texture as d}from\"../../../../webgl/Texture.js\";import{TextureDescriptor as h}from\"../../../../webgl/TextureDescriptor.js\";import{VertexArrayObject as g}from\"../../../../webgl/VertexArrayObject.js\";const _=512,x=512,b=16,p=8,T=(x-2*p)/5;class y extends o{constructor(){super(...arguments),this._color=e(1,0,0,1)}dispose(){this._outlineProgram?.dispose(),this._outlineProgram=null,this._tileInfoProgram?.dispose(),this._tileInfoProgram=null,this._outlineVertexArrayObject?.dispose(),this._outlineVertexArrayObject=null,this._tileInfoVertexArrayObject?.dispose(),this._tileInfoVertexArrayObject=null,this._ctx=null}prepareState({context:e}){e.setBlendingEnabled(!0),e.setBlendFunctionSeparate(a.ONE,a.ONE_MINUS_SRC_ALPHA,a.ONE,a.ONE_MINUS_SRC_ALPHA),e.setColorMask(!0,!0,!0,!0),e.setStencilWriteMask(0),e.setStencilTestEnabled(!1)}draw(e,t){const{context:o,requestRender:i,allowDelayedRender:s}=e;if(!t.isReady&&t instanceof r&&t.hasData)return;if(this._loadWGLResources(o),s&&null!=i&&(!this._outlineProgram.compiled||!this._tileInfoProgram.compiled))return void i();o.bindVAO(this._outlineVertexArrayObject),o.useProgram(this._outlineProgram),this._outlineProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._outlineProgram.setUniform2f(\"u_coord_range\",t.rangeX,t.rangeY),this._outlineProgram.setUniform1f(\"u_depth\",0),this._outlineProgram.setUniform4fv(\"u_color\",this._color),o.drawArrays(l.LINE_STRIP,0,4);const n=this._getTexture(o,t);n?(o.bindVAO(this._tileInfoVertexArrayObject),o.useProgram(this._tileInfoProgram),o.bindTexture(n,0),this._tileInfoProgram.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._tileInfoProgram.setUniform1f(\"u_depth\",0),this._tileInfoProgram.setUniform2f(\"u_coord_ratio\",t.rangeX/t.width,t.rangeY/t.height),this._tileInfoProgram.setUniform2f(\"u_delta\",0,0),this._tileInfoProgram.setUniform2f(\"u_dimensions\",n.descriptor.width,n.descriptor.height),o.drawArrays(l.TRIANGLE_STRIP,0,4),o.bindVAO()):o.bindVAO()}_loadWGLResources(e){if(this._outlineProgram&&this._tileInfoProgram)return;const r=c(e,i),o=c(e,s),a=new Int8Array([0,0,1,0,1,1,0,1]),l=n.createVertex(e,f.STATIC_DRAW,a),m=new g(e,i.attributes,t,new Map([[\"geometry\",l]])),u=new Int8Array([0,0,1,0,0,1,1,1]),d=n.createVertex(e,f.STATIC_DRAW,u),h=new g(e,s.attributes,t,new Map([[\"geometry\",d]]));this._outlineProgram=r,this._tileInfoProgram=o,this._outlineVertexArrayObject=m,this._tileInfoVertexArrayObject=h}_getTexture(e,t){if(!this._ctx){const e=document.createElement(\"canvas\");e.width=_,e.height=x,this._ctx=e.getContext(\"2d\")}if(!t.tileDebugInfoTexture){const r=new h;r.wrapMode=m.CLAMP_TO_EDGE,r.samplingMode=u.LINEAR,r.isImmutable=!0,r.width=_,r.height=x,t.tileDebugInfoTexture=new d(e,r)}const r=this._ctx;r.clearRect(0,0,r.canvas.width,r.canvas.height),r.textAlign=\"left\",r.textBaseline=\"top\",r.font=b-2+\"px sans-serif\",r.lineWidth=2,r.fillStyle=\"white\",r.strokeStyle=\"black\";const{debugSlot:o}=t;let i=p+T*o;const s=`${o}) ${t.key.id} (${t.constructor.name})`;r.strokeText(s,p,i),r.fillText(s,p,i),i+=b;const{debugInfo:n}=t;if(n){const{length:e,minOrderedLength:t,minUnorderedLength:o,triangleCount:s}=n.display;if(e>0){const t=`Length: ${e}`;r.strokeText(t,p,i),r.fillText(t,p,i),i+=b}if(t){const e=`Min ordered length: ${t}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(o){const e=`Min unordered length: ${o}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}if(s>0){s>1e5&&(r.fillStyle=\"red\",r.strokeStyle=\"white\");const e=`Triangle count: ${s}`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}const{bytesUsed:a,bytesReserved:l}=n.memory;if(r.fillStyle=\"white\",r.strokeStyle=\"black\",a>0||l>0){const e=`Memory usage: ${a} of ${l} bytes`;r.strokeText(e,p,i),r.fillText(e,p,i),i+=b}}return t.tileDebugInfoTexture.setData(r.canvas),t.tileDebugInfoTexture}}export{y as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{nextPowerOfTwo as t}from\"../../../../../core/mathUtils.js\";import{create as e}from\"../../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{fromValues as r}from\"../../../../../core/libs/gl-matrix-2/factories/vec4f32.js\";import{vtlTextureBindingUnitSprites as o,vtlHighResCutoff as i}from\"../definitions.js\";import s from\"./WGLBrush.js\";import{BufferObject as a}from\"../../../../webgl/BufferObject.js\";import{TextureSamplingMode as n,CompareFunction as c,PrimitiveType as l,Usage as f}from\"../../../../webgl/enums.js\";import{VertexArrayObject as m}from\"../../../../webgl/VertexArrayObject.js\";class u extends s{constructor(){super(...arguments),this._color=r(1,0,0,1),this._patternMatrix=e(),this._programOptions={id:!1,pattern:!1}}dispose(){this._vao&&(this._vao.dispose(),this._vao=null)}drawMany(e,r){const{context:s,painter:a,requestRender:f,allowDelayedRender:m}=e;this._loadWGLResources(e);const u=e.displayLevel,p=e.styleLayer,_=p.backgroundMaterial,d=a.vectorTilesMaterialManager,g=p.getPaintValue(\"background-color\",u),h=p.getPaintValue(\"background-opacity\",u),x=p.getPaintValue(\"background-pattern\",u),M=void 0!==x,b=1|window.devicePixelRatio,v=e.spriteMosaic;let y,w;const j=b>i?2:1,A=this._programOptions;A.pattern=M;const L=d.getMaterialProgram(s,_,A);if(!m||null==f||L.compiled){if(s.bindVAO(this._vao),s.useProgram(L),M){const t=v.getMosaicItemPosition(x,!0);if(null!=t){const{tl:e,br:r,page:i}=t;y=r[0]-e[0],w=r[1]-e[1];const a=v.getPageSize(i);null!=a&&(v.bind(s,n.LINEAR,i,o),L.setUniform4f(\"u_tlbr\",e[0],e[1],r[0],r[1]),L.setUniform2fv(\"u_mosaicSize\",a),L.setUniform1i(\"u_texture\",o))}L.setUniform1f(\"u_opacity\",h)}else{const t=g[3]*h;this._color[0]=t*g[0],this._color[1]=t*g[1],this._color[2]=t*g[2],this._color[3]=t,L.setUniform4fv(\"u_color\",this._color)}L.setUniform1f(\"u_depth\",p.z||0);for(const e of r){if(L.setUniform1f(\"u_coord_range\",e.rangeX),L.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),M){const r=Math.max(2**(Math.round(u)-e.key.level),1),o=j*e.width*r,i=o/t(y),s=o/t(w);this._patternMatrix[0]=i,this._patternMatrix[4]=s,L.setUniformMatrix3fv(\"u_pattern_matrix\",this._patternMatrix)}s.setStencilFunction(c.EQUAL,0,255),s.drawArrays(l.TRIANGLE_STRIP,0,4)}}else f()}_loadWGLResources(t){if(this._vao)return;const{context:e,styleLayer:r}=t,o=r.backgroundMaterial,i=new Int8Array([0,0,1,0,0,1,1,1]),s=a.createVertex(e,f.STATIC_DRAW,i),n=new m(e,o.getAttributeLocations(),o.getLayoutInfo(),new Map([[\"geometry\",s]]));this._vao=n}}export{u as WGLBrushVTLBackground};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as e}from\"../../vectorTiles/style/StyleDefinition.js\";import t from\"./WGLBrush.js\";import{CompareFunction as r,PrimitiveType as i,DataType as a}from\"../../../../webgl/enums.js\";class n extends t{constructor(){super(...arguments),this._programOptions={id:!1}}dispose(){}drawMany(t,n){const{context:l,displayLevel:s,requiredLevel:o,state:c,painter:u,spriteMosaic:d,styleLayerUID:f,requestRender:m,allowDelayedRender:p}=t;if(!n.some((e=>e.layerData.get(f)?.circleIndexCount??!1)))return;const y=t.styleLayer,g=y.circleMaterial,M=u.vectorTilesMaterialManager,v=1.2,E=y.getPaintValue(\"circle-translate\",s),x=y.getPaintValue(\"circle-translate-anchor\",s),I=this._programOptions,U=M.getMaterialProgram(l,g,I);if(p&&null!=m&&!U.compiled)return void m();l.useProgram(U),U.setUniformMatrix3fv(\"u_displayMat3\",x===e.VIEWPORT?c.displayMat3:c.displayViewMat3),U.setUniform2fv(\"u_circleTranslation\",E),U.setUniform1f(\"u_depth\",y.z),U.setUniform1f(\"u_antialiasingWidth\",v);let _=-1;for(const e of n){if(!e.layerData.has(f))continue;e.key.level!==_&&(_=e.key.level,g.setDataUniforms(U,s,y,_,d));const t=e.layerData.get(f);if(!t.circleIndexCount)continue;t.prepareForRendering(l);const n=t.vao;null!=n&&(l.bindVAO(n),U.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),o!==e.key.level?l.setStencilFunction(r.EQUAL,e.stencilRef,255):l.setStencilFunction(r.GREATER,255,255),l.drawElements(i.TRIANGLES,t.circleIndexCount,a.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t.circleIndexStart),e.triangleCount+=t.circleIndexCount/3)}}}export{n as WGLBrushVTLCircle};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as t}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as e,vtlHighResCutoff as i}from\"../definitions.js\";import n from\"./WGLBrush.js\";import{TextureSamplingMode as a,CompareFunction as l,PrimitiveType as r,DataType as o}from\"../../../../webgl/enums.js\";const s=1/65536;class f extends n{constructor(){super(...arguments),this._fillProgramOptions={id:!1,pattern:!1},this._outlineProgramOptions={id:!1}}dispose(){}drawMany(t,e){const{displayLevel:i,renderPass:n,spriteMosaic:a,styleLayerUID:l}=t;let r=!1;for(const _ of e)if(_.layerData.has(l)){const t=_.layerData.get(l);if(t.fillIndexCount>0||t.outlineIndexCount>0){r=!0;break}}if(!r)return;const o=t.styleLayer,s=o.getPaintProperty(\"fill-pattern\"),f=void 0!==s,u=f&&s.isDataDriven;let c;if(f&&!u){const t=s.getValue(i);c=a.getMosaicItemPosition(t,!0)}const d=!f&&o.getPaintValue(\"fill-antialias\",i);let p=!0,m=1;if(!f){const t=o.getPaintProperty(\"fill-color\"),e=o.getPaintProperty(\"fill-opacity\");if(!t?.isDataDriven&&!e?.isDataDriven){const t=o.getPaintValue(\"fill-color\",i);m=o.getPaintValue(\"fill-opacity\",i)*t[3],m>=1&&(p=!1)}}if(p&&\"opaque\"===n)return;const y=o.getPaintValue(\"fill-translate\",i),g=o.getPaintValue(\"fill-translate-anchor\",i);(p||\"translucent\"!==n)&&this._drawFill(t,l,o,e,y,g,f,c,u);const M=!o.hasDataDrivenOutlineColor&&o.outlineUsesFillColor&&m<1;d&&\"opaque\"!==n&&!M&&this._drawOutline(t,l,o,e,y,g)}_drawFill(n,f,u,c,d,p,m,y,g){if(m&&!g&&null==y)return;const{context:M,displayLevel:_,state:E,painter:v,pixelRatio:P,spriteMosaic:U,requestRender:I,allowDelayedRender:x}=n,D=u.fillMaterial,R=v.vectorTilesMaterialManager,S=P>i?2:1,T=this._fillProgramOptions;T.pattern=m;const h=R.getMaterialProgram(M,D,T);if(x&&null!=I&&!h.compiled)return void I();if(M.useProgram(h),null!=y){const{page:t}=y,i=U.getPageSize(t);null!=i&&(U.bind(M,a.LINEAR,t,e),h.setUniform2fv(\"u_mosaicSize\",i),h.setUniform1i(\"u_texture\",e))}h.setUniformMatrix3fv(\"u_displayMat3\",p===t.VIEWPORT?E.displayMat3:E.displayViewMat3),h.setUniform2fv(\"u_fillTranslation\",d),h.setUniform1f(\"u_depth\",u.z+s);let w=-1;for(const t of c){if(!t.layerData.has(f))continue;t.key.level!==w&&(w=t.key.level,D.setDataUniforms(h,_,u,w,U));const i=t.layerData.get(f);if(!i.fillIndexCount)continue;i.prepareForRendering(M);const n=i.fillVAO;if(null!=n){if(M.bindVAO(n),h.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),M.setStencilFunction(l.EQUAL,t.stencilRef,255),m){const e=Math.max(2**(Math.round(_)-t.key.level),1),i=t.rangeX/(S*t.width*e);h.setUniform1f(\"u_patternFactor\",i)}if(g){const t=i.patternMap;if(!t)continue;for(const[i,n]of t){const t=U.getPageSize(i);null!=t&&(U.bind(M,a.LINEAR,i,e),h.setUniform2fv(\"u_mosaicSize\",t),h.setUniform1i(\"u_texture\",e),M.drawElements(r.TRIANGLES,n[1],o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*n[0]))}}else M.drawElements(r.TRIANGLES,i.fillIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i.fillIndexStart);t.triangleCount+=i.fillIndexCount/3}}}_drawOutline(e,i,n,a,f,u){const{context:c,displayLevel:d,state:p,painter:m,pixelRatio:y,spriteMosaic:g,requestRender:M,allowDelayedRender:_}=e,E=n.outlineMaterial,v=m.vectorTilesMaterialManager,P=.75/y,U=this._outlineProgramOptions,I=v.getMaterialProgram(c,E,U);if(_&&null!=M&&!I.compiled)return void M();c.useProgram(I),I.setUniformMatrix3fv(\"u_displayMat3\",u===t.VIEWPORT?p.displayMat3:p.displayViewMat3),I.setUniform2fv(\"u_fillTranslation\",f),I.setUniform1f(\"u_depth\",n.z+s),I.setUniform1f(\"u_outline_width\",P);let x=-1;for(const t of a){if(!t.layerData.has(i))continue;t.key.level!==x&&(x=t.key.level,E.setDataUniforms(I,d,n,x,g));const e=t.layerData.get(i);if(e.prepareForRendering(c),!e.outlineIndexCount)continue;const a=e.outlineVAO;null!=a&&(c.bindVAO(a),I.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),c.setStencilFunction(l.EQUAL,t.stencilRef,255),c.drawElements(r.TRIANGLES,e.outlineIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*e.outlineIndexStart),t.triangleCount+=e.outlineIndexCount/3)}}}export{f as WGLBrushVTLFill};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{TranslateAnchor as e}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as t}from\"../definitions.js\";import i from\"./WGLBrush.js\";import{TextureSamplingMode as n,CompareFunction as a,PrimitiveType as r,DataType as o}from\"../../../../webgl/enums.js\";class s extends i{constructor(){super(...arguments),this._programOptions={id:!1,pattern:!1,sdf:!1}}dispose(){}drawMany(i,s){const{context:l,displayLevel:f,state:u,painter:c,pixelRatio:d,spriteMosaic:m,styleLayerUID:p,requestRender:g,allowDelayedRender:y}=i;if(!s.some((e=>e.layerData.get(p)?.lineIndexCount??!1)))return;const M=i.styleLayer,E=M.lineMaterial,_=c.vectorTilesMaterialManager,v=M.getPaintValue(\"line-translate\",f),U=M.getPaintValue(\"line-translate-anchor\",f),I=M.getPaintProperty(\"line-pattern\"),P=void 0!==I,x=P&&I.isDataDriven;let D,S;if(P&&!x){const e=I.getValue(f);D=m.getMosaicItemPosition(e)}let L=!1;if(!P){const e=M.getPaintProperty(\"line-dasharray\");if(S=void 0!==e,L=S&&e.isDataDriven,S&&!L){const t=e.getValue(f),i=M.getDashKey(t,M.getLayoutValue(\"line-cap\",f));D=m.getMosaicItemPosition(i)}}const N=1/d,R=this._programOptions;R.pattern=P,R.sdf=S;const T=_.getMaterialProgram(l,E,R);if(y&&null!=g&&!T.compiled)return void g();if(l.useProgram(T),T.setUniformMatrix3fv(\"u_displayViewMat3\",u.displayViewMat3),T.setUniformMatrix3fv(\"u_displayMat3\",U===e.VIEWPORT?u.displayMat3:u.displayViewMat3),T.setUniform2fv(\"u_lineTranslation\",v),T.setUniform1f(\"u_depth\",M.z),T.setUniform1f(\"u_antialiasing\",N),D&&null!=D){const{page:e}=D,i=m.getPageSize(e);null!=i&&(m.bind(l,n.LINEAR,e,t),T.setUniform2fv(\"u_mosaicSize\",i),T.setUniform1i(\"u_texture\",t))}let V=-1;for(const e of s){if(!e.layerData.has(p))continue;e.key.level!==V&&(V=e.key.level,E.setDataUniforms(T,f,M,V,m));const i=2**(f-V)/d;T.setUniform1f(\"u_zoomFactor\",i);const s=e.layerData.get(p);if(!s.lineIndexCount)continue;s.prepareForRendering(l);const u=s.vao;if(null!=u){if(l.bindVAO(u),T.setUniformMatrix3fv(\"u_dvsMat3\",e.transforms.displayViewScreenMat3),l.setStencilFunction(a.EQUAL,e.stencilRef,255),x||L){const e=s.patternMap;if(!e)continue;for(const[i,a]of e){const e=m.getPageSize(i);null!=e&&(m.bind(l,n.LINEAR,i,t),T.setUniform2fv(\"u_mosaicSize\",e),T.setUniform1i(\"u_texture\",t),l.drawElements(r.TRIANGLES,a[1],o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*a[0]))}}else l.drawElements(r.TRIANGLES,s.lineIndexCount,o.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*s.lineIndexStart);e.triangleCount+=s.lineIndexCount/3}}}}export{s as WGLBrushVTLLine};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nconst n=128/Math.PI,t=256/360,r=1/Math.LN2;function u(n,t){return(n%=t)>=0?n:n+t}function o(t){return u(t*n,256)}function c(n){return u(n*t,256)}function e(n){return Math.log(n)*r}function f(n,t,r){return n*(1-r)+t*r}function i(n,t,r){return n>=t&&n<=r||n>=r&&n<=t}export{i as between,c as degToByte,f as interpolate,e as log2,u as positiveMod,o as radToByte};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport{create as e,fromValues as t}from\"../../../../../core/libs/gl-matrix-2/factories/vec2f32.js\";import{fadeDuration as i}from\"../../vectorTiles/decluttering/config.js\";import{RotationAlignment as a,SymbolPlacement as r,TranslateAnchor as n}from\"../../vectorTiles/style/StyleDefinition.js\";import{vtlTextureBindingUnitSprites as s,vtlTextureBindingUnitGlyphs as o}from\"../definitions.js\";import{degToByte as l}from\"../GeometryUtils.js\";import f from\"./WGLBrush.js\";import{TextureSamplingMode as c,PrimitiveType as u,DataType as p,CompareFunction as m}from\"../../../../webgl/enums.js\";const g=1/65536;class d extends f{constructor(){super(...arguments),this._iconProgramOptions={id:!1,sdf:!1},this._sdfProgramOptions={id:!1},this._spritesTextureSize=e()}dispose(){}drawMany(e,t){const i=e.styleLayer;this._drawIcons(e,i,t),this._drawText(e,i,t)}_drawIcons(e,t,o){const{context:f,displayLevel:c,painter:u,spriteMosaic:p,state:m,styleLayerUID:g,requestRender:d,allowDelayedRender:y}=e,_=t.iconMaterial,M=u.vectorTilesMaterialManager;let h,P=!1;for(const i of o)if(i.layerData.has(g)&&(h=i.layerData.get(g),h.iconPerPageElementsMap.size>0)){P=!0;break}if(!P)return;const U=t.getPaintValue(\"icon-translate\",c),E=t.getPaintValue(\"icon-translate-anchor\",c);let T=t.getLayoutValue(\"icon-rotation-alignment\",c);T===a.AUTO&&(T=t.getLayoutValue(\"symbol-placement\",c)===r.POINT?a.VIEWPORT:a.MAP);const x=T===a.MAP,S=t.getLayoutValue(\"icon-keep-upright\",c)&&x,v=h.isIconSDF,D=this._iconProgramOptions;D.sdf=v;const V=M.getMaterialProgram(f,_,D);if(y&&null!=d&&!V.compiled)return void d();f.useProgram(V),V.setUniformMatrix3fv(\"u_displayViewMat3\",T===a.MAP?m.displayViewMat3:m.displayMat3),V.setUniformMatrix3fv(\"u_displayMat3\",E===n.VIEWPORT?m.displayMat3:m.displayViewMat3),V.setUniform2fv(\"u_iconTranslation\",U),V.setUniform1f(\"u_depth\",t.z),V.setUniform1f(\"u_mapRotation\",l(m.rotation)),V.setUniform1f(\"u_keepUpright\",S?1:0),V.setUniform1f(\"u_level\",10*c),V.setUniform1i(\"u_texture\",s),V.setUniform1f(\"u_fadeDuration\",i/1e3);let R=-1;for(const i of o){if(!i.layerData.has(g))continue;if(i.key.level!==R&&(R=i.key.level,_.setDataUniforms(V,c,t,R,p)),h=i.layerData.get(g),0===h.iconPerPageElementsMap.size)continue;h.prepareForRendering(f),h.updateOpacityInfo();const a=h.iconVAO;if(null!=a){f.bindVAO(a),V.setUniformMatrix3fv(\"u_dvsMat3\",i.transforms.displayViewScreenMat3),V.setUniform1f(\"u_time\",(performance.now()-h.lastOpacityUpdate)/1e3);for(const[t,a]of h.iconPerPageElementsMap)this._renderIconRange(e,V,a,t,i)}}}_renderIconRange(e,t,i,a,r){const{context:n,spriteMosaic:o}=e;this._spritesTextureSize[0]=o.getWidth(a)/4,this._spritesTextureSize[1]=o.getHeight(a)/4,t.setUniform2fv(\"u_mosaicSize\",this._spritesTextureSize),o.bind(n,c.LINEAR,a,s),this._setStencilState(e,r),n.drawElements(u.TRIANGLES,i[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*i[0]),r.triangleCount+=i[1]/3}_drawText(e,s,f){const{context:c,displayLevel:u,glyphMosaic:p,painter:m,pixelRatio:d,spriteMosaic:y,state:_,styleLayerUID:M,requestRender:h,allowDelayedRender:P}=e,U=s.textMaterial,E=m.vectorTilesMaterialManager;let T,x=!1;for(const t of f)if(t.layerData.has(M)&&(T=t.layerData.get(M),T.glyphPerPageElementsMap.size>0)){x=!0;break}if(!x)return;const S=s.getPaintProperty(\"text-opacity\");if(S&&!S.isDataDriven&&0===S.getValue(u))return;const v=s.getPaintProperty(\"text-color\"),D=!v||v.isDataDriven||v.getValue(u)[3]>0,V=s.getPaintProperty(\"text-halo-width\"),R=s.getPaintProperty(\"text-halo-color\"),I=(!V||V.isDataDriven||V.getValue(u)>0)&&(!R||R.isDataDriven||R.getValue(u)[3]>0);if(!D&&!I)return;const A=24/8;let w=s.getLayoutValue(\"text-rotation-alignment\",u);w===a.AUTO&&(w=s.getLayoutValue(\"symbol-placement\",u)===r.POINT?a.VIEWPORT:a.MAP);const L=w===a.MAP,O=s.getLayoutValue(\"text-keep-upright\",u)&&L,N=.8*A/d;this._glyphTextureSize||(this._glyphTextureSize=t(p.width/4,p.height/4));const z=s.getPaintValue(\"text-translate\",u),b=s.getPaintValue(\"text-translate-anchor\",u),k=this._sdfProgramOptions,G=E.getMaterialProgram(c,U,k);if(P&&null!=h&&!G.compiled)return void h();c.useProgram(G),G.setUniformMatrix3fv(\"u_displayViewMat3\",w===a.MAP?_.displayViewMat3:_.displayMat3),G.setUniformMatrix3fv(\"u_displayMat3\",b===n.VIEWPORT?_.displayMat3:_.displayViewMat3),G.setUniform2fv(\"u_textTranslation\",z),G.setUniform1f(\"u_depth\",s.z+g),G.setUniform2fv(\"u_mosaicSize\",this._glyphTextureSize),G.setUniform1f(\"u_mapRotation\",l(_.rotation)),G.setUniform1f(\"u_keepUpright\",O?1:0),G.setUniform1f(\"u_level\",10*u),G.setUniform1i(\"u_texture\",o),G.setUniform1f(\"u_antialiasingWidth\",N),G.setUniform1f(\"u_fadeDuration\",i/1e3);let W=-1;for(const t of f){if(!t.layerData.has(M))continue;if(t.key.level!==W&&(W=t.key.level,U.setDataUniforms(G,u,s,W,y)),T=t.layerData.get(M),0===T.glyphPerPageElementsMap.size)continue;T.prepareForRendering(c),T.updateOpacityInfo();const i=T.textVAO;if(null==i)continue;c.bindVAO(i),G.setUniformMatrix3fv(\"u_dvsMat3\",t.transforms.displayViewScreenMat3),this._setStencilState(e,t);const a=(performance.now()-T.lastOpacityUpdate)/1e3;G.setUniform1f(\"u_time\",a),T.glyphPerPageElementsMap.forEach(((e,i)=>{this._renderGlyphRange(c,e,i,p,G,I,D,t)}))}}_renderGlyphRange(e,t,i,a,r,n,s,l){a.bind(e,c.LINEAR,i,o),n&&(r.setUniform1f(\"u_halo\",1),e.drawElements(u.TRIANGLES,t[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3),s&&(r.setUniform1f(\"u_halo\",0),e.drawElements(u.TRIANGLES,t[1],p.UNSIGNED_INT,Uint32Array.BYTES_PER_ELEMENT*t[0]),l.triangleCount+=t[1]/3)}_setStencilState(e,t){const{context:i,is3D:a,stencilSymbols:r}=e;if(i.setStencilTestEnabled(!0),r)return i.setStencilWriteMask(255),void i.setStencilFunction(m.ALWAYS,t.stencilRef,255);i.setStencilWriteMask(0),a?i.setStencilFunction(m.EQUAL,t.stencilRef,255):i.setStencilFunction(m.GREATER,255,255)}}export{d as WGLBrushVTLSymbol};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport r from\"./webgl/brushes/BrushClip.js\";import s from\"./webgl/brushes/WGLBrushStencil.js\";import e from\"./webgl/brushes/WGLBrushTileDebugInfo.js\";import{WGLBrushVTLBackground as l}from\"./webgl/brushes/WGLBrushVTLBackground.js\";import{WGLBrushVTLCircle as o}from\"./webgl/brushes/WGLBrushVTLCircle.js\";import{WGLBrushVTLFill as b}from\"./webgl/brushes/WGLBrushVTLFill.js\";import{WGLBrushVTLLine as i}from\"./webgl/brushes/WGLBrushVTLLine.js\";import{WGLBrushVTLSymbol as u}from\"./webgl/brushes/WGLBrushVTLSymbol.js\";const m={clip:r,stencil:s,tileDebugInfo:e,vtlBackground:l,vtlFill:b,vtlLine:i,vtlCircle:o,vtlSymbol:u};export{m as brushes};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import r from\"../../../../core/Logger.js\";import{e as t}from\"../../../../chunks/earcut.js\";import{set as n}from\"../../../../core/libs/gl-matrix-2/math/vec2.js\";import{create as o}from\"../../../../core/libs/gl-matrix-2/factories/vec2f64.js\";import{convertFromNestedArray as s,convertFromPolygon as i}from\"../../../../layers/graphics/featureConversionUtils.js\";import c from\"../../../../layers/graphics/OptimizedGeometry.js\";import{i1616to32 as a}from\"./number.js\";import{BufferObject as f}from\"../../../webgl/BufferObject.js\";import{PrimitiveType as m,Usage as h,DataType as u}from\"../../../webgl/enums.js\";const l=r=>{switch(r.BYTES_PER_ELEMENT){case 1:return u.UNSIGNED_BYTE;case 2:return u.UNSIGNED_SHORT;case 4:return u.UNSIGNED_INT;default:throw new e(\"Cannot get DataType of array\")}},y=(e,r,t,n)=>{let o=0;for(let s=1;s<t;s++){const t=e[2*(r+s-1)],n=e[2*(r+s-1)+1];o+=(e[2*(r+s)]-t)*(e[2*(r+s)+1]+n)}return n?o>0:o<0},g=({coords:e,lengths:r},n)=>{const o=[];for(let s=0,i=0;s<r.length;i+=r[s],s+=1){const c=i,a=[];for(;s<r.length-1&&y(e,i+r[s],r[s+1],n);s+=1,i+=r[s])a.push(i+r[s]-c);const f=e.slice(2*c,2*(i+r[s])),m=t(f,a,2);for(const e of m)o.push(e+c)}return o};class p{constructor(e,r,t,n=!1){this._cache={},this.vertices=e,this.indices=r,this.primitiveType=t,this.isMapSpace=n}static fromPath(e){const r=s(new c,e.path,!1,!1),t=r.coords,n=new Uint32Array(g(r,!0)),o=new Uint32Array(t.length/2);for(let s=0;s<o.length;s++)o[s]=a(Math.floor(t[2*s]),Math.floor(t[2*s+1]));return new p({geometry:o},n,m.TRIANGLES)}static fromGeometry(t,n){const o=n.geometry?.type;switch(o){case\"polygon\":return p.fromPolygon(t,n.geometry);case\"extent\":return p.fromMapExtent(t,n.geometry);default:return r.getLogger(\"esri.views.2d.engine.webgl.Mesh2D\").error(new e(\"mapview-bad-type\",`Unable to create a mesh from type ${o}`,n)),p.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}static fromPolygon(e,r){const t=i(new c,r,!1,!1),s=t.coords,f=new Uint32Array(g(t,!1)),h=new Uint32Array(s.length/2),u=o(),l=o();for(let o=0;o<h.length;o++)n(u,s[2*o],s[2*o+1]),e.toScreen(l,u),h[o]=a(Math.floor(l[0]),Math.floor(l[1]));return new p({geometry:h},f,m.TRIANGLES,!0)}static fromScreenExtent({xmin:e,xmax:r,ymin:t,ymax:n}){const o={geometry:new Uint32Array([a(e,t),a(r,t),a(e,n),a(e,n),a(r,t),a(r,n)])},s=new Uint32Array([0,1,2,3,4,5]);return new p(o,s,m.TRIANGLES)}static fromMapExtent(e,r){const[t,n]=e.toScreen([0,0],[r.xmin,r.ymin]),[o,s]=e.toScreen([0,0],[r.xmax,r.ymax]),i={geometry:new Uint32Array([a(t,n),a(o,n),a(t,s),a(t,s),a(o,n),a(o,s)])},c=new Uint32Array([0,1,2,3,4,5]);return new p(i,c,m.TRIANGLES)}destroy(){null!=this._cache.indexBuffer&&this._cache.indexBuffer.dispose(),this._cache.vertexBuffers?.forEach((e=>e?.dispose())),this._cache.indexBuffer=this._cache.vertexBuffers=null}get elementType(){return l(this.indices)}getIndexBuffer(e,r=h.STATIC_DRAW){return this._cache.indexBuffer??=f.createIndex(e,r,this.indices),this._cache.indexBuffer}getVertexBuffers(e,r=h.STATIC_DRAW){return this._cache.vertexBuffers??=new Map(Object.keys(this.vertices).reduce(((t,n)=>(t.push([n,f.createVertex(e,r,this.vertices[n])]),t)),new Array)),this._cache.vertexBuffers}}export{p as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport e from\"../../../../core/Error.js\";import t from\"../../../../core/Logger.js\";import{watch as r}from\"../../../../core/reactiveUtils.js\";import{create as s}from\"../../../../core/libs/gl-matrix-2/factories/mat3f32.js\";import{DisplayObject as i}from\"../DisplayObject.js\";import a from\"./Mesh2D.js\";import{createScreenExtent as o}from\"../../support/clippingUtils.js\";import{VertexArrayObject as h}from\"../../../webgl/VertexArrayObject.js\";class c extends i{constructor(e,t){super(),this._clip=t,this._cache={},this.stage=e,this._handle=r((()=>t.version),(()=>this._invalidate())),this.ready()}static fromClipArea(e,t){return new c(e,t)}_destroyGL(){null!=this._cache.mesh&&(this._cache.mesh.destroy(),this._cache.mesh=null),null!=this._cache.vao&&(this._cache.vao.dispose(),this._cache.vao=null)}destroy(){this._destroyGL(),this._handle.remove()}getVAO(e,t,r,s){const[i,a]=t.size;if(\"geometry\"!==this._clip.type&&this._lastWidth===i&&this._lastHeight===a||(this._lastWidth=i,this._lastHeight=a,this._destroyGL()),null==this._cache.vao){const i=this._createMesh(t,this._clip),a=i.getIndexBuffer(e),o=i.getVertexBuffers(e);this._cache.mesh=i,this._cache.vao=new h(e,r,s,o,a)}return this._cache.vao}_createTransforms(){return{displayViewScreenMat3:s()}}_invalidate(){this._destroyGL(),this.requestRender()}_createMesh(r,s){switch(s.type){case\"rect\":return a.fromScreenExtent(o(s,r.size[0],r.size[1]));case\"path\":return a.fromPath(s);case\"geometry\":return a.fromGeometry(r,s);default:return t.getLogger(\"esri.views.2d.engine.webgl.ClippingInfo\").error(new e(\"mapview-bad-type\",\"Unable to create ClippingInfo mesh from clip of type: ${clip.type}\")),a.fromScreenExtent({xmin:0,ymin:0,xmax:1,ymax:1})}}}export{c as default};\n","/*\nAll material copyright ESRI, All Rights Reserved, unless otherwise specified.\nSee https://js.arcgis.com/4.32/esri/copyright.txt for details.\n*/\nimport\"../../../../core/has.js\";import{brushes as s}from\"../brushes.js\";import{Container as e}from\"../Container.js\";import r from\"./ClippingInfo.js\";import{WGLDrawPhase as i}from\"./enums.js\";class n extends e{set clips(s){super.clips=s,this._updateClippingInfo(s)}renderChildren(s){s.painter.setPipelineState(null),null==this._renderPasses&&(this._renderPasses=this.prepareRenderPasses(s.painter));for(const r of this._renderPasses)try{r.render(s)}catch(e){}}prepareRenderPasses(e){return[e.registerRenderPass({name:\"clip\",brushes:[s.clip],target:()=>this._clippingInfos,drawPhase:i.MAP|i.LABEL|i.LABEL_ALPHA|i.DEBUG|i.HIGHLIGHT})]}_updateClippingInfo(s){null!=this._clippingInfos&&(this._clippingInfos.forEach((s=>s.destroy())),this._clippingInfos=null),null!=s&&s.length&&(this._clippingInfos=s.items.map((s=>r.fromClipArea(this.stage,s)))),this.requestRender()}}export{n as default};\n"],"names":["n","t","r","e","o","u","c","i","a","f","l","_","s","y","w","N","t$6","m","p$3","p","d","r$4","h","d$3","t$3","a$4","h$1","l$1","g","E","has","s$2","a$3","d$1","a$1","t$1","b$1","x","b","T","y$1","u$1","M","v","j","A","L","I","U","P","D","R","S","V","O","k","G","W"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30]}