import{v as n,bm as N,G as w,x as t,z as i,bj as _,D as d,B as I,K as f,ah as C,ad as R,dr as j,iU as F,an as q,ae as be,V as G,a4 as J,f4 as ve,dq as ge,bP as H,T as re}from"./main-DnzmeE4U.js";import{n as fe}from"./CollectionFlattener-9hYRBLDX.js";import{S as Se}from"./LayerView2D-CCfp06E-.js";import{t as we}from"./GraphicContainer-CEP0E1kz.js";import{A as Ne}from"./GraphicsView2D-yiocyXG3.js";import{y as De}from"./LayerView-D3XoMhlx.js";const se={esriCentimeters:"centimeters",esriDecimalDegrees:"decimal-degrees",esriDecimeters:"decimeters",esriFeet:"feet",esriInches:"inches",esriKilometers:"kilometers",esriMeters:"meters",esriMiles:"miles",esriMillimeters:"millimeters",esriNauticalMiles:"nautical-miles",esriPoints:"points",esriUnknownUnits:"unknown",esriYards:"yards"},ae=n()(se),Ae=n()({...se,esriIntFeet:"international-feet",esriIntInches:"international-inches",esriIntMiles:"international-miles",esriIntNauticalMiles:"international-nautical-miles",esriIntYards:"international-yards"}),Oe=n()({esriAcres:"international-acres",esriAcresUS:"us-acres",esriAres:"ares",esriHectares:"hectares",esriSquareCentimeters:"square-centimeters",esriSquareDecimeters:"square-decimeters",esriSquareFeet:"square-international-feet",esriSquareFeetUS:"square-us-feet",esriSquareInches:"square-international-inches",esriSquareInchesUS:"square-us-inches",esriSquareKilometers:"square-kilometers",esriSquareMeters:"square-meters",esriSquareMiles:"square-international-miles",esriSquareMilesUS:"square-us-miles",esriSquareMillimeters:"square-millimeters",esriSquareYards:"square-international-yards",esriSquareYardsUS:"square-us-yards",esriUnknownAreaUnits:"unknown"}),Ie=n()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards"}),Ce=n()({esriNAUCentimeters:"centimeters",esriNAUDecimalDegrees:"decimal-degrees",esriNAUDecimeters:"decimeters",esriNAUFeet:"feet",esriNAUInches:"inches",esriNAUKilometers:"kilometers",esriNAUMeters:"meters",esriNAUMiles:"miles",esriNAUMillimeters:"millimeters",esriNAUNauticalMiles:"nautical-miles",esriNAUPoints:"points",esriNAUYards:"yards",esriNAUDays:"days",esriNAUHours:"hours",esriNAUMinutes:"minutes",esriNAUSeconds:"seconds",esriNAUKilometersPerHour:"kilometers-per-hour",esriNAUMilesPerHour:"miles-per-hour",esriNAUUnknown:"unknown"}),je=n()({esriDOTComplete:"complete",esriDOTCompleteNoEvents:"complete-no-events",esriDOTFeatureSets:"featuresets",esriDOTInstructionsOnly:"instructions-only",esriDOTStandard:"standard",esriDOTSummaryOnly:"summary-only"}),Fe=n()({esriNAOutputLineNone:"none",esriNAOutputLineStraight:"straight",esriNAOutputLineTrueShape:"true-shape",esriNAOutputLineTrueShapeWithMeasure:"true-shape-with-measure"});n()({esriNAOutputPolygonNone:"none",esriNAOutputPolygonSimplified:"simplified",esriNAOutputPolygonDetailed:"detailed"});const oe=n()({esriNFSBAllowBacktrack:"allow-backtrack",esriNFSBAtDeadEndsOnly:"at-dead-ends-only",esriNFSBNoBacktrack:"no-backtrack",esriNFSBAtDeadEndsAndIntersections:"at-dead-ends-and-intersections"});n()({esriNATravelDirectionFromFacility:"from-facility",esriNATravelDirectionToFacility:"to-facility"}),n()({esriNATimeOfDayNotUsed:"not-used",esriNATimeOfDayUseAsStartTime:"start",esriNATimeOfDayUseAsEndTime:"end"});const _e=n()({AUTOMOBILE:"automobile",TRUCK:"truck",WALK:"walk",OTHER:"other"}),c=n()({0:"either-side-of-vehicle",1:"right-side-of-vehicle",2:"left-side-of-vehicle",3:"no-u-turn"},{useNumericKeys:!0}),E=n()({0:"stop",1:"waypoint",2:"break"},{useNumericKeys:!0}),D=n()({0:"ok",1:"not-located",2:"network-element-not-located",3:"element-not-traversable",4:"invalid-field-values",5:"not-reached",6:"time-window-violation",7:"not-located-on-closest"},{useNumericKeys:!0}),P=n()({1:"right",2:"left"},{useNumericKeys:!0}),T=n()({0:"restriction",1:"scaled-cost",2:"added-cost"},{useNumericKeys:!0}),L=n()({0:"permit",1:"restrict"},{useNumericKeys:!0}),B=n()({1:"header",50:"arrive",51:"depart",52:"straight",100:"on-ferry",101:"off-ferry",102:"central-fork",103:"roundabout",104:"u-turn",150:"door",151:"stairs",152:"elevator",153:"escalator",154:"pedestrian-ramp",200:"left-fork",201:"left-ramp",202:"clockwise-roundabout",203:"left-handed-u-turn",204:"bear-left",205:"left-turn",206:"sharp-left",207:"left-turn-and-immediate-left-turn",208:"left-turn-and-immediate-right-turn",300:"right-fork",301:"right-ramp",302:"counter-clockwise-roundabout",303:"right-handed-u-turn",304:"bear-right",305:"right-turn",306:"sharp-right",307:"right-turn-and-immediate-left-turn",308:"right-turn-and-immediate-right-turn",400:"up-elevator",401:"up-escalator",402:"up-stairs",500:"down-elevator",501:"down-escalator",502:"down-stairs",1e3:"general-event",1001:"landmark",1002:"time-zone-change",1003:"traffic-event",1004:"scaled-cost-barrier-event",1005:"boundary-crossing",1006:"restriction-violation",1007:"lane"},{useNumericKeys:!0}),x=n()({0:"unknown",1:"segment",2:"maneuver-segment",3:"restriction-violation",4:"scaled-cost-barrier",5:"heavy-traffic",6:"slow-traffic",7:"moderate-traffic"},{useNumericKeys:!0}),Me=n()({"NA Campus":"campus","NA Desktop":"desktop","NA Navigation":"navigation"}),Ue=n()({Kilometers:"kilometers",Miles:"miles",Meters:"meters"},{ignoreUnknown:!1}),ne=n()({Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),A=n()({Kilometers:"kilometers",Miles:"miles",Meters:"meters",Minutes:"minutes",TimeAt1KPH:"time-at-1-kph",TravelTime:"travel-time",TruckMinutes:"truck-minutes",TruckTravelTime:"truck-travel-time",WalkTime:"walk-time"},{ignoreUnknown:!1}),K=n()({"Any Hazmat Prohibited":"any-hazmat-prohibited","Avoid Carpool Roads":"avoid-carpool-roads","Avoid Express Lanes":"avoid-express-lanes","Avoid Ferries":"avoid-ferries","Avoid Gates":"avoid-gates","Avoid Limited Access Roads":"avoid-limited-access-roads","Avoid Private Roads":"avoid-private-roads","Avoid Roads Unsuitable for Pedestrians":"avoid-roads-unsuitable-for-pedestrians","Avoid Stairways":"avoid-stairways","Avoid Toll Roads":"avoid-toll-roads","Avoid Toll Roads for Trucks":"avoid-toll-roads-for-trucks","Avoid Truck Restricted Roads":"avoid-truck-restricted-roads","Avoid Unpaved Roads":"avoid-unpaved-roads","Axle Count Restriction":"axle-count-restriction","Driving a Bus":"driving-a-bus","Driving a Taxi":"driving-a-taxi","Driving a Truck":"driving-a-truck","Driving an Automobile":"driving-an-automobile","Driving an Emergency Vehicle":"driving-an-emergency-vehicle","Height Restriction":"height-restriction","Kingpin to Rear Axle Length Restriction":"kingpin-to-rear-axle-length-restriction","Length Restriction":"length-restriction","Preferred for Pedestrians":"preferred-for-pedestrians","Riding a Motorcycle":"riding-a-motorcycle","Roads Under Construction Prohibited":"roads-under-construction-prohibited","Semi or Tractor with One or More Trailers Prohibited":"semi-or-tractor-with-one-or-more-trailers-prohibited","Single Axle Vehicles Prohibited":"single-axle-vehicles-prohibited","Tandem Axle Vehicles Prohibited":"tandem-axle-vehicles-prohibited","Through Traffic Prohibited":"through-traffic-prohibited","Truck with Trailers Restriction":"truck-with-trailers-restriction","Use Preferred Hazmat Routes":"use-preferred-hazmat-routes","Use Preferred Truck Routes":"use-preferred-truck-routes",Walking:"walking","Weight Restriction":"weight-restriction"},{ignoreUnknown:!1}),ke=n()({esriSpatialRelIntersects:"intersects",esriSpatialRelContains:"contains",esriSpatialRelCrosses:"crosses",esriSpatialRelEnvelopeIntersects:"envelope-intersects",esriSpatialRelIndexIntersects:"index-intersects",esriSpatialRelOverlaps:"overlaps",esriSpatialRelTouches:"touches",esriSpatialRelWithin:"within",esriSpatialRelRelation:"relation"}),Ee=n()({esriGeometryPoint:"point",esriGeometryPolyline:"polyline",esriGeometryPolygon:"polygon",esriGeometryEnvelope:"envelope",esriGeometryMultipoint:"multipoint"}),Le=n()({esriNAUTCost:"cost",esriNAUTDescriptor:"descriptor",esriNAUTRestriction:"restriction",esriNAUTHierarchy:"hierarchy"}),We=n()({esriDSTAltName:"alt-name",esriDSTArrive:"arrive",esriDSTBranch:"branch",esriDSTCrossStreet:"cross-street",esriDSTCumulativeLength:"cumulative-length",esriDSTDepart:"depart",esriDSTEstimatedArrivalTime:"estimated-arrival-time",esriDSTExit:"exit",esriDSTGeneral:"general",esriDSTLength:"length",esriDSTServiceTime:"service-time",esriDSTStreetName:"street-name",esriDSTSummary:"summary",esriDSTTime:"time",esriDSTTimeWindow:"time-window",esriDSTToward:"toward",esriDSTViolationTime:"violation-time",esriDSTWaitTime:"wait-time"});let m=class extends N.ClonableMixin(w){constructor(e){super(e),this.attributeParameterValues=null,this.description=null,this.distanceAttributeName=null,this.id=null,this.impedanceAttributeName=null,this.name=null,this.restrictionAttributeNames=null,this.simplificationTolerance=null,this.simplificationToleranceUnits=null,this.timeAttributeName=null,this.type=null,this.useHierarchy=null,this.uturnAtJunctions=null}readId(e,r){return r.id??r.itemId??null}readRestrictionAttributes(e,r){const{restrictionAttributeNames:s}=r;return s==null?null:s.map(l=>K.fromJSON(l))}writeRestrictionAttributes(e,r,s){e!=null&&(r[s]=e.map(l=>K.toJSON(l)))}};t([i({type:[Object],json:{write:!0}})],m.prototype,"attributeParameterValues",void 0),t([i({type:String,json:{write:!0}})],m.prototype,"description",void 0),t([_(Ue,{ignoreUnknown:!1})],m.prototype,"distanceAttributeName",void 0),t([i({type:String,json:{write:!0}})],m.prototype,"id",void 0),t([d("id",["id","itemId"])],m.prototype,"readId",null),t([_(A,{ignoreUnknown:!1})],m.prototype,"impedanceAttributeName",void 0),t([i({type:String,json:{write:!0}})],m.prototype,"name",void 0),t([i({type:[String],json:{write:!0}})],m.prototype,"restrictionAttributeNames",void 0),t([d("restrictionAttributeNames")],m.prototype,"readRestrictionAttributes",null),t([I("restrictionAttributeNames")],m.prototype,"writeRestrictionAttributes",null),t([i({type:Number,json:{write:{allowNull:!0}}})],m.prototype,"simplificationTolerance",void 0),t([_(ae)],m.prototype,"simplificationToleranceUnits",void 0),t([_(ne,{ignoreUnknown:!1})],m.prototype,"timeAttributeName",void 0),t([_(_e)],m.prototype,"type",void 0),t([i({type:Boolean,json:{write:!0}})],m.prototype,"useHierarchy",void 0),t([_(oe)],m.prototype,"uturnAtJunctions",void 0),m=t([f("esri.rest.support.TravelMode")],m);const le=m;function S(e,r){if(e==null)return null;const s={},l=new RegExp(`^${r}`,"i");for(const g of Object.keys(e))if(l.test(g)){const k=g.slice(r.length);s[A.fromJSON(k)]=e[g]}return s}function z(e,r,s){if(e!=null){r.attributes||(r.attributes={});for(const l in e){const g=A.toJSON(l);r.attributes[`${s}${g}`]=e[l]}}}function M(e){const r={};for(const s of Object.keys(e)){const l=s;r[A.fromJSON(l)]=e[s]}return r}function U(e){const r={};for(const s of Object.keys(e)){const l=s;r[A.toJSON(l)]=e[s]}return r}function W(e,r){return e==null||r==null?null:Math.round((e-r)/6e4)}function Ve(e){const r=e.toJSON(),s=r;return s.accumulateAttributeNames&&=r.accumulateAttributeNames?.join(),s.attributeParameterValues&&=JSON.stringify(r.attributeParameterValues),s.barriers&&=JSON.stringify(r.barriers),s.outSR&&=r.outSR?.wkid,s.overrides&&=JSON.stringify(r.overrides),s.polygonBarriers&&=JSON.stringify(r.polygonBarriers),s.polylineBarriers&&=JSON.stringify(r.polylineBarriers),s.restrictionAttributeNames&&=r.restrictionAttributeNames?.join(),s.stops&&=JSON.stringify(r.stops),s.travelMode&&=JSON.stringify(r.travelMode),s}var Y;let y=Y=class extends N.ClonableMixin(w){constructor(e){super(e),this.directionLineType=null,this.directionPointId=null,this.distance=null,this.duration=null,this.fromLevel=null,this.geometry=null,this.objectId=null,this.popupTemplate=null,this.symbol=null,this.toLevel=null,this.type="direction-line"}static fromGraphic(e){return new Y({directionLineType:x.fromJSON(e.attributes.DirectionLineType),directionPointId:e.attributes.DirectionPointID,distance:e.attributes.Meters,duration:e.attributes.Minutes,fromLevel:e.attributes.FromLevel??null,geometry:e.geometry,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,symbol:e.symbol,toLevel:e.attributes.ToLevel??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionLineType:this.directionLineType!=null?x.toJSON(this.directionLineType):null,DirectionPointID:this.directionPointId,Meters:this.distance,Minutes:this.duration};return this.fromLevel!=null&&(e.FromLevel=this.fromLevel),this.toLevel!=null&&(e.ToLevel=this.toLevel),new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};y.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"DirectionLineType",alias:"Line Type",type:"esriFieldTypeInteger"},{name:"DirectionPointID",alias:"Direction Point ID",type:"esriFieldTypeInteger"},{name:"FromLevel",alias:"From Level",type:"esriFieldTypeInteger"},{name:"Meters",alias:"Meters",type:"esriFieldTypeDouble"},{name:"Minutes",alias:"Minutes",type:"esriFieldTypeDouble"},{name:"ToLevel",alias:"To Level",type:"esriFieldTypeInteger"}],t([i({type:x.apiValues,json:{read:{source:"attributes.DirectionLineType",reader:x.read}}})],y.prototype,"directionLineType",void 0),t([i({json:{read:{source:"attributes.DirectionPointID"}}})],y.prototype,"directionPointId",void 0),t([i({json:{read:{source:"attributes.Meters"}}})],y.prototype,"distance",void 0),t([i({json:{read:{source:"attributes.Minutes"}}})],y.prototype,"duration",void 0),t([i({json:{read:{source:"attributes.FromLevel"}}})],y.prototype,"fromLevel",void 0),t([i({type:R})],y.prototype,"geometry",void 0),t([i({json:{read:{source:"attributes.ObjectID"}}})],y.prototype,"objectId",void 0),t([i({type:j})],y.prototype,"popupTemplate",void 0),t([i({types:F})],y.prototype,"symbol",void 0),t([i({json:{read:{source:"attributes.ToLevel"}}})],y.prototype,"toLevel",void 0),t([i({readOnly:!0,json:{read:!1}})],y.prototype,"type",void 0),y=Y=t([f("esri.rest.support.DirectionLine")],y);const ue=y;var X;let u=X=class extends N.ClonableMixin(w){constructor(e){super(e),this.alternateName=null,this.arrivalTime=null,this.arrivalTimeOffset=null,this.azimuth=null,this.branchName=null,this.directionPointType=null,this.displayText=null,this.exitName=null,this.geometry=null,this.intersectingName=null,this.level=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sequence=null,this.shortVoiceInstruction=null,this.stopId=null,this.symbol=null,this.towardName=null,this.type="direction-point",this.voiceInstruction=null}readArrivalTime(e,r){return r.attributes.ArrivalTime!=null?new Date(r.attributes.ArrivalTime):null}static fromGraphic(e){return new X({alternateName:e.attributes.AlternateName??null,arrivalTime:e.attributes.ArrivalTime!=null?new Date(e.attributes.ArrivalTime):null,arrivalTimeOffset:e.attributes.ArrivalUTCOffset??null,azimuth:e.attributes.Azimuth??null,branchName:e.attributes.BranchName??null,directionPointType:B.fromJSON(e.attributes.DirectionPointType),displayText:e.attributes.DisplayText??null,exitName:e.attributes.ExitName??null,geometry:e.geometry,intersectingName:e.attributes.IntersectingName??null,level:e.attributes.Level??null,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,sequence:e.attributes.Sequence,shortVoiceInstruction:e.attributes.ShortVoiceInstruction??null,stopId:e.attributes.StopID??null,symbol:e.symbol,towardName:e.attributes.TowardName??null,voiceInstruction:e.attributes.VoiceInstruction??null})}toGraphic(){const e={ObjectID:this.objectId,DirectionPointType:this.directionPointType!=null?B.toJSON(this.directionPointType):null,Sequence:this.sequence,StopID:this.stopId};return this.alternateName!=null&&(e.AlternateName=this.alternateName),this.arrivalTime!=null&&(e.ArrivalTime=this.arrivalTime.getTime()),this.arrivalTimeOffset!=null&&(e.ArrivalUTCOffset=this.arrivalTimeOffset),this.azimuth!=null&&(e.Azimuth=this.azimuth),this.branchName!=null&&(e.BranchName=this.branchName),this.displayText!=null&&(e.DisplayText=this.displayText),this.exitName!=null&&(e.ExitName=this.exitName),this.intersectingName!=null&&(e.IntersectingName=this.intersectingName),this.level!=null&&(e.Level=this.level),this.name!=null&&(e.Name=this.name),this.shortVoiceInstruction!=null&&(e.ShortVoiceInstruction=this.shortVoiceInstruction),this.towardName!=null&&(e.TowardName=this.towardName),this.voiceInstruction!=null&&(e.VoiceInstruction=this.voiceInstruction),new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};u.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AlternateName",alias:"Alternative Name",type:"esriFieldTypeString"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time Offset",type:"esriFieldTypeInteger"},{name:"Azimuth",alias:"Azimuth",type:"esriFieldTypeDouble"},{name:"BranchName",alias:"Branch Name",type:"esriFieldTypeString"},{name:"DirectionPointType",alias:"Directions Point Type",type:"esriFieldTypeInteger"},{name:"DisplayText",alias:"Display Text",type:"esriFieldTypeString"},{name:"ExitName",alias:"Exit Name",type:"esriFieldTypeString"},{name:"IntersectingName",alias:"Intersecting Name",type:"esriFieldTypeString"},{name:"Level",alias:"Level",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ShortVoiceInstruction",alias:"Short Voice Instruction",type:"esriFieldTypeString"},{name:"StopID",alias:"Stop ID",type:"esriFieldTypeInteger"},{name:"TowardName",alias:"Toward Name",type:"esriFieldTypeString"},{name:"VoiceInstruction",alias:"Voice Instruction",type:"esriFieldTypeString"}],t([i({json:{read:{source:"attributes.AlternateName"}}})],u.prototype,"alternateName",void 0),t([i({type:Date})],u.prototype,"arrivalTime",void 0),t([d("arrivalTime",["attributes.ArrivalTime"])],u.prototype,"readArrivalTime",null),t([i({json:{read:{source:"attributes.ArrivalUTCOffset"}}})],u.prototype,"arrivalTimeOffset",void 0),t([i({json:{read:{source:"attributes.Azimuth"}}})],u.prototype,"azimuth",void 0),t([i({json:{read:{source:"attributes.BranchName"}}})],u.prototype,"branchName",void 0),t([i({type:B.apiValues,json:{read:{source:"attributes.DirectionPointType",reader:B.read}}})],u.prototype,"directionPointType",void 0),t([i({json:{read:{source:"attributes.DisplayText"}}})],u.prototype,"displayText",void 0),t([i({json:{read:{source:"attributes.ExitName"}}})],u.prototype,"exitName",void 0),t([i({type:q})],u.prototype,"geometry",void 0),t([i({json:{read:{source:"attributes.IntersectingName"}}})],u.prototype,"intersectingName",void 0),t([i({json:{read:{source:"attributes.Level"}}})],u.prototype,"level",void 0),t([i({json:{read:{source:"attributes.Name"}}})],u.prototype,"name",void 0),t([i({json:{read:{source:"attributes.ObjectID"}}})],u.prototype,"objectId",void 0),t([i({type:j})],u.prototype,"popupTemplate",void 0),t([i({json:{read:{source:"attributes.Sequence"}}})],u.prototype,"sequence",void 0),t([i({json:{read:{source:"attributes.ShortVoiceInstruction"}}})],u.prototype,"shortVoiceInstruction",void 0),t([i({json:{read:{source:"attributes.StopID"}}})],u.prototype,"stopId",void 0),t([i({types:F})],u.prototype,"symbol",void 0),t([i({json:{read:{source:"attributes.TowardName"}}})],u.prototype,"towardName",void 0),t([i({readOnly:!0,json:{read:!1}})],u.prototype,"type",void 0),t([i({json:{read:{source:"attributes.VoiceInstruction"}}})],u.prototype,"voiceInstruction",void 0),u=X=t([f("esri.rest.support.DirectionPoint")],u);const pe=u;var $;let p=$=class extends N.ClonableMixin(w){constructor(e){super(e),this.addedCost=null,this.barrierType=null,this.costs=null,this.curbApproach=null,this.fullEdge=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.sideOfEdge=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.type="point-barrier"}readCosts(e,r){return S(r.attributes,"Attr_")}writeCosts(e,r){z(e,r,"Attr_")}static fromGraphic(e){return new $({addedCost:e.attributes.AddedCost??null,barrierType:e.attributes.BarrierType!=null?T.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?M(JSON.parse(e.attributes.Costs)):null,curbApproach:e.attributes.CurbApproach!=null?c.fromJSON(e.attributes.CurbApproach):null,fullEdge:e.attributes.FullEdge!=null?L.fromJSON(e.attributes.FullEdge):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,status:e.attributes.Status!=null?D.fromJSON(e.attributes.Status):null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,AddedCost:this.addedCost,BarrierType:this.barrierType!=null?T.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(U(this.costs)):null,CurbApproach:this.curbApproach!=null?c.toJSON(this.curbApproach):null,FullEdge:this.fullEdge!=null?L.toJSON(this.fullEdge):null,Name:this.name,Status:this.status!=null?D.toJSON(this.status):null};return new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};p.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AddedCost",alias:"Added Cost",type:"esriFieldTypeDouble"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"FullEdge",alias:"Full Edge",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"}],t([i()],p.prototype,"addedCost",void 0),t([i({type:T.apiValues,json:{name:"attributes.BarrierType",read:{reader:T.read},write:{writer:T.write}}})],p.prototype,"barrierType",void 0),t([i()],p.prototype,"costs",void 0),t([d("costs",["attributes"])],p.prototype,"readCosts",null),t([I("costs")],p.prototype,"writeCosts",null),t([i({type:c.apiValues,json:{read:{source:"attributes.CurbApproach",reader:c.read}}})],p.prototype,"curbApproach",void 0),t([i({type:L.apiValues,json:{name:"attributes.FullEdge",read:{reader:L.read},write:{writer:L.write}}})],p.prototype,"fullEdge",void 0),t([i({type:q,json:{write:!0}})],p.prototype,"geometry",void 0),t([i({json:{name:"attributes.Name"}})],p.prototype,"name",void 0),t([i({json:{name:"attributes.ObjectID"}})],p.prototype,"objectId",void 0),t([i({type:j})],p.prototype,"popupTemplate",void 0),t([i({type:P.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:P.read}}})],p.prototype,"sideOfEdge",void 0),t([i({json:{read:{source:"attributes.SourceID"}}})],p.prototype,"sourceId",void 0),t([i({json:{read:{source:"attributes.SourceOID"}}})],p.prototype,"sourceOid",void 0),t([i({type:D.apiValues,json:{read:{source:"attributes.Status",reader:D.read}}})],p.prototype,"status",void 0),t([i({types:F})],p.prototype,"symbol",void 0),t([i({readOnly:!0,json:{read:!1}})],p.prototype,"type",void 0),p=$=t([f("esri.rest.support.PointBarrier")],p);const de=p;var Z;let h=Z=class extends N.ClonableMixin(w){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polygon-barrier"}readCosts(e,r){return S(r.attributes,"Attr_")}writeCosts(e,r){z(e,r,"Attr_")}static fromGraphic(e){return new Z({barrierType:e.attributes.BarrierType!=null?T.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?M(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:this.barrierType!=null?T.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(U(this.costs)):null,Name:this.name??null,ScaleFactor:this.scaleFactor??null};return new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};h.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],t([i({type:T.apiValues,json:{name:"attributes.BarrierType",read:{reader:T.read},write:{writer:T.write}}})],h.prototype,"barrierType",void 0),t([i()],h.prototype,"costs",void 0),t([d("costs",["attributes"])],h.prototype,"readCosts",null),t([I("costs")],h.prototype,"writeCosts",null),t([i({type:be,json:{write:!0}})],h.prototype,"geometry",void 0),t([i({json:{name:"attributes.Name"}})],h.prototype,"name",void 0),t([i({json:{name:"attributes.ObjectID"}})],h.prototype,"objectId",void 0),t([i({type:j})],h.prototype,"popupTemplate",void 0),t([i()],h.prototype,"scaleFactor",void 0),t([i({types:F})],h.prototype,"symbol",void 0),t([i({readOnly:!0,json:{read:!1}})],h.prototype,"type",void 0),h=Z=t([f("esri.rest.support.PolygonBarrier")],h);const me=h;var Q;let b=Q=class extends N.ClonableMixin(w){constructor(e){super(e),this.barrierType=null,this.costs=null,this.geometry=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.scaleFactor=null,this.symbol=null,this.type="polyline-barrier"}readCosts(e,r){return S(r.attributes,"Attr_")}static fromGraphic(e){return new Q({barrierType:e.attributes.BarrierType!=null?T.fromJSON(e.attributes.BarrierType):null,costs:e.attributes.Costs!=null?M(JSON.parse(e.attributes.Costs)):null,geometry:e.geometry,name:e.attributes.Name??null,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,scaleFactor:e.attributes.ScaleFactor??null,symbol:e.symbol})}toGraphic(){const e={ObjectID:this.objectId,BarrierType:this.barrierType!=null?T.toJSON(this.barrierType):null,Costs:this.costs!=null?JSON.stringify(U(this.costs)):null,Name:this.name,ScaleFactor:this.scaleFactor};return new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};b.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"BarrierType",alias:"Barrier Type",type:"esriFieldTypeInteger"},{name:"Costs",alias:"Costs",type:"esriFieldTypeString"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"ScaleFactor",alias:"Scale Factor",type:"esriFieldTypeDouble"}],t([i({type:T.apiValues,json:{read:{source:"attributes.BarrierType",reader:T.read}}})],b.prototype,"barrierType",void 0),t([i()],b.prototype,"costs",void 0),t([d("costs",["attributes"])],b.prototype,"readCosts",null),t([i({type:R,json:{write:!0}})],b.prototype,"geometry",void 0),t([i({json:{name:"attributes.Name"}})],b.prototype,"name",void 0),t([i({json:{name:"attributes.ObjectID"}})],b.prototype,"objectId",void 0),t([i({type:j})],b.prototype,"popupTemplate",void 0),t([i()],b.prototype,"scaleFactor",void 0),t([i({types:F})],b.prototype,"symbol",void 0),t([i({readOnly:!0,json:{read:!1}})],b.prototype,"type",void 0),b=Q=t([f("esri.rest.support.PolylineBarrier")],b);const ce=b;let v=class extends w{constructor(e){super(e),this.accumulateAttributes=null,this.directionsLanguage=null,this.findBestSequence=null,this.preserveFirstStop=null,this.preserveLastStop=null,this.startTimeIsUTC=null,this.timeWindowsAreUTC=null,this.travelMode=null}readAccumulateAttributes(e){return e==null?null:e.map(r=>A.fromJSON(r))}writeAccumulateAttributes(e,r,s){e?.length&&(r[s]=e.map(l=>A.toJSON(l)))}};t([i({type:[String],json:{name:"accumulateAttributeNames",write:!0}})],v.prototype,"accumulateAttributes",void 0),t([d("accumulateAttributes")],v.prototype,"readAccumulateAttributes",null),t([I("accumulateAttributes")],v.prototype,"writeAccumulateAttributes",null),t([i({type:String,json:{write:!0}})],v.prototype,"directionsLanguage",void 0),t([i({type:Boolean,json:{write:!0}})],v.prototype,"findBestSequence",void 0),t([i({type:Boolean,json:{write:!0}})],v.prototype,"preserveFirstStop",void 0),t([i({type:Boolean,json:{write:!0}})],v.prototype,"preserveLastStop",void 0),t([i({type:Boolean,json:{write:!0}})],v.prototype,"startTimeIsUTC",void 0),t([i({type:Boolean,json:{write:!0}})],v.prototype,"timeWindowsAreUTC",void 0),t([i({type:le,json:{write:!0}})],v.prototype,"travelMode",void 0),v=t([f("esri.rest.support.RouteSettings")],v);const ye=v;var ee;let o=ee=class extends N.ClonableMixin(w){constructor(e){super(e),this.analysisSettings=null,this.endTime=null,this.endTimeOffset=null,this.firstStopId=null,this.geometry=null,this.lastStopId=null,this.messages=null,this.name=null,this.objectId=null,this.popupTemplate=null,this.startTime=null,this.startTimeOffset=null,this.stopCount=null,this.symbol=null,this.totalCosts=null,this.totalDistance=null,this.totalDuration=null,this.totalLateDuration=null,this.totalViolations=null,this.totalWait=null,this.totalWaitDuration=null,this.type="route-info",this.version="1.0.0"}readEndTime(e,r){return r.attributes.EndTimeUTC!=null?new Date(r.attributes.EndTimeUTC):null}readEndTimeOffset(e,r){return W(r.attributes.EndTime,r.attributes.EndTimeUTC)}readStartTime(e,r){return r.attributes.StartTimeUTC!=null?new Date(r.attributes.StartTimeUTC):null}readStartTimeOffset(e,r){return W(r.attributes.StartTime,r.attributes.StartTimeUTC)}readTotalCosts(e,r){return S(r.attributes,"Total_")}readTotalViolations(e,r){return S(r.attributes,"TotalViolation_")}readTotalWait(e,r){return S(r.attributes,"TotalWait_")}static fromGraphic(e){return new ee({analysisSettings:e.attributes.AnalysisSettings!=null?ye.fromJSON(JSON.parse(e.attributes.AnalysisSettings)):null,endTime:e.attributes.EndTime!=null?new Date(e.attributes.EndTime):null,endTimeOffset:e.attributes.EndUTCOffset??null,geometry:e.geometry,messages:e.attributes.Messages!=null?JSON.parse(e.attributes.Messages):null,name:e.attributes.RouteName,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,startTime:e.attributes.StartTime!=null?new Date(e.attributes.StartTime):null,startTimeOffset:e.attributes.StartUTCOffset??null,symbol:e.symbol,totalCosts:e.attributes.TotalCosts!=null?M(JSON.parse(e.attributes.TotalCosts)):null,totalDistance:e.attributes.TotalMeters??null,totalDuration:e.attributes.TotalMinutes??null,totalLateDuration:e.attributes.TotalLateMinutes??null,totalWaitDuration:e.attributes.TotalWaitMinutes??null,version:e.attributes.Version})}toGraphic(){const e={ObjectID:this.objectId,AnalysisSettings:this.analysisSettings!=null?JSON.stringify(this.analysisSettings.toJSON()):null,EndTime:this.endTime!=null?this.endTime.getTime():null,EndUTCOffset:this.endTimeOffset,Messages:this.messages!=null?JSON.stringify(this.messages):null,RouteName:this.name,StartTime:this.startTime!=null?this.startTime.getTime():null,StartUTCOffset:this.startTimeOffset,TotalCosts:this.totalCosts!=null?JSON.stringify(U(this.totalCosts)):null,TotalLateMinutes:this.totalLateDuration,TotalMeters:this.totalDistance,TotalMinutes:this.totalDuration,TotalWaitMinutes:this.totalWaitDuration,Version:this.version};return new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};o.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"AnalysisSettings",alias:"Analysis Settings",type:"esriFieldTypeString"},{name:"EndTime",alias:"End Time",type:"esriFieldTypeDate"},{name:"EndUTCOffset",alias:"End Time Offset",type:"esriFieldTypeInteger"},{name:"Messages",alias:"Messages",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"StartTime",alias:"Start Time",type:"esriFieldTypeDate"},{name:"StartUTCOffset",alias:"Start Time Offset",type:"esriFieldTypeInteger"},{name:"TotalCosts",alias:"Total Costs",type:"esriFieldTypeString"},{name:"TotalLateMinutes",alias:"Total Late Minutes",type:"esriFieldTypeDouble"},{name:"TotalMeters",alias:"Total Meters",type:"esriFieldTypeDouble"},{name:"TotalMinutes",alias:"Total Minutes",type:"esriFieldTypeDouble"},{name:"TotalWaitMinutes",alias:"Total Wait Minutes",type:"esriFieldTypeDouble"},{name:"Version",alias:"Version",type:"esriFieldTypeString"}],t([i()],o.prototype,"analysisSettings",void 0),t([i({type:Date})],o.prototype,"endTime",void 0),t([d("endTime",["attributes.EndTimeUTC"])],o.prototype,"readEndTime",null),t([i()],o.prototype,"endTimeOffset",void 0),t([d("endTimeOffset",["attributes.EndTime","attributes.EndTimeUTC"])],o.prototype,"readEndTimeOffset",null),t([i({json:{read:{source:"attributes.FirstStopID"}}})],o.prototype,"firstStopId",void 0),t([i({type:R})],o.prototype,"geometry",void 0),t([i({json:{read:{source:"attributes.LastStopID"}}})],o.prototype,"lastStopId",void 0),t([i()],o.prototype,"messages",void 0),t([i({json:{read:{source:"attributes.Name"}}})],o.prototype,"name",void 0),t([i({json:{read:{source:"attributes.ObjectID"}}})],o.prototype,"objectId",void 0),t([i({type:j})],o.prototype,"popupTemplate",void 0),t([i({type:Date})],o.prototype,"startTime",void 0),t([d("startTime",["attributes.StartTimeUTC"])],o.prototype,"readStartTime",null),t([i()],o.prototype,"startTimeOffset",void 0),t([d("startTimeOffset",["attributes.StartTime","attributes.StartTimeUTC"])],o.prototype,"readStartTimeOffset",null),t([i({json:{read:{source:"attributes.StopCount"}}})],o.prototype,"stopCount",void 0),t([i({types:F})],o.prototype,"symbol",void 0),t([i()],o.prototype,"totalCosts",void 0),t([d("totalCosts",["attributes"])],o.prototype,"readTotalCosts",null),t([i()],o.prototype,"totalDistance",void 0),t([i()],o.prototype,"totalDuration",void 0),t([i()],o.prototype,"totalLateDuration",void 0),t([i()],o.prototype,"totalViolations",void 0),t([d("totalViolations",["attributes"])],o.prototype,"readTotalViolations",null),t([i()],o.prototype,"totalWait",void 0),t([d("totalWait",["attributes"])],o.prototype,"readTotalWait",null),t([i()],o.prototype,"totalWaitDuration",void 0),t([i({readOnly:!0,json:{read:!1}})],o.prototype,"type",void 0),t([i()],o.prototype,"version",void 0),o=ee=t([f("esri.rest.support.RouteInfo")],o);const he=o;var te;let a=te=class extends N.ClonableMixin(w){constructor(e){super(e),this.arriveCurbApproach=null,this.arriveTime=null,this.arriveTimeOffset=null,this.bearing=null,this.bearingTol=null,this.cumulativeCosts=null,this.cumulativeDistance=null,this.cumulativeDuration=null,this.curbApproach=null,this.departCurbApproach=null,this.departTime=null,this.departTimeOffset=null,this.distanceToNetworkInMeters=null,this.geometry=null,this.lateDuration=null,this.locationType=null,this.name=null,this.navLatency=null,this.objectId=null,this.popupTemplate=null,this.posAlong=null,this.routeName=null,this.serviceCosts=null,this.serviceDistance=null,this.serviceDuration=null,this.sequence=null,this.sideOfEdge=null,this.snapX=null,this.snapY=null,this.snapZ=null,this.sourceId=null,this.sourceOid=null,this.status=null,this.symbol=null,this.timeWindowEnd=null,this.timeWindowEndOffset=null,this.timeWindowStart=null,this.timeWindowStartOffset=null,this.type="stop",this.violations=null,this.waitDuration=null,this.wait=null}readArriveTimeOffset(e,r){return W(r.attributes.ArriveTime,r.attributes.ArriveTimeUTC)}readCumulativeCosts(e,r){return S(r.attributes,"Cumul_")}readDepartTimeOffset(e,r){return W(r.attributes.DepartTime,r.attributes.DepartTimeUTC)}readServiceCosts(e,r){return S(r.attributes,"Attr_")}writeServiceCosts(e,r){z(e,r,"Attr_")}writeTimeWindowEnd(e,r){e!=null&&(r.attributes||(r.attributes={}),r.attributes.TimeWindowEnd=e.getTime())}writeTimeWindowStart(e,r){e!=null&&(r.attributes||(r.attributes={}),r.attributes.TimeWindowStart=e.getTime())}readViolations(e,r){return S(r.attributes,"Violation_")}readWait(e,r){return S(r.attributes,"Wait_")}static fromGraphic(e){return new te({arriveCurbApproach:e.attributes.ArrivalCurbApproach!=null?c.fromJSON(e.attributes.ArrivalCurbApproach):null,arriveTime:e.attributes.ArrivalTime!=null?new Date(e.attributes.ArrivalTime):null,arriveTimeOffset:e.attributes.ArrivalUTCOffset,cumulativeCosts:e.attributes.CumulativeCosts!=null?M(JSON.parse(e.attributes.CumulativeCosts)):null,cumulativeDistance:e.attributes.CumulativeMeters??null,cumulativeDuration:e.attributes.CumulativeMinutes??null,curbApproach:e.attributes.CurbApproach!=null?c.fromJSON(e.attributes.CurbApproach):null,departCurbApproach:e.attributes.DepartureCurbApproach!=null?c.fromJSON(e.attributes.DepartureCurbApproach):null,departTime:e.attributes.DepartureTime!=null?new Date(e.attributes.DepartureTime):null,departTimeOffset:e.attributes.DepartureUTCOffset??null,geometry:e.geometry,lateDuration:e.attributes.LateMinutes??null,locationType:e.attributes.LocationType!=null?E.fromJSON(e.attributes.LocationType):null,name:e.attributes.Name,objectId:e.attributes.ObjectID??e.attributes.__OBJECTID,popupTemplate:e.popupTemplate,routeName:e.attributes.RouteName,sequence:e.attributes.Sequence??null,serviceCosts:e.attributes.ServiceCosts!=null?M(JSON.parse(e.attributes.ServiceCosts)):null,serviceDistance:e.attributes.ServiceMeters??null,serviceDuration:e.attributes.ServiceMinutes??null,status:e.attributes.Status!=null?D.fromJSON(e.attributes.Status):null,symbol:e.symbol,timeWindowEnd:e.attributes.TimeWindowEnd!=null?new Date(e.attributes.TimeWindowEnd):null,timeWindowEndOffset:e.attributes.TimeWindowEndUTCOffset??null,timeWindowStart:e.attributes.TimeWindowStart!=null?new Date(e.attributes.TimeWindowStart):null,timeWindowStartOffset:e.attributes.TimeWindowStartUTCOffset??null,waitDuration:e.attributes.WaitMinutes??null})}toGraphic(){const e={ObjectID:this.objectId,ArrivalCurbApproach:this.arriveCurbApproach!=null?c.toJSON(this.arriveCurbApproach):null,ArrivalTime:this.arriveTime!=null?this.arriveTime.getTime():null,ArrivalUTCOffset:this.arriveTimeOffset,CumulativeCosts:this.cumulativeCosts!=null?JSON.stringify(U(this.cumulativeCosts)):null,CumulativeMeters:this.cumulativeDistance,CumulativeMinutes:this.cumulativeDuration,CurbApproach:this.curbApproach!=null?c.toJSON(this.curbApproach):null,DepartureCurbApproach:this.departCurbApproach!=null?c.toJSON(this.departCurbApproach):null,DepartureTime:this.departTime!=null?this.departTime.getTime():null,DepartureUTCOffset:this.departTimeOffset,LateMinutes:this.lateDuration,LocationType:this.locationType!=null?E.toJSON(this.locationType):null,Name:this.name,RouteName:this.routeName,Sequence:this.sequence,ServiceCosts:this.serviceCosts!=null?JSON.stringify(U(this.serviceCosts)):null,ServiceMeters:this.serviceDistance,ServiceMinutes:this.serviceDuration,Status:this.status!=null?D.toJSON(this.status):null,TimeWindowEnd:this.timeWindowEnd!=null?this.timeWindowEnd.getTime():null,TimeWindowEndUTCOffset:this.timeWindowEndOffset??this.arriveTimeOffset,TimeWindowStart:this.timeWindowStart!=null?this.timeWindowStart.getTime():null,TimeWindowStartUTCOffset:this.timeWindowStartOffset??this.arriveTimeOffset,WaitMinutes:this.waitDuration};return new C({geometry:this.geometry,attributes:e,symbol:this.symbol,popupTemplate:this.popupTemplate})}};a.fields=[{name:"ObjectID",alias:"ObjectID",type:"esriFieldTypeOID"},{name:"ArrivalCurbApproach",alias:"Arrival Curb Approach",type:"esriFieldTypeInteger"},{name:"ArrivalTime",alias:"Arrival Time",type:"esriFieldTypeDate"},{name:"ArrivalUTCOffset",alias:"Arrival Time",type:"esriFieldTypeInteger"},{name:"CumulativeCosts",alias:"Cumulative Costs",type:"esriFieldTypeString"},{name:"CumulativeMeters",alias:"Cumulative Meters",type:"esriFieldTypeDouble"},{name:"CumulativeMinutes",alias:"Cumulative Minutes",type:"esriFieldTypeDouble"},{name:"CurbApproach",alias:"Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureCurbApproach",alias:"Departure Curb Approach",type:"esriFieldTypeInteger"},{name:"DepartureTime",alias:"Departure Time",type:"esriFieldTypeDate"},{name:"DepartureUTCOffset",alias:"Departure Time",type:"esriFieldTypeInteger"},{name:"LateMinutes",alias:"Minutes Late",type:"esriFieldTypeDouble"},{name:"LocationType",alias:"Location Type",type:"esriFieldTypeInteger"},{name:"Name",alias:"Name",type:"esriFieldTypeString"},{name:"RouteName",alias:"Route Name",type:"esriFieldTypeString"},{name:"Sequence",alias:"Sequence",type:"esriFieldTypeInteger"},{name:"ServiceCosts",alias:"Service Costs",type:"esriFieldTypeString"},{name:"ServiceMeters",alias:"Service Meters",type:"esriFieldTypeDouble"},{name:"ServiceMinutes",alias:"Service Minutes",type:"esriFieldTypeDouble"},{name:"Status",alias:"Status",type:"esriFieldTypeInteger"},{name:"TimeWindowEnd",alias:"Time Window End",type:"esriFieldTypeDate"},{name:"TimeWindowEndUTCOffset",alias:"Time Window End Offset",type:"esriFieldTypeInteger"},{name:"TimeWindowStart",alias:"Time Window Start",type:"esriFieldTypeDate"},{name:"TimeWindowStartUTCOffset",alias:"Time Window Start Offset",type:"esriFieldTypeInteger"},{name:"WaitMinutes",alias:"Minutes Wait",type:"esriFieldTypeDouble"}],t([i({type:c.apiValues,json:{read:{source:"attributes.ArrivalCurbApproach",reader:c.read}}})],a.prototype,"arriveCurbApproach",void 0),t([i({type:Date,json:{read:{source:"attributes.ArriveTimeUTC"}}})],a.prototype,"arriveTime",void 0),t([i()],a.prototype,"arriveTimeOffset",void 0),t([d("arriveTimeOffset",["attributes.ArriveTime","attributes.ArriveTimeUTC"])],a.prototype,"readArriveTimeOffset",null),t([i({json:{name:"attributes.Bearing",read:!1,write:!0}})],a.prototype,"bearing",void 0),t([i({json:{name:"attributes.BearingTol",read:!1,write:!0}})],a.prototype,"bearingTol",void 0),t([i()],a.prototype,"cumulativeCosts",void 0),t([d("cumulativeCosts",["attributes"])],a.prototype,"readCumulativeCosts",null),t([i()],a.prototype,"cumulativeDistance",void 0),t([i()],a.prototype,"cumulativeDuration",void 0),t([i({type:c.apiValues,json:{name:"attributes.CurbApproach",read:{reader:c.read},write:{writer:c.write}}})],a.prototype,"curbApproach",void 0),t([i({type:c.apiValues,json:{read:{source:"attributes.DepartCurbApproach",reader:c.read}}})],a.prototype,"departCurbApproach",void 0),t([i({type:Date,json:{read:{source:"attributes.DepartTimeUTC"}}})],a.prototype,"departTime",void 0),t([i()],a.prototype,"departTimeOffset",void 0),t([d("departTimeOffset",["attributes.DepartTime","attributes.DepartTimeUTC"])],a.prototype,"readDepartTimeOffset",null),t([i({json:{read:{source:"attributes.DistanceToNetworkInMeters"}}})],a.prototype,"distanceToNetworkInMeters",void 0),t([i({type:q,json:{write:!0}})],a.prototype,"geometry",void 0),t([i()],a.prototype,"lateDuration",void 0),t([i({type:E.apiValues,json:{name:"attributes.LocationType",read:{reader:E.read},write:{writer:E.write}}})],a.prototype,"locationType",void 0),t([i({json:{name:"attributes.Name"}})],a.prototype,"name",void 0),t([i({json:{name:"attributes.NavLatency",read:!1,write:!0}})],a.prototype,"navLatency",void 0),t([i({json:{name:"attributes.ObjectID"}})],a.prototype,"objectId",void 0),t([i({type:j})],a.prototype,"popupTemplate",void 0),t([i({json:{read:{source:"attributes.PosAlong"}}})],a.prototype,"posAlong",void 0),t([i({json:{name:"attributes.RouteName"}})],a.prototype,"routeName",void 0),t([i()],a.prototype,"serviceCosts",void 0),t([d("serviceCosts",["attributes"])],a.prototype,"readServiceCosts",null),t([I("serviceCosts")],a.prototype,"writeServiceCosts",null),t([i()],a.prototype,"serviceDistance",void 0),t([i()],a.prototype,"serviceDuration",void 0),t([i({json:{name:"attributes.Sequence"}})],a.prototype,"sequence",void 0),t([i({type:P.apiValues,json:{read:{source:"attributes.SideOfEdge",reader:P.read}}})],a.prototype,"sideOfEdge",void 0),t([i({json:{read:{source:"attributes.SnapX"}}})],a.prototype,"snapX",void 0),t([i({json:{read:{source:"attributes.SnapY"}}})],a.prototype,"snapY",void 0),t([i({json:{read:{source:"attributes.SnapZ"}}})],a.prototype,"snapZ",void 0),t([i({json:{read:{source:"attributes.SourceID"}}})],a.prototype,"sourceId",void 0),t([i({json:{read:{source:"attributes.SourceOID"}}})],a.prototype,"sourceOid",void 0),t([i({type:D.apiValues,json:{read:{source:"attributes.Status",reader:D.read}}})],a.prototype,"status",void 0),t([i({types:F})],a.prototype,"symbol",void 0),t([i({type:Date,json:{name:"attributes.TimeWindowEnd"}})],a.prototype,"timeWindowEnd",void 0),t([I("timeWindowEnd")],a.prototype,"writeTimeWindowEnd",null),t([i()],a.prototype,"timeWindowEndOffset",void 0),t([i({type:Date,json:{name:"attributes.TimeWindowStart"}})],a.prototype,"timeWindowStart",void 0),t([I("timeWindowStart")],a.prototype,"writeTimeWindowStart",null),t([i()],a.prototype,"timeWindowStartOffset",void 0),t([i({readOnly:!0,json:{read:!1}})],a.prototype,"type",void 0),t([i()],a.prototype,"violations",void 0),t([d("violations",["attributes"])],a.prototype,"readViolations",null),t([i()],a.prototype,"waitDuration",void 0),t([i()],a.prototype,"wait",void 0),t([d("wait",["attributes"])],a.prototype,"readWait",null),a=te=t([f("esri.rest.support.Stop")],a);const Te=a,Je=["route-info","direction-line","direction-point","polygon-barrier","polyline-barrier","point-barrier","stop"],V={graphic:null,property:null,oldValue:null,newValue:null};function ie(e){return e instanceof ue||e instanceof pe||e instanceof de||e instanceof me||e instanceof ce||e instanceof he||e instanceof Te}function Pe(e){return G.isCollection(e)&&e.length&&ie(e.at(0))}function Be(e){return Array.isArray(e)&&e.length>0&&ie(e[0])}const xe=new Set(["default"]);let O=class extends Se(De){constructor(){super(...arguments),this._graphics=new G,this._highlightIds=new Map,this._networkFeatureMap=new Map,this._networkGraphicMap=new Map,this._interaction=null,this._loadInteractionPromise=null,this.interactive=!1}get _routeItems(){return new fe({getCollections:()=>this.layer==null||this.destroyed?[]:[this.layer.routeInfo!=null?new G([this.layer.routeInfo]):null,this.layer.directionLines,this.layer.directionPoints,this.layer.polygonBarriers,this.layer.polylineBarriers,this.layer.pointBarriers,this.layer.stops]})}initialize(){this.addHandles(J(()=>{const{interactive:e,suspended:r}=this;return{interactive:e,suspended:r}},({interactive:e,suspended:r})=>{const s=e&&!r;s&&this._getInteractionLoadPromise().then(l=>{l.enabled=this.interactive&&!this.suspended}),this._interaction&&(this._interaction.enabled=s)},ve)),this._updatingHandles.addOnCollectionChange(()=>this._routeItems,e=>this._routeItemsChanged(e),ge)}destroy(){this._networkFeatureMap.clear(),this._networkGraphicMap.clear(),this._graphics.removeAll(),this._get("_routeItems")?.destroy()}attach(){this._createGraphicsView()}detach(){this._destroyGraphicsView(),this._interaction?.enabled&&(this._interaction.enabled=!1)}get selectedNetworkFeatures(){return this._interaction?.selectedNetworkFeatures??null}async create(e){if(this.interactive)return(await this._getInteractionLoadPromise()).create(e)}async fetchPopupFeaturesAtLocation(e,r){return this._graphicsView.hitTest(e).filter(({popupTemplate:s})=>!!s)}highlight(e){let r;r=ie(e)?[this._getNetworkFeatureUid(e)]:Be(e)?e.map(l=>this._getNetworkFeatureUid(l)):Pe(e)?e.map(l=>this._getNetworkFeatureUid(l)).toArray():[e.uid];const s=r.filter(H);return s.length?(this._addHighlight(s),re(()=>this._removeHighlight(s))):re()}async hitTest(e,r){if(this.suspended)return null;const s=this._graphicsView.hitTest(e).filter(H).map(g=>this._networkGraphicMap.get(g));if(!s.length)return null;const{layer:l}=this;return s.reverse().map(g=>({type:"route",layer:l,mapPoint:e,networkFeature:g}))}isUpdating(){return this._graphicsView.updating}moveEnd(){}remove(e){this._interaction?.remove(e)}update(e){this._graphicsView.processUpdate(e)}viewChange(){this._graphicsView.viewChange()}_addHighlight(e){for(const r of e)if(this._highlightIds.has(r)){const s=this._highlightIds.get(r);this._highlightIds.set(r,s+1)}else this._highlightIds.set(r,1);this._updateHighlight()}_createGraphic(e){const r=e.toGraphic();return r.layer=this.layer,r.sourceLayer=this.layer,r}_createGraphicsView(){const e=this.view,r=()=>this.requestUpdate(),s=new we(e.featuresTilingScheme);this._graphicsView=new Ne({container:s,graphics:this._graphics,requestUpdateCallback:r,view:e}),this.container.addChild(s),this._updateHighlight()}_destroyGraphicsView(){this.container.removeChild(this._graphicsView.container),this._graphicsView.destroy()}_getDrawOrder(e){const r=this._networkGraphicMap.get(e);return Je.indexOf(r.type)}_getInteractionLoadPromise(){return this._loadInteractionPromise||(this._loadInteractionPromise=this._loadInteraction(),this._updatingHandles.addPromise(this._loadInteractionPromise)),this._loadInteractionPromise}_getNetworkFeatureUid(e){return this._networkFeatureMap.has(e)?this._networkFeatureMap.get(e).uid:null}async _loadInteraction(){const{layer:e,view:r}=this,{RouteLayerInteraction:s}=await import("./RouteLayerInteraction-BMnSFGWR.js");return this._interaction=new s({view:r,layer:e}),this._interaction}_removeHighlight(e){for(const r of e)if(this._highlightIds.has(r)){const s=this._highlightIds.get(r)-1;s===0?this._highlightIds.delete(r):this._highlightIds.set(r,s)}this._updateHighlight()}_routeItemsChanged(e){if(e.removed.length){this._graphics.removeMany(e.removed.map(r=>{const s=this._networkFeatureMap.get(r);return this._networkFeatureMap.delete(r),this._networkGraphicMap.delete(s),s}));for(const r of e.removed)this.removeHandles(r)}if(e.added.length){this._graphics.addMany(e.added.map(r=>{const s=this._createGraphic(r);return s.symbol==null?null:(this._networkFeatureMap.set(r,s),this._networkGraphicMap.set(s,r),s)}).filter(H));for(const r of e.added)this.addHandles([J(()=>r.geometry,(s,l)=>{this._updateGraphic(r,"geometry",s,l)}),J(()=>r.symbol,(s,l)=>{this._updateGraphic(r,"symbol",s,l)}),J(()=>r.popupTemplate,s=>{this._networkFeatureMap.has(r)&&(this._networkFeatureMap.get(r).popupTemplate=s)})],r);this._graphics.sort((r,s)=>this._getDrawOrder(r)-this._getDrawOrder(s))}}_updateGraphic(e,r,s,l){if(!this._networkFeatureMap.has(e)){const k=this._createGraphic(e);return this._networkFeatureMap.set(e,k),this._networkGraphicMap.set(k,e),void this._graphics.add(k)}const g=this._networkFeatureMap.get(e);g[r]=s,V.graphic=g,V.property=r,V.oldValue=l,V.newValue=s,this._graphicsView.graphicUpdateHandler(V)}_updateHighlight(){const e=Array.from(this._highlightIds.keys()),r=this._getHighlightBits(xe.values());this._graphicsView.setHighlight(e.map(s=>({objectId:s,highlightFlags:r})))}};t([i()],O.prototype,"_graphics",void 0),t([i()],O.prototype,"_routeItems",null),t([i()],O.prototype,"_interaction",void 0),t([i()],O.prototype,"interactive",void 0),t([i({readOnly:!0})],O.prototype,"selectedNetworkFeatures",null),O=t([f("esri.views.2d.layers.RouteLayerView2D")],O);const Re=O,qe=Object.freeze(Object.defineProperty({__proto__:null,default:Re},Symbol.toStringTag,{value:"Module"}));export{A as D,ke as M,Ee as R,he as S,me as T,ne as U,de as a,Le as b,Ie as c,le as d,W as e,K as f,je as g,Me as h,ue as i,ce as j,ye as k,Fe as l,oe as m,Ce as n,Ve as o,qe as p,We as q,ae as r,Oe as s,Ae as t,Te as w,pe as y};
