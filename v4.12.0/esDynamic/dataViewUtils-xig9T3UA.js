import{s as I,n as $}from"./main-DnzmeE4U.js";import{U as f,C as a}from"./enums-DBi1-Mm2.js";import{s as w}from"./getDataTypeBytes-HSdrWtlL.js";import{t as P}from"./VertexElementDescriptor-BAy1DPb3.js";import{i as L}from"./BoundingBox-D9JxeQeA.js";const S=()=>$.getLogger("esri.views.2d.engine.webgl.Utils");function Y(e){switch(e){case f.UNSIGNED_BYTE:return 1;case f.UNSIGNED_SHORT_4_4_4_4:return 2;case f.FLOAT:return 4;default:return void S().error(new I("webgl-utils",`Unable to handle type ${e}`))}}function B(e){switch(e){case f.UNSIGNED_BYTE:return Uint8Array;case f.UNSIGNED_SHORT_4_4_4_4:return Uint16Array;case f.FLOAT:return Float32Array;default:return void S().error(new I("webgl-utils",`Unable to handle type ${e}`))}}function R(e){const t=new Map;for(const r in e){const s=e[r];let o=0;t.set(r,s.map(n=>{const i=new P(n.name,n.count,n.type,o,0,n.normalized||!1);return o+=n.count*w(n.type),i})),t.get(r).forEach(n=>n.stride=o)}return t}const x=e=>{const t=new Map;for(const r in e)for(const s of e[r])t.set(s.name,s.location);return t},b=e=>{const t={};return e.forEach((r,s)=>t[s]=r?.length?r[0].stride:0),t},h=new Map,O=(e,t)=>{if(!h.has(e)){const r=R(t),s={strides:b(r),bufferLayouts:r,attributes:x(t)};h.set(e,s)}return h.get(e)},k=e=>e.includes("data:image/svg+xml");function C(e){const t=[];for(let r=0;r<e.length;r++)t.push(e.charCodeAt(r));return t}function v(e){if(e==null)return"";const{type:t}=e;switch(t){case"CIMMarkerPlacementAlongLineRandomSize":return`${t}-${e.seed}-${e.randomization}`;case"CIMMarkerPlacementAlongLineVariableSize":return`${t}-${e.maxRandomOffset}-${e.numberOfSizes}-${e.seed}-${e.variationMethod}`;case"CIMMarkerPlacementAtExtremities":return`${t}-${e.extremityPlacement}-${e.offsetAlongLine}`;case"CIMMarkerPlacementAtRatioPositions":return`${t}-${e.beginPosition}-${e.endPosition}-${e.flipFirst}-${JSON.stringify(e.positionArray)}`;case"CIMMarkerPlacementAtMeasuredUnits":return`${t}-${e.interval}-${e.skipMarkerRate}-${e.placeAtExtremities}`;case"CIMMarkerPlacementInsidePolygon":return`${t}-${e.stepX}-${e.stepY}-${e.randomness}-${e.gridType}-${e.seed}-${e.shiftOddRows}`;case"CIMMarkerPlacementOnLine":return`${t}-${e.relativeTo}-${e.startPointOffset}`;case"CIMMarkerPlacementOnVertices":return`${t}-${e.placeOnControlPoints}-${e.placeOnEndPoints}-${e.placeOnRegularVertices}`;case"CIMMarkerPlacementPolygonCenter":return`${t}-${e.method}`;default:return`${t}`}}let l=class T{constructor(t,r,s,o,n,i,c){this.instanceId=t,this.textureKey=r,this.indexStart=s,this.indexCount=o,this.vertexStart=n,this.vertexCount=i,this.overlaps=c}updateBaseOffsets(t){this.vertexStart+=t.vertexFrom,this.indexStart+=t.indexFrom}clone(){return new T(this.instanceId,this.textureKey,this.indexStart,this.indexCount,this.vertexStart,this.vertexCount,this.overlaps)}static write(t,r,s,o,n,i,c,u){t.push(r),t.push(s),t.push(o),t.push(n),t.push(i),t.push(c),t.push(u)}serialize(t){return t.push(this.instanceId),t.push(this.textureKey),t.push(this.indexStart),t.push(this.indexCount),t.push(this.vertexStart),t.push(this.vertexCount),t.push(this.overlaps),t}static deserialize(t){const r=t.readInt32(),s=t.readInt32(),o=t.readInt32(),n=t.readInt32(),i=t.readInt32(),c=t.readInt32(),u=t.readInt32();return new T(r,s,o,n,i,c,u)}};l.byteSizeHint=7*Uint32Array.BYTES_PER_ELEMENT;function _(e,t){if(t!==null){e.push(t.length);for(const r of t)r.serialize(e);return e}e.push(0)}function d(e,t,r){const s=e.readInt32(),o=new Array(s);for(let n=0;n<o.length;n++)o[n]=t.deserialize(e,r);return o}let y=class U{constructor(t,r){this.id=t,this.sortKey=r,this.records=[]}serialize(t){return t.push(this.id),t.writeF32(this.sortKey),_(t,this.records),t}static deserialize(t){const r=t.readInt32(),s=t.readF32(),o=new U(r,s);return o.records=d(t,l)??[],o}};y.byteSizeHint=2*Uint32Array.BYTES_PER_ELEMENT+l.byteSizeHint;class p{constructor(t,r,s,o,n,i,c,u,E=[]){this.entityTexel=t,this.anchorX=r,this.anchorY=s,this.directionX=o,this.directionY=n,this.maxScale=i,this.minScale=c,this.referenceBounds=u,this.bounds=E}serialize(t){t.push(this.entityTexel),t.writeF32(this.anchorX),t.writeF32(this.anchorY),t.writeF32(this.directionX),t.writeF32(this.directionY),t.writeF32(this.maxScale),t.writeF32(this.minScale),this.referenceBounds===null?(t.writeF32(0),t.writeF32(0),t.writeF32(0)):(t.writeF32(this.referenceBounds.size),t.writeF32(this.referenceBounds.offsetX),t.writeF32(this.referenceBounds.offsetY)),_(t,this.bounds)}static deserialize(t){const r=t.readInt32(),s=t.readF32(),o=t.readF32(),n=t.readF32(),i=t.readF32(),c=t.readF32(),u=t.readF32(),E=t.readF32(),m=t.readF32(),A=t.readF32(),g=d(t,L)??[];return new p(r,s,o,n,i,c,u,{size:E,offsetX:m,offsetY:A},g)}}const F=new Float32Array(1),z=new Uint32Array(F.buffer);function D(e){return F[0]=e,z[0]}function G(e,t){return 65535&e|t<<16}function M(e){const t=D(e),r=t>>>31;let s=t>>>23&255,o=8388607&t;return s-=127,s>15?r<<15|31744:s<-25?0:(s<-14&&(o+=8388608,o/=2**(-14-s),s=-15),s+=15,o/=8192,o=H(o,1023),r<<15|s<<10|o)}function H(e,t){const r=Math.floor(e),s=e-r;return r<t&&(s>.5||s===.5&&r%2==1)?r+1:r}function N(e){let t=e>>>15,r=e>>10&31,s=1023&e;return t=t?-1:1,r-=15,s/=1024,r>-15?s+=1:r=-14,t*2**r*s}function X(e,t,r,s){const o=r.packPrecisionFactor??1;switch(r.type){case a.BYTE:if(r.count===1)e.setInt8(s+r.offset,t*o);else for(let n=0;n<r.count;n++){const i=n*Int8Array.BYTES_PER_ELEMENT;e.setInt8(s+r.offset+i,t[n]*o)}break;case a.UNSIGNED_BYTE:if(r.count===1)e.setUint8(s+r.offset,t*o);else for(let n=0;n<r.count;n++){const i=n*Uint8Array.BYTES_PER_ELEMENT;e.setUint8(s+r.offset+i,t[n]*o)}break;case a.SHORT:if(r.count===1)e.setInt16(s+r.offset,t*o,!0);else for(let n=0;n<r.count;n++){const i=n*Int16Array.BYTES_PER_ELEMENT;e.setInt16(s+r.offset+i,t[n]*o,!0)}break;case a.UNSIGNED_SHORT:if(r.count===1)e.setUint16(s+r.offset,t*o,!0);else for(let n=0;n<r.count;n++){const i=n*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(s+r.offset+i,t[n]*o,!0)}break;case a.INT:if(r.count===1)e.setInt32(s+r.offset,t*o,!0);else for(let n=0;n<r.count;n++){const i=n*Int32Array.BYTES_PER_ELEMENT;e.setInt32(s+r.offset+i,t[n]*o,!0)}break;case a.UNSIGNED_INT:if(r.count===1)e.setUint32(s+r.offset,t*o,!0);else for(let n=0;n<r.count;n++){const i=n*Uint32Array.BYTES_PER_ELEMENT;e.setUint32(s+r.offset+i,t[n]*o,!0)}break;case a.FLOAT:if(r.count===1)e.setFloat32(s+r.offset,t*o,!0);else for(let n=0;n<r.count;n++){const i=n*Float32Array.BYTES_PER_ELEMENT;e.setFloat32(s+r.offset+i,t[n]*o,!0)}break;case a.HALF_FLOAT:if(r.count===1)e.setUint16(s+r.offset,M(t*o),!0);else for(let n=0;n<r.count;n++){const i=n*Uint16Array.BYTES_PER_ELEMENT;e.setUint16(s+r.offset+i,M(t[n]*o),!0)}}}function K(e,t,r){switch(t.type){case a.BYTE:{if(t.count===1)return e.getInt8(r+t.offset);const s=[];for(let o=0;o<t.count;o++){const n=o*Int8Array.BYTES_PER_ELEMENT;s.push(e.getInt8(r+t.offset+n))}return s}case a.UNSIGNED_BYTE:{if(t.count===1)return e.getUint8(r+t.offset);const s=[];for(let o=0;o<t.count;o++){const n=o*Uint8Array.BYTES_PER_ELEMENT;s.push(e.getUint8(r+t.offset+n))}return s}case a.SHORT:{if(t.count===1)return e.getInt16(r+t.offset,!0);const s=[];for(let o=0;o<t.count;o++){const n=o*Int16Array.BYTES_PER_ELEMENT;s.push(e.getInt16(r+t.offset+n,!0))}return s}case a.UNSIGNED_SHORT:{if(t.count===1)return e.getUint16(r+t.offset,!0);const s=[];for(let o=0;o<t.count;o++){const n=o*Uint16Array.BYTES_PER_ELEMENT;s.push(e.getUint16(r+t.offset+n,!0))}return s}case a.INT:{if(t.count===1)return e.getInt32(r+t.offset,!0);const s=[];for(let o=0;o<t.count;o++){const n=o*Int32Array.BYTES_PER_ELEMENT;s.push(e.getInt32(r+t.offset+n,!0))}return s}case a.UNSIGNED_INT:{if(t.count===1)return e.getUint32(r+t.offset,!0);const s=[];for(let o=0;o<t.count;o++){const n=o*Uint32Array.BYTES_PER_ELEMENT;s.push(e.getUint32(r+t.offset+n,!0))}return s}case a.FLOAT:{if(t.count===1)return e.getFloat32(r+t.offset,!0);const s=[];for(let o=0;o<t.count;o++){const n=o*Float32Array.BYTES_PER_ELEMENT;s.push(e.getFloat32(r+t.offset+n,!0))}return s}case a.HALF_FLOAT:{if(t.count===1)return N(e.getUint16(r+t.offset,!0));const s=[];for(let o=0;o<t.count;o++){const n=o*Uint16Array.BYTES_PER_ELEMENT;s.push(N(e.getUint16(r+t.offset+n,!0)))}return s}}}export{O as $,X as a,G as b,K as c,C as d,k as f,B as i,d as n,Y as o,v as p,p as r,y as s,l as t};
