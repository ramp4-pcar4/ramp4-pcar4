import{x as s,z as i,Q as d,K as S,G as g,c8 as n,bJ as m,cm as y,b7 as R}from"./main-DnzmeE4U.js";import{f as w,i as J}from"./utils-DuaeuwP5.js";import{o as O}from"./utils-Jw-4AGsF.js";let o=class extends g{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const p=o,j=y(p);async function F(e,t,r){t=j(t);const a=w(e),f={...a.query,f:"json",...t.toJSON()},c=t.outSpatialReference,u=m(t.geometries[0]),h=J(f,r);return R(a.path+"/project",h).then(({data:{geometries:l}})=>O(l,u,c))}export{p as m,F as n};
