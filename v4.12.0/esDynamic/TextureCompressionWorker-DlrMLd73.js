import{cY as A}from"./main-DnzmeE4U.js";import{_ as E}from"./TextureFormat-Cl0ugX3E.js";import{c as d}from"./enums-DBi1-Mm2.js";function b(){return _??=(async()=>{const e=await import("./basis_encoder-QK0wY8EP.js"),n=await e.default({locateFile:t=>A(`esri/libs/basisu/${t}`)});return n.initializeBasis(),n})(),_}let _;function x(){return g??=(async()=>await(await import("./dxt_encoder-DXgFKsFV.js")).default({locateFile:e=>A(`esri/libs/dxtEncoder/${e}`)}))(),g}let g,B,F,c=null,T=null;class h{constructor(n,t){this.internalFormat=n,this.compressedTexture=t}}async function G(e){const n=M(e.data,e.flipped);if(e.hasS3TC){T||await D();const t=new Uint8Array(n.length);T?.encode(new Uint8Array(n),e.width,e.height,t);const r=Y(t,!0),i=[t.buffer];return{result:new h(r?.internalFormat??null,r?.textureData??null),transferList:i}}if(e.hasETC){c||await S();const t=await R(n,e.width,e.height,e.hasMipmap),r=t?await X(t):null,i=r?.compressedTexture?.levels.map(o=>o.buffer)||[];return{result:new h(r?.internalFormat??null,r?.compressedTexture??null),transferList:i}}return{result:new h(null,null)}}async function S(){c||(c=await(B??=b()))}async function D(){T||(T=await(F??=x()))}async function R(e,n,t,r,i=255,o=0,s=!1,l=!1){if(!c)return null;const a=new c.BasisEncoder;a.setPerceptual(!l),a.setCheckForAlpha(!0),a.setForceAlpha(!1),a.setRenormalize(l),a.setMipGen(r),a.setMipSRGB(!l),a.setCreateKTX2File(!0),a.setKTX2SRGBTransferFunc(!l),a.setQualityLevel(i),a.setCompressionLevel(o);const m=new Uint8Array(e.byteLength);a.setSliceSourceImage(0,new Uint8Array(e),n,t,s);const w=a.encode(m),u=new Uint8Array(m.buffer,0,w),f=new c.KTX2File(new Uint8Array(u));return f.isValid()?(a.delete(),u):(f.close(),f.delete(),a.delete(),null)}async function X(e){if(!c)return new h(null,null);const n=new c.KTX2File(new Uint8Array(e));n.startTranscoding();const[t,r]=n.getHasAlpha()?[E.ETC2_RGBA,d.COMPRESSED_RGBA8_ETC2_EAC]:[E.ETC1_RGB,d.COMPRESSED_RGB8_ETC2],i=n.getLevels(),o=[];for(let s=0;s<i;s++)o.push(new Uint8Array(n.getImageTranscodedSizeInBytes(s,0,0,t))),n.transcodeImage(o[s],s,0,0,t,0,-1,-1);return n.close(),n.delete(),{internalFormat:r,compressedTexture:{type:"compressed",levels:o}}}function M(e,n=!1){const t=new OffscreenCanvas(e.width,e.height),r=t.getContext("2d");return n&&r.scale(1,-1),r.drawImage(e,0,n?-e.height:0),r.getImageData(0,0,t.width,t.height).data}const O=31,U=1,v=2,I=3,K=4,L=7,P=21,k=131072;function p(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const z=p("DXT1"),$=p("DXT3"),H=p("DXT5");function Y(e,n){const t=new Int32Array(e.buffer,e.byteOffset,O);let r,i;switch(t[P]){case z:r=8,i=d.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case $:r=16,i=d.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case H:r=16,i=d.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let o=1,s=t[K],l=t[I];(3&s||3&l)&&(s=s+3&-4,l=l+3&-4);const a=s,m=l;let w,u;t[v]&k&&n!==!1&&(o=Math.max(1,t[L]));let f=e.byteOffset+t[U]+4;const C=[];for(let y=0;y<o;++y)u=(s+3>>2)*(l+3>>2)*r,w=new Uint8Array(e.buffer,f,u),C.push(w),f+=u,s=Math.max(1,s>>1),l=Math.max(1,l>>1);return{textureData:{type:"compressed",levels:C},internalFormat:i,width:a,height:m}}export{h as TextureCompressionWorkerOutput,G as compress,R as compressRGBADataToKTX2,X as createTextureDataKTX2,S as initializeBasisEncoder,D as initializeDXTEncoder};
