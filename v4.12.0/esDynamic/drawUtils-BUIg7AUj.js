import{cB as C,ca as j,cC as k,aR as G}from"./main-DnzmeE4U.js";function R(t,i,r,s){if(t.type==="point")return t.x+=i,t.y+=r,t.hasZ&&s!=null&&(t.z+=s),t;if(t.type==="multipoint"){const o=t.points;for(let e=0;e<o.length;e++)o[e]=w(o[e],i,r,s);return t}if(t.type==="extent")return t.xmin+=i,t.xmax+=i,t.ymin+=r,t.ymax+=r,t;const m=C(t),n=t.type==="polyline"?t.paths:t.rings;for(let o=0;o<m.length;o++){const e=m[o];for(let x=0;x<e.length;x++)e[x]=w(e[x],i,r,s)}return"paths"in t?t.paths=n:t.rings=n,t}function I(t,i,r,s,m){const n=t.clone(),o=s.resolution;if(n.type==="point"){if(m)R(n,i*o,-r*o);else{const e=s.state.transform,x=s.state.inverseTransform,y=e[0]*n.x+e[2]*n.y+e[4],f=e[1]*n.x+e[3]*n.y+e[5];n.x=x[0]*(y+i)+x[2]*(f+r)+x[4],n.y=x[1]*(y+i)+x[3]*(f+r)+x[5]}return n}if(n.type==="multipoint"){if(m)R(n,i*o,-r*o);else{const e=n.points,x=s.state.transform,y=s.state.inverseTransform;for(let f=0;f<e.length;f++){const p=e[f],c=x[0]*p[0]+x[2]*p[1]+x[4],M=x[1]*p[0]+x[3]*p[1]+x[5],a=y[0]*(c+i)+y[2]*(M+r)+y[4],u=y[1]*(c+i)+y[3]*(M+r)+y[5];e[f]=z(p,a,u,void 0)}}return n}if(n.type==="extent"){if(m)R(n,i*o,-r*o);else{const e=s.state.transform,x=s.state.inverseTransform,y=e[0]*n.xmin+e[2]*n.ymin+e[4],f=e[1]*n.xmin+e[3]*n.ymin+e[5],p=e[0]*n.xmax+e[2]*n.ymax+e[4],c=e[1]*n.xmax+e[3]*n.ymax+e[5];n.xmin=x[0]*(y+i)+x[2]*(f+r)+x[4],n.ymin=x[1]*(y+i)+x[3]*(f+r)+x[5],n.xmax=x[0]*(p+i)+x[2]*(c+r)+x[4],n.ymax=x[1]*(p+i)+x[3]*(c+r)+x[5]}return n}if(m)R(n,i*o,-r*o);else{const e=C(n),x=n.type==="polyline"?n.paths:n.rings,y=s.state.transform,f=s.state.inverseTransform;for(let p=0;p<e.length;p++){const c=e[p];for(let M=0;M<c.length;M++){const a=c[M],u=y[0]*a[0]+y[2]*a[1]+y[4],h=y[1]*a[0]+y[3]*a[1]+y[5],v=f[0]*(u+i)+f[2]*(h+r)+f[4],g=f[1]*(u+i)+f[3]*(h+r)+f[5];c[M]=z(a,v,g,void 0)}}"paths"in n?n.paths=x:n.rings=x}return n}function J(t,i,r,s){if(t.type==="point"){const{x:a,y:u}=t,h=s?s[0]:a,v=s?s[1]:u,g=t.clone(),d=(a-h)*i+h,l=(u-v)*r+v;return g.x=d,g.y=l,g}if(t.type==="multipoint"){const a=C(t),u=j(),[h,v,g,d]=k(u,[a]),l=s?s[0]:(h+g)/2,T=s?s[1]:(d+v)/2,q=t.clone(),Z=q.points;for(let B=0;B<Z.length;B++){const b=Z[B],[A,D]=b,E=(A-l)*i+l,F=(D-T)*r+T;Z[B]=z(b,E,F,void 0)}return q}if(t.type==="extent"){const{xmin:a,xmax:u,ymin:h,ymax:v}=t,g=s?s[0]:(a+u)/2,d=s?s[1]:(v+h)/2,l=t.clone();if(l.xmin=(a-g)*i+g,l.ymax=(v-d)*r+d,l.xmax=(u-g)*i+g,l.ymin=(h-d)*r+d,l.xmin>l.xmax){const T=l.xmin,q=l.xmax;l.xmin=q,l.xmax=T}if(l.ymin>l.ymax){const T=l.ymin,q=l.ymax;l.ymin=q,l.ymax=T}return l}const m=C(t),n=j(),[o,e,x,y]=k(n,m),f=s?s[0]:(o+x)/2,p=s?s[1]:(y+e)/2,c=t.clone(),M=c.type==="polyline"?c.paths:c.rings;for(let a=0;a<m.length;a++){const u=m[a];for(let h=0;h<u.length;h++){const v=u[h],[g,d]=v,l=(g-f)*i+f,T=(d-p)*r+p;M[a][h]=z(v,l,T,void 0)}}return"paths"in c?c.paths=M:c.rings=M,c}function K(t,i,r,s,m,n){const o=Math.sqrt((r-t)*(r-t)+(s-i)*(s-i));return Math.sqrt((m-t)*(m-t)+(n-i)*(n-i))/o}function L(t,i,r,s=!1){const m=Math.atan2(i.y-r.y,i.x-r.x)-Math.atan2(t.y-r.y,t.x-r.x),n=Math.atan2(Math.sin(m),Math.cos(m));return s?n:G(n)}function w(t,i,r,s){return z(t,t[0]+i,t[1]+r,t[2]!=null&&s!=null?t[2]+s:void 0)}function z(t,i,r,s){const m=[i,r];return t.length>2&&m.push(s??t[2]),t.length>3&&m.push(t[3]),m}export{K as a,I as i,L as m,J as s};
