import{bs as U,ab as F,a5 as W,V as X,v as L,x as q,J as Y}from"./main-D6UWMbWJ.js";import{s as Z,r as H}from"./globalCss-geu-g-r4.js";import{f as D,o as b}from"./quantityUtils-B7WFJP6j.js";import{p as P,N as f,G as _,z as m,B as u,s as l,H as $,e as C,F as z,r as ee,I as R,M as A,J as te,K as ie,L as M,i as j,O as re,P as S,v as se,x as oe,w as ne,Q as ae,R as he,u as pe,E as de}from"./SketchViewModel-BQEEJoEu.js";import{m as J,b as Q,e as B,j as le,p as ce,d as ge,_ as fe}from"./vec2-maR1OrZI.js";import{u as K}from"./geodesicLengthMeasurementUtils-JxSmg9AU.js";import{n as N}from"./vec2f64-DohEyf3f.js";import{q as me,c as ue,o as xe}from"./vec32-DvB22h0L.js";import"./preload-helper-ExcqyqRp.js";import"./Queue-Bp8J9hIN.js";import"./signal-_szBxGG7.js";import"./Version-DeyywoNs.js";import"./UpdatingHandles-CLyw9aof.js";import"./projection-F5U3p10J.js";import"./GraphicsLayer-dZfMZHiC.js";import"./GraphicsCollection-B4inrSzy.js";import"./Layer-CrpAg4i7.js";import"./TimeExtent-CVFHym4n.js";import"./ScaleRangeLayer-CANL8iBb.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-BVTTU8XA.js";import"./parser-BOplPg1_.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-mplESjCB.js";import"./common-DQOJ18NT.js";import"./ElevationInfo-DLPjeENV.js";import"./lengthUtils-B1iOgQDj.js";import"./projectVectorToVector-2U_T6yxL.js";import"./projectPointToVector-CP3mj71q.js";import"./geodesicUtils-CINGW30v.js";import"./Query-VeA4-Qk_.js";import"./Field-BRKBBmM6.js";import"./fieldType-B-0DY-YK.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./plane-DXyNbfXV.js";import"./mat3f64-q3fE-ZOt.js";import"./mat4f64-Dk4dwAN8.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-MYAntte_.js";import"./mat3-CruJiiUv.js";import"./index-BNk7091c.js";import"./dynamic-import-helper-BheWnx7M.js";import"./draw-store-BaFsNOTl.js";import"./intl-D8pxRaLS.js";import"./jsxFactory-HPYy2V_L.js";import"./uuid-Cl5lrJ4c.js";import"./layerViewUtils-eEg1cHt4.js";import"./widget-GoJNk-6R.js";import"./diffUtils-BMpoATJS.js";import"./ViewingMode-HRfKv6NR.js";import"./meshVertexSpaceUtils-DurlDegv.js";import"./MeshLocalVertexSpace-DKI2cxe_.js";import"./hydratedFeatures-CzW8xS0g.js";import"./Scheduler-BTF2H21O.js";import"./geometryEngineBase-8g0RzW7z.js";import"./_commonjsHelpers-DCkdB7M8.js";import"./hydrated-C5WzuFt9.js";import"./mat2d-D9DBP-jx.js";import"./quat-DOvbuK1U.js";import"./drapedUtils-gb-eeqgf.js";import"./utils-BQBvadb7.js";import"./substitute-CUVC4DC3.js";class k{constructor(i,e){this.view=i,this.options=e,this.squaredShortLineThreshold=P.shortLineThreshold*P.shortLineThreshold}snap(i,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(i,e):this.snapNewVertex(i,e)}edgeExceedsShortLineThreshold(i,e){return this.exceedsShortLineThreshold(f(i.leftVertex.pos,this.view,e),f(i.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(i,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(m(e,t,u,this.view),m(i,t,u,this.view))>this.squaredShortLineThreshold}isVertical(i,e,{spatialReference:t}){const r=U(t);return J(l(i),l(e))*r<P.verticalLineThresholdMeters}squaredProximityThreshold(i){return i==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:i,touchSensitivityMultiplier:e}=this.options,t=i*e;return t*t}}class ve extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=[];if(r<1)return s;const{spatialReference:o}=e,a=m(i,o,u,this.view),{view:n}=this,h=t.edges[r-1];let p=h;do{if(this.edgeExceedsShortLineThreshold(p,e)){const g=$(p,n,e);this._processCandidateProposal(g.left,g.right,i,a,e,s)}p=p.leftVertex.leftEdge}while(p&&p!==h);return s}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2)return t;const{view:o}=this,{spatialReference:a}=e,n=m(i,a,u,o),h=r.leftEdge,p=r.rightEdge;h&&p&&this.edgeExceedsShortLineThreshold(h,e)&&this.edgeExceedsShortLineThreshold(p,e)&&this._processCandidateProposal(f(h.leftVertex.pos,o,e),f(p.rightVertex.pos,o,e),i,n,e,t);const g=s.edges[0];let c=g;do{if(c!==r.leftEdge&&c!==r.rightEdge&&this.edgeExceedsShortLineThreshold(c,e)){const x=$(c,o,e);this._processCandidateProposal(x.left,x.right,i,n,e,t)}c=c.rightVertex.rightEdge}while(c&&c!==g);return t}_processCandidateProposal(i,e,t,r,s,o){const{spatialReference:a,pointer:n}=s,h=F();Ee(h,i,e,t,s);const p=C(z(h));_(r,m(p,a,u,this.view))<this.squaredProximityThreshold(n)&&o.push(new ee({lineStart:i,lineEnd:e,targetPoint:p,isDraped:s.elevationInfo?.mode==="on-the-ground"}))}}function Ee(d,i,e,t,r){we(d,i,e,t,r)||Ve(d,t,i,e)}function we(d,i,e,t,{spatialReference:r}){const s=R(i,e,r,r);if(s==null)return!1;const o=R(e,t,r,r);if(o==null)return!1;const a=K(e,t,r);if(a==null)return!1;const n=Math.abs(Z.shortestSignedDiff(s,o))>Math.PI/2?H.normalize(s+Math.PI):s;return A(d,e,r,D(a,"meters"),b(n,"radians","geographic"),"geodesic"),d[2]=t[2],!0}function Ve(d,i,e,t){te(i,{start:e,end:t,type:ie.LINE},d),d[2]=i[2]}let Pe=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=t.edges.length,s=t.vertices.length,o=[];if(r<2)return o;const{view:a}=this,n=m(i,e.spatialReference,u,a),h=f(t.vertices[s-1].pos,a,e),p=f(t.vertices[0].pos,a,e),g=t.edges[r-1];let c=g;do{if(this.edgeExceedsShortLineThreshold(c,e)){const x=$(c,a,e);this._checkEdgeForParallelLines(x,h,i,n,e,o),this._checkEdgeForParallelLines(x,p,i,n,e,o)}c=c.leftVertex.leftEdge}while(c&&c!==g);return o}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<3)return t;const{view:o}=this,a=m(i,e.spatialReference,u,o),n=r.leftEdge,h=r.rightEdge,p=s.vertices[0],g=f(p.pos,o,e),c=s.vertices.length,x=s.vertices[c-1],w=f(x.pos,o,e),y=s.edges[0];let v=y;do{if(v!==n&&v!==h&&this.edgeExceedsShortLineThreshold(v,e)){const T=$(v,o,e);n&&this._checkEdgeForParallelLines(T,f(n.leftVertex.pos,o,e),i,a,e,t),h&&this._checkEdgeForParallelLines(T,f(h.rightVertex.pos,o,e),i,a,e,t),r===p?this._checkEdgeForParallelLines(T,w,i,a,e,t):r===x&&this._checkEdgeForParallelLines(T,g,i,a,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==y);return t}_checkEdgeForParallelLines(i,e,t,r,s,o){const a=i.left,n=i.right;if(M(E,l(e),l(a),l(n)),Q(E,l(e))<P.parallelLineThreshold)return;M(E,l(t),l(a),l(n),l(e));const{spatialReference:h,pointer:p}=s,g=C(j(E[0],E[1],t[2]));if(_(r,m(g,h,u,this.view))<this.squaredProximityThreshold(p)){if(this.isVertical(g,e,s)||this.isVertical(a,n,s)||_e(i,o))return;o.push(new re({referenceLine:i,lineStart:e,targetPoint:g,isDraped:s.elevationInfo?.mode==="on-the-ground"}))}}};function _e(d,i){const e=d.left,t=d.right;for(const r of i)if(M(E,l(t),l(r.constraint.start),l(r.constraint.end),l(e)),Q(E,l(t))<P.parallelLineThreshold)return r.addReferenceLine(d),!0;return!1}const E=N();class ye extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[];if(t.vertices.length<2)return r;const{view:s}=this,o=m(i,e.spatialReference,u,s),a=t.vertices.at(-1);this._checkForSnappingCandidate(S.LastVertex,r,a.leftEdge,a,a.leftEdge.leftVertex,i,o,e);const n=t.vertices[0];return this._checkForSnappingCandidate(S.FirstVertex,r,n.rightEdge,n,n.rightEdge.rightVertex,i,o,e),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle;if(r.component.vertices.length<3)return t;const{view:s}=this,o=m(i,e.spatialReference,u,s),a=r.leftEdge,n=r.rightEdge;if(a?.leftVertex.leftEdge){const h=a.leftVertex.leftEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.rightVertex,h.leftVertex,i,o,e)}if(n?.rightVertex.rightEdge){const h=n.rightVertex.rightEdge;this._checkForSnappingCandidate(S.ExistingEdge,t,h,h.leftVertex,h.rightVertex,i,o,e)}return t}_checkForSnappingCandidate(i,e,t,r,s,o,a,n){if(!this.edgeExceedsShortLineThreshold(t,n))return;const h=this.view,p=f(r.pos,h,n),g=f(s.pos,h,n);Te(O,g,p,o,n),this._checkForSnappingCandidateAlongProjectedRay(i,e,g,p,O,o,a,n)}_checkForSnappingCandidateAlongProjectedRay(i,e,t,r,s,o,a,n){const{spatialReference:h,pointer:p}=n,g=B(I,l(o),l(r)),c=le(s,g)/ce(s),x=ge(I,l(r),s,c),w=C(j(x[0],x[1],o[2]));if(_(a,m(w,h,u,this.view))>this.squaredProximityThreshold(p)||this.isVertical(w,r,n)||this.isVertical(r,t,n))return;const y=me(F(),r,s,Math.sign(c));e.push(new se({targetPoint:w,constraint:new oe(r,z(y)),previousVertex:t,otherVertex:r,otherVertexType:ne.CENTER,selfSnappingType:i,isDraped:n.elevationInfo?.mode==="on-the-ground"}))}}function Te(d,i,e,t,r){Le(d,i,e,t,r)||Se(d,i,e)}function Le(d,i,e,t,{spatialReference:r}){const s=R(i,e,r,r);if(s==null)return!1;const o=R(e,t,r,r);if(o==null)return!1;const a=Math.sign(H.shortestSignedDiff(s,o))*Math.PI*.5,n=b(s+a,"radians","geographic"),h=F(),p=K(e,t,r);return p!=null&&(A(h,e,r,D(p,"meters"),n,"geodesic"),ue(d,h,e),!0)}function Se(d,i,e){const t=B(I,l(e),l(i));xe(d,t[1],-t[0],0)}const I=N(),O=F();let $e=class extends k{snapNewVertex(i,e){const t=e.editGeometryOperations.data.components[0],r=[],s=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||s<2)return r;const{view:o}=this,a=t.vertices[0],n=t.vertices[s-1],h=f(a.pos,o,e),p=f(n.pos,o,e);return this._processCandidateProposal(h,p,i,e,r),r}snapExistingVertex(i,e){const t=[],r=e.vertexHandle,s=r.component;if(s.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(r.index===0||r.index===s.vertices.length-1))return t;const{view:o}=this,a=f(r.leftEdge.leftVertex.pos,o,e),n=f(r.rightEdge.rightVertex.pos,o,e);return this._processCandidateProposal(a,n,i,e,t),t}_processCandidateProposal(i,e,t,r,s){if(!this.exceedsShortLineThreshold(i,e,r))return;const o=fe(G,l(i),l(e),.5),a=.5*J(l(i),l(e)),n=ae(G,l(t),o,a),h=C(j(n[0],n[1],t[2])),{spatialReference:p,pointer:g}=r,c=m(t,p,u,this.view);if(_(c,m(h,p,u,this.view))<this.squaredProximityThreshold(g)){if(this.isVertical(i,h,r)||this.isVertical(h,e,r))return;s.push(new he({targetPoint:h,point1:i,point2:e,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};const G=N();let V=class extends W{constructor(d){super(d),this.updating=!1,this._snappers=new X,this._domain=pe.SELF}initialize(){this._snappers.push(new Pe(this.view,this.options),new ve(this.view,this.options),new ye(this.view,this.options),new $e(this.view,this.options))}set options(d){this._set("options",d);for(const i of this._snappers)i.options=d}async fetchCandidates(d,i,e){if(!(i&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const r of this._snappers.items)for(const s of r.snap(d,e))t.push(s);return de(d,t),t}};L([q({readOnly:!0})],V.prototype,"updating",void 0),L([q({constructOnly:!0})],V.prototype,"view",void 0),L([q()],V.prototype,"options",null),V=L([Y("esri.views.interactive.snapping.SelfSnappingEngine")],V);export{V as SelfSnappingEngine};
