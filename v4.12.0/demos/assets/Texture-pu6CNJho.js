import{bE as W,s as _,n as C,fW as V,bc as k}from"./main-D6UWMbWJ.js";import{r as z}from"./signal-_szBxGG7.js";import{A as K,c as E,P as o,B as M,G as p,M as f,U as w,L as m,D as Y,V as O}from"./enums-Dk3osxpS.js";import{s as $}from"./getDataTypeBytes-DflDeYgv.js";const q=()=>C.getLogger("esri.views.webgl.checkWebGLError");function j(t,e){switch(e){case t.INVALID_ENUM:return"Invalid Enum. An unacceptable value has been specified for an enumerated argument.";case t.INVALID_VALUE:return"Invalid Value. A numeric argument is out of range.";case t.INVALID_OPERATION:return"Invalid Operation. The specified command is not allowed for the current state.";case t.INVALID_FRAMEBUFFER_OPERATION:return"Invalid Framebuffer operation. The currently bound framebuffer is not framebuffer complete when trying to render to or to read from it.";case t.OUT_OF_MEMORY:return"Out of memory. Not enough memory is left to execute the command.";case t.CONTEXT_LOST_WEBGL:return"WebGL context has been lost";default:return"Unknown error"}}const L=!!W("enable-feature:webgl-debug");function X(){return L}function he(){return L}function b(t){if(X()){const e=t.getError();if(e){const r=j(t,e),i=new Error().stack;q().error(new _("webgl-error","WebGL error occurred",{message:r,stack:i}))}}}var U;(function(t){t[t.Texture=0]="Texture",t[t.RenderBuffer=1]="RenderBuffer"})(U||(U={}));function Z(t){const e=t.gl;switch(e.getError()){case e.NO_ERROR:return null;case e.INVALID_ENUM:return"An unacceptable value has been specified for an enumerated argument";case e.INVALID_VALUE:return"An unacceptable value has been specified for an argument";case e.INVALID_OPERATION:return"The specified command is not allowed for the current state";case e.INVALID_FRAMEBUFFER_OPERATION:return"The currently bound framebuffer is not framebuffer complete";case e.OUT_OF_MEMORY:return"Not enough memory is left to execute the command";case e.CONTEXT_LOST_WEBGL:return"WebGL context is lost"}return"Unknown error"}function pe(t,e,r,i,a=0){const n=t.gl;t.bindBuffer(r);for(const s of i){const c=e.get(s.name);if(c==null){console.warn(`There is no location for vertex attribute '${s.name}' defined.`);continue}const l=a*s.stride;if(s.count<=4)n.vertexAttribPointer(c,s.count,s.type,s.normalized,s.stride,s.offset+l),n.enableVertexAttribArray(c),s.divisor>0&&t.gl.vertexAttribDivisor(c,s.divisor);else if(s.count===9)for(let h=0;h<3;h++)n.vertexAttribPointer(c+h,3,s.type,s.normalized,s.stride,s.offset+12*h+l),n.enableVertexAttribArray(c+h),s.divisor>0&&t.gl.vertexAttribDivisor(c+h,s.divisor);else if(s.count===16)for(let h=0;h<4;h++)n.vertexAttribPointer(c+h,4,s.type,s.normalized,s.stride,s.offset+16*h+l),n.enableVertexAttribArray(c+h),s.divisor>0&&t.gl?.vertexAttribDivisor(c+h,s.divisor);else console.error("Unsupported vertex attribute element count: "+s.count);if(X()){const h=Z(t),u=$(s.type),d=s.offset,R=Math.round(u/d)!==u/d?`. Offset not a multiple of stride. DataType requires ${u} bytes, but descriptor has an offset of ${d}`:"";h&&console.error(`Unable to bind vertex attribute "${s.name}" with baseInstanceOffset ${l}${R}:`,h,s)}}}function ue(t,e,r,i){const a=t.gl;t.bindBuffer(r);for(const n of i){const s=e.get(n.name);if(n.count<=4)a.disableVertexAttribArray(s),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(s,0);else if(n.count===9)for(let c=0;c<3;c++)a.disableVertexAttribArray(s+c),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(s+c,0);else if(n.count===16)for(let c=0;c<4;c++)a.disableVertexAttribArray(s+c),n.divisor&&n.divisor>0&&t.gl?.vertexAttribDivisor(s+c,0);else console.error("Unsupported vertex attribute element count: "+n.count)}t.unbindBuffer(K.ARRAY_BUFFER)}function J(t){switch(t){case p.ALPHA:case p.LUMINANCE:case p.RED:case p.RED_INTEGER:case o.R8:case o.R8I:case o.R8UI:case o.R8_SNORM:case M.STENCIL_INDEX8:return 1;case p.LUMINANCE_ALPHA:case p.RG:case p.RG_INTEGER:case o.RGBA4:case o.R16F:case o.R16I:case o.R16UI:case o.RG8:case o.RG8I:case o.RG8UI:case o.RG8_SNORM:case o.RGB565:case o.RGB5_A1:case M.DEPTH_COMPONENT16:return 2;case p.DEPTH_COMPONENT:case p.RGB:case p.RGB_INTEGER:case o.RGB8:case o.RGB8I:case o.RGB8UI:case o.RGB8_SNORM:case o.SRGB8:case M.DEPTH_COMPONENT24:return 3;case p.DEPTH_STENCIL:case p.DEPTH24_STENCIL8:case p.RGBA:case p.RGBA_INTEGER:case o.RGBA8:case o.R32F:case o.R11F_G11F_B10F:case o.RG16F:case o.R32I:case o.R32UI:case o.RG16I:case o.RG16UI:case o.RGBA8I:case o.RGBA8UI:case o.RGBA8_SNORM:case o.SRGB8_ALPHA8:case o.RGB9_E5:case o.RGB10_A2UI:case o.RGB10_A2:case M.DEPTH_STENCIL:case M.DEPTH_COMPONENT32F:case M.DEPTH24_STENCIL8:return 4;case M.DEPTH32F_STENCIL8:return 5;case o.RGB16F:case o.RGB16I:case o.RGB16UI:return 6;case o.RG32F:case o.RG32I:case o.RG32UI:case o.RGBA16F:case o.RGBA16I:case o.RGBA16UI:return 8;case o.RGB32F:case o.RGB32I:case o.RGB32UI:return 12;case o.RGBA32F:case o.RGBA32I:case o.RGBA32UI:return 16;case E.COMPRESSED_RGB_S3TC_DXT1_EXT:case E.COMPRESSED_RGBA_S3TC_DXT1_EXT:return .5;case E.COMPRESSED_RGBA_S3TC_DXT3_EXT:case E.COMPRESSED_RGBA_S3TC_DXT5_EXT:return 1;case E.COMPRESSED_R11_EAC:case E.COMPRESSED_SIGNED_R11_EAC:case E.COMPRESSED_RGB8_ETC2:case E.COMPRESSED_SRGB8_ETC2:case E.COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2:case E.COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2:return .5;case E.COMPRESSED_RG11_EAC:case E.COMPRESSED_SIGNED_RG11_EAC:case E.COMPRESSED_RGBA8_ETC2_EAC:case E.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC:return 1}return 0}let Q=class{constructor(e=0,r=e){this.width=e,this.height=r,this.target=f.TEXTURE_2D,this.pixelFormat=p.RGBA,this.dataType=w.UNSIGNED_BYTE,this.samplingMode=m.LINEAR,this.wrapMode=Y.REPEAT,this.maxAnisotropy=1,this.flipped=!1,this.hasMipmap=!1,this.isOpaque=!1,this.unpackAlignment=4,this.preMultiplyAlpha=!1,this.shouldCompress=!1,this.depth=1,this.isImmutable=!1}};function ee(t){return t.width<=0||t.height<=0?0:Math.round(t.width*t.height*t.depth*(t.hasMipmap?4/3:1)*(t.internalFormat==null?4:J(t.internalFormat))*(t.target===f.TEXTURE_CUBE_MAP?6:1))}const te=()=>C.getLogger("esri/views/webgl/textureUtils");function N(t){(t.width!=null&&t.width<0||t.height!=null&&t.height<0||t.depth!=null&&t.depth<0)&&te().error("Negative dimension parameters are not allowed!")}function re(t){return t in o}function se(t){return t in E}function S(t){return t!=null&&"type"in t&&t.type==="compressed"}function ie(t){return t!=null&&"byteLength"in t}function B(t){return t!=null&&!S(t)&&!ie(t)}function D(t){return t===f.TEXTURE_3D||t===f.TEXTURE_2D_ARRAY}function y(t,e,r,i=1){let a=Math.max(e,r);return t===f.TEXTURE_3D&&(a=Math.max(a,i)),Math.floor(Math.log2(a))+1}function P(t){if(t.internalFormat!=null)return t.internalFormat===p.DEPTH_STENCIL?p.DEPTH24_STENCIL8:t.internalFormat;switch(t.dataType){case w.FLOAT:switch(t.pixelFormat){case p.RGBA:return o.RGBA32F;case p.RGB:return o.RGB32F;default:throw new _("Unable to derive format")}case w.UNSIGNED_BYTE:switch(t.pixelFormat){case p.RGBA:return o.RGBA8;case p.RGB:return o.RGB8}}return t.internalFormat=t.pixelFormat===p.DEPTH_STENCIL?p.DEPTH24_STENCIL8:t.pixelFormat}function ae(t){let e="width"in t?t.width:t.codedWidth,r="height"in t?t.height:t.codedHeight;return t instanceof HTMLVideoElement&&(e=t.videoWidth,r=t.videoHeight),{width:e,height:r,depth:1}}class G extends Q{constructor(e,r){switch(super(),this.context=e,Object.assign(this,r),this.internalFormat){case o.R16F:case o.R16I:case o.R16UI:case o.R32F:case o.R32I:case o.R32UI:case o.R8_SNORM:case o.R8:case o.R8I:case o.R8UI:this.pixelFormat=p.RED}}static validate(e,r){return new G(e,r)}}const x=()=>C.getLogger("esri/views/webgl/Texture");let v=class T{constructor(e,r=null,i=null){if(this.type=U.Texture,this._glName=null,this._samplingModeDirty=!1,this._wrapModeDirty=!1,this._wasImmutablyAllocated=!1,this._compressionAbortController=z(null),"context"in e)this._descriptor=e,i=r;else{const a=G.validate(e,r);if(!a)throw new _("Texture descriptor invalid");this._descriptor=a}this._descriptor.target===f.TEXTURE_CUBE_MAP?this._setDataCubeMap(i):this.setData(i)}get glName(){return this._glName}get descriptor(){return this._descriptor}get usedMemory(){return ee(this._descriptor)}get cachedMemory(){return this.usedMemory}get isDirty(){return this._samplingModeDirty||this._wrapModeDirty}get isCompressing(){return this._compressionAbortController.value!==null}dispose(){this.abortCompression(),this._glName&&this._descriptor.context.instanceCounter.decrement(O.Texture,this),this._descriptor.context.gl&&this._glName&&(this._descriptor.context.unbindTexture(this),this._descriptor.context.gl.deleteTexture(this._glName),this._glName=null)}release(){this.dispose()}resize(e,r){const i=this._descriptor;if(i.width!==e||i.height!==r){if(this._wasImmutablyAllocated)throw new _("Immutable textures can't be resized!");i.width=e,i.height=r,this._descriptor.target===f.TEXTURE_CUBE_MAP?this._setDataCubeMap(null):this.setData(null)}}enableCompression(e){this._descriptor.shouldCompress=e}setData(e){this.abortCompression(),!S(e)&&this._descriptor.internalFormat&&this._descriptor.internalFormat in E&&(this._descriptor.internalFormat=void 0),this._setData(e),!S(e)&&this._descriptor.shouldCompress&&this._compressOnWorker(e)}updateData(e,r,i,a,n,s,c=0){s||x().error("An attempt to use uninitialized data!"),this._glName||x().error("An attempt to update uninitialized texture!");const l=this._descriptor;l.internalFormat=P(l);const{context:h,pixelFormat:u,dataType:d,target:R,isImmutable:g}=l;if(g&&!this._wasImmutablyAllocated)throw new _("Cannot update immutable texture before allocation!");const I=h.bindTexture(this,T.TEXTURE_UNIT_FOR_UPDATES,!0);(r<0||i<0||r+a>l.width||i+n>l.height)&&x().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:A}=h;c&&(a&&n||x().warn("Must pass width and height if `UNPACK_SKIP_ROWS` is used"),A.pixelStorei(A.UNPACK_SKIP_ROWS,c)),B(s)?A.texSubImage2D(R,e,r,i,a,n,u,d,s):S(s)?A.compressedTexSubImage2D(R,e,r,i,a,n,l.internalFormat,s.levels[e]):A.texSubImage2D(R,e,r,i,a,n,u,d,s),c&&A.pixelStorei(A.UNPACK_SKIP_ROWS,0),h.bindTexture(I,T.TEXTURE_UNIT_FOR_UPDATES)}updateData3D(e,r,i,a,n,s,c,l){l||x().error("An attempt to use uninitialized data!"),this._glName||x().error("An attempt to update an uninitialized texture!");const h=this._descriptor;h.internalFormat=P(h);const{context:u,pixelFormat:d,dataType:R,isImmutable:g,target:I}=h;if(g&&!this._wasImmutablyAllocated)throw new _("Cannot update immutable texture before allocation!");D(I)||x().warn("Attempting to set 3D texture data on a non-3D texture");const A=u.bindTexture(this,T.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES),(r<0||i<0||a<0||r+n>h.width||i+s>h.height||a+c>h.depth)&&x().error("An attempt to update out of bounds of the texture!"),this._configurePixelStorage();const{gl:F}=u;if(S(l))l=l.levels[e],F.compressedTexSubImage3D(I,e,r,i,a,n,s,c,h.internalFormat,l);else{const H=l;F.texSubImage3D(I,e,r,i,a,n,s,c,d,R,H)}u.bindTexture(A,T.TEXTURE_UNIT_FOR_UPDATES)}generateMipmap(){const e=this._descriptor;if(e.width===0||e.height===0)return;if(!e.hasMipmap){if(this._wasImmutablyAllocated)throw new _("Cannot add mipmaps to immutable texture after allocation");e.hasMipmap=!0,this._samplingModeDirty=!0,N(e)}e.samplingMode===m.LINEAR?(this._samplingModeDirty=!0,e.samplingMode=m.LINEAR_MIPMAP_NEAREST):e.samplingMode===m.NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=m.NEAREST_MIPMAP_NEAREST);const r=this._descriptor.context.bindTexture(this,T.TEXTURE_UNIT_FOR_UPDATES);this._descriptor.context.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES),this._descriptor.context.gl.generateMipmap(e.target),this._descriptor.context.bindTexture(r,T.TEXTURE_UNIT_FOR_UPDATES)}clearMipmap(){const e=this._descriptor;if(e.hasMipmap){if(this._wasImmutablyAllocated)throw new _("Cannot delete mipmaps to immutable texture after allocation");e.hasMipmap=!1,this._samplingModeDirty=!0,N(e)}e.samplingMode===m.LINEAR_MIPMAP_NEAREST?(this._samplingModeDirty=!0,e.samplingMode=m.LINEAR):e.samplingMode===m.NEAREST_MIPMAP_NEAREST&&(this._samplingModeDirty=!0,e.samplingMode=m.NEAREST)}setSamplingMode(e){e!==this._descriptor.samplingMode&&(this._descriptor.samplingMode=e,this._samplingModeDirty=!0)}setWrapMode(e){e!==this._descriptor.wrapMode&&(this._descriptor.wrapMode=e,N(this._descriptor),this._wrapModeDirty=!0)}applyChanges(){this._samplingModeDirty&&(this._applySamplingMode(),this._samplingModeDirty=!1),this._wrapModeDirty&&(this._applyWrapMode(),this._wrapModeDirty=!1)}abortCompression(){this.isCompressing&&(this._compressionAbortController.value=V(this._compressionAbortController.value))}_setData(e,r){const i=this._descriptor,a=i.context?.gl;if(!a)return;b(a),this._glName||(this._glName=a.createTexture(),this._glName&&i.context.instanceCounter.increment(O.Texture,this)),N(i);const n=i.context.bindTexture(this,T.TEXTURE_UNIT_FOR_UPDATES);i.context.setActiveTexture(T.TEXTURE_UNIT_FOR_UPDATES),this._configurePixelStorage(),b(a);const s=r??i.target,c=D(s);if(B(e))this._setDataFromTexImageSource(e,s);else{const{width:l,height:h,depth:u}=i;if(l==null||h==null)throw new _("Width and height must be specified!");if(c&&u==null)throw new _("Depth must be specified!");if(i.internalFormat=P(i),i.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(s,i.internalFormat,i.hasMipmap,l,h,u),S(e)){if(!se(i.internalFormat))throw new _("Attempting to use compressed data with an uncompressed format!");this._setDataFromCompressedSource(e,i.internalFormat,s)}else this._texImage(s,0,i.internalFormat,l,h,u,e),b(a),i.hasMipmap&&this.generateMipmap()}this._applySamplingMode(),this._applyWrapMode(),this._applyAnisotropicFilteringParameters(),b(a),i.context.bindTexture(n,T.TEXTURE_UNIT_FOR_UPDATES)}_setDataCubeMap(e=null){for(let r=f.TEXTURE_CUBE_MAP_POSITIVE_X;r<=f.TEXTURE_CUBE_MAP_NEGATIVE_Z;r++)this._setData(e,r)}_configurePixelStorage(){const e=this._descriptor.context.gl,{unpackAlignment:r,flipped:i,preMultiplyAlpha:a}=this._descriptor;e.pixelStorei(e.UNPACK_ALIGNMENT,r),e.pixelStorei(e.UNPACK_FLIP_Y_WEBGL,i?1:0),e.pixelStorei(e.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a?1:0)}_setDataFromTexImageSource(e,r){const{gl:i}=this._descriptor.context,a=this._descriptor;a.internalFormat=P(a);const n=D(r),{width:s,height:c,depth:l}=ae(e);a.width&&a.height,a.width||(a.width=s),a.height||(a.height=c),n&&a.depth,n&&(a.depth=l),a.isImmutable&&!this._wasImmutablyAllocated&&this._texStorage(r,a.internalFormat,a.hasMipmap,s,c,l),this._texImage(r,0,a.internalFormat,s,c,l,e),b(i),a.hasMipmap&&(this.generateMipmap(),b(i))}_setDataFromCompressedSource(e,r,i){const a=this._descriptor,{width:n,height:s,depth:c}=a,l=e.levels,h=y(i,n,s,c),u=Math.min(h,l.length)-1;this._descriptor.context.gl.texParameteri(a.target,a.context.gl.TEXTURE_MAX_LEVEL,u),this._forEachMipmapLevel((d,R,g,I)=>{const A=l[Math.min(d,l.length-1)];this._compressedTexImage(i,d,r,R,g,I,A)},u)}_texStorage(e,r,i,a,n,s){const{gl:c}=this._descriptor.context;if(!re(r))throw new _("Immutable textures must have a sized internal format");if(!this._descriptor.isImmutable)return;const l=i?y(e,a,n,s):1;if(D(e)){if(s==null)throw new _("Missing depth dimension for 3D texture upload");c.texStorage3D(e,l,r,a,n,s)}else c.texStorage2D(e,l,r,a,n);this._wasImmutablyAllocated=!0}_texImage(e,r,i,a,n,s,c){const l=this._descriptor.context.gl,h=D(e),{isImmutable:u,pixelFormat:d,dataType:R}=this._descriptor;if(u){if(c!=null){const g=c;if(h){if(s==null)throw new _("Missing depth dimension for 3D texture upload");l.texSubImage3D(e,r,0,0,0,a,n,s,d,R,g)}else l.texSubImage2D(e,r,0,0,a,n,d,R,g)}}else{const g=c;if(h){if(s==null)throw new _("Missing depth dimension for 3D texture upload");l.texImage3D(e,r,i,a,n,s,0,d,R,g)}else l.texImage2D(e,r,i,a,n,0,d,R,g)}}_compressedTexImage(e,r,i,a,n,s,c){const l=this._descriptor.context.gl,h=D(e);if(this._descriptor.isImmutable){if(c!=null)if(h){if(s==null)throw new _("Missing depth dimension for 3D texture upload");l.compressedTexSubImage3D(e,r,0,0,0,a,n,s,i,c)}else l.compressedTexSubImage2D(e,r,0,0,a,n,i,c)}else if(h){if(s==null)throw new _("Missing depth dimension for 3D texture upload");l.compressedTexImage3D(e,r,i,a,n,s,0,c)}else l.compressedTexImage2D(e,r,i,a,n,0,c)}async _compressOnWorker(e){if(!T.compressionWorkerHandle||!T.compressionWorkerHandle.isCompressible(e))return;const r=this._descriptor.context?.gl.getExtension("WEBGL_compressed_texture_etc"),i=this._descriptor.context?.gl.getExtension("WEBGL_compressed_texture_s3tc");if(r||i){const a=new AbortController;this._compressionAbortController.value=a;const n={data:await createImageBitmap(e),flipped:this.descriptor.flipped,width:e.width,height:e.height,hasMipmap:this._descriptor.hasMipmap,hasETC:!!r,hasS3TC:!!i};T.compressionWorkerHandle.invoke(n,this._compressionAbortController.value.signal).then(s=>{s&&this.isCompressing&&this.glName&&(this._descriptor.internalFormat=s.internalFormat,this._setData(s.compressedTexture)),a===this._compressionAbortController.value&&(this._compressionAbortController.value=null)}).catch(s=>{k(s)||a!==this._compressionAbortController.value||(this._compressionAbortController.value=null)})}}_forEachMipmapLevel(e,r=1/0){let{width:i,height:a,depth:n,hasMipmap:s,target:c}=this._descriptor;const l=c===f.TEXTURE_3D;if(i==null||a==null||l&&n==null)throw new _("Missing texture dimensions for mipmap calculation");for(let h=0;e(h,i,a,n),s&&(i!==1||a!==1||l&&n!==1)&&!(h>=r);++h)i=Math.max(1,i>>1),a=Math.max(1,a>>1),l&&(n=Math.max(1,n>>1))}_applySamplingMode(){const e=this._descriptor,r=e.context?.gl;let i=e.samplingMode,a=e.samplingMode;i===m.LINEAR_MIPMAP_NEAREST||i===m.LINEAR_MIPMAP_LINEAR?(i=m.LINEAR,e.hasMipmap||(a=m.LINEAR)):i!==m.NEAREST_MIPMAP_NEAREST&&i!==m.NEAREST_MIPMAP_LINEAR||(i=m.NEAREST,e.hasMipmap||(a=m.NEAREST)),r.texParameteri(e.target,r.TEXTURE_MAG_FILTER,i),r.texParameteri(e.target,r.TEXTURE_MIN_FILTER,a)}_applyWrapMode(){const e=this._descriptor,r=e.context?.gl;typeof e.wrapMode=="number"?(r.texParameteri(e.target,r.TEXTURE_WRAP_S,e.wrapMode),r.texParameteri(e.target,r.TEXTURE_WRAP_T,e.wrapMode)):(r.texParameteri(e.target,r.TEXTURE_WRAP_S,e.wrapMode.s),r.texParameteri(e.target,r.TEXTURE_WRAP_T,e.wrapMode.t))}_applyAnisotropicFilteringParameters(){const e=this._descriptor,r=e.context.capabilities.textureFilterAnisotropic;r&&e.context.gl.texParameterf(e.target,r.TEXTURE_MAX_ANISOTROPY,e.maxAnisotropy??1)}};v.TEXTURE_UNIT_FOR_UPDATES=0,v.compressionWorkerHandle=null;export{pe as E,ue as _,J as a,X as b,he as c,G as d,U as e,Z as o,Q as p,b as u,v as w};
