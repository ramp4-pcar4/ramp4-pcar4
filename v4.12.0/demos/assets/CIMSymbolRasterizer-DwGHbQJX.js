import{i as F}from"./CIMResourceManager-w1sNuHMP.js";import{a as G,u as O,h as T}from"./CIMSymbolHelper-DpGzf4JZ.js";import{OverrideHelper as q}from"./OverrideHelper-V117P7z4.js";import{T as S,R as D}from"./rasterizingUtils-BgcDiHpA.js";import{V as z}from"./utils-BRg6PM3S.js";import"./fontUtils-BuwairKN.js";import"./main-D6UWMbWJ.js";import"./preload-helper-ExcqyqRp.js";import"./imageUtils-CmEe6Gfn.js";import"./BidiEngine-DNnuvc1i.js";import"./OptimizedGeometry-7XEw-Hai.js";import"./memoryEstimations-bvdrNroi.js";import"./Rect-B5PiE1Gq.js";import"./enums-BJSSbDkD.js";import"./defaultCIMValues-DII_GG3u.js";import"./definitions-CPtb4TQS.js";import"./mat2d-D9DBP-jx.js";import"./common-DQOJ18NT.js";import"./mat2df32-orApM5a3.js";import"./vec2-maR1OrZI.js";import"./vec2f32-BbH2jxlN.js";import"./BoundingBox-CnpCxTZE.js";import"./colorUtils-B_grc-3o.js";import"./vec42-CKs01hkn.js";import"./vec4f64-o2zAXfmz.js";import"./callExpressionWithFeature-DiP3oKW-.js";import"./quantizationUtils-B28qRRbX.js";import"./floatRGBA-DHIIkMjz.js";const A=96/72;class pt{constructor(m){this._spatialReference=m,this._imageDataCanvas=null,this._cimResourceManager=new F}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(m,n,o,M,I,a,c,l,y,x){if(!m)return null;const{data:p}=m;if(!p||p.type!=="CIMSymbolReference"||!p.symbol)return null;const{symbol:v}=p;a||(a=z(v));const s=await q.resolveSymbolOverrides(p,n,this._spatialReference,I,a,c,l),d=this._cimResourceManager,f=[];G.fetchResources(s,d,f),G.fetchFonts(s,d,f),f.length>0&&await Promise.all(f);const{width:e,height:r}=o;let b=k(a,e,r,M,x);const t=G.getEnvelope(s,b,d);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let g=1,_=0,C=0;switch(v.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let h=1;t.height>r&&(h=r/t.height),M==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(h=r/t.height)),g=Math.min(i,h),_=t.x+t.width/2,C=t.y+t.height/2}break;case"CIMLineSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;b={paths:S(b.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{(y||t.height>r)&&(g=r/t.height),C=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,{paths:R}=b;R[0][0][0]-=i/g,R[0][2][0]-=(h-e)/g}break;case"CIMPolygonSymbol":if(x){C=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;b={paths:S(b.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{_=t.x+t.width/2,C=t.y+t.height/2;const i=t.x*g+e/2,h=(t.x+t.width)*g+e/2,R=t.y*g+r/2,P=(t.y+t.height)*g+r/2,{rings:w}=b;i<0&&(w[0][0][0]-=i,w[0][3][0]-=i,w[0][4][0]-=i),R<0&&(w[0][0][1]+=R,w[0][1][1]+=R,w[0][4][1]+=R),h>e&&(w[0][1][0]-=h-e,w[0][2][0]-=h-e),P>r&&(w[0][2][1]+=P-r,w[0][3][1]+=P-r)}}const E={type:"cim",data:{type:"CIMSymbolReference",symbol:s}};return this.rasterize(E,e,r,_,C,g,a,1,b)}rasterize(m,n,o,M,I,a,c,l=0,y=null,x=window.devicePixelRatio||1){const{data:p}=m;if(!p||p.type!=="CIMSymbolReference"||!p.symbol)return null;const{symbol:v}=p,s=this._canvas,d=x*A;s.width=n*d,s.height=o*d,c||(c=z(v)),y||(y=k(c,n,o,"legend")),s.width+=2*l,s.height+=2*l;const f=s.getContext("2d",{willReadFrequently:!0}),e=T.createIdentity();return e.translate(-M,-I),e.scale(a*d,-a*d),e.translate(n*d/2+l,o*d/2+l),f.clearRect(0,0,s.width,s.height),new O(f,this._cimResourceManager,e,!0).drawSymbol(v,y),f.getImageData(0,0,s.width,s.height)}}function H(u,m,n,o){return m==="esriGeometryPolygon"?{rings:D(S(u.rings,{xmin:0,ymin:0,xmax:n,ymax:o,width:n,height:o}),-1*n/2,-1*o/2)}:m==="esriGeometryPolyline"?{paths:D(S(u.paths,{xmin:0,ymin:0,xmax:n,ymax:o,width:n,height:o}),-1*n/2,-1*o/2)}:null}function k(u,m,n,o,M){const a=-m/2+1,c=m/2-1,l=n/2-1,y=-n/2+1;if(M&&(u==="esriGeometryPolygon"||u==="esriGeometryPolyline")){const x=H(M,u,m,n);if(x)return x}switch(u){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[a,0],[0,0],[c,0]]]};default:return o==="legend"?{rings:[[[a,l],[c,0],[c,y],[a,y],[a,l]]]}:{rings:[[[a,l],[c,l],[c,y],[a,y],[a,l]]]}}}export{pt as CIMSymbolRasterizer};
