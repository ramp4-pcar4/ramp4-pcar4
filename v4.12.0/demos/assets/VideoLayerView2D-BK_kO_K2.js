import{bo as I,D as X,v as m,x as p,J as W,fJ as Y,a7 as k,dt as O,fK as K,f5 as N,ag as Q,fL as z,ap as H,bz as Z,aj as b,f6 as ee,cC as q,cB as B,d8 as U,a6 as $}from"./main-D6UWMbWJ.js";import te from"./GraphicsLayer-dZfMZHiC.js";import{u as ie}from"./OverlayContainer-BiIYywX_.js";import{n as re}from"./vec2f64-DohEyf3f.js";import{O as w}from"./projection-F5U3p10J.js";import{e as se}from"./Container-CsSSlaoQ.js";import{a as oe,S as ne}from"./LayerView2D-B0UOVQoI.js";import{D as ae}from"./enums-Dk3osxpS.js";import{p as le,w as he}from"./Texture-pu6CNJho.js";import{t as me}from"./GraphicContainer-B6v7Qatg.js";import{A as ye}from"./GraphicsView2D-DSSW-FKe.js";import{y as pe}from"./LayerView-BS4FWKIk.js";let d=class extends I.ClonableMixin(X){constructor(s){super(s),this.frame=null,this.frameCenter=null,this.frameOutline=null,this.lineOfSight=null,this.sensorLocation=null,this.sensorTrail=null}};m([p({type:Boolean})],d.prototype,"frame",void 0),m([p({type:Boolean})],d.prototype,"frameCenter",void 0),m([p({type:Boolean})],d.prototype,"frameOutline",void 0),m([p({type:Boolean})],d.prototype,"lineOfSight",void 0),m([p({type:Boolean})],d.prototype,"sensorLocation",void 0),m([p({type:Boolean})],d.prototype,"sensorTrail",void 0),d=m([W("esri.layers.support.TelemetryDisplay")],d);const j=d,T=2;class ce extends se{constructor(e){super(),this.element=e,this._handles=new Y,this.isWrapAround=!1,this.perspectiveTransform=re(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(k(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add(K(t,"play",()=>this.requestRender()))},O))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=N(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:o}=e,{videoWidth:a,videoHeight:r}=t;if(a!==0&&r!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new le;i.wrapMode=ae.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=r,this.texture=new he(o,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,o,a){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(e,i,o);const{controlPoints:l,horizon:y}=i,h=Math.sqrt(l.length),c=h,{x:n,y:u}=e,_=this._vertices,P=l[0],G=l[h-1],F=l[(c-1)*h],J=l[(c-1)*h+h-1],S=w(y?y[0].mapPoint:P.mapPoint,o),L=w(y?y[1].mapPoint:G.mapPoint,o),v=w(F.mapPoint,o),D=w(J.mapPoint,o);this.clipGeometry=y?new oe({geometry:Q.fromJSON({rings:[[[v.x,v.y],[D.x,D.y],[L.x,L.y],[S.x,S.y],[v.x,v.y]]],spatialReference:o})}):null;for(let f=0;f<l.length;f++){const A=l[f],{sourcePoint:M,mapPoint:V}=A;if(M==null||V==null)continue;const x=w(V,o);_[f*T+0]=x.x-n,_[f*T+1]=x.y-u}let E=t;if(a){const f=Math.min(S.x,L.x,v.x,D.x),A=Math.max(S.x,L.x,v.x,D.x),{worldWidth:M,xBounds:V}=a,[x,R]=V;f<x&&A>x?E=M:A>R&&f<R&&(E=-M)}this.wrapAroundShift=E,this.isWrapAround=E!==0}draw(e,t){this.isReady&&this._vertices&&this._indices&&this._texCoords?t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(e,t,o){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=t,r=Math.sqrt(a.length),i=r,l=new Float32Array(T*a.length),y=new Uint16Array(2*a.length);for(let n=0;n<a.length;n++){const u=a[n],{sourcePoint:_,mapPoint:P}=u;if(_==null||P==null)continue;const G=w(P,o);l[n*T+0]=G.x-e.x,l[n*T+1]=G.y-e.y,y[2*n+0]=_.x,y[2*n+1]=_.y}const h=new Uint16Array(i*r+(i-2)*(r+2));let c=0;for(let n=0;n<i;n++){for(let u=0;u<r;u++)h[c++]=n*r+u,h[c++]=(n+1)*r+u;n<i-2&&(h[c++]=(n+1)*r+(r-1),h[c++]=(n+1)*r)}this._vertices=l,this._texCoords=y,this._indices=h}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let o=null;if(t){const a=t.startX,r=t.startY,i=t.endX,l=t.endY;o=[{sourcePoint:z(a,r),mapPoint:new H(t.startLongitude,t.startLatitude)},{sourcePoint:z(i,l),mapPoint:new H(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:o}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const o=new Array(t),a=Math.max(...e.map(({x:i})=>i)),r=this.element.videoWidth/a;for(let i=0;i<t;i++){const{x:l,y,lat:h,lon:c}=e[i];o[i]={sourcePoint:z(l*r,-y*r),mapPoint:new H(c,h)}}return o}}const C=new Z([255,127,0]);let g=class extends ne(pe){constructor(){super(...arguments),this._graphicsLayer=new te,this._frameOutlineGraphic=new b({symbol:new ee({outline:{type:"simple-line",color:C}})}),this._sensorTrailGraphic=new b({symbol:new q({color:C})}),this._lineOfSightGraphic=new b({symbol:new q({color:C})}),this._sensorLocationGraphic=new b({symbol:new B({color:C})}),this._frameCenterGraphic=new b({symbol:new B({color:C,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=C,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){this.addHandles($(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},O)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new j({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new ie,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new ye({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new me(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([$(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),O),$(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),O)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(s){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(s){this.graphicsView.processUpdate(s)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:s}=this.layer,{visibleTelemetryElements:e}=this;s&&e&&(e.frameOutline&&s.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&s.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&s.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,e.sensorLocation&&s.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&s.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const s=new ce(this.layer.videoElement);this.addAttachHandles([$(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:e}=this;e?.frame?(s.frameHorizonPoints=this.layer.frameHorizonPoints,s.groundControlPoints=this.layer.groundControlPoints,s.opacity=1):s.opacity=0},O)]),this._overlayContainer.addChild(s),this.view.stage.requestRender()}};m([p()],g.prototype,"graphicsView",void 0),m([p()],g.prototype,"layer",void 0),m([p()],g.prototype,"symbolColor",void 0),m([p({type:j})],g.prototype,"visibleTelemetryElements",void 0),g=m([W("esri.views.2d.layers.VideoLayerView2D")],g);const de=g,Ge=Object.freeze(Object.defineProperty({__proto__:null,default:de},Symbol.toStringTag,{value:"Module"}));export{Ge as V,j as l};
