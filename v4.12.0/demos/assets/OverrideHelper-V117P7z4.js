import{ak as d,dl as y,bz as b}from"./main-D6UWMbWJ.js";import{i as M}from"./colorUtils-B_grc-3o.js";import{B as C,W as u,U as I,v as x,a as k,c as O,z as S}from"./utils-BRg6PM3S.js";import h from"./callExpressionWithFeature-DiP3oKW-.js";import"./preload-helper-ExcqyqRp.js";import"./vec42-CKs01hkn.js";import"./common-DQOJ18NT.js";import"./vec4f64-o2zAXfmz.js";import"./defaultCIMValues-DII_GG3u.js";import"./enums-BJSSbDkD.js";import"./quantizationUtils-B28qRRbX.js";const N=f=>{if(!f)return[0,0,0,0];const{r:e,g:r,b:i,a:t}=f;return[e,r,i,255*t]};class a{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let t=!1;for(const s of i)if(s.primitiveName===e.primitiveName){t=!0;break}if(!t)for(const s of r)s.primitiveName===e.primitiveName&&i.push(s)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const t of e.effects)a.findApplicableOverrides(t,r,i);if(e.symbolLayers)for(const t of e.symbolLayers)a.findApplicableOverrides(t,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const t of e.effects)a.findApplicableOverrides(t,r,i);if(e.markerPlacement&&a.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const t of e.markerGraphics)a.findApplicableOverrides(t,r,i),a.findApplicableOverrides(t.symbol,r,i)}else e.type==="CIMCharacterMarker"?a.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?a.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&a.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&C(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=u(e),t=e.primitiveName,s=[];for(const c of r)c.primitiveName===t&&s.push(u(c));return{type:"cim-effect-param",effect:i,overrides:I(s)}}static async resolveSymbolOverrides(e,r,i,t,s,c,o){if(!e?.symbol)return null;let{symbol:l,primitiveOverrides:p}=e;const m=!!p;if(!m&&!t)return l;l=d(l),p=d(p);let v=!0;if(r||(r={attributes:{}},v=!1),m){if(v||(p=p.filter(n=>!n.valueExpressionInfo?.expression.includes("$feature"))),o||(p=p.filter(n=>!n.valueExpressionInfo?.expression.includes("$view"))),p.length>0){const n={spatialReference:i,fields:x(r.attributes),geometryType:s};await a.createRenderExpressions(p,n),a.evaluateOverrides(p,r,s??"esriGeometryPoint",c,o)}a.applyOverrides(l,p)}return t&&a.applyDictionaryTextOverrides(l,r,t,null),l}static async createRenderExpressions(e,r){const i=[];for(const t of e){const s=t.valueExpressionInfo;if(!s||a._expressionToRenderExpression.has(s.expression))continue;const c=y(s.expression,r.spatialReference,r.fields);i.push(c),c.then(o=>a._expressionToRenderExpression.set(s.expression,o))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,t,s){const c={$view:{scale:s?.scale}};for(const o of e){o.value&&typeof o.value=="object"&&M(o.value)&&(o.propertyName==="Color"||o.propertyName==="StrokeColor")&&(o.value=N(o.value));const l=o.valueExpressionInfo;if(!l)continue;const p=a._expressionToRenderExpression.get(l.expression);p&&(o.value=h(p,r,c,i,t))}}static applyDictionaryTextOverrides(e,r,i,t,s="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const c=e.symbolLayers;if(!c)return;for(const o of c)o&&o.type==="CIMVectorMarker"&&a.applyDictionaryTextOverrides(o,r,i,t,e.type==="CIMTextSymbol"?e.textCase:s)}break;case"CIMVectorMarker":{const c=e.markerGraphics;if(!c)return;for(const o of c)o&&a.applyDictionaryTextOverrides(o,r,i,t)}break;case"CIMMarkerGraphic":{const c=e.textString;if(c&&c.includes("[")){const o=k(c,i);e.textString=O(r,o,t,s)}}}}static applyOverrides(e,r,i,t){if(e.primitiveName){for(const s of r)if(s.primitiveName===e.primitiveName){const c=S(s.propertyName);if(t&&t.push({cim:e,nocapPropertyName:c,value:e[c]}),i){let o=!1;for(const l of i)l.primitiveName===e.primitiveName&&(o=!0);o||i.push(s)}s.value!=null&&(e[c]=s.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,i,t);if(e.symbolLayers)for(const s of e.symbolLayers)a.applyOverrides(s,r,i,t);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const s of e.effects)a.applyOverrides(s,r,i,t);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const s of e.markerGraphics)a.applyOverrides(s,r,i,t),a.applyOverrides(s.symbol,r,i,t)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new b(r).toRgba();return i[3]*=255,i}return r}}a._expressionToRenderExpression=new Map;export{a as OverrideHelper};
