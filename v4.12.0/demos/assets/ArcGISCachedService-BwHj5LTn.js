import{ds as $,s as d,bc as O,a$ as I,ak as z,b9 as x,X as M,v as c,x as m,a5 as C,a6 as q,gS as P,gR as k,a as U,cl as j,J as S,dt as R,Q as E,u as B,B as g,O as H}from"./main-D6UWMbWJ.js";import{z as _}from"./TileInfo-vOJ-d3SA.js";import{E as F}from"./ByteSizeUnit-BsxeN7wM.js";import{e as J}from"./LRUCache-CnC3D6GO.js";import{t as N}from"./TileKey-DZd6gJy7.js";import{i as G}from"./memoryEstimations-bvdrNroi.js";class K{constructor(t,l=0,i=t.lods[t.lods.length-1].level){this.tileInfo=t,this.minLOD=l,this.maxLOD=i,t.lodAt(l)||(this.minLOD=t.lods[0].level),t.lodAt(i)||(this.maxLOD=t.lods[t.lods.length-1].level)}get effectiveMinLOD(){return this.minLOD??this.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.tileInfo.lods[this.tileInfo.lods.length-1].level}getAvailability(t,l,i){const a=this.tileInfo?.lodAt(t);return!a||t<this.minLOD||t>this.maxLOD?"unavailable":a.cols&&a.rows?i>=a.cols[0]&&i<=a.cols[1]&&l>=a.rows[0]&&l<=a.rows[1]?"unknown":"unavailable":"unknown"}async fetchAvailability(t,l,i,a){await $(a);const s=this.getAvailability(t,l,i);if(s==="unavailable")throw new d("tile-map:tile-unavailable","Tile is not available",{level:t,row:l,col:i});return s}async fetchAvailabilityUpsample(t,l,i,a,s){await $(s),a.level=t,a.row=l,a.col=i;const o=this.tileInfo;return o.updateTileInfo(a),this.fetchAvailability(t,l,i,s).catch(n=>{if(O(n))throw n;if(o.upsampleTile(a))return this.fetchAvailabilityUpsample(a.level,a.row,a.col,a,s);throw n})}}function Q(e,t=!1){return e<=I?t?new Array(e).fill(0):new Array(e):new Uint32Array(e)}class w{constructor(t){Y(t);const{location:l,data:i}=t;this.location=Object.freeze(z(l));const a=this.location.width,s=this.location.height;let o=!0,n=!0;const p=Math.ceil(a*s/32),r=Q(p);let h=0;for(let f=0;f<i.length;f++){const u=f%32;i[f]?(n=!1,r[h]|=1<<u):o=!1,u===31&&++h}n?(this._availability="unavailable",this.byteSize=40):o?(this._availability="available",this.byteSize=40):(this._availability=r,this.byteSize=40+G(r))}getAvailability(t,l){if(this._availability==="unavailable"||this._availability==="available")return this._availability;const i=(t-this.location.top)*this.location.width+(l-this.location.left),a=i%32,s=i>>5,o=this._availability;return s<0||s>o.length?"unknown":o[s]&1<<a?"available":"unavailable"}static fromDefinition(t,l){const i=t.service.request||x,{row:a,col:s,width:o,height:n}=t,p={query:{f:"json"}};return l=l?{...p,...l}:p,i(X(t),l).then(r=>r.data).catch(r=>{if(r?.details?.httpStatus===422)return{location:{top:a,left:s,width:o,height:n},valid:!0,data:new Array(o*n).fill(0)};throw r}).then(r=>{if(r.location&&(r.location.top!==a||r.location.left!==s||r.location.width!==o||r.location.height!==n))throw new d("tilemap:location-mismatch","Tilemap response for different location than requested",{response:r,definition:{top:a,left:s,width:o,height:n}});return w.fromJSON(r)})}static fromJSON(t){return Object.freeze(new w(t))}}function A(e){return`${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}function X(e){let t;if(e.service.tileServers?.length){const i=e.service.tileServers;t=`${i&&i.length?i[e.row%i.length]:e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`}else t=`${e.service.url}/tilemap/${e.level}/${e.row}/${e.col}/${e.width}/${e.height}`;const l=e.service.query;return l&&(t=`${t}?${l}`),t}function Y(e){if(!e?.location)throw new d("tilemap:missing-location","Location missing from tilemap response");if(e.valid===!1)throw new d("tilemap:invalid","Tilemap response was marked as invalid");if(!e.data)throw new d("tilemap:missing-data","Data missing from tilemap response");if(!Array.isArray(e.data))throw new d("tilemap:data-mismatch","Data must be an array of numbers");if(e.data.length!==e.location.width*e.location.height)throw new d("tilemap:data-mismatch","Number of data items does not match width/height of tilemap")}var y;function L(e,t,l){return new d("tile-map:tile-unavailable","Tile is not available",{level:e,row:t,col:l})}let v=y=class extends C{constructor(e){super(e),this._pendingTilemapRequests={},this.request=x,this.size=32,this._prefetchingEnabled=!0}initialize(){this._tilemapCache=new J(2*F.MEGABYTES),this.addHandles(q(()=>{const{layer:e}=this;return[e?.parsedUrl,e?.tileServers,e?.apiKey,e?.customParameters]},()=>this._initializeTilemapDefinition(),R))}get effectiveMinLOD(){return this.minLOD??this.layer.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.layer.tileInfo.lods[this.layer.tileInfo.lods.length-1].level}getAvailability(e,t,l){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return"unavailable";const i=this._tilemapFromCache(e,t,l,this._tmpTilemapDefinition);return i?i.getAvailability(t,l):"unknown"}fetchAvailability(e,t,l,i){return!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD?Promise.reject(L(e,t,l)):this._fetchTilemap(e,t,l,i).catch(a=>a).then(a=>{if(a instanceof w){const s=a.getAvailability(t,l);if(s==="unavailable")throw L(e,t,l);return s}if(O(a))throw a;return"unknown"})}fetchAvailabilityUpsample(e,t,l,i,a){i.level=e,i.row=t,i.col=l;const s=this.layer.tileInfo;s.updateTileInfo(i);const o=this.fetchAvailability(e,t,l,a).catch(n=>{if(O(n))throw n;if(s.upsampleTile(i))return this.fetchAvailabilityUpsample(i.level,i.row,i.col,i,a);throw n});return this._fetchAvailabilityUpsamplePrefetch(i.id,e,t,l,a,o),o}async _fetchAvailabilityUpsamplePrefetch(e,t,l,i,a,s){if(!this._prefetchingEnabled||e==null)return;const o=`prefetch-${e}`;if(this.hasHandles(o))return;const n=new AbortController;s.then(()=>n.abort(),()=>n.abort());let p=!1;const r=E(()=>{p||(p=!0,n.abort())});if(this.addHandles(r,o),await P(10,n.signal).catch(()=>{}),p||(p=!0,this.removeHandles(o)),k(n))return;const h=new N(e,t,l,i),f={...a,signal:n.signal},u=this.layer.tileInfo;for(let T=0;y._prefetches.length<y._maxPrefetch&&u.upsampleTile(h);++T){const b=this.fetchAvailability(h.level,h.row,h.col,f);y._prefetches.push(b);const D=()=>{y._prefetches.removeUnordered(b)};b.then(D,D)}}_fetchTilemap(e,t,l,i){if(!this.layer.tileInfo.lodAt(e)||e<this.effectiveMinLOD||e>this.effectiveMaxLOD)return Promise.reject(new d("tilemap-cache:level-unavailable",`Level ${e} is unavailable in the service`));const a=this._tmpTilemapDefinition,s=this._tilemapFromCache(e,t,l,a);if(s)return Promise.resolve(s);const o=i?.signal;return i={...i,signal:null},new Promise((n,p)=>{U(o,()=>p(B()));const r=A(a);let h=this._pendingTilemapRequests[r];if(!h){h=w.fromDefinition(a,i).then(u=>(this._tilemapCache.put(r,u,u.byteSize),u));const f=()=>{delete this._pendingTilemapRequests[r]};this._pendingTilemapRequests[r]=h,h.then(f,f)}h.then(n,p)})}_initializeTilemapDefinition(){if(!this.layer.parsedUrl)return;const{parsedUrl:e,apiKey:t,customParameters:l}=this.layer;this._tilemapCache.clear(),this._tmpTilemapDefinition={service:{url:e.path,query:j({...e.query,...l,token:t??e.query?.token}),tileServers:this.layer.tileServers,request:this.request},width:this.size,height:this.size,level:0,row:0,col:0}}_tilemapFromCache(e,t,l,i){i.level=e,i.row=t-t%this.size,i.col=l-l%this.size;const a=A(i);return this._tilemapCache.get(a)}get test(){}};v._maxPrefetch=4,v._prefetches=new M({initialSize:y._maxPrefetch}),c([m({constructOnly:!0})],v.prototype,"layer",void 0),c([m({constructOnly:!0})],v.prototype,"minLOD",void 0),c([m({constructOnly:!0})],v.prototype,"maxLOD",void 0),c([m({constructOnly:!0})],v.prototype,"request",void 0),c([m({constructOnly:!0})],v.prototype,"size",void 0),v=y=c([S("esri.layers.support.TilemapCache")],v);const le=e=>{let t=class extends e{constructor(){super(...arguments),this.copyright=null,this.minScale=0,this.maxScale=0,this.spatialReference=null,this.tileInfo=null,this.tilemapCache=null}destroy(){this.tilemapCache?.destroy?.()}readMinScale(l,i){return i.minLOD!=null&&i.maxLOD!=null?l:0}readMaxScale(l,i){return i.minLOD!=null&&i.maxLOD!=null?l:0}get supportsBlankTile(){return this.version>=10.2}readTilemapCache(l,i,a){const s=i.capabilities?.includes("Tilemap");let{minLOD:o,maxLOD:n,minScale:p,maxScale:r}=i;if(o==null&&n==null&&(p!==0||r!==0)){const h=f=>Math.round(1e4*f)/1e4;p=h(p||i.tileInfo.lods[0].scale),r=h(r||i.tileInfo.lods[i.tileInfo.lods.length-1].scale);for(const f of i.tileInfo.lods){const u=h(f.scale);o=u>=p?f.level:o,n=u>=r?f.level:n}}if(s)return new v({layer:this,minLOD:o,maxLOD:n});if(i.tileInfo){const h=new _;return h.read(i.tileInfo,a),new K(h,o,n)}return null}};return c([m({json:{read:{source:"copyrightText"}}})],t.prototype,"copyright",void 0),c([m()],t.prototype,"minScale",void 0),c([g("service","minScale")],t.prototype,"readMinScale",null),c([m()],t.prototype,"maxScale",void 0),c([g("service","maxScale")],t.prototype,"readMaxScale",null),c([m({type:H})],t.prototype,"spatialReference",void 0),c([m({readOnly:!0})],t.prototype,"supportsBlankTile",null),c([m({type:_})],t.prototype,"tileInfo",void 0),c([m()],t.prototype,"tilemapCache",void 0),c([g("service","tilemapCache",["capabilities","tileInfo"])],t.prototype,"readTilemapCache",null),c([m()],t.prototype,"version",void 0),t=c([S("esri.layers.mixins.ArcGISCachedService")],t),t};export{v as T,K as e,le as p};
