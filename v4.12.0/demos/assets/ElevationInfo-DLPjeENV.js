import{v as s,x as r,D as d,eD as c,J as x,T as y,q as E,ah as v,B as I,z as w,fq as g}from"./main-D6UWMbWJ.js";import{m as a}from"./lengthUtils-B1iOgQDj.js";var u;let n=u=class extends d{constructor(e){super(e)}async collectRequiredFields(e,t){return c(e,t,this.expression)}clone(){return new u({expression:this.expression,title:this.title})}equals(e){return this.expression===e.expression&&this.title===e.title}};s([r({type:String,json:{write:{isRequired:!0}}})],n.prototype,"expression",void 0),s([r({type:String,json:{write:!0}})],n.prototype,"title",void 0),n=u=s([x("esri.symbols.support.FeatureExpressionInfo")],n);const f=n;function F(e){return!!e&&a[e]!=null}function S(e){return 1/(a[e]||1)}function j(){const e=Object.keys(a);return y(e,"decimal-degrees"),e.sort(),e}const $=j();var p;const i=E()({onTheGround:"on-the-ground",relativeToGround:"relative-to-ground",relativeToScene:"relative-to-scene",absoluteHeight:"absolute-height"}),l=new v({foot:"feet",kilometer:"kilometers",meter:"meters",mile:"miles","us-foot":"us-feet",yard:"yards"});let o=p=class extends d{constructor(e){super(e),this.featureExpressionInfo=void 0,this.offset=null}readFeatureExpressionInfo(e,t){return e??(t.featureExpression&&t.featureExpression.value===0?{expression:"0"}:void 0)}writeFeatureExpressionInfo(e,t,h,m){t[h]=e.write({},m),e.expression==="0"&&(t.featureExpression={value:0})}get mode(){const{offset:e,featureExpressionInfo:t}=this;return this._isOverridden("mode")?this._get("mode"):e!=null||t?"relative-to-ground":"on-the-ground"}set mode(e){this._override("mode",e)}set unit(e){this._set("unit",e)}write(e,t){return this.offset||this.mode||this.featureExpressionInfo||this.unit?super.write(e,t):null}clone(){return new p({mode:this.mode,offset:this.offset,featureExpressionInfo:this.featureExpressionInfo?this.featureExpressionInfo.clone():void 0,unit:this.unit})}equals(e){return this.mode===e.mode&&this.offset===e.offset&&this.unit===e.unit&&g(this.featureExpressionInfo,e.featureExpressionInfo)}};s([r({type:f,json:{write:!0}})],o.prototype,"featureExpressionInfo",void 0),s([I("featureExpressionInfo",["featureExpressionInfo","featureExpression"])],o.prototype,"readFeatureExpressionInfo",null),s([w("featureExpressionInfo",{featureExpressionInfo:{type:f},"featureExpression.value":{type:[0]}})],o.prototype,"writeFeatureExpressionInfo",null),s([r({type:i.apiValues,nonNullable:!0,json:{type:i.jsonValues,read:i.read,write:{writer:i.write,isRequired:!0}}})],o.prototype,"mode",null),s([r({type:Number,json:{write:!0}})],o.prototype,"offset",void 0),s([r({type:$,json:{type:String,read:l.read,write:l.write}})],o.prototype,"unit",null),o=p=s([x("esri.symbols.support.ElevationInfo")],o);const _=o;export{F as e,_ as h,S as n};
