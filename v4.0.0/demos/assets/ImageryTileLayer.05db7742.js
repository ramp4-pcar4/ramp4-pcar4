import{a6 as qe,K as x,N as S,M as N,l5 as me,l6 as et,k as W,fd as se,dB as Ue,l7 as Ve,O as K,l8 as Xe,i as D,fm as tt,jN as it,e as P,l9 as Be,la as De,bQ as st,U as Ye,lb as Ke,lc as rt,ld as nt,le as at,jG as ot,lf as lt,eT as ct,an as ut,s as O,ae as q,jJ as ve,jF as ft,lg as ht,bA as L,lh as fe,jK as dt,jL as mt,jM as pt,at as yt,li as gt,lj as xt,lk as It,ll as Oe,lm as he,F as wt,jI as bt,jH as St,E as Qe,ln as Ce,lo as vt,R as Tt,b0 as Rt,lp as _t,d as kt,lq as Ct,lr as Pt,ls as Ft,fC as Mt,lt as $t,lu as Bt,lv as Dt,lw as pe,lx as Ot,ly as Et,lz as zt,kh as Ht,ki as Nt,dw as Lt,dx as At,kT as Jt,kV as Wt,kj as jt,dy as Gt,dD as qt,cb as Ut,jh as ue,lA as Vt,km as Xt,ak as Yt,jC as Kt,f_ as Qt,lB as Zt,kM as ei,fe as ti,lC as ii,dC as si}from"./main.efb50b2c.js";import{i as Ee,m as ze,x as He,d as ri,h as ni}from"./RawBlockCache.2597b7f9.js";import{k as Ne,X as ye,_ as Le,t as Ae,e as ai,D as Te,F as Re,V as oi,H as li,v as ci}from"./rasterProjectionHelper.5be6c842.js";import{f as ui,i as fi,m as Pe,c as hi}from"./utils.58e19774.js";import"./preload-helper.387dac8f.js";const Je=qe.getLogger("esri.layers.mixins.ImageryTileMixin"),di=e=>{let t=class extends e{constructor(){super(...arguments),this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.fullExtent=null,this.interpolation="nearest",this.multidimensionalDefinition=null,this.raster=null,this.rasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.tileInfo=null,this.symbolizer=null}set url(i){this._set("url",Xe(i,Je))}set renderer(i){this._set("renderer",i),this.updateRenderer()}async convertVectorFieldData(i,s){if(D(i))return null;const r=this._rasterJobHandler.instance,n=this.rasterInfo.dataType;return r?r.convertVectorFieldData({pixelBlock:i,dataType:n},s):tt(i,n)}async createFlowMesh(i,s){const r=this._rasterJobHandler.instance;return r?r.createFlowMesh(i,s):it(i.meshType,i.simulationSettings,i.flowData,P(s.signal)?s.signal:new AbortController().signal)}normalizeRasterFetchOptions(i){const{multidimensionalInfo:s}=this.rasterInfo;if(D(s))return i;let r=i.multidimensionalDefinition||this.multidimensionalDefinition;!D(r)&&r.length||(r=Be(this.raster.rasterInfo));const n=i.timeExtent||this.timeExtent;if(P(r)&&P(n)&&(P(n.start)||P(n.end))){r=r.map(y=>y.clone());const a=s.variables.find(({name:y})=>y===r[0].variableName)?.dimensions?.find(({name:y})=>y==="StdTime"),l=r.find(({dimensionName:y})=>y==="StdTime");if(!a||!l)return{...i,multidimensionalDefinition:null};const{start:o,end:c}=n,u=D(o)?null:o.getTime(),d=D(c)?null:c.getTime(),f=u??d,h=d??u;if(P(a.values)){const y=a.values.filter(p=>{if(Array.isArray(p)){if(f===h)return p[0]<=f&&p[1]>=f;const m=p[0]<=f&&p[1]>f||p[0]<h&&p[1]>=h,g=p[0]>=f&&p[1]<=h||p[0]<f&&p[1]>h;return m||g}return f===h?p===f:p>=f&&p<=h});if(y.length){const p=y.sort((m,g)=>f===h?(m[0]??m)-(g[0]??g):Math.abs((m[1]??m)-h)-Math.abs((g[1]??g)-h))[0];l.values=[p]}else r=null}else if(a.hasRegularIntervals&&a.extent){const[y,p]=a.extent;f>p||h<y?r=null:l.values=f===h?[f]:[Math.max(y,f),Math.min(p,h)]}}return{...i,multidimensionalDefinition:r}}async updateRenderer(){if(!this.loaded||JSON.stringify(this._cachedRendererJson)===JSON.stringify(this.renderer))return;const i=this._rasterJobHandler.instance;i&&(this.symbolizer.rendererJSON=De(this.renderer.toJSON()),this.symbolizer.bind(),await i.updateSymbolizer(this.symbolizer),this._cachedRendererJson=this.renderer.toJSON())}async applyRenderer(i,s){const r=i&&i.pixelBlock;if(!(P(r)&&r.pixels&&r.pixels.length>0))return null;let n;await this.updateRenderer();const a=this._rasterJobHandler.instance,{bandIds:l}=this;return n=a?await a.symbolize({...i,simpleStretchParams:s,bandIds:l}):this.symbolizer.symbolize({...i,simpleStretchParams:s,bandIds:l}),n}getTileUrl(i,s,r){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${i}/${s}/${r}`:""}getCompatibleTileInfo(i,s,r=!1){if(!this.loaded||D(s))return null;if(r&&i.equals(this.spatialReference))return this.tileInfo;const n=st(i);return se.create({size:256,spatialReference:i,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:s.xmin,y:s.ymax}})}getCompatibleFullExtent(i){return this.loaded?(this._compatibleFullExtent&&this._compatibleFullExtent.spatialReference.equals(i)||(this._compatibleFullExtent=this.raster.computeExtent(i)),this._compatibleFullExtent):null}async fetchTile(i,s,r,n={}){if(n.requestAsImageElement){const a=this.getTileUrl(i,s,r);return Ye(a,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(l=>l.data)}if(P(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),D(n.multidimensionalDefinition))){const a=n.tileInfo||this.rasterInfo.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(i,s,r,a),pixelBlock:null}}return await this._initJobHandler(),this.renderer.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(i,s,r,n)}async fetchPixels(i,s,r,n={}){return P(this.rasterInfo.multidimensionalInfo)&&(n=this.normalizeRasterFetchOptions(n),D(n.multidimensionalDefinition))?{extent:i,pixelBlock:null}:(await this._initJobHandler(),this.raster.fetchPixels(i,s,r,n))}async identify(i,s={}){return P(this.rasterInfo.multidimensionalInfo)&&!(this.rasterInfo.hasMultidimensionalTranspose&&!!(Ke(s.multidimensionalDefinition)||s.transposedVariableName||s.timeExtent))&&(s=this.normalizeRasterFetchOptions(s),D(s.multidimensionalDefinition))?{location:i,value:null}:this.raster.identify(i,s)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const i=this.rasterInfo.multidimensionalInfo;if(D(i)||this.rasterInfo.dataType!=="standard-time")return!1;const s=this.multidimensionalDefinition[0]?.variableName;return i.variables.some(r=>r.name===s&&r.dimensions.some(n=>n.name==="StdTime"))}getStandardTimeValue(i){return new Date(24*(i-25569)*3600*1e3).toString()}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Be(this.raster.rasterInfo)),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const i=new lt;return this._rasterJobHandler.connectionPromise=i.initialize().then(()=>{this._rasterJobHandler.instance=i,this.raster.rasterJobHandler=i,this.renderer&&this.updateRenderer()}).catch(()=>null),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this.raster.rasterJobHandler=null,this._cachedRendererJson=null}_configDefaultInterpolation(){if(this.interpolation==null){const i=rt(this.rasterInfo,this.raster.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",i)}}_configDefaultRenderer(){const i=this.raster.rasterInfo;if(this.bandIds||(this.bandIds=nt(i)),!this.renderer){const r=at(i,{bandIds:this.bandIds,variableName:P(this.multidimensionalDefinition)?this.multidimensionalDefinition[0]?.variableName:null});this.raster.datasetFormat==="WCSServer"&&r.type==="raster-stretch"&&(i.statistics?.[0].max>1e24||i.statistics?.[0].min<-1e24)&&(r.dynamicRangeAdjustment=!0,r.statistics=null,r.stretchType==="none"&&(r.stretchType="min-max")),this.renderer=r}this.symbolizer?(this.symbolizer.rendererJSON=De(this.renderer.toJSON()),this.symbolizer.rasterInfo=i):this.symbolizer=new ot({rendererJSON:this.renderer.toJSON(),rasterInfo:i});const s=this.symbolizer.bind();s.success||Je.warn("imagery-tile-mixin",s.error||"The given renderer is not supported by the layer.")}};return x([S()],t.prototype,"_cachedRendererJson",void 0),x([S()],t.prototype,"_compatibleFullExtent",void 0),x([S()],t.prototype,"_rasterJobHandler",void 0),x([S()],t.prototype,"bandIds",void 0),x([S({json:{origins:{service:{read:{source:"copyrightText"}}}}})],t.prototype,"copyright",void 0),x([S({type:N,json:{read:!1}}),me("rasterInfo.extent")],t.prototype,"fullExtent",void 0),x([S()],t.prototype,"interpolation",void 0),x([S()],t.prototype,"ioConfig",void 0),x([S({type:[et]})],t.prototype,"multidimensionalDefinition",void 0),x([S()],t.prototype,"raster",void 0),x([S({readOnly:!0}),me("raster.rasterInfo")],t.prototype,"rasterInfo",void 0),x([S()],t.prototype,"sourceJSON",void 0),x([S({type:W,json:{read:!1}}),me("rasterInfo.spatialReference")],t.prototype,"spatialReference",void 0),x([S({type:se,json:{read:!1}}),me("rasterInfo.storageInfo.tileInfo")],t.prototype,"tileInfo",void 0),x([S(Ue)],t.prototype,"url",null),x([S({types:Ve})],t.prototype,"renderer",null),x([S()],t.prototype,"symbolizer",void 0),t=x([K("esri.layers.ImageryTileMixin")],t),t},ge=8;let G=class extends ct(ut){constructor(){super(...arguments),this.rasterJobHandler=null,this.datasetName=null,this.datasetFormat=null,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}async init(){const e=Ne();this.addResolvingPromise(e),await this.when()}normalizeCtorArgs(e){return e&&e.ioConfig&&(e={...e,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:se.create(),...e.ioConfig}}),e}get _isGlobalWrappableSource(){const{rasterInfo:e}=this,t=ye(e.spatialReference);return P(t)&&e.extent.width>=t/2}set url(e){this._set("url",Xe(e,qe.getLogger(this.declaredClass)))}async open(e){throw new O("BaseRaster:open-not-implemented","open() is not implemented")}async fetchTile(e,t,i,s={}){const r=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,n=this.getTileExtentFromTileInfo(e,t,i,r);return this.fetchPixels(n,r.size[0],r.size[1],s)}async identify(e,t={}){const{multidimensionalDefinition:i,timeExtent:s}=t,{hasMultidimensionalTranspose:r,multidimensionalInfo:n}=this.rasterInfo;let{transposedVariableName:a}=t;const l=P(n)&&r&&(s!=null||Ke(i));l&&!a&&(a=P(i)&&i.length>0?i[0].variableName:n.variables[0].name,t={...t,transposedVariableName:a}),t=this._getRequestOptionsWithSliceId(t);const{spatialReference:o,extent:c}=this.rasterInfo,{datumTransformation:u}=t;let d=Le(e,o,u);if(!c.intersects(d))return{location:d,value:null};if(P(this.rasterInfo.transform)){const C=this.rasterInfo.transform.inverseTransform(d);if(!this.rasterInfo.nativeExtent.intersects(C))return{location:C,value:null};d=C}let f=0;const h=a&&P(n)&&this.rasterInfo.hasMultidimensionalTranspose;if(!h){if(t.srcResolution)f=Ae(t.srcResolution,this.rasterInfo,this.ioConfig.sampling).pyramidLevel;else if(f=await this.computeBestPyramidLevelForLocation(e,t),f==null)return{location:d,value:null}}const y=this.identifyPixelLocation(d,f,null,h);if(y===null)return{location:d,value:null};const{row:p,col:m,rowOffset:g,colOffset:b,blockWidth:v}=y,k=a??q(t.sliceId),R=Ee(this.url,k),w=`${f}/${p}/${m}`;let I=ze(R,null,w);D(I)&&(I=this.fetchRawTile(f,p,m,t),He(R,null,w,I));const _=await I;if(D(_)||!_.pixels?.length)return{location:d,value:null};const T=g*v+b;return this._processIdentifyResult(_,{srcLocation:d,position:T,pyramidLevel:f,useTransposedTile:h,requestSomeSlices:l,identifyOptions:t})}async fetchPixels(e,t,i,s={}){if(e=ai(e),(s=this._getRequestOptionsWithSliceId(s)).requestRawData)return this._fetchPixels(e,t,i,s);const r=ye(e.spatialReference),n=Te(e);if(D(r)||n===0||n===1&&this._isGlobalWrappableSource)return this._fetchPixels(e,t,i,s);if(n>=3)return{extent:e,pixelBlock:null};const a=[],{xmin:l,xmax:o}=e,c=Math.round(r/(o-l)*t),u=c-Math.round((r/2-l)/(o-l)*t);let d=0;const f=[];for(let m=0;m<=n;m++){const g=new N({xmin:m===0?l:-r/2,xmax:m===n?o-r*m:r/2,ymin:e.ymin,ymax:e.ymax,spatialReference:e.spatialReference}),b=m===0?c-u:m===n?t-d:c;d+=b,f.push(b);const v=s.disableWrapAround&&m>0?null:this._fetchPixels(g,b,i,s);a.push(v)}const h=(await Promise.all(a)).map(m=>m?.pixelBlock);let y=null;const p={width:t,height:i};return this.rasterJobHandler?y=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:p,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:f},s)).pixelBlock:y=ve(h,p,{blockWidths:f}),{extent:e,srcExtent:Re(e,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:y}}async fetchRawPixels(e,t,i,s={}){t={x:Math.floor(t.x),y:Math.floor(t.y)};const r=await this._fetchRawTiles(e,t,i,s),{nativeExtent:n,nativePixelSize:a,storageInfo:l}=this.rasterInfo,o=2**e,c=a.x*o,u=a.y*o,d=new N({xmin:n.xmin+c*t.x,xmax:n.xmin+c*(t.x+i.width-1),ymin:n.ymax-u*(t.y+i.height-1),ymax:n.ymax-u*t.y,spatialReference:n.spatialReference});if(!r)return{extent:d,srcExtent:d,pixelBlock:null};const{pixelBlocks:f,mosaicSize:h}=r;if(f.length===1&&P(f[0])&&f[0].width===i.width&&f[0].height===i.height)return{extent:d,srcExtent:d,pixelBlock:r.pixelBlocks[0]};const y=e>0?l.pyramidBlockWidth:l.blockWidth,p=e>0?l.pyramidBlockHeight:l.blockHeight,m={x:t.x%y,y:t.y%p};let g;return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:f,srcMosaicSize:h,destDimension:i,clipOffset:m,clipSize:i,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock:g=ve(f,h,{clipOffset:m,clipSize:i}),{extent:d,srcExtent:d,pixelBlock:g}}fetchRawTile(e,t,i,s){throw new O("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(e){return Re(this.rasterInfo.extent,e)}decodePixelBlock(e,t){return!this.rasterJobHandler||t.useCanvas?ft(e,t):this.rasterJobHandler.decode({data:e,options:t})}async request(e,t,i){const{customFetchParameters:s}=this.ioConfig,{range:r,query:n,headers:a}=t;i=i??t.retryCount??this.ioConfig.retryCount;const l=r?{Range:`bytes=${r.from}-${r.to}`}:null;try{return await Ye(e,{...t,query:{...n,...s},headers:{...a,...l}})}catch(o){if(i>0)return i--,this.request(e,t,i);throw o}}getSliceIndex(e){const{multidimensionalInfo:t}=this.rasterInfo;return D(t)||D(e)||e.length===0?null:ht(e,t)}getTileExtentFromTileInfo(e,t,i,s){const r=s.lodAt(e);return this.getTileExtent({x:r.resolution,y:r.resolution},t,i,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:e,spatialReference:t,extent:i,pixelSize:s}=this.rasterInfo;if(!e.tileInfo){const r=[],n=e.maximumPyramidLevel||0;let a=Math.max(s.x,s.y),l=1/.0254*96*a;for(let c=0;c<=n;c++)r.push({level:n-c,resolution:a,scale:l}),a*=2,l*=2;const o=new L({x:i.xmin,y:i.ymax,spatialReference:t});e.tileInfo=new se({origin:o,size:[e.blockWidth,e.blockHeight],spatialReference:t,lods:r}),e.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(e,t=512,i=512,s){const{width:r,height:n,nativeExtent:a,pixelSize:l,spatialReference:o}=e,c=new L({x:a.xmin,y:a.ymax,spatialReference:o});s==null&&(s=Math.max(0,Math.round(Math.log(Math.max(r,n))/Math.LN2-8)));const u=this.computeBlockBoundary(a,512,512,{x:a.xmin,y:a.ymax},[l],s);e.storageInfo=new fe({blockWidth:t,blockHeight:i,pyramidBlockWidth:t,pyramidBlockHeight:i,origin:c,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(e,t={}){return 0}computeBlockBoundary(e,t,i,s,r,n=0,a=2){if(r.length===1&&n>0){r=[...r];let{x:u,y:d}=r[0];for(let f=0;f<n;f++)u*=a,d*=a,r.push({x:u,y:d})}const l=[],{x:o,y:c}=s;for(let u=0;u<r.length;u++){const{x:d,y:f}=r[u];l.push({minCol:Math.floor((e.xmin-o+.1*d)/t/d),maxCol:Math.floor((e.xmax-o-.1*d)/t/d),minRow:Math.floor((c-e.ymax+.1*f)/i/f),maxRow:Math.floor((c-e.ymin-.1*f)/i/f)})}return l}getPyramidPixelSize(e){const{nativePixelSize:t}=this.rasterInfo,{pyramidResolutions:i,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(e===0)return t;if(P(i)&&i.length)return i[e-1];const r=s**e;return{x:t.x*r,y:t.y*r}}identifyPixelLocation(e,t,i,s){const{spatialReference:r,nativeExtent:n,storageInfo:a}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=a,u=s&&P(c)?c.tileSize[0]:a.blockWidth,d=s&&P(c)?c.tileSize[1]:a.blockHeight,f=Le(e,r,i);if(!n.intersects(f)||t<0||t>l)return null;const h=this.getPyramidPixelSize(t),{x:y,y:p}=h,m=(o.y-f.y)/p/d,g=(f.x-o.x)/y/u,b=Math.min(d-1,Math.floor((m-Math.floor(m))*d)),v=Math.min(u-1,Math.floor((g-Math.floor(g))*u));return{pyramidLevel:t,row:Math.floor(m),col:Math.floor(g),rowOffset:b,colOffset:v,blockWidth:u,srcLocation:f}}getTileExtent(e,t,i,s,r,n){const[a,l]=n,o=s.x+i*a*e.x,c=o+a*e.x,u=s.y-t*l*e.y,d=u-l*e.y;return new N({xmin:o,xmax:c,ymin:d,ymax:u,spatialReference:r})}getBlockWidthHeight(e){return{blockWidth:e>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:e>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(e,t,i){const s=this.rasterInfo.storageInfo.blockBoundary[e];return!s||s.maxRow<t||s.maxCol<i||s.minRow>t||s.minCol>i}async _fetchPixels(e,t,i,s={}){let r=Te(e);if(r>=2)return{extent:e,pixelBlock:null};const n=this._getSourceDataInfo(e,t,i,s),{pyramidLevel:a,pyramidResolution:l,srcResolution:o,srcExtent:c,srcWidth:u,srcHeight:d}=n;if(u===0||d===0)return{extent:e,srcExtent:c,pixelBlock:null};const f=q(this.rasterInfo.transform),h=f?.type==="gcs-shift",y=P(ye(e.spatialReference));!h&&y||(r=Te(n.srcExtent,h));const p=this.rasterInfo.storageInfo,m={x:Math.floor((c.xmin-p.origin.x)/l.x+.1),y:Math.floor((p.origin.y-c.ymax)/l.y+.1)},g=await this._fetchRawTiles(a,m,{width:u,height:d,wrapCount:r},s);if(!g)return{extent:e,srcExtent:c,pixelBlock:null};const b=a>0?p.pyramidBlockWidth:p.blockWidth,v=a>0?p.pyramidBlockHeight:p.blockHeight,k=b===u&&v===d&&m.x%b==0&&m.y%v==0,R=new L({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference}),w=!e.spatialReference.equals(this.rasterInfo.spatialReference),{datumTransformation:I}=s;if(!w&&k&&g.pixelBlocks.length===1&&b===t&&v===i&&o.x===R.x&&o.y===R.y)return{extent:e,srcExtent:c,pixelBlock:g.pixelBlocks[0]};const _=y&&P(ye(c.spatialReference)),T=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");T&&!this.rasterJobHandler&&await Ne();const C=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:e,srcBufferExtent:g.extent,pixelSize:R.toJSON(),datumTransformation:I,rasterTransform:f,hasWrapAround:r>0||_,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:T},s):oi({projectedExtent:e,srcBufferExtent:g.extent,pixelSize:R,datumTransformation:I,rasterTransform:f,hasWrapAround:r>0||_,isAdaptive:!1,includeGCSGrid:T});let M;const A=!s.requestRawData,U={rows:C.spacing[0],cols:C.spacing[1]},F=q(this._getRasterTileAlignmentInfo(a,g.extent.xmin)),{pixelBlocks:$,mosaicSize:E,isPartiallyFilled:j}=g;let z=null;if(this.rasterJobHandler)({pixelBlock:M,localNorthDirections:z}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:$,srcMosaicSize:E,destDimension:A?{width:t,height:i}:null,coefs:A?C.coefficients:null,sampleSpacing:A?U:null,projectDirections:T,gcsGrid:T?C.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:s.interpolation,alignmentInfo:F,blockWidths:null},s));else{const Y=ve($,E,{alignmentInfo:F});M=A?dt(Y,{width:t,height:i},C.coefficients,U,s.interpolation):Y,T&&C.gcsGrid&&(z=mt({width:t,height:i},C.gcsGrid),M=pt(M,this.rasterInfo.dataType,z))}return s.requestRawData||T?{srcExtent:c,pixelBlock:M,transformGrid:C,localNorthDirections:z,extent:e,isPartiallyFilled:j}:{srcExtent:c,extent:e,pixelBlock:M}}async _fetchRawTiles(e,t,i,s){const{origin:r,blockBoundary:n}=this.rasterInfo.storageInfo,{blockWidth:a,blockHeight:l}=this.getBlockWidthHeight(e);let{x:o,y:c}=t,{width:u,height:d,wrapCount:f}=i;const h=this._getRasterTileAlignmentInfo(e,0);s.buffer&&(o-=s.buffer.cols,c-=s.buffer.rows,u+=2*s.buffer.cols,d+=2*s.buffer.rows);let y=0,p=0,m=0;f&&P(h)&&({worldColumnCountFromOrigin:p,originColumnOffset:m,rightPadding:y}=h,p*h.blockWidth-y>=o+u&&(y=0));const g=Math.floor(o/a),b=Math.floor(c/l),v=Math.floor((o+u+y-1)/a),k=Math.floor((c+d+y-1)/l),R=n[e];if(!R)return null;const{minRow:w,minCol:I,maxCol:_,maxRow:T}=R;if(f===0&&(k<w||v<I||b>T||g>_))return null;const C=new Array;let M=!1;const A=this.ioConfig.allowPartialFill==null?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let Y=b;Y<=k;Y++)for(let ae=g;ae<=v;ae++){let de=ae;if(!s.disableWrapAround&&f&&P(h)&&p<=ae&&(de=ae-p-m),Y>=w&&de>=I&&T>=Y&&_>=de){const Me=this._fetchRawTile(e,Y,de,s);A?C.push(new Promise($e=>{Me.then(Ze=>$e(Ze)).catch(()=>{M=!0,$e(null)})})):C.push(Me)}else C.push(null)}if(C.length===0)return null;const U=await Promise.all(C),F={height:(k-b+1)*l,width:(v-g+1)*a},{spatialReference:$}=this.rasterInfo,E=this.getPyramidPixelSize(e),{x:j,y:z}=E;return{extent:new N({xmin:r.x+g*a*j,xmax:r.x+(v+1)*a*j,ymin:r.y-(k+1)*l*z,ymax:r.y-b*l*z,spatialReference:$}),pixelBlocks:U,mosaicSize:F,isPartiallyFilled:M}}_fetchRawTile(e,t,i,s){const r=this.rasterInfo.storageInfo.blockBoundary[e];if(!r)return Promise.resolve(null);const{minRow:n,minCol:a,maxCol:l,maxRow:o}=r;if(t<n||i<a||t>o||i>l)return Promise.resolve(null);const c=Ee(this.url,s.sliceId),u=`${e}/${t}/${i}`;let d=ze(c,s.registryId,u);if(D(d)){const f=new AbortController;d=this.fetchRawTile(e,t,i,{...s,signal:f.signal}),He(c,s.registryId,u,d,f),d.catch(()=>ri(c,s.registryId,u))}return s.signal&&yt(s,()=>{ni(c,s.registryId,u)}),d}_computeMagDirValues(e){const{bandCount:t,dataType:i}=this.rasterInfo;if(!(t===2&&i==="vector-magdir"||i==="vector-uv")||e?.length!==2||!e[0]?.length)return null;const s=e[0].length;if(i==="vector-magdir"){const o=e[1].map(c=>(c+360)%360);return[e[0],o]}const[r,n]=e,a=[],l=[];for(let o=0;o<s;o++){const[c,u]=gt([r[o],n[o]]);a.push(c),l.push(u)}return[a,l]}_getRasterTileAlignmentInfo(e,t){return this._rasterTileAlighmentInfo==null&&(this._rasterTileAlighmentInfo=li(this.rasterInfo)),D(this._rasterTileAlighmentInfo.pyramidsInfo)?null:{startX:t,halfWorldWidth:this._rasterTileAlighmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlighmentInfo.hasGCSSShiftTransform,...this._rasterTileAlighmentInfo.pyramidsInfo[e]}}_getSourceDataInfo(e,t,i,s={}){const r={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0};s.srcResolution&&(r.srcResolution=s.srcResolution,this._updateSourceDataInfo(e,r));const n=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:a,srcHeight:l,pyramidLevel:o}=r,c=a/t,u=l/i,d=o<n&&c*u>=16;if(d||o===n&&(c>ge||u>ge)||a===0||l===0){const f=new L({x:(e.xmax-e.xmin)/t,y:(e.ymax-e.ymin)/i,spatialReference:e.spatialReference});let h=ci(f,this.rasterInfo.spatialReference,e,r.datumTransformation);const y=!h||s.srcResolution&&h.x+h.y<s.srcResolution.x+s.srcResolution.y;if(d&&s.srcResolution&&y){const p=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(n-o+3>=p){const m=2**p;h={x:s.srcResolution.x*m,y:s.srcResolution.y*m}}}h&&(r.srcResolution=h,this._updateSourceDataInfo(e,r))}return(r.srcWidth/t>ge||r.srcHeight/i>ge)&&(r.srcWidth=0,r.srcHeight=0),r}_updateSourceDataInfo(e,t){t.srcWidth=0,t.srcHeight=0;const i=this.rasterInfo.spatialReference,{srcResolution:s,datumTransformation:r}=t,{pyramidLevel:n,pyramidResolution:a,excessiveReading:l}=Ae(s,this.rasterInfo,this.ioConfig.sampling);if(l)return;let o=t.srcExtent||Re(e,i,r);if(o==null)return;const c=q(this.rasterInfo.transform);c&&(o=c.inverseTransform(o)),t.srcExtent=o;const u=Math.ceil((o.xmax-o.xmin)/a.x-.1),d=Math.ceil((o.ymax-o.ymin)/a.y-.1);t.pyramidLevel=n,t.pyramidResolution=a,t.srcWidth=u,t.srcHeight=d}_getRequestOptionsWithSliceId(e){return P(this.rasterInfo.multidimensionalInfo)&&e.sliceId==null&&(e={...e,sliceId:this.getSliceIndex(e.multidimensionalDefinition)}),e}_processIdentifyResult(e,t){const{srcLocation:i,position:s,pyramidLevel:r,useTransposedTile:n}=t,a=e.pixels[0].length/e.width/e.height;if(!(!e.mask||e.mask[s]))return{location:i,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(D(l)||!n){const h=e.pixels.map(m=>m[s]),y={location:i,value:h,pyramidLevel:r},p=this._computeMagDirValues(h.map(m=>[m]));return p?.length&&(y.magdirValue=p.map(m=>m[0])),y}let o=e.pixels.map(h=>Array.prototype.slice.call(h,s*a,s*a+a)),c=this._computeMagDirValues(o);const{requestSomeSlices:u,identifyOptions:d}=t;let f=xt(l,d.transposedVariableName);if(u){const h=It(f,q(d.multidimensionalDefinition),q(d.timeExtent));o=o.map(y=>h.map(p=>y[p])),c=c?.map(y=>h.map(p=>y[p])),f=h.map(y=>f[y])}return{location:i,value:null,dataSeries:f.map((h,y)=>{const p={value:o.map(m=>m[y]),multidimensionalDefinition:h.multidimensionalDefinition,variableName:h.multidimensionalDefinition[0].variableName,dimensionValues:{}};return c?.length&&(p.magdirValue=[c[0][y],c[1][y]]),h.multidimensionalDefinition.forEach(m=>p.dimensionValues[m.dimensionName]=m.values[0]),p}),pyramidLevel:r}}};x([S()],G.prototype,"_rasterTileAlighmentInfo",void 0),x([S({readOnly:!0})],G.prototype,"_isGlobalWrappableSource",null),x([S(Ue)],G.prototype,"url",null),x([S({type:String,json:{write:!0}})],G.prototype,"datasetName",void 0),x([S({type:String,json:{write:!0}})],G.prototype,"datasetFormat",void 0),x([S()],G.prototype,"rasterInfo",void 0),x([S()],G.prototype,"ioConfig",void 0),x([S()],G.prototype,"sourceJSON",void 0),G=x([K("esri.layers.support.rasterDatasets.BaseRaster")],G);const ne=G;function mi(e){const t=e.fields,i=e.records,s=t.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",r=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(t.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),n=r.map(c=>c.name),a=[];let l=0,o=0;return i.forEach(c=>{const u={};for(u[s]=l++,o=1;o<n.length;o++)u[n[o]]=c[o-1];a.push({attributes:u})}),{displayFieldName:"",fields:r,features:a}}class pi{static get supportedVersions(){return[5]}static parse(t){const i=new DataView(t),s=3&i.getUint8(0);if(s!==3)return{header:{version:s},recordSet:null};const r=i.getUint32(4,!0),n=i.getUint16(8,!0),a=i.getUint16(10,!0),l={version:s,recordCount:r,headerByteCount:n,recordByteCount:a};let o=32;const c=[],u=[];let d;if(s===3){for(;i.getUint8(o)!==13;)d=String.fromCharCode(i.getUint8(o+11)).trim(),c.push({name:Oe(new Uint8Array(t,o,11)),type:d,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(d)],length:i.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<r&&t.byteLength-o>a;){const f=[];i.getUint8(o)===32?(o+=1,c.forEach(h=>{if(h.type==="C")f.push(Oe(new Uint8Array(t,o,h.length)).trim());else if(h.type==="N")f.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(t,o,h.length)).trim(),10));else if(h.type==="F")f.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(t,o,h.length)).trim()));else if(h.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(t,o,h.length)).trim();f.push(new Date(parseInt(y.substring(0,4),10),parseInt(y.substring(4,6),10)-1,parseInt(y.substring(6,8),10)))}o+=h.length}),u.push(f)):o+=a}}return{header:l,fields:c,records:u,recordSet:mi({fields:c,records:u})}}}const Z=new Map;Z.set("int16","esriFieldTypeSmallInteger"),Z.set("int32","esriFieldTypeInteger"),Z.set("int64","esriFieldTypeInteger"),Z.set("float32","esriFieldTypeSingle"),Z.set("float64","esriFieldTypeDouble"),Z.set("text","esriFieldTypeString");const We=8;let oe=class extends ne{constructor(){super(...arguments),this.storageInfo=null,this.datasetFormat="CRF"}async open(e){await this.init();const{data:t}=await this.request(this.url+"/conf.json",{signal:e?.signal});if(!this._validateHeader(t))throw new O("cloudraster:open","Invalid or unsupported conf.json.");this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{storageInfo:i,rasterInfo:s}=this._parseHeader(t);if(s.dataType==="thematic"){const r=await this._fetchAuxiliaryInformation();s.attributeTable=r}this._set("storageInfo",i),this._set("rasterInfo",s),this.ioConfig.retryCount=this.ioConfig.retryCount||0}async fetchRawTile(e,t,i,s={}){const{transposeInfo:r}=this.rasterInfo.storageInfo,{transposedVariableName:n}=s,a=!(!r||!n),l=a?0:this.rasterInfo.storageInfo.maximumPyramidLevel-e;if(l<0)return null;const o=this._buildCacheFilePath(l,t,i,s.multidimensionalDefinition,n),c=this._getIndexRecordFromBundle(t,i,a),u=await this.request(o,{range:{from:0,to:this.storageInfo.headerSize-1},responseType:"array-buffer",signal:s.signal});if(!u)return null;const d=new Uint8Array(u.data),f=this._getTileEndAndContentType(d,c);if(f.recordSize===0)return null;const h=await this.request(o,{range:{from:f.position,to:f.position+f.recordSize},responseType:"array-buffer",signal:s.signal});if(!h)return null;const[y,p]=this._getTileSize(a);return this.decodePixelBlock(h.data,{width:y,height:p,planes:null,pixelType:null,returnPixelInterleavedDims:a})}_validateHeader(e){const t=["origin","extent","geodataXform","LODInfos","blockWidth","blockHeight","bandCount","pixelType","pixelSizeX","pixelSizeY","format","packetSize"];return e&&e.type==="RasterInfo"&&!t.some(i=>!e[i])}_parseHeader(e){const t=["u1","u2","u4","u8","s8","u16","s16","u32","s32","f32","f64"][e.pixelType],{bandCount:i,histograms:s,colormap:r,blockWidth:n,blockHeight:a,firstPyramidLevel:l,maximumPyramidLevel:o}=e,c=e.statistics&&e.statistics.map(z=>({min:z.min,max:z.max,avg:z.mean,stddev:z.standardDeviation,median:z.median,mode:z.mode})),u=e.extent.spatialReference,d=e.geodataXform?.spatialReference,f=new W(u?.wkid||u?.wkt?u:d);let h=new N({xmin:e.extent.xmin,ymin:e.extent.ymin,xmax:e.extent.xmax,ymax:e.extent.ymax,spatialReference:f});const y=new L({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:f}),p=Math.round((h.xmax-h.xmin)/y.x),m=Math.round((h.ymax-h.ymin)/y.y),g=this._parseTransform(e.geodataXform),b=g?h:null;g&&(h=g.forwardTransform(h),y.x=(h.xmax-h.xmin)/p,y.y=(h.ymax-h.ymin)/m);const v=e.properties??{},k=e.format.toLowerCase().replace("cache/",""),R=new L(e.origin.x,e.origin.y,f);let w,I,_,T;if(r&&r.colors)for(w=[],I=0;I<r.colors.length;I++)_=r.colors[I],T=r.values?r.values[I]:I,w.push([T,255&_,_<<16>>>24,_<<8>>>24,_>>>24]);const C=e.LODInfos,M=[];for(I=0;I<C.levels.length;I++)M.push({level:C.levels[I],resolution:C.resolutions[I],scale:96/.0254*C.resolutions[I]});const A=new se({dpi:96,lods:M,format:k,origin:R,size:[n,a],spatialReference:f}),U={recordSize:We,packetSize:e.packetSize,headerSize:e.packetSize*e.packetSize*We+64},F=[{maxCol:Math.ceil(p/n)-1,maxRow:Math.ceil(m/a)-1,minCol:0,minRow:0}];let $=2;if(o>0)for(I=0;I<o;I++)F.push({maxCol:Math.ceil(p/$/n)-1,maxRow:Math.ceil(m/$/a)-1,minCol:0,minRow:0}),$*=2;const E=e.mdInfo;let j=null;if(E&&v._yxs){const z=v._yxs;j={packetSize:z.PacketSize,tileSize:[z.TileXSize,z.TileYSize]}}return{storageInfo:U,rasterInfo:new he({width:p,height:m,pixelType:t,bandCount:i,extent:h,nativeExtent:b,transform:g,spatialReference:f,pixelSize:y,keyProperties:v,statistics:c,histograms:s,multidimensionalInfo:E,colormap:w,storageInfo:new fe({blockWidth:n,blockHeight:a,pyramidBlockWidth:n,pyramidBlockHeight:a,origin:R,tileInfo:A,transposeInfo:j,firstPyramidLevel:l,maximumPyramidLevel:o,blockBoundary:F})})}}_parseTransform(e){if(!ui(e))throw new O("cloudraster:open","the data contains unsupported geodata transform types");const t=fi(e);if(t.type==="identity")return null;if(t.type!=="polynomial"||!t.forwardCoefficients?.length||!t.inverseCoefficients?.length)throw new O("cloudraster:open","the data contains unsupported geodata transforms - both forward and inverse coefficients are required currently");return t}async _fetchAuxiliaryInformation(e){const t=this.request(this.url+"/conf.vat.json",{signal:e}).then(n=>n.data).catch(()=>null),i=this.request(this.url+"/conf.vat.dbf",{responseType:"array-buffer",signal:e}).then(n=>n.data).catch(()=>null),s=await Promise.all([t,i]);let r;if(s[0]){let n=s[0].fields;const a=s[0].values;if(n&&a){n=n.map(o=>({type:o.name==="OID"?"esriFieldTypeOID":Z.get(o.type),name:o.name,alias:o.alias||o.name}));const l=a.map(o=>({attributes:o}));n&&a&&(r={fields:n,features:l})}}return!r&&s[1]&&(r=pi.parse(s[1]).recordSet),wt.fromJSON(r)}_buildCacheFilePath(e,t,i,s,r){const n=this._getPackageSize(!!r),a=Math.floor(t/n)*n,l=Math.floor(i/n)*n,o="R"+this._toHexString4(a)+"C"+this._toHexString4(l);let c="L";c+=e>=10?e.toString():"0"+e.toString();const{multidimensionalInfo:u}=this.rasterInfo,d=s?.[0];if(D(u)||!d)return`${this.url}/_alllayers/${c}/${o}.bundle`;let f="_yxs";if(!r){f=u.variables.find(p=>p.name===d.variableName).dimensions[0].values.indexOf(d.values[0]).toString(16);const y=4-f.length;for(let p=0;p<y;p++)f="0"+f;f="S"+f}const h=this._getVariableFolderName(r||d.variableName);return`${this.url}/_alllayers/${h}/${f}/${c}/${o}.bundle`}_getPackageSize(e=!1){const{transposeInfo:t}=this.rasterInfo.storageInfo;return e&&P(t)?t.packetSize:this.storageInfo.packetSize}_getTileSize(e=!1){const{storageInfo:t}=this.rasterInfo,{transposeInfo:i}=t;return e&&P(i)?i.tileSize:t.tileInfo.size}_getVariableFolderName(e){return(e=e.trim())===""?"_v":e.replace(/[\{|\}\-]/g,"_").replace("\\*","_v")}_getIndexRecordFromBundle(e,t,i=!1){const s=this._getPackageSize(i),r=s*(e%s)+t%s;if(r<0)throw"Invalid level / row / col";return 20+r*this.storageInfo.recordSize+44}_getTileEndAndContentType(e,t){const i=e.subarray(t,t+8);let s,r=0;for(s=0;s<5;s++)r|=(255&i[s])<<8*s;const n=0xffffffffff&r;for(r=0,s=5;s<8;s++)r|=(255&i[s])<<8*(s-5);return{position:n,recordSize:0xffffffffff&r}}_toHexString4(e){let t=e.toString(16);if(t.length!==4){let i=4-t.length;for(;i-- >0;)t="0"+t}return t}};x([S({readOnly:!0})],oe.prototype,"storageInfo",void 0),x([S({type:String,json:{write:!0}})],oe.prototype,"datasetFormat",void 0),oe=x([K("esri.layers.support.rasterDatasets.CloudRaster")],oe);const yi=oe;let le=class extends ne{constructor(){super(...arguments),this.datasetFormat="MEMORY"}async open(e){await this.init();const{pixelBlock:t,statistics:i,histograms:s,name:r,keyProperties:n,nativeExtent:a,transform:l}=this.data,{width:o,height:c,pixelType:u}=t,d=this.data.extent||new N({xmin:-.5,ymin:.5,xmax:o-.5,ymax:c-.5,spatialReference:new W({wkid:3857})}),f=this.data.isPseudoSpatialReference??!this.data.extent,h={x:d.width/o,y:d.height/c},y=new he({width:o,height:c,pixelType:u,extent:d,nativeExtent:a,transform:l,pixelSize:h,spatialReference:d.spatialReference,bandCount:3,keyProperties:n||{},statistics:i,isPseudoSpatialReference:f,histograms:s});this.createRemoteDatasetStorageInfo(y,512,512),this._set("rasterInfo",y),this.updateTileInfo(),await this._buildInMemoryRaster(t,{width:512,height:512},e),this.datasetName=r,this.url="/InMemory/"+r}fetchRawTile(e,t,i,s={}){const r=this._pixelBlockTiles.get(`${e}/${t}/${i}`);return Promise.resolve(r)}async _buildInMemoryRaster(e,t,i){const s=this.rasterInfo.storageInfo.maximumPyramidLevel,r=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:e,tileSize:t,maximumPyramidLevel:s},i):Promise.resolve(bt(e,t,s)),n=P(this.rasterInfo.statistics),a=P(this.rasterInfo.histograms),l=n?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:e},i):Promise.resolve(St(e)),o=await Qe([r,l]);if(!o[0].value&&o[1].value)throw new O("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=o[0].value,n||(this.rasterInfo.statistics=o[1].value?.statistics),a||(this.rasterInfo.histograms=o[1].value?.histograms)}};x([S({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),x([S()],le.prototype,"data",void 0),le=x([K("esri.layers.support.rasterDatasets.InMemoryRaster")],le);const gi=le;function re(e,t){if(!e||!t)return[];let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=[];if(t){const n=re(e,i);for(let a=0;a<n.length;a++)re(n[a],t).forEach(l=>s.push(l));return s}const r=e.getElementsByTagNameNS("*",i);if(!r||r.length===0)return[];for(let n=0;n<r.length;n++)s.push(r[n]||r.item[n]);return s}function J(e,t){if(!e||!t)return null;let i=t;t.includes("/")?(i=t.slice(0,t.indexOf("/")),t=t.slice(t.indexOf("/")+1)):t="";const s=re(e,i);return s.length>0?t?J(s[0],t):s[0]:null}function X(e,t=null){const i=t?J(e,t):e;let s;return i?(s=i.textContent||i.nodeValue,s?s.trim():null):null}function xi(e,t){const i=re(e,t),s=[];let r;for(let n=0;n<i.length;n++)r=i[n].textContent||i[n].nodeValue,r&&(r=r.trim(),r!==""&&s.push(r));return s}function xe(e,t){return xi(e,t).map(i=>Number(i))}function te(e,t){const i=X(e,t);return Number(i)}function _e(e,t){const i=e?.nodeName?.toLowerCase(),s=t.toLowerCase();return i.slice(i.lastIndexOf(":")+1)===s}function je(e,t){if(!e||!t)return null;const i=[];for(let s=0;s<e.length;s++)i.push(e[s]),i.push(t[s]);return i}function Ii(e){const t=J(e,"GeodataXform"),i=Se(te(t,"SpatialReference/WKID")||X(t,"SpatialReference/WKT"));if(t.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:i,transform:null};const s=te(t,"PolynomialOrder")??1,r=xe(t,"CoeffX/Double"),n=xe(t,"CoeffY/Double"),a=xe(t,"InverseCoeffX/Double"),l=xe(t,"InverseCoeffY/Double"),o=je(r,n),c=je(a,l);return{spatialReference:i,transform:new Pe({spatialReference:i,polynomialOrder:s,forwardCoefficients:o,inverseCoefficients:c})}}function wi(e){const t=te(e,"NoDataValue"),i=J(e,"Histograms/HistItem"),s=te(i,"HistMin"),r=te(i,"HistMax"),n=te(i,"BucketCount"),a=X(i,"HistCounts")?.split("|").map(f=>Number(f));let l,o,c,u;re(e,"Metadata/MDI").forEach(f=>{const h=Number(f.textContent??f.nodeValue);switch(f.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=h;break;case"STATISTICS_MAXIMUM":o=h;break;case"STATISTICS_MEAN":c=h;break;case"STATISTICS_STDDEV":u=h}});const d=te(e,"Metadata/SourceBandIndex");return{noDataValue:t,histogram:a?.length&&l!=null&&o!=null?{min:s,max:r,size:n||a.length,counts:a}:null,sourceBandIndex:d,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function Se(e){if(!e)return null;let t=Number(e);if(!isNaN(t)&&t!==0)return new W({wkid:t});if((e=String(e)).startsWith("COMPD_CS")){if(!e.includes("VERTCS")||!e.includes("GEOGCS")&&!e.startsWith("PROJCS"))return null;const i=e.indexOf("VERTCS"),s=e.indexOf("PROJCS"),r=s>-1?s:e.indexOf("GEOGCS");if(r===-1)return null;const n=e.slice(r,e.lastIndexOf("]",i)+1).trim(),a=e.slice(i,e.lastIndexOf("]")).trim();t=ke(n);const l=new W(t?{wkid:t}:{wkt:n}),o=ke(a);return o&&(l.vcsWkid=o),l}return e.startsWith("GEOGCS")||e.startsWith("PROJCS")?(t=ke(e),new W(t!==0?{wkid:t}:{wkt:e})):null}function ke(e){const t=e.replace(/\]/g,"[").replace(/\"/g,"").split("[").map(r=>r.trim()).filter(r=>r!==""),i=t[t.length-1].split(","),s=i[0]?.toLowerCase();if((s==="epsg"||s==="esri")&&e.endsWith('"]]')){const r=Number(i[1]);if(!isNaN(r)&&r!==0)return r}return 0}function Fe(e){if(e?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const t={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};e.documentElement.childNodes.forEach(s=>{if(s.nodeType===1){if(_e(s,"SRS")){if(!t.spatialReference){const r=X(s);t.spatialReference=Se(r)}}else if(_e(s,"Metadata"))if(s.getAttribute("domain")==="xml:ESRI"){const{spatialReference:r,transform:n}=Ii(s);t.transform=n,t.spatialReference||(t.spatialReference=r)}else re(s,"MDI").forEach(r=>t.metadata[r.getAttribute("key")]=X(r));else if(_e(s,"PAMRasterBand")){const r=wi(s);r.sourceBandIndex!=null&&t.rasterBands[r.sourceBandIndex]==null?t.rasterBands[r.sourceBandIndex]=r:t.rasterBands.push(r)}}});const i=t.rasterBands;if(i){const s=!!i[0].statistics;t.statistics=s?i.map(n=>n.statistics):null;const r=!!i[0].histogram;t.histograms=r?i.map(n=>n.histogram):null}return t}let be=class extends ne{async open(e){await this.init();const t=await this._fetchData(e);let{spatialReference:i,statistics:s,histograms:r,transform:n}=await this._fetchAuxiliaryData(e);const a=!i;a&&(i=new W({wkid:3857})),r?.length&&s==null&&(s=Ce(r));const{width:l,height:o}=t;let c=new N({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:i});const u=n?n.forwardTransform(c):c;let d=!0;if(n){const h=n.forwardCoefficients;d=h&&h[1]===0&&h[2]===0,d&&(n=null,c=u)}const f=new gi({data:{extent:u,nativeExtent:c,transform:n,pixelBlock:t,statistics:s,histograms:r,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:a}});await f.open(),f.data=null,this._set("rasterInfo",f.rasterInfo),this._inMemoryRaster=f}fetchRawTile(e,t,i,s={}){return this._inMemoryRaster.fetchRawTile(e,t,i,s)}async _fetchData(e){const{data:t}=await this.request(this.url,{responseType:"array-buffer",signal:e?.signal}),i=vt(t).toUpperCase();if(i!=="JPG"&&i!=="PNG"&&i!=="GIF"&&i!=="BMP")throw new O("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",i);const s=i.toLowerCase(),r=s==="gif"||s==="bmp"||!Tt("ios");return await this.decodePixelBlock(t,{format:s,useCanvas:r,hasNoZlibMask:!0})}async _fetchAuxiliaryData(e){const t=q(e?.signal),i=this.ioConfig.skipExtensions??[],s=i.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:t}),r=this.datasetFormat,n=r==="JPG"?"jgw":r==="PNG"?"pgw":r==="BMP"?"bpw":null,a=i.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:t}),l=await Qe([s,a]);if(t?.aborted)throw Rt();const o=Fe(l[0].value?.data);if(!o.transform){const c=l[1].value?l[1].value.data.split(`
`).slice(0,6).map(u=>Number(u)):null;o.transform=c?.length===6?new Pe({forwardCoefficients:[c[4],c[5],c[0],-c[1],c[2],-c[3]]}):null}return o}};x([S({type:String,json:{write:!0}})],be.prototype,"datasetFormat",void 0),be=x([K("esri.layers.support.rasterDatasets.ImageAuxRaster")],be);const Ie=be;let ce=class extends ne{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer"}async open(e){await this.init();const t=e&&e.signal,i=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:t});i.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=i.data;if(this.sourceJSON=s,!s)throw new O("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new O("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const r=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,this.tileType==null&&(r.includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":s.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name.slice(s.name.indexOf("/")+1);const n=await this._fetchRasterInfo({signal:t});if(!P(n))throw new O("image-server-raster:open","cannot initialize image service");{const a=this.tileType==="Map"?_t(s.tileInfo,s):se.fromJSON(s.tileInfo),{extent:l,pixelSize:o}=n,c=.5/n.width*o.x;let u,d;const f=a.lodAt(Math.max.apply(null,a.lods.map(w=>w.level)));this.tileType!=="Map"&&s.maxScale!==0&&(this.tileType==="Raster"?(u=a.lods.find(w=>w.resolution===o.x),u||(u=a.lods[a.lods.length-1])):(u=a.lods.find(w=>Math.abs(w.scale-s.maxScale)<c),u||(u=a.lods.filter(w=>w.scale>s.maxScale).sort((w,I)=>w.scale>I.scale?1:-1)[0])),o.x=o.y=u.resolution,n.width=Math.ceil((l.xmax-l.xmin)/o.x-.1),n.height=Math.ceil((l.ymax-l.ymin)/o.y-.1)),u||(u=f);const h=a.lodAt(Math.min.apply(null,a.lods.map(w=>w.level)));this.tileType==="Map"?this._levelOffset=a.lods[0].level:s.minScale!==0&&this.tileType==="Elevation"&&(d=a.lods.find(w=>Math.abs(w.scale-s.minScale)<c),this._levelOffset=d.level-h.level),d||(d=h);const y=Math.max(o.x,o.y);(Math.abs(o.x-o.y)>c||!a.lods.some(w=>Math.abs(w.resolution-y)<c))&&(o.x=o.y=u.resolution,n.width=Math.ceil((l.xmax-l.xmin)/o.x-.1),n.height=Math.ceil((l.ymax-l.ymin)/o.y-.1));const p=u.level-d.level,[m,g]=a.size,b=[];a.lods.forEach(w=>{w.level>=d.level&&w.level<=u.level&&b.push({x:w.resolution,y:w.resolution})}),b.sort((w,I)=>w.x-I.x);const v=this.computeBlockBoundary(l,m,g,a.origin,b,p),k=b.length>1?b.slice(1):null;let R;s.transposeInfo&&(R={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:n.keyProperties?._yxs.PacketSize??0}),n.storageInfo=new fe({blockWidth:a.size[0],blockHeight:a.size[1],pyramidBlockWidth:a.size[0],pyramidBlockHeight:a.size[1],pyramidResolutions:k,compression:a.format,origin:a.origin,firstPyramidLevel:1,maximumPyramidLevel:p,tileInfo:a,transposeInfo:R,blockBoundary:v}),this._fixGCSShift(n),this._set("rasterInfo",n)}if(s.capabilities.toLowerCase().includes("tilemap")){const a={tileInfo:n.storageInfo.tileInfo,parsedUrl:kt(this.url),url:this.url,tileServers:[],type:"tile"};this._tilemapCache=new Ct({layer:a})}}async fetchRawTile(e,t,i,s={}){const{storageInfo:r,extent:n}=this.rasterInfo,{transposeInfo:a}=r,l=P(a)&&!!s.transposedVariableName;if(this._slices&&!l&&s.sliceId==null)return null;const o=l?0:r.maximumPyramidLevel-e+this._levelOffset,c=`${this.url}/tile/${o}/${t}/${i}`,u=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:d}=await this.request(c,{query:u,responseType:"array-buffer",signal:s.signal});if(!d)return null;const f=l?a.tileSize:r.tileInfo.size,h=await this.decodePixelBlock(d,{width:f[0],height:f[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnPixelInterleavedDims:l}),y=r.blockBoundary[e];if(r.compression!=="jpg"||i>y.minCol&&i<y.maxCol&&t>y.minRow&&t<y.maxRow)return h;const{origin:p,blockWidth:m,blockHeight:g}=r,{x:b,y:v}=this.getPyramidPixelSize(e),k=Math.round((n.xmin-p.x)/b)%m,R=Math.round((n.xmax-p.x)/b)%m||m,w=Math.round((p.y-n.ymax)/v)%g,I=Math.round((p.y-n.ymin)/v)%g||g,_=i===y.minCol?k:0,T=t===y.minRow?w:0,C=i===y.maxCol?R:m,M=t===y.maxRow?I:g;return Pt(h,{x:_,y:T},{width:C-_,height:M-T}),h}getSliceIndex(e){if(!this._slices||D(e)||e.length===0)return null;const t=e;for(let i=0;i<this._slices.length;i++){const s=this._slices[i].multidimensionalDefinition;if(s.length===t.length&&!s.some(r=>{const n=t.find(a=>r.variableName===a.variableName&&a.dimensionName===r.dimensionName);return n?(Array.isArray(r.values[0])?`${r.values[0][0]}-${r.values[0][1]}`:r.values[0])!==(Array.isArray(n.values[0])?`${n.values[0][0]}-${n.values[0][1]}`:n.values[0]):!0}))return i}return null}async fetchVariableStatisticsHistograms(e,t){const i=this.request(this.url+"/statistics",{query:{variable:e,f:"json"},signal:t}).then(n=>n.data?.statistics),s=this.request(this.url+"/histograms",{query:{variable:e,f:"json"},signal:t}).then(n=>n.data?.histograms),r=await Promise.all([i,s]);return r[0]&&r[0].forEach(n=>{n.avg=n.mean,n.stddev=n.standardDeviation}),{statistics:r[0]||null,histograms:r[1]||null}}async computeBestPyramidLevelForLocation(e,t={}){if(!this._tilemapCache)return 0;let i=this.identifyPixelLocation(e,0,q(t.datumTransformation));if(i===null)return null;let s=0;const{maximumPyramidLevel:r}=this.rasterInfo.storageInfo;let n=r-s+this._levelOffset;const a=i.srcLocation;for(;n>=0;){try{if(await this._tilemapCache.fetchAvailability(n,i.row,i.col,t)==="available")break}catch{}if(n--,s++,i=this.identifyPixelLocation(a,s,q(t.datumTransformation)),i===null)return null}return n===-1||i==null?null:s}async _fetchRasterInfo(e){const t=this.sourceJSON;if(this.tileType==="Map"){const a=Math.ceil((t.extent.xmax-t.extent.xmin)/t.pixelSizeX-.1),l=Math.ceil((t.extent.ymax-t.extent.ymin)/t.pixelSizeY-.1),o=W.fromJSON(t.spatialReference||t.extent.spatialReference),c=new L({x:t.pixelSizeX,y:t.pixelSizeY,spatialReference:o});return new he({width:a,height:l,bandCount:3,extent:N.fromJSON(t.extent),spatialReference:o,pixelSize:c,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:i}=e,s=Ft(this.url,this.sourceJSON,{signal:i,query:this.ioConfig.customFetchParameters}),r=t.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:i}).then(a=>a.data&&a.data.slices).catch(()=>null):null,n=await Promise.all([s,r]);return this._slices=n[1],n[0]}_fixScaleInServiceInfo(){const{sourceJSON:e}=this;e.minScale&&e.minScale<0&&(e.minScale=0),e.maxScale&&e.maxScale<0&&(e.maxScale=0)}_fixGCSShift(e){const{extent:t,spatialReference:i}=e;t.xmin===0&&t.xmax===360&&i.wkid&&i.isGeographic&&(e.nativeExtent=e.extent,e.transform=new hi,e.extent=e.transform.forwardTransform(t))}};x([S({type:String,json:{write:!0}})],ce.prototype,"datasetFormat",void 0),x([S()],ce.prototype,"tileType",void 0),ce=x([K("esri.layers.support.rasterDatasets.ImageServerRaster")],ce);const bi=ce,V=new Map;V.set("Int8","s8"),V.set("UInt8","u8"),V.set("Int16","s16"),V.set("UInt16","u16"),V.set("Int32","s32"),V.set("UInt32","u32"),V.set("Float32","f32"),V.set("Float64","f32"),V.set("Double64","f32");const Q=new Map;Q.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),Q.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),Q.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),Q.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ie=class extends ne{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async open(e){await this.init(),this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const t=e?q(e.signal):null,i=await this.request(this.url,{responseType:"xml",signal:t}),{rasterInfo:s,files:r}=this._parseHeader(i.data);if(this.ioConfig.skipExtensions?.indexOf("aux.xml")===-1){const p=await this._fetchAuxiliaryData(e);p!=null&&(s.statistics=p.statistics??s.statistics,s.histograms=p.histograms,p.histograms&&D(s.statistics)&&(s.statistics=Ce(p.histograms)))}this._set("rasterInfo",s),this._files=r;const n=await this.request(r.index,{responseType:"array-buffer",signal:t});this._storageIndex=this._parseIndex(n.data);const{blockWidth:a,blockHeight:l}=this.rasterInfo.storageInfo,o=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:c,height:u}=this.rasterInfo,d=[],f=this._getBandSegmentCount();let h=0,y=-1;for(;h<this._storageIndex.length;){y++;const p=Math.ceil(c/a/o**y)-1,m=Math.ceil(u/l/o**y)-1;h+=(p+1)*(m+1)*f*4,d.push({maxRow:m,maxCol:p,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=d,y>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=y),this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){const{blockWidth:r,blockHeight:n,blockBoundary:a}=this.rasterInfo.storageInfo,l=a[e];if(!l||l.maxRow<t||l.maxCol<i||l.minRow>t||l.minCol>i)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:d,actualTileHeight:f}=this._getTileLocation(e,t,i);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const T=new Uint8Array(r*n);return new Mt({width:r,height:n,pixels:null,mask:T,validPixelCount:0})}const{bandIds:h}=this.ioConfig,y=this._getBandSegmentCount(),p=[];let m=0;for(m=0;m<y;m++)(!h||h.indexOf[m]>-1)&&p.push(this.request(this._files.data,{range:{from:u[m].from,to:u[m].to},responseType:"array-buffer",signal:s.signal}));const g=await Promise.all(p),b=g.map(T=>T.data.byteLength).reduce((T,C)=>T+C),v=new Uint8Array(b);let k=0;for(m=0;m<y;m++)v.set(new Uint8Array(g[m].data),k),k+=g[m].data.byteLength;const R=Q.get(this.rasterInfo.storageInfo.compression).decoderFormat,w=await this.decodePixelBlock(v.buffer,{width:r,height:n,format:R,planes:h?.length||o,pixelType:c});if(P(this.rasterInfo.noDataValue)&&R!=="lerc"&&!w.mask){const T=this.rasterInfo.noDataValue[0];if(T!=null){const C=w.width*w.height,M=new Uint8Array(C);if(Math.abs(T)>1e24)for(m=0;m<C;m++)Math.abs((w.pixels[0][m]-T)/T)>1e-6&&(M[m]=1);else for(m=0;m<C;m++)w.pixels[0][m]!==T&&(M[m]=1);w.mask=M}}let I=0,_=0;if(d!==r||f!==n){let T=w.mask;if(T)for(m=0;m<n;m++)if(_=m*r,m<f)for(I=d;I<r;I++)T[_+I]=0;else for(I=0;I<r;I++)T[_+I]=0;else for(T=new Uint8Array(r*n),w.mask=T,m=0;m<f;m++)for(_=m*r,I=0;I<d;I++)T[_+I]=1}return w}_parseIndex(e){if(e.byteLength%16>0)throw"invalid array buffer must be multiples of 16";let t,i,s,r,n,a;if($t){for(i=new Uint8Array(e),r=new ArrayBuffer(e.byteLength),s=new Uint8Array(r),n=0;n<e.byteLength/4;n++)for(a=0;a<4;a++)s[4*n+a]=i[4*n+3-a];t=new Uint32Array(r)}else t=new Uint32Array(e);return t}_getBandSegmentCount(){return Q.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(e,t,i){const{blockWidth:s,blockHeight:r,pyramidScalingFactor:n}=this.rasterInfo.storageInfo,{width:a,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,d,f=0,h=0;for(d=0;d<e;d++)h=n**d,c=Math.ceil(a/s/h),u=Math.ceil(l/r/h),f+=c*u;h=n**e,c=Math.ceil(a/s/h),u=Math.ceil(l/r/h),f+=t*c+i,f*=4*o;const y=this._storageIndex.subarray(f,f+4*o);let p=0,m=0;const g=[];for(let b=0;b<o;b++)p=y[4*b+0]*2**32+y[4*b+1],m=p+y[4*b+2]*2**32+y[4*b+3],g.push({from:p,to:m});return{ranges:g,actualTileWidth:i<c-1?s:Math.ceil(a/h)-s*(c-1),actualTileHeight:t<u-1?r:Math.ceil(l/h)-r*(u-1)}}_parseHeader(e){const t=J(e,"MRF_META/Raster");if(!t)throw new O("mrf:open","not a valid MRF format");const i=J(t,"Size"),s=parseInt(i.getAttribute("x"),10),r=parseInt(i.getAttribute("y"),10),n=parseInt(i.getAttribute("c"),10),a=(X(t,"Compression")||"none").toLowerCase();if(!Q.has(a))throw new O("mrf:open","currently does not support compression "+a);const l=X(t,"DataType")||"UInt8",o=V.get(l);if(o==null)throw new O("mrf:open","currently does not support pixel type "+l);const c=J(t,"PageSize"),u=parseInt(c.getAttribute("x"),10),d=parseInt(c.getAttribute("y"),10),f=J(t,"DataValues");let h,y;if(f&&(y=f.getAttribute("NoData"),y!=null&&(h=y.trim().split(" ").map(M=>parseFloat(M)))),J(e,"MRF_META/CachedSource"))throw new O("mrf:open","currently does not support MRF referencing other data files");const p=J(e,"MRF_META/GeoTags"),m=J(p,"BoundingBox");let g,b=!1;if(m!=null){const M=parseFloat(m.getAttribute("minx")),A=parseFloat(m.getAttribute("miny")),U=parseFloat(m.getAttribute("maxx")),F=parseFloat(m.getAttribute("maxy")),$=X(p,"Projection")||"";let E;if($!=="LOCAL_CS[]")if($.toLowerCase().startsWith("epsg:")){const j=Number($.slice(5));isNaN(j)||j===0||(E=new W({wkid:j}))}else E=Se($);else b=!0,E=new W({wkid:3857});g=new N(M,A,U,F),g.spatialReference=E}else b=!0,g=new N({xmin:-.5,ymin:.5-r,xmax:s-.5,ymax:.5,spatialReference:new W({wkid:3857})});const v=J(e,"MRF_META/Rsets"),k=parseInt(v&&v.getAttribute("scale")||"2",10),R=g.spatialReference,w=new fe({origin:new L({x:g.xmin,y:g.ymax,spatialReference:R}),blockWidth:u,blockHeight:d,pyramidBlockWidth:u,pyramidBlockHeight:d,compression:a,pyramidScalingFactor:k}),I=new L({x:g.width/s,y:g.height/r,spatialReference:R}),_=new he({width:s,height:r,extent:g,isPseudoSpatialReference:b,spatialReference:R,bandCount:n,pixelType:o,pixelSize:I,noDataValue:h,storageInfo:w}),T=X(e,"datafile"),C=X(e,"IndexFile");return{rasterInfo:_,files:{mrf:this.url,index:C||this.url.replace(".mrf",".idx"),data:T||this.url.replace(".mrf",Q.get(a).blobExtension)}}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Fe(t)}catch{return null}}};x([S()],ie.prototype,"_files",void 0),x([S()],ie.prototype,"_storageIndex",void 0),x([S({type:String,json:{write:!0}})],ie.prototype,"datasetFormat",void 0),ie=x([K("esri.layers.support.rasterIO.MRFRaster")],ie);const Si=ie,Ge=(e,t)=>{const i=e.get(t);return i&&i.values},we=(e,t)=>{const i=e.get(t);return i&&i.values[0]};let ee=class extends ne{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async open(e){await this.init();const t=e?q(e.signal):null,{data:i}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:t});if(!i)throw new O("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const{littleEndian:s,firstIFD:r,isBigTiff:n}=Bt(i),a=[];await this._readIFDs(a,i,s,r,0,n?8:4,t);const l=Dt(a),{width:o,height:c,tileWidth:u,tileHeight:d,planes:f,pixelType:h,compression:y,firstPyramidLevel:p,maximumPyramidLevel:m,pyramidBlockWidth:g,pyramidBlockHeight:b,tileBoundary:v,affine:k,metadata:R}=l,w=l.extent.spatialReference?.wkt||l.extent.spatialReference?.wkid;let I=Se(w),_=!1;I==null&&(_=!0,I=new W({wkid:3857}));const T=new N({...l.extent,spatialReference:I}),C=new L(T?{x:T.xmin,y:T.ymax,spatialReference:I}:{x:0,y:0}),M=new fe({blockWidth:u,blockHeight:d,pyramidBlockWidth:g,pyramidBlockHeight:b,compression:y,origin:C,firstPyramidLevel:p,maximumPyramidLevel:m,blockBoundary:v}),A=new L({x:(T.xmax-T.xmin)/o,y:(T.ymax-T.ymin)/c,spatialReference:I}),U=R?{BandProperties:R.bandProperties,DataType:R.dataType}:{},F=new he({width:o,height:c,bandCount:f,pixelType:h,compression:y,pixelSize:A,storageInfo:M,spatialReference:I,isPseudoSpatialReference:_,keyProperties:U,extent:T,statistics:R?R.statistics:null});if(k?.length&&(F.nativeExtent=new N({xmin:-.5,ymin:.5-c,xmax:o-.5,ymax:.5,spatialReference:I}),F.transform=new Pe({polynomialOrder:1,forwardCoefficients:[k[2]+k[0]/2,k[5]-k[3]/2,k[0],k[3],-k[1],-k[4]]}),F.extent=F.transform.forwardTransform(F.nativeExtent),F.pixelSize=new L({x:(T.xmax-T.xmin)/o,y:(T.ymax-T.ymin)/c,spatialReference:I}),M.origin.x=-.5,M.origin.y=.5),!this.ioConfig.skipExtensions?.includes("aux.xml")){const $=await this._fetchAuxiliaryData(e);if($!=null){if(F.statistics=$.statistics??F.statistics,F.histograms=$.histograms,$.histograms&&D(F.statistics)&&(F.statistics=Ce($.histograms)),$.transform&&!k){F.transform=$.transform,F.nativeExtent=F.extent;const E=F.transform.forwardTransform(F.nativeExtent);F.pixelSize=new L({x:(E.xmax-E.xmin)/o,y:(E.ymax-E.ymin)/c,spatialReference:I}),F.extent=E}F.spatialReference||(F.spatialReference=$.spatialReference)}}if(this._set("rasterInfo",F),this._headerInfo={littleEndian:s,isBigTiff:n,ifds:a,...l},!this._headerInfo.isSupported)throw new O("tiffraster:open","this tiff is not supported: "+this._headerInfo.message);this.updateTileInfo()}async fetchRawTile(e,t,i,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(e,t,i))return null;const r=this._getTileLocation(e,t,i);if(!r)return null;const{ranges:n,actualTileWidth:a,actualTileHeight:l,ifd:o}=r,c=n.map(R=>this.request(this.url,{range:R,responseType:"array-buffer",signal:s.signal})),u=await Promise.all(c),d=u.map(R=>R.data.byteLength).reduce((R,w)=>R+w),f=u.length===1?u[0].data:new ArrayBuffer(d),h=[0],y=[0];if(u.length>1){const R=new Uint8Array(f);for(let w=0,I=0;w<u.length;w++){const _=u[w].data;R.set(new Uint8Array(_),I),h[w]=I,I+=_.byteLength,y[w]=_.byteLength}}const{blockWidth:p,blockHeight:m}=this.getBlockWidthHeight(e),g=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:o,offsets:h,sizes:y},width:p,height:m,planes:null,pixelType:null});let b,v,k;if(a!==p||l!==m){let R=g.mask;if(R)for(b=0;b<m;b++)if(k=b*p,b<l)for(v=a;v<p;v++)R[k+v]=0;else for(v=0;v<p;v++)R[k+v]=0;else for(R=new Uint8Array(p*m),g.mask=R,b=0;b<l;b++)for(k=b*p,v=0;v<a;v++)R[k+v]=1}return g}async _readIFDs(e,t,i,s,r,n=4,a){if(!s)return null;(s>=t.byteLength||s<0)&&(t=(await this.request(this.url,{range:{from:s+r,to:s+r+this._bufferSize},responseType:"array-buffer",signal:a})).data,r=s+r,s=0);const l=await this._readIFD(t,i,s,r,pe.TIFF_TAGS,n,a);if(e.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(e,t,i,l.nextIFD-r,r,n,a)}async _readIFD(e,t,i,s,r=pe.TIFF_TAGS,n=4,a){if(!e)return null;const l=Ot(e,t,i,s,r,n);if(l.success){const o=[];if(l.ifd.forEach(c=>{c.values||o.push(c)}),o.length>0){const c=o.map(d=>d.offlineOffsetSize),u=Math.min.apply(null,c.map(d=>d[0]));if(Math.min.apply(null,c.map(d=>d[0]+d[1]))-u<=this._bufferSize){const{data:d}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:a});e=d,s=u,o.forEach(f=>Et(e,t,f,s))}}if(l.ifd.has("GEOKEYDIRECTORY")){const c=l.ifd.get("GEOKEYDIRECTORY"),u=c.values;if(u&&u.length>4){const d=u[0]+"."+u[1]+"."+u[2],f=await this._readIFD(e,t,c.valueOffset+6-s,s,pe.GEO_KEYS,2,a);c.data=f.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[d]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==e.byteLength)return(e=(await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:a})).data).byteLength<l.requiredBufferSize?null:this._readIFD(e,t,0,s,pe.TIFF_TAGS,4,a)}_getTileLocation(e,t,i){const{firstPyramidLevel:s,blockBoundary:r}=this.rasterInfo.storageInfo,n=e===0?0:e-(s-1),a=this._headerInfo.ifds[n];if(!a)return null;const l=zt(a,this._headerInfo),o=Ge(a,"TILEOFFSETS");if(o===void 0)return null;const c=Ge(a,"TILEBYTECOUNTS"),{minRow:u,minCol:d,maxRow:f,maxCol:h}=r[n];if(t>f||i>h||t<u||i<d)return null;const y=we(a,"IMAGEWIDTH"),p=we(a,"IMAGELENGTH"),m=we(a,"TILEWIDTH"),g=we(a,"TILELENGTH"),b=l?this.rasterInfo.bandCount:1,v=b*t*(h+1)+i,k=[{from:o[v],to:o[v+b-1]+c[v+b-1]-1}];if(l){let I=!0;for(let _=0;_<b;_++)if(o[v+_]+c[v+_]!==o[v+_+1]){I=!1;break}if(!I)for(let _=0;_<b;_++)k[_]={from:o[v+_],to:o[v+_]+c[v+_]-1}}const R=o[v],w=c[v];return R==null||w==null?null:{ranges:k,ifd:a,actualTileWidth:i===h?y%m:m,actualTileHeight:t===f?p%g:g}}async _fetchAuxiliaryData(e){try{const{data:t}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:e?.signal});return Fe(t)}catch{return null}}};x([S()],ee.prototype,"_files",void 0),x([S()],ee.prototype,"_headerInfo",void 0),x([S()],ee.prototype,"_bufferSize",void 0),x([S({type:String,json:{write:!0}})],ee.prototype,"datasetFormat",void 0),ee=x([K("esri.layers.support.rasterDatasets.TIFFRaster")],ee);const vi=ee,H=new Map;H.set("CRF",{desc:"Cloud Raster Format",constructor:yi}),H.set("MRF",{desc:"Meta Raster Format",constructor:Si}),H.set("TIFF",{desc:"GeoTIFF",constructor:vi}),H.set("RasterTileServer",{desc:"Raster Tile Server",constructor:bi}),H.set("JPG",{desc:"JPG Raster Format",constructor:Ie}),H.set("PNG",{desc:"PNG Raster Format",constructor:Ie}),H.set("GIF",{desc:"GIF Raster Format",constructor:Ie}),H.set("BMP",{desc:"BMP Raster Format",constructor:Ie});class Ti{static get supportedFormats(){const t=new Set;return H.forEach((i,s)=>t.add(s)),t}static async open(t){const{url:i,ioConfig:s,sourceJSON:r}=t;let n=t.datasetFormat;n==null&&i.lastIndexOf(".")&&(n=i.slice(i.lastIndexOf(".")+1).toUpperCase()),n==="OVR"||n==="TIF"?n="TIFF":n!=="JPG"&&n!=="JPEG"&&n!=="JFIF"||(n="JPG"),i.toLowerCase().includes("/imageserver")&&!i.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const a={url:i,sourceJSON:r,datasetFormat:n,ioConfig:s||{bandIds:null,sampling:null}};let l,o;if(this.supportedFormats.has(n)){if(n==="CRF"&&!s.enableCRF)throw new O("rasterfactory:open",`cannot open raster: ${i}`);return l=H.get(n).constructor,o=new l(a),await o.open({signal:t.signal}),o}if(n)throw new O("rasterfactory:open","not a supported format "+n);const c=Array.from(H.keys());let u=0;const d=()=>(n=c[u++],n&&(n!=="CRF"||s.enableCRF)?(l=H.get(n).constructor,o=new l(a),o.open({signal:t.signal}).then(()=>o).catch(()=>d())):null);return d()}static register(t,i,s){H.has(t.toUpperCase())||H.set(t.toUpperCase(),{desc:i,constructor:s})}}let B=class extends Ht(Nt(Lt(At(Jt(di(Wt(jt(Gt(qt))))))))){constructor(...e){super(...e),this.bandIds=null,this.interpolation=null,this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.title=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=P(e)?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},e).catch(Ut).then(()=>this._openRaster(t))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){let e=[new ue({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"})];const t=this.rasterInfo?.attributeTable?.fields,i="Raster.";if(t){const r=t.filter(n=>n.type!=="oid"&&n.name.toLowerCase()!=="value").map(n=>{const a=n.clone();return a.name=i+n.name,a});e=e.concat(r)}const s=this.rasterInfo.dataType;if((s==="vector-magdir"||s==="vector-uv")&&P(this.rasterInfo.multidimensionalInfo)){const r=this.rasterInfo.multidimensionalInfo.variables[0].unit?.trim(),n="Magnitude"+(r?` (${r})`:"");e.push(new ue({name:"Raster.Magnitude",alias:n,domain:null,editable:!1,type:"double"})),e.push(new ue({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return e}set renderer(e){this._set("renderer",e),this.updateRenderer()}readRenderer(e,t,i){const s=t&&t.layerDefinition&&t.layerDefinition.drawingInfo&&t.layerDefinition.drawingInfo.renderer,r=Vt(s,i)||void 0;if(r!=null)return r}createPopupTemplate(e){return Xt({fields:this.rasterFields,title:this.title},e)}write(e,t){const{raster:i}=this;if(this.loaded?i.datasetFormat==="RasterTileServer"&&(i.tileType==="Raster"||i.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(e,t);if(t&&t.messages){const s=`${t.origin}/${t.layerContainerType||"operational-layers"}`;t.messages.push(new O("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}async _openRaster(e){this.raster?(this.raster.rasterInfo||await this.raster.open(),this.url=this.raster.url):this.raster=await Ti.open({url:this.url,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});const{rasterInfo:t}=this.raster;if(!t)throw new O("imagery-tile-layer:load","cannot load resources on "+this.url);if(this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const i=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(i,{origin:"service"})}this.title==null&&(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.own(Yt(()=>this.customParameters,i=>{this.raster.ioConfig.customFetchParameters=i}))}};x([S({type:[Kt],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],B.prototype,"bandIds",void 0),x([S({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Qt(Zt)],B.prototype,"interpolation",void 0),x([S({json:{write:!0}})],B.prototype,"multidimensionalDefinition",void 0),x([S(ei)],B.prototype,"legendEnabled",void 0),x([S({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],B.prototype,"isReference",void 0),x([S({type:["show","hide"]})],B.prototype,"listMode",void 0),x([S({json:{read:!0,write:!0}})],B.prototype,"blendMode",void 0),x([S()],B.prototype,"sourceJSON",void 0),x([S({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],B.prototype,"version",void 0),x([S()],B.prototype,"title",void 0),x([S({readOnly:!0,json:{read:!1}})],B.prototype,"type",void 0),x([S({type:["ArcGISTiledImageServiceLayer"]})],B.prototype,"operationalLayerType",void 0),x([S({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(e,t)=>!t.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(e,t,i){t[i]=!e}}}})],B.prototype,"popupEnabled",void 0),x([S({type:ti,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],B.prototype,"popupTemplate",void 0),x([S({readOnly:!0})],B.prototype,"defaultPopupTemplate",null),x([S({readOnly:!0,type:[ue]})],B.prototype,"fields",void 0),x([S({readOnly:!0,type:[ue]})],B.prototype,"rasterFields",null),x([S({types:Ve,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const e=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!e}}},origins:{"web-scene":{types:ii,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],B.prototype,"renderer",null),x([si("renderer")],B.prototype,"readRenderer",null),B=x([K("esri.layers.ImageryTileLayer")],B);const Fi=B;export{Fi as default};
