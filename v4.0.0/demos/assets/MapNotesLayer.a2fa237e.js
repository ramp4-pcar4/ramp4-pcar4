import{jh as C,K as r,N as s,O as M,kR as j,kO as E,kQ as L,lV as _,kh as $,ki as G,dw as P,dx as k,dy as F,dD as z,k as b,j as O,a9 as B,m as w,M as N,h as W,i as f,s as A,e as v,a1 as K,L as Q,kr as x,dC as m,cY as V,lW as Y,cL as q,fu as H,fs as U,ft as X,r as Z}from"./main.efb50b2c.js";import{n as ee}from"./objectIdUtils.773397d7.js";import"./preload-helper.387dac8f.js";function S(t){return t.layers.some(e=>e.layerDefinition.visibilityField!=null)}const T=new C({name:"OBJECTID",alias:"OBJECTID",type:"oid",nullable:!1,editable:!1}),te=new C({name:"title",alias:"Title",type:"string",nullable:!0,editable:!0});let c=class extends Y{constructor(t){super(t),this.visibilityMode="inherited"}initialize(){for(const t of this.graphics)t.sourceLayer=this.layer;this.graphics.on("after-add",t=>{t.item.sourceLayer=this.layer}),this.graphics.on("after-remove",t=>{t.item.sourceLayer=null})}get sublayers(){return this.graphics}};r([s({readOnly:!0})],c.prototype,"sublayers",null),r([s()],c.prototype,"layer",void 0),r([s()],c.prototype,"layerId",void 0),r([s({readOnly:!0})],c.prototype,"visibilityMode",void 0),c=r([M("esri.layers.MapNotesLayer.MapNotesSublayer")],c);const J=[{geometryType:"polygon",geometryTypeJSON:"esriGeometryPolygon",id:"polygonLayer",layerId:0,title:"Polygons",identifyingSymbol:new j().toJSON()},{geometryType:"polyline",geometryTypeJSON:"esriGeometryPolyline",id:"polylineLayer",layerId:1,title:"Polylines",identifyingSymbol:new E().toJSON()},{geometryType:"multipoint",geometryTypeJSON:"esriGeometryMultipoint",id:"multipointLayer",layerId:2,title:"Multipoints",identifyingSymbol:new L().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"pointLayer",layerId:3,title:"Points",identifyingSymbol:new L().toJSON()},{geometryType:"point",geometryTypeJSON:"esriGeometryPoint",id:"textLayer",layerId:4,title:"Text",identifyingSymbol:new _().toJSON()}];let o=class extends $(G(P(k(F(z))))){constructor(t){super(t),this.capabilities={operations:{supportsMapNotesEditing:!0}},this.featureCollections=null,this.featureCollectionJSON=null,this.featureCollectionType="notes",this.legendEnabled=!1,this.minScale=0,this.maxScale=0,this.spatialReference=b.WGS84,this.sublayers=new O(J.map(e=>new c({id:e.id,layerId:e.layerId,title:e.title,layer:this}))),this.title="Map Notes",this.type="map-notes",this.visibilityMode="inherited"}readCapabilities(t,e,i){return{operations:{supportsMapNotesEditing:!S(e)&&i?.origin!=="portal-item"}}}readFeatureCollections(t,e,i){if(!S(e))return null;const l=e.layers.map(n=>{const a=new B;return a.read(n,i),a});return new O({items:l})}readLegacyfeatureCollectionJSON(t,e){return S(e)?w(e.featureCollection):null}readFullExtent(t,e){if(!e.layers.length||e.layers.every(l=>!l.layerDefinition.extent))return new N({xmin:-180,ymin:-90,xmax:180,ymax:90,spatialReference:b.WGS84});const i=b.fromJSON(e.layers[0].layerDefinition.spatialReference);return e.layers.reduce((l,n)=>{const a=n.layerDefinition.extent;return a?N.fromJSON(a).union(l):l},new N({spatialReference:i}))}readMinScale(t,e){for(const i of e.layers)if(i.layerDefinition.minScale!=null)return i.layerDefinition.minScale;return 0}readMaxScale(t,e){for(const i of e.layers)if(i.layerDefinition.maxScale!=null)return i.layerDefinition.maxScale;return 0}get multipointLayer(){return this._findSublayer("multipointLayer")}get pointLayer(){return this._findSublayer("pointLayer")}get polygonLayer(){return this._findSublayer("polygonLayer")}get polylineLayer(){return this._findSublayer("polylineLayer")}readSpatialReference(t,e){return e.layers.length?b.fromJSON(e.layers[0].layerDefinition.spatialReference):b.WGS84}readSublayers(t,e,i){if(S(e))return null;const l=[];let n=e.layers.reduce((a,y)=>Math.max(a,y.layerDefinition.id??-1),-1)+1;for(const{layerDefinition:a,featureSet:y}of e.layers){const p=a.geometryType??y.geometryType,g=a.id??n++,u=J.find(d=>p===d.geometryTypeJSON&&a.drawingInfo?.renderer?.symbol?.type===d.identifyingSymbol.type);if(u){const d=new c({id:u.id,title:a.name,layerId:g,layer:this,graphics:y.features.map(({geometry:h,symbol:I,attributes:R,popupInfo:D})=>W.fromJSON({attributes:R,geometry:h,symbol:I,popupTemplate:D}))});l.push(d)}}return new O(l)}writeSublayers(t,e,i,l){const{minScale:n,maxScale:a}=this;if(f(t))return;const y=t.some(u=>u.graphics.length>0);if(!this.capabilities.operations.supportsMapNotesEditing)return void(y&&l?.messages?.push(new A("map-notes-layer:editing-not-supported","New map notes cannot be added to this layer")));const p=[];let g=this.spatialReference.toJSON();e:for(const u of t)for(const d of u.graphics)if(v(d.geometry)){g=d.geometry.spatialReference.toJSON();break e}for(const u of J){const d=t.find(h=>u.id===h.id);this._writeMapNoteSublayer(p,d,u,n,a,g,l)}K("featureCollection.layers",p,e)}get textLayer(){return this._findSublayer("textLayer")}load(t){return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Feature Collection"]},t)),Promise.resolve(this)}read(t,e){"featureCollection"in t&&(t=w(t),Object.assign(t,t.featureCollection)),super.read(t,e)}async beforeSave(){if(f(this.sublayers))return;let t=null;const e=[];for(const l of this.sublayers)for(const n of l.graphics)if(v(n.geometry)){const a=n.geometry;t?q(a.spatialReference,t)||(H(a.spatialReference,t)||U()||await X(),n.geometry=Z(a,t)):t=a.spatialReference,e.push(n)}const i=await Q(e.map(l=>l.geometry));e.forEach((l,n)=>l.geometry=i[n])}_findSublayer(t){return f(this.sublayers)?null:this.sublayers?.find(e=>e.id===t)??null}_writeMapNoteSublayer(t,e,i,l,n,a,y){const p=[];if(!f(e)){for(const g of e.graphics)this._writeMapNote(p,g,i.geometryType,y);this._normalizeObjectIds(p,T),t.push({layerDefinition:{name:e.title,drawingInfo:{renderer:{type:"simple",symbol:w(i.identifyingSymbol)}},id:e.layerId,geometryType:i.geometryTypeJSON,minScale:l,maxScale:n,objectIdField:"OBJECTID",fields:[T.toJSON(),te.toJSON()],spatialReference:a},featureSet:{features:p,geometryType:i.geometryTypeJSON}})}}_writeMapNote(t,e,i,l){if(f(e))return;const{geometry:n,symbol:a,popupTemplate:y}=e;if(f(n))return;if(n.type!==i)return void l?.messages?.push(new x("map-notes-layer:invalid-geometry-type",`Geometry "${n.type}" cannot be saved in "${i}" layer`,{graphic:e}));if(f(a))return void l?.messages?.push(new x("map-notes-layer:no-symbol","Skipping map notes with no symbol",{graphic:e}));const p={attributes:{...e.attributes},geometry:n.toJSON(),symbol:a.toJSON()};v(y)&&(p.popupInfo=y.toJSON()),t.push(p)}_normalizeObjectIds(t,e){const i=e.name;let l=ee(i,t)+1;const n=new Set;for(const a of t){a.attributes||(a.attributes={});const{attributes:y}=a;(y[i]==null||n.has(y[i]))&&(y[i]=l++),n.add(y[i])}}};r([s({readOnly:!0})],o.prototype,"capabilities",void 0),r([m(["portal-item","web-map"],"capabilities",["layers"])],o.prototype,"readCapabilities",null),r([s({readOnly:!0})],o.prototype,"featureCollections",void 0),r([m(["web-map","portal-item"],"featureCollections",["layers"])],o.prototype,"readFeatureCollections",null),r([s({readOnly:!0,json:{origins:{"web-map":{write:{enabled:!0,target:"featureCollection"}}}}})],o.prototype,"featureCollectionJSON",void 0),r([m(["web-map","portal-item"],"featureCollectionJSON",["featureCollection"])],o.prototype,"readLegacyfeatureCollectionJSON",null),r([s({readOnly:!0,json:{read:!1,write:{enabled:!0,ignoreOrigin:!0}}})],o.prototype,"featureCollectionType",void 0),r([s({json:{write:!1}})],o.prototype,"fullExtent",void 0),r([m(["web-map","portal-item"],"fullExtent",["layers"])],o.prototype,"readFullExtent",null),r([s({readOnly:!0,json:{origins:{"web-map":{write:{target:"featureCollection.showLegend",overridePolicy(){return{enabled:this.featureCollectionJSON!=null}}}}}}})],o.prototype,"legendEnabled",void 0),r([s({type:["show","hide"]})],o.prototype,"listMode",void 0),r([s({type:Number,nonNullable:!0,json:{write:!1}})],o.prototype,"minScale",void 0),r([m(["web-map","portal-item"],"minScale",["layers"])],o.prototype,"readMinScale",null),r([s({type:Number,nonNullable:!0,json:{write:!1}})],o.prototype,"maxScale",void 0),r([m(["web-map","portal-item"],"maxScale",["layers"])],o.prototype,"readMaxScale",null),r([s({readOnly:!0})],o.prototype,"multipointLayer",null),r([s({value:"ArcGISFeatureLayer",type:["ArcGISFeatureLayer"]})],o.prototype,"operationalLayerType",void 0),r([s({readOnly:!0})],o.prototype,"pointLayer",null),r([s({readOnly:!0})],o.prototype,"polygonLayer",null),r([s({readOnly:!0})],o.prototype,"polylineLayer",null),r([s({type:b})],o.prototype,"spatialReference",void 0),r([m(["web-map","portal-item"],"spatialReference",["layers"])],o.prototype,"readSpatialReference",null),r([s({readOnly:!0,json:{origins:{"web-map":{write:{ignoreOrigin:!0}}}}})],o.prototype,"sublayers",void 0),r([m("web-map","sublayers",["layers"])],o.prototype,"readSublayers",null),r([V("web-map","sublayers")],o.prototype,"writeSublayers",null),r([s({readOnly:!0})],o.prototype,"textLayer",null),r([s()],o.prototype,"title",void 0),r([s({readOnly:!0,json:{read:!1}})],o.prototype,"type",void 0),o=r([M("esri.layers.MapNotesLayer")],o);const ae=o;export{ae as default};
