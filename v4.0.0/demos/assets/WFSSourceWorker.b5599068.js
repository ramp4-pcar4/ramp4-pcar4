import{b3 as h,cL as l,hE as o,e as g,cQ as _,q as d,d9 as f,ae as w,s as u,bO as E,b2 as q,a6 as F}from"./main.efb50b2c.js";import{u as S}from"./FeatureStore.4d81d4c5.js";import{g as x,f as T}from"./projectionSupport.a2ec70ff.js";import{Y as b}from"./QueryEngine.6d4001c3.js";import{O as I,L as j}from"./geojson.82f10ea5.js";import{m as C}from"./sourceUtils.e9611f28.js";import{K as P}from"./wfsUtils.894db457.js";import"./preload-helper.387dac8f.js";import"./PooledRBush.65161e17.js";import"./centroid.79915d1f.js";import"./json.d1a0fa35.js";import"./QueryEngineResult.191af376.js";import"./quantizationUtils.d09757e3.js";import"./WhereClause.5a38bf79.js";import"./utils.9dfb26f2.js";import"./utils.1e6f5f3b.js";import"./QueryEngineCapabilities.c2e9875c.js";import"./timeSupport.3d7ef658.js";import"./xmlUtils.986ddba5.js";class J{constructor(){this._queryEngine=null,this._customParameters=null,this._snapshotFeatures=async t=>{const{objectIdField:e}=this._queryEngine,i=await P(this._getFeatureUrl,this._featureType.typeName,this._getFeatureOutputFormat,{customParameters:this._customParameters,dateFields:this._queryEngine.fieldsIndex.dateFields.map(r=>r.name),signal:t});await I(i),h(t);const s=j(i,{geometryType:this._queryEngine.geometryType,hasZ:!1,objectIdField:e});if(!l(this._queryEngine.spatialReference,o))for(const r of s)g(r.geometry)&&(r.geometry=_(x(d(r.geometry,this._queryEngine.geometryType,!1,!1),o,this._queryEngine.spatialReference)));let n=1;for(const r of s){const a={};C(this._fieldsIndex,a,r.attributes,!0),r.attributes=a,r.attributes[e]==null&&(r.objectId=r.attributes[e]=n++)}return s}}destroy(){this._queryEngine?.destroy(),this._queryEngine=null}async load(t,e){const{getFeatureUrl:i,getFeatureOutputFormat:s,spatialReference:n,fields:r,geometryType:a,featureType:p,objectIdField:y,customParameters:m}=t;this._featureType=p,this._customParameters=m,this._getFeatureUrl=i,this._getFeatureOutputFormat=s,this._fieldsIndex=new f(r),await this._checkProjection(n),h(e),this._queryEngine=new b({fields:r,geometryType:a,hasM:!1,hasZ:!1,objectIdField:y,spatialReference:n,timeInfo:null,featureStore:new S({geometryType:a,hasM:!1,hasZ:!1})});const c=await this._snapshotFeatures(w(e.signal));return this._queryEngine.featureStore.addMany(c),{extent:this._queryEngine.fullExtent}}async applyEdits(){throw new u("wfs-source:editing-not-supported","applyEdits() is not supported on WFSLayer")}async queryFeatures(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQuery(t,e.signal)}async queryFeatureCount(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForCount(t,e.signal)}async queryObjectIds(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForIds(t,e.signal)}async queryExtent(t={},e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForExtent(t,e.signal)}async querySnapping(t,e={}){return await this._waitSnapshotComplete(),this._queryEngine.executeQueryForSnapping(t,e.signal)}async refresh(t){return this._customParameters=t,this._snapshotTask?.abort(),this._snapshotTask=E(this._snapshotFeatures),this._snapshotTask.promise.then(e=>{this._queryEngine.featureStore.clear(),e&&this._queryEngine.featureStore.addMany(e)},e=>{this._queryEngine.featureStore.clear(),q(e)||F.getLogger("esri.layers.WFSLayer").error(new u("wfs-layer:getfeature-error","An error occurred during the GetFeature request",{error:e}))}),await this._waitSnapshotComplete(),{extent:this._queryEngine.fullExtent}}async _waitSnapshotComplete(){if(this._snapshotTask&&!this._snapshotTask.finished){try{await this._snapshotTask.promise}catch{}return this._waitSnapshotComplete()}}async _checkProjection(t){try{await T(o,t)}catch{throw new u("unsupported-projection","Projection not supported",{spatialReference:t})}}}export{J as default};
