import{G as r}from"./geometryEngineBase.f43341a0.js";import{hydratedAdapter as t}from"./hydrated.6d1c4621.js";import"./main.efb50b2c.js";import"./preload-helper.387dac8f.js";function i(e){return Array.isArray(e)?e[0].spatialReference:e&&e.spatialReference}function d(e){return r.extendedSpatialReferenceInfo(e)}function m(e,n){return r.clip(t,i(e),e,n)}function x(e,n){return r.cut(t,i(e),e,n)}function h(e,n){return r.contains(t,i(e),e,n)}function w(e,n){return r.crosses(t,i(e),e,n)}function A(e,n,o){return r.distance(t,i(e),e,n,o)}function E(e,n){return r.equals(t,i(e),e,n)}function y(e,n){return r.intersects(t,i(e),e,n)}function R(e,n){return r.touches(t,i(e),e,n)}function I(e,n){return r.within(t,i(e),e,n)}function S(e,n){return r.disjoint(t,i(e),e,n)}function V(e,n){return r.overlaps(t,i(e),e,n)}function v(e,n,o){return r.relate(t,i(e),e,n,o)}function z(e){return r.isSimple(t,i(e),e)}function D(e){return r.simplify(t,i(e),e)}function H(e,n=!1){return r.convexHull(t,i(e),e,n)}function L(e,n){return r.difference(t,i(e),e,n)}function J(e,n){return r.symmetricDifference(t,i(e),e,n)}function N(e,n){return r.intersect(t,i(e),e,n)}function O(e,n=null){return r.union(t,i(e),e,n)}function b(e,n,o,u,s,a){return r.offset(t,i(e),e,n,o,u,s,a)}function j(e,n,o,u=!1){return r.buffer(t,i(e),e,n,o,u)}function q(e,n,o,u,s,a){return r.geodesicBuffer(t,i(e),e,n,o,u,s,a)}function B(e,n,o=!0){return r.nearestCoordinate(t,i(e),e,n,o)}function C(e,n){return r.nearestVertex(t,i(e),e,n)}function $(e,n,o,u){return r.nearestVertices(t,i(e),e,n,o,u)}function c(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent.center:null}function k(e,n,o){if(e==null)throw new Error("Illegal Argument Exception");const u=e.spatialReference;if((o=o??c(e))==null)throw new Error("Illegal Argument Exception");const s=e.constructor.fromJSON(r.rotate(e,n,o));return s.spatialReference=u,s}function G(e,n){if(e==null)throw new Error("Illegal Argument Exception");const o=e.spatialReference;if((n=n??c(e))==null)throw new Error("Illegal Argument Exception");const u=e.constructor.fromJSON(r.flipHorizontal(e,n));return u.spatialReference=o,u}function F(e,n){if(e==null)throw new Error("Illegal Argument Exception");const o=e.spatialReference;if((n=n??c(e))==null)throw new Error("Illegal Argument Exception");const u=e.constructor.fromJSON(r.flipVertical(e,n));return u.spatialReference=o,u}function K(e,n,o,u){return r.generalize(t,i(e),e,n,o,u)}function M(e,n,o){return r.densify(t,i(e),e,n,o)}function P(e,n,o,u=0){return r.geodesicDensify(t,i(e),e,n,o,u)}function Q(e,n){return r.planarArea(t,i(e),e,n)}function T(e,n){return r.planarLength(t,i(e),e,n)}function U(e,n,o){return r.geodesicArea(t,i(e),e,n,o)}function W(e,n,o){return r.geodesicLength(t,i(e),e,n,o)}export{j as buffer,m as clip,h as contains,H as convexHull,w as crosses,x as cut,M as densify,L as difference,S as disjoint,A as distance,E as equals,d as extendedSpatialReferenceInfo,G as flipHorizontal,F as flipVertical,K as generalize,U as geodesicArea,q as geodesicBuffer,P as geodesicDensify,W as geodesicLength,N as intersect,y as intersects,z as isSimple,B as nearestCoordinate,C as nearestVertex,$ as nearestVertices,b as offset,V as overlaps,Q as planarArea,T as planarLength,v as relate,k as rotate,D as simplify,J as symmetricDifference,R as touches,O as union,I as within};
