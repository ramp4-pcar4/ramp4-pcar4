import{K as _,O as F,d6 as S,e as O,bi as f,mO as U}from"./main.efb50b2c.js";import{G as v}from"./enums.6e42a319.js";import{p as E}from"./BaseProcessor.d148d436.js";import{l as o}from"./tileUtils.0431f5e8.js";import"./preload-helper.387dac8f.js";class n{constructor(t,i){this.offset=t,this.extent=i}}function g(s){const t=s.key,i=new Map,a=256,e=v,r=s.tileInfoView.tileInfo.isWrappable;return i.set(o(t,-1,-1,r).id,new n([-e,-e],[e-a,e-a,e,e])),i.set(o(t,0,-1,r).id,new n([0,-e],[0,e-a,e,e])),i.set(o(t,1,-1,r).id,new n([e,-e],[0,e-a,a,e])),i.set(o(t,-1,0,r).id,new n([-e,0],[e-a,0,e,e])),i.set(o(t,1,0,r).id,new n([e,0],[0,0,a,e])),i.set(o(t,-1,1,r).id,new n([-e,e],[e-a,0,e,a])),i.set(o(t,0,1,r).id,new n([0,e],[0,0,e,a])),i.set(o(t,1,1,r).id,new n([e,e],[0,0,a,a])),i}let p=class extends E{constructor(){super(...arguments),this.type="heatmap",this._tileKeyToFeatureSets=new Map}initialize(){this.handles.add([this.tileStore.on("update",this.onTileUpdate.bind(this))])}async update(s,t){const i=t.schema.processors[0];i.type==="heatmap"&&S(this._schema,i)&&(s.mesh=!0,this._schema=i)}onTileUpdate(s){for(const t of s.removed)this._tileKeyToFeatureSets.delete(t.key.id)}onTileClear(s){const t={clear:!0};return this._tileKeyToFeatureSets.delete(s.key.id),this.remoteClient.invoke("tileRenderer.onTileData",{tileKey:s.id,data:t})}async onTileMessage(s,t,i){this._tileKeyToFeatureSets.has(s.key.id)||this._tileKeyToFeatureSets.set(s.key.id,new Map);const a=this._tileKeyToFeatureSets.get(s.key.id);if(O(t.addOrUpdate)&&t.addOrUpdate.hasFeatures&&a.set(t.addOrUpdate.instance,t),t.end){const e=[],r=g(s);this._tileKeyToFeatureSets.forEach((m,d)=>{if(d===s.key.id)m.forEach(l=>f(l.addOrUpdate,h=>e.push(h)));else if(r.has(d)){const l=r.get(d),[h,T]=l.offset;m.forEach(w=>f(w.addOrUpdate,k=>{const K=k.transform(h,T,1,1);e.push(K)}))}});const c=U(e,this._schema.mesh,512,512),u={tileKey:s.key.id,intensityInfo:c},y=[c.matrix];return this.remoteClient.invoke("tileRenderer.onTileData",u,{...i,transferList:y})}}onTileError(s,t,i){return this.remoteClient.invoke("tileRenderer.onTileError",{tileKey:s.id,error:t},i)}};p=_([F("esri.views.2d.layers.features.processors.HeatmapProcessor")],p);const R=p;export{R as default};
