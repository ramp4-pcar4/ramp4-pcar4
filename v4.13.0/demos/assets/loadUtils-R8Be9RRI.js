import{t as i,l as o}from"./fetchService-Cz8yzViK.js";import{s as y}from"./associatedFeatureServiceUtils-DPPMcsJ0.js";import{cp as f}from"./main-6eEsl9OJ.js";class h{constructor(){this._serviceMetadatas=new Map,this._itemDatas=new Map}async fetchServiceMetadata(e,a){const r=this._serviceMetadatas.get(e);if(r)return r;const s=await i(e,a);return this._serviceMetadatas.set(e,s),s}async fetchItemData(e){const{id:a}=e;if(!a)return null;const{_itemDatas:r}=this;if(r.has(a))return r.get(a);const s=await e.fetchData();return r.set(a,s),s}async fetchCustomParameters(e,a){const r=await this.fetchItemData(e);return r&&typeof r=="object"&&(a?a(r):r.customParameters)||null}}function l(t){const e={id:t.id,name:t.name},a=o(t.type);return a!=="FeatureLayer"&&(e.layerType=a),e}async function d(t,e,a){let r;if(t?.layers==null||t?.tables==null){const s=await a.fetchServiceMetadata(e,{customParameters:u(t)?.customParameters});r=f(),(t=t||{}).layers=t.layers||s?.layers?.map(l),t.tables=t.tables||s?.tables?.map(l)}return{data:t,preferredHost:r}}function u(t){if(!t)return null;const{layers:e,tables:a}=t;return e?.length?e[0]:a?.length?a[0]:null}function g(t,e){return e==null?null:[...t.layers||[],...t.tables||[]].find(a=>a.id===e)}function L(t,e){return[...t.layers||[],...t.tables||[]].filter(({layerType:a})=>a?e.includes(a):e.includes("ArcGISFeatureLayer"))}function w(t){return(t?.layers?.length??0)+(t?.tables?.length??0)}function S(t){switch(t){case"catalog":return["CatalogLayer"];case"feature":return["ArcGISFeatureLayer"];case"oriented-imagery":return["OrientedImageryLayer"];case"subtype-group":return["SubtypeGroupLayer","SubtypeGroupTable"]}return null}function I(t){switch(t){case"CatalogLayer":return"CatalogLayer";case"OrientedImageryLayer":return"OrientedImageryLayer";case"SubtypeGroupLayer":case"SubtypeGroupTable":return"SubtypeGroupLayer"}return"FeatureLayer"}async function v(t,e,a){if(!t?.url)return e??{};if(e??={},!e.layers){const n=await a.fetchServiceMetadata(t.url);e.layers=n.layers?.map(l)}const{serverUrl:r,portalItem:s}=await y(t.url,{sceneLayerItem:t,customParameters:u(e)?.customParameters}).catch(()=>({serverUrl:null,portalItem:null}));if(r==null)return e.tables=[],e;if(!e.tables&&s){const n=await s.fetchData().catch(()=>null);if(n?.tables)e.tables=n.tables.map(l);else{const c=await a.fetchServiceMetadata(r,{customParameters:u(n)?.customParameters}).catch(()=>null);e.tables=c?.tables?.map(l)}}if(e.tables)for(const n of e.tables)n.url=`${r}/${n.id}`;return e}export{l as a,w as c,h as e,I as i,d as l,g as n,S as o,u as s,L as u,v as y};
