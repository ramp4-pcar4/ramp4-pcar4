import{ex as c,br as j}from"./main-6eEsl9OJ.js";import{w as d,j as y}from"./operatorOffset-B5X0FKFN.js";import{getSpatialReference as f,fromGeometry as G,toGeometry as u,fromGeometries as g}from"./jsonConverter-bNZhBr_R.js";import"./preload-helper-B76NpbEU.js";import"./SimpleGeometryCursor-B92kdZ15.js";import"./ProjectionTransformation-BBf9JC5R.js";import"./Envelope2D-N58wWtPO.js";import"./Point2D-yI-uny1B.js";import"./Transformation2D-CZuEM6rU.js";import"./OperatorDefinitions-DP7_WWTp.js";const l={round:0,bevel:1,miter:2,square:3};function I(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const m=G(e),i=m.getSpatialReference();return u(d(m.getGeometry(),i,t,l[p],a,s),i)}function N(e,t,n={}){const{miterLimit:a=10,flattenError:s=0,joins:p="round",unit:r}=n,o=f(e);r&&o&&(t=c(t,r,o));const[m,i]=g(e);return y(m,i,t,l[p],a,s).map(x=>u(x,i)).filter(j)}export{I as execute,N as executeMany};
