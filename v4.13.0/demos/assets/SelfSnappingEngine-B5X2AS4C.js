import{bN as K,aj as F,j as Z,V as Q,q as L,v as T,x as W}from"./main-6eEsl9OJ.js";import{s as X,r as U}from"./Cyclical-Du2djXHA.js";import{f as G,o as H}from"./quantityUtils-DW8sL_d6.js";import{j as u}from"./elevationInfoUtils-BiNnYWla.js";import{p as y,N as f,C as _,x as m,s as l,D as M,e as C,B as b,r as Y,F as R,M as z,J as ee,G as te,I as j,i as N,H as se,K as $,u as ie,w as re,v as oe,L as ne,O as he,q as ae,E as pe}from"./SketchViewModel-qU8vsgpY.js";import{m as A,b as B,e as J,j as de,p as le,d as ce,_ as ge}from"./vec2-ChnYg_BJ.js";import{n as O}from"./vec2f64-Cgb6qxNH.js";import{q as fe,c as ue,o as me}from"./vec32-BvrGiqaM.js";import"./preload-helper-B76NpbEU.js";import"./ElevationInfo-Dh54MbB6.js";import"./lengthUtils-DL53yBUT.js";import"./UpdatingHandles-DgAejPqv.js";import"./projectionUtils-BoGsVCso.js";import"./GraphicsLayer-BnIrIT3a.js";import"./GraphicsCollection-DPkZ9iLQ.js";import"./Layer-DzZVuRQg.js";import"./TimeExtent-DG27ZQvz.js";import"./BlendLayer-Ck8n336O.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-DIh9yTg7.js";import"./parser-C27q64z5.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-DL3nuHcq.js";import"./common-DQOJ18NT.js";import"./ScaleRangeLayer-BjLqqFXw.js";import"./editableLayers-D6yrpnO9.js";import"./utils-CcyJ7vzx.js";import"./Queue-DXtZaugk.js";import"./Version-DkcAnD6Q.js";import"./projectVectorToVector-PLaHcAe9.js";import"./projectPointToVector-C4UVIiJJ.js";import"./geodesicUtils-Bbp3lqW4.js";import"./asyncUtils-SHsCTXd3.js";import"./Query-BQgZ7-at.js";import"./Field-CzUupKXc.js";import"./fieldType-B4FIlvI-.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./plane-BqH4Rk0w.js";import"./vectorStacks-DkJKKYqf.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DYiAGvsP.js";import"./mat3-CruJiiUv.js";import"./geodeticLengthOperator-DNLqI12P.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-DzmNzYoH.js";import"./lineSegment-C4u8B-fp.js";import"./spatialReferenceEllipsoidUtils-4Wh6IZR8.js";class q{constructor(s,e){this.view=s,this.options=e,this.squaredShortLineThreshold=y.shortLineThreshold*y.shortLineThreshold}snap(s,e){return e.vertexHandle!=null?e.vertexHandle.type!=="vertex"?[]:this.snapExistingVertex(s,e):this.snapNewVertex(s,e)}edgeExceedsShortLineThreshold(s,e){return this.exceedsShortLineThreshold(f(s.leftVertex.pos,this.view,e),f(s.rightVertex.pos,this.view,e),e)}exceedsShortLineThreshold(s,e,{spatialReference:t}){return this.squaredShortLineThreshold===0||_(m(e,t,u,this.view),m(s,t,u,this.view))>this.squaredShortLineThreshold}isVertical(s,e,{spatialReference:t}){const i=K(t);return A(l(s),l(e))*i<y.verticalLineThresholdMeters}squaredProximityThreshold(s){return s==="touch"?this._squaredTouchProximityThreshold:this._squaredMouseProximityThreshold}get _squaredMouseProximityThreshold(){return this.options.distance*this.options.distance}get _squaredTouchProximityThreshold(){const{distance:s,touchSensitivityMultiplier:e}=this.options,t=s*e;return t*t}}class xe extends q{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=[];if(i<1)return r;const{spatialReference:o}=e,h=m(s,o,u,this.view),{view:n}=this,a=t.edges[i-1];let p=a;do{if(this.edgeExceedsShortLineThreshold(p,e)){const c=M(p,n,e);this._processCandidateProposal(c.left,c.right,s,h,e,r)}p=p.leftVertex.leftEdge}while(p&&p!==a);return r}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2)return t;const{view:o}=this,{spatialReference:h}=e,n=m(s,h,u,o),a=i.leftEdge,p=i.rightEdge;a&&p&&this.edgeExceedsShortLineThreshold(a,e)&&this.edgeExceedsShortLineThreshold(p,e)&&this._processCandidateProposal(f(a.leftVertex.pos,o,e),f(p.rightVertex.pos,o,e),s,n,e,t);const c=r.edges[0];let g=c;do{if(g!==i.leftEdge&&g!==i.rightEdge&&this.edgeExceedsShortLineThreshold(g,e)){const x=M(g,o,e);this._processCandidateProposal(x.left,x.right,s,n,e,t)}g=g.rightVertex.rightEdge}while(g&&g!==c);return t}_processCandidateProposal(s,e,t,i,r,o){const{spatialReference:h,pointer:n}=r,a=F();ve(a,s,e,t,r,this._geodesicLengthMeasurementUtils);const p=C(b(a));_(i,m(p,h,u,this.view))<this.squaredProximityThreshold(n)&&o.push(new Y({lineStart:s,lineEnd:e,targetPoint:p,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}function ve(d,s,e,t,i,r){Ee(d,s,e,t,i,r)||we(d,t,s,e)}function Ee(d,s,e,t,{spatialReference:i},r){const o=R(s,e,i,i);if(o==null)return!1;const h=R(e,t,i,i);if(h==null)return!1;const n=r.geodesicDistance(e,t,i);if(n==null)return!1;const a=Math.abs(X.shortestSignedDiff(o,h))>Math.PI/2?U.normalize(o+Math.PI):o;return z(d,e,i,G(n,"meters"),H(a,"radians","geographic"),"geodesic"),d[2]=t[2],!0}function we(d,s,e,t){ee(s,{start:e,end:t,type:te.LINE},d),d[2]=s[2]}let Ve=class extends q{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=t.edges.length,r=t.vertices.length,o=[];if(i<2)return o;const{view:h}=this,n=m(s,e.spatialReference,u,h),a=f(t.vertices[r-1].pos,h,e),p=f(t.vertices[0].pos,h,e),c=t.edges[i-1];let g=c;do{if(this.edgeExceedsShortLineThreshold(g,e)){const x=M(g,h,e);this._checkEdgeForParallelLines(x,a,s,n,e,o),this._checkEdgeForParallelLines(x,p,s,n,e,o)}g=g.leftVertex.leftEdge}while(g&&g!==c);return o}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<3)return t;const{view:o}=this,h=m(s,e.spatialReference,u,o),n=i.leftEdge,a=i.rightEdge,p=r.vertices[0],c=f(p.pos,o,e),g=r.vertices.length,x=r.vertices[g-1],V=f(x.pos,o,e),P=r.edges[0];let v=P;do{if(v!==n&&v!==a&&this.edgeExceedsShortLineThreshold(v,e)){const S=M(v,o,e);n&&this._checkEdgeForParallelLines(S,f(n.leftVertex.pos,o,e),s,h,e,t),a&&this._checkEdgeForParallelLines(S,f(a.rightVertex.pos,o,e),s,h,e,t),i===p?this._checkEdgeForParallelLines(S,V,s,h,e,t):i===x&&this._checkEdgeForParallelLines(S,c,s,h,e,t)}v=v.rightVertex.rightEdge}while(v&&v!==P);return t}_checkEdgeForParallelLines(s,e,t,i,r,o){const h=s.left,n=s.right;if(j(E,l(e),l(h),l(n)),B(E,l(e))<y.parallelLineThreshold)return;j(E,l(t),l(h),l(n),l(e));const{spatialReference:a,pointer:p}=r,c=C(N(E[0],E[1],t[2]));if(_(i,m(c,a,u,this.view))<this.squaredProximityThreshold(p)){if(this.isVertical(c,e,r)||this.isVertical(h,n,r)||Le(s,o))return;o.push(new se({referenceLine:s,lineStart:e,targetPoint:c,isDraped:r.elevationInfo?.mode==="on-the-ground"}))}}};function Le(d,s){const e=d.left,t=d.right;for(const i of s)if(j(E,l(t),l(i.constraint.start),l(i.constraint.end),l(e)),B(E,l(t))<y.parallelLineThreshold)return i.addReferenceLine(d),!0;return!1}const E=O();class ye extends q{constructor(s,e,t){super(s,e),this._geodesicLengthMeasurementUtils=t}snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[];if(t.vertices.length<2)return i;const{view:r}=this,o=m(s,e.spatialReference,u,r),h=t.vertices.at(-1);this._checkForSnappingCandidate($.LastVertex,i,h.leftEdge,h,h.leftEdge.leftVertex,s,o,e);const n=t.vertices[0];return this._checkForSnappingCandidate($.FirstVertex,i,n.rightEdge,n,n.rightEdge.rightVertex,s,o,e),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle;if(i.component.vertices.length<3)return t;const{view:r}=this,o=m(s,e.spatialReference,u,r),h=i.leftEdge,n=i.rightEdge;if(h?.leftVertex.leftEdge){const a=h.leftVertex.leftEdge;this._checkForSnappingCandidate($.ExistingEdge,t,a,a.rightVertex,a.leftVertex,s,o,e)}if(n?.rightVertex.rightEdge){const a=n.rightVertex.rightEdge;this._checkForSnappingCandidate($.ExistingEdge,t,a,a.leftVertex,a.rightVertex,s,o,e)}return t}_checkForSnappingCandidate(s,e,t,i,r,o,h,n){if(!this.edgeExceedsShortLineThreshold(t,n))return;const a=this.view,p=f(i.pos,a,n),c=f(r.pos,a,n);_e(D,c,p,o,n,this._geodesicLengthMeasurementUtils),this._checkForSnappingCandidateAlongProjectedRay(s,e,c,p,D,o,h,n)}_checkForSnappingCandidateAlongProjectedRay(s,e,t,i,r,o,h,n){const{spatialReference:a,pointer:p}=n,c=J(k,l(o),l(i)),g=de(r,c)/le(r),x=ce(k,l(i),r,g),V=C(N(x[0],x[1],o[2]));if(_(h,m(V,a,u,this.view))>this.squaredProximityThreshold(p)||this.isVertical(V,i,n)||this.isVertical(i,t,n))return;const P=fe(F(),i,r,Math.sign(g));e.push(new ie({targetPoint:V,constraint:new oe(i,b(P)),previousVertex:t,otherVertex:i,otherVertexType:re.CENTER,selfSnappingType:s,isDraped:n.elevationInfo?.mode==="on-the-ground"}))}}function _e(d,s,e,t,i,r){Pe(d,s,e,t,i,r)||Se(d,s,e)}function Pe(d,s,e,t,{spatialReference:i},r){const o=R(s,e,i,i);if(o==null)return!1;const h=R(e,t,i,i);if(h==null)return!1;const n=Math.sign(U.shortestSignedDiff(o,h))*Math.PI*.5,a=H(o+n,"radians","geographic"),p=F(),c=r.geodesicDistance(e,t,i);return c!=null&&(z(p,e,i,G(c,"meters"),a,"geodesic"),ue(d,p,e),!0)}function Se(d,s,e){const t=J(k,l(e),l(s));me(d,t[1],-t[0],0)}const k=O(),D=F();let Te=class extends q{snapNewVertex(s,e){const t=e.editGeometryOperations.data.components[0],i=[],r=t.vertices.length;if(e.editGeometryOperations.data.type!=="polygon"||r<2)return i;const{view:o}=this,h=t.vertices[0],n=t.vertices[r-1],a=f(h.pos,o,e),p=f(n.pos,o,e);return this._processCandidateProposal(a,p,s,e,i),i}snapExistingVertex(s,e){const t=[],i=e.vertexHandle,r=i.component;if(r.edges.length<2||e.editGeometryOperations.data.type==="polyline"&&(i.index===0||i.index===r.vertices.length-1))return t;const{view:o}=this,h=f(i.leftEdge.leftVertex.pos,o,e),n=f(i.rightEdge.rightVertex.pos,o,e);return this._processCandidateProposal(h,n,s,e,t),t}_processCandidateProposal(s,e,t,i,r){if(!this.exceedsShortLineThreshold(s,e,i))return;const o=ge(I,l(s),l(e),.5),h=.5*A(l(s),l(e)),n=ne(I,l(t),o,h),a=C(N(n[0],n[1],t[2])),{spatialReference:p,pointer:c}=i,g=m(t,p,u,this.view);if(_(g,m(a,p,u,this.view))<this.squaredProximityThreshold(c)){if(this.isVertical(s,a,i)||this.isVertical(a,e,i))return;r.push(new he({targetPoint:a,point1:s,point2:e,isDraped:i.elevationInfo?.mode==="on-the-ground"}))}}};const I=O();let w=class extends Z{constructor(d){super(d),this.updating=!1,this._snappers=new Q,this._domain=ae.SELF}initialize(){this._snappers.push(new Ve(this.view,this.options),new xe(this.view,this.options,this.geodesicLengthMeasurementUtils),new ye(this.view,this.options,this.geodesicLengthMeasurementUtils),new Te(this.view,this.options))}set options(d){this._set("options",d);for(const s of this._snappers)s.options=d}async fetchCandidates(d,s,e){if(!(s&this._domain&&this.options.effectiveSelfEnabled))return[];const t=[];for(const i of this._snappers.items)for(const r of i.snap(d,e))t.push(r);return pe(d,t),t}};L([T({readOnly:!0})],w.prototype,"updating",void 0),L([T({constructOnly:!0})],w.prototype,"view",void 0),L([T({constructOnly:!0})],w.prototype,"geodesicLengthMeasurementUtils",void 0),L([T()],w.prototype,"options",null),w=L([W("esri.views.interactive.snapping.SelfSnappingEngine")],w);export{w as SelfSnappingEngine};
