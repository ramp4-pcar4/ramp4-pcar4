import{ah as b,dC as B,lT as d}from"./main-BFDurRCu.js";import{m as C,f as I,g as M,h as P,i as R,C as V,s as j}from"./dehydratedFeatureUtils-OR1UjA48.js";import{i as A,y as z}from"./memoryEstimations-DeWfxwaV.js";import{E as l,i as D}from"./IntersectorType-D6ZupXNg.js";import{n as O}from"./mat4-OOmHNWi7.js";import{e as W,r as N}from"./mat4f64-xsZDPPj0.js";import{r as J,g as _,u as K,A as k,s as p}from"./vec32-Cj8pVsU0.js";import{z as q}from"./vec42-D8CJyqHG.js";import{n as F}from"./vec4f64-DD-nkcCV.js";import{b as H,v}from"./sphere-zPMQWhGG.js";import{e as Q}from"./VertexAttribute-hUz6pozM.js";import"./glsl-Z5uYj8ka.js";import"./vec2-BnynUbeJ.js";import"./vec2f64-CkowXrDb.js";import"./BindType-CKbZk6AG.js";import"./ShaderBuilder-CU5v4tk1.js";import{i as X,m as Y,v as Z,K as $,R as ee}from"./DefaultMaterial-7UvmJfZD.js";import"./ShaderOutput-CUn9tpiG.js";import"./mat3f64-BnNZDR5l.js";import"./OutputColorHighlightOID.glsl-BdXTjs7_.js";import"./mat3-DOnW3DjW.js";import"./NormalAttribute.glsl-BnbqDItl.js";import"./boundedPlane-QDtjx5eO.js";import"./ViewingMode-CdRKcXnc.js";import"./basicInterfaces-Dsf65ICa.js";class w{get ray(){return this._ray}get distanceInRenderSpace(){return this.distance==null?null:(_(f,this.ray.direction,this.distance),J(f))}withinDistance(e){return!!x(this)&&this.distanceInRenderSpace<=e}getIntersectionPoint(e){return!!x(this)&&(_(f,this.ray.direction,this.distance),K(e,this.ray.origin,f),!0)}getTransformedNormal(e){return p(h,this.normal),h[3]=0,q(h,h,this.transformation),p(e,h),k(e,e)}constructor(e){this.intersector=l.OBJECT,this.normal=b(),this.transformation=W(),this._ray=H(),this.init(e)}init(e){this.distance=this.target=this.drapedLayerOrder=this.renderPriority=null,this.intersector=l.OBJECT,v(e,this._ray)}set(e,r,t,i,n,a,o){this.intersector=e,this.distance=t,p(this.normal,i??B),O(this.transformation,n??N),this.target=r,this.drapedLayerOrder=a,this.renderPriority=o}copy(e){v(e.ray,this._ray),this.intersector=e.intersector,this.distance=e.distance,this.target=e.target,this.drapedLayerOrder=e.drapedLayerOrder,this.renderPriority=e.renderPriority,p(this.normal,e.normal),O(this.transformation,e.transformation)}}function x(s){return s?.distance!=null}const f=b(),h=F();let te=class{constructor(s){this.layerViewUid=s}};class re extends te{constructor(e,r){super(e),this.graphicUid=r}}class se extends re{constructor(e,r,t,i,n){super(e,r),this.layerViewUid=e,this.graphicUid=r,this.triangleNr=t,this.baseBoundingSphere=i,this.numLodLevels=n}}let ne=class{constructor(s,e,r,t){this.material=s,this.bufferWriter=s.createBufferWriter(),this.vertexBufferLayout=this.bufferWriter.vertexBufferLayout,this.buffer=e,this.elementCount=r,this.boundingInfo=t}get numTriangles(){return this.elementCount/3}get numVertices(){return this.elementCount}computeUsedMemory(){return this.buffer.byteLength+z}getRenderGeometry(){return this}intersect(s,e,r,t,i,n,a,o){const c=this.bufferWriter,u=this.buffer;c.intersect(u,this.material.parameters,null,s,r,t,(m,g,y)=>L(m,g,y,s,e,n,a,i,o))}};class G{constructor(e){this.engineGeometry=e}get material(){return this.engineGeometry.material}get numVertices(){return this.engineGeometry.attributes.get(Q.POSITION).indices.length}get numTriangles(){return this.engineGeometry.indexCount/3}get boundingInfo(){return this.engineGeometry.boundingInfo}computeUsedMemory(){return Array.from(this.engineGeometry.attributes.values()).reduce((e,r)=>e+A(r.data,r.indices),0)}getRenderGeometry(){const e=this.material,r=this.engineGeometry,t=r.attributes,i=r.boundingInfo,n=e.createBufferWriter(),a=n.vertexBufferLayout,o=n.elementCount(t),c=a.createBuffer(o);return n.write(null,null,t,null,c,0),new ne(e,c.buffer,o,i)}intersect(e,r,t,i,n,a,o,c){const u=this.engineGeometry;this.material.intersect(u,e.transform.transform,e,t,i,(m,g,y)=>L(m,g,y,e,r,a,o,n,c))}}function L(s,e,r,t,i,n,a,o,c){if(s<0||i&&!i(t.rayBegin,t.rayEnd,s))return;const u=new se(n.layerViewUid,n.graphicUid(o),r,a,c);if((t.results.min.distance==null||s<t.results.min.distance)&&t.results.min.set(l.LOD,u,s,e,t.transform.transform),(t.results.max.distance==null||s>t.results.max.distance)&&t.results.max.set(l.LOD,u,s,e,t.transform.transform),t.options.store===D.ALL){const m=new w(t.results.min.ray);m.set(l.LOD,u,s,e,t.transform.transform),t.results.all.push(m)}}let T=class{constructor(s,e=null){this.geometry=s,this.textures=e}get material(){return this.geometry.material}get numTriangles(){return this.geometry.numTriangles}};class E{constructor(e,r,t){this.components=e,this.minScreenSpaceRadius=r,this.pivotOffset=t;const i=d(this.components.map(n=>n.geometry));this.numVertices=i.reduce((n,a)=>n+a.numVertices,0)}}class U{constructor(e){this.levels=e,this.levels.sort((r,t)=>r.minScreenSpaceRadius===t.minScreenSpaceRadius?r.numVertices-t.numVertices:r.minScreenSpaceRadius-t.minScreenSpaceRadius)}getMaterials(){const e=[];return this.levels.forEach(r=>r.components.forEach(t=>e.push(t.geometry.material))),d(e)}getTextures(){const e=new Array;return this.levels.forEach(r=>r.components.forEach(t=>{t.textures!=null&&e.push(...t.textures)})),d(e)}getGeometries(){const e=new Array;return this.levels.forEach(r=>r.components.forEach(t=>{e.push(t.geometry)})),d(e)}getEngineGeometries(){return this.getGeometries().map(e=>e.engineGeometry).filter(e=>e!=null)}computeUsedMemory(){const e=this.getGeometries(),r=this.getTextures(),t=e.reduce((i,n)=>i+n.computeUsedMemory(),0);return r.reduce((i,n)=>i+n.usedMemory,0)+t}}function ie(s){switch(s){case"sphere":case"cube":case"diamond":case"cylinder":case"cone":case"inverted-cone":case"tetrahedron":return!0}return!1}function ae(s,e){const r=(t,i,n=!1)=>new U(t.map(a=>{const o=i(a.tesselation);return n&&C(o),new E([new T(new G(o))],a.minScreenSpaceRadius)}));switch(s){case"sphere":return r([{tesselation:0,minScreenSpaceRadius:0},{tesselation:1,minScreenSpaceRadius:8},{tesselation:2,minScreenSpaceRadius:16},{tesselation:3,minScreenSpaceRadius:50},{tesselation:4,minScreenSpaceRadius:250}],t=>j(e,.5,t));case"cube":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>V(e,1));case"cone":return r(S,t=>R(e,1,.5,t,!1),!0);case"inverted-cone":return r(S,t=>R(e,1,.5,t,!0),!0);case"cylinder":return r(S,t=>P(e,1,.5,t,[0,0,1],[0,0,.5]));case"tetrahedron":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>M(e,1),!0);case"diamond":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>I(e,1),!0);default:return}}const S=[{tesselation:6,minScreenSpaceRadius:0},{tesselation:18,minScreenSpaceRadius:7},{tesselation:64,minScreenSpaceRadius:65}],oe=Object.freeze(Object.defineProperty({__proto__:null,build:X},Symbol.toStringTag,{value:"Module"})),ce=Object.freeze(Object.defineProperty({__proto__:null,build:Y,getRadius:Z},Symbol.toStringTag,{value:"Module"})),ue=Object.freeze(Object.defineProperty({__proto__:null,build:$},Symbol.toStringTag,{value:"Module"})),me=Object.freeze(Object.defineProperty({__proto__:null,build:ee},Symbol.toStringTag,{value:"Module"}));export{ue as D,me as R,ie as S,T as a,G as b,oe as c,ce as d,E as f,U as h,ae as l,w as p};
