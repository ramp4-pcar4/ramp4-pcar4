import{L as I,w as f,hU as T,v as n,gY as w}from"./main-BFDurRCu.js";import{o as H,M as g,h as L,b as D,i as W}from"./mat3-DOnW3DjW.js";import{e as C}from"./MapView-DVZSZHRJ.js";import{r as p}from"./vec2f32-hTAvipMV.js";import{e as N}from"./Container-Dr2EdOEZ.js";import{B as U,M as q,P as G,D as _,C as V,L as x}from"./enums-wEDHPbCF.js";import{a as F,S as K}from"./Texture-D5XWO2GQ.js";import{w as z}from"./definitions-MCCItX4r.js";import{j as O,X as j,e as y,w as Q,d as X,f as Y,c as b,g as l,U as J,r as Z,_ as $,K as tt,m as S,i as et,P as it,v as st,t as rt}from"./GraphShaderModule-Baq-N_YO.js";import{e as ot}from"./TechniqueType-CMl1wqtX.js";import{m as at}from"./bitmapUtils-CAdCGIbP.js";class v{constructor(t,i,s){this.pixelBlock=t,this.extent=i,this.originalPixelBlock=s}get width(){return this.pixelBlock!=null?this.pixelBlock.width:0}get height(){return this.pixelBlock!=null?this.pixelBlock.height:0}render(t){const i=this.pixelBlock;if(i==null)return;const s=this.filter({extent:this.extent,pixelBlock:this.originalPixelBlock??i});if(s.pixelBlock==null)return;s.pixelBlock.maskIsAlpha&&(s.pixelBlock.premultiplyAlpha=!0);const a=s.pixelBlock.getAsRGBA(),o=t.createImageData(s.pixelBlock.width,s.pixelBlock.height);o.data.set(a),t.putImageData(o,0,0)}getRenderedRasterPixels(){const t=this.filter({extent:this.extent,pixelBlock:this.pixelBlock});return t.pixelBlock==null?null:(t.pixelBlock.maskIsAlpha&&(t.pixelBlock.premultiplyAlpha=!0),{width:t.pixelBlock.width,height:t.pixelBlock.height,renderedRasterPixels:new Uint8Array(t.pixelBlock.getAsRGBA().buffer)})}}function B(e){return e&&"render"in e}function M(e){const t=document.createElement("canvas");return t.width=e.width,t.height=e.height,e.render(t.getContext("2d")),t}function nt(e){return B(e)?e instanceof v?e.getRenderedRasterPixels()?.renderedRasterPixels:M(e):e}let ht=class extends N{constructor(e=null,t=!1){super(),this.blendFunction="standard",this._sourceWidth=0,this._sourceHeight=0,this._textureInvalidated=!1,this.stencilRef=0,this.coordScale=[1,1],this._height=void 0,this.pixelRatio=1,this.resolution=0,this.rotation=0,this._source=null,this._texture=null,this._width=void 0,this.x=0,this.y=0,this.immutable=t,this.source=e,this.requestRender=this.requestRender.bind(this)}destroy(){this._texture&&(this._texture.dispose(),this._texture=null),this._uploadStatus!=null&&(this._uploadStatus.controller.abort(),this._uploadStatus=null)}get isSourceScaled(){return this.width!==this._sourceWidth||this.height!==this._sourceHeight}get height(){return this._height!==void 0?this._height:this._sourceHeight}set height(e){this._height=e}get source(){return this._source}set source(e){e==null&&this._source==null||(this._source=e,this.invalidateTexture(),this.requestRender())}get texture(){return this._texture}get width(){return this._width!==void 0?this._width:this._sourceWidth}set width(e){this._width=e}beforeRender(e){super.beforeRender(e),this.updateTexture(e)}async setSourceAsync(e,t){this._uploadStatus!=null&&this._uploadStatus.controller.abort();const i=new AbortController,s=I();return f(t,()=>i.abort()),f(i,a=>s.reject(a)),this._uploadStatus={controller:i,resolver:s},this.source=e,s.promise}invalidateTexture(){this._textureInvalidated||(this._textureInvalidated=!0,this._source instanceof HTMLImageElement?(this._sourceHeight=this._source.naturalHeight,this._sourceWidth=this._source.naturalWidth):this._source&&(this._sourceHeight=this._source.height,this._sourceWidth=this._source.width))}transitionStep(e,t){e>=64&&(this.fadeTransitionEnabled=!1),super.transitionStep(e,t)}setTransform(e){const t=H(this.transforms.displayViewScreenMat3),[i,s]=e.toScreenNoRotation([0,0],[this.x,this.y]),a=this.resolution/this.pixelRatio/e.resolution,o=a*this.width,r=a*this.height,h=Math.PI*this.rotation/180;g(t,t,p(i,s)),g(t,t,p(o/2,r/2)),L(t,t,-h),g(t,t,p(-o/2,-r/2)),D(t,t,p(o,r)),W(this.transforms.displayViewScreenMat3,e.displayViewMat3,t)}setSamplingProfile(e){this._texture&&(e.mips&&!this._texture.descriptor.hasMipmap&&this._texture.generateMipmap(),this._texture.setSamplingMode(e.samplingMode))}bind(e,t){this._texture&&e.bindTexture(this._texture,t)}async updateTexture({context:e,painter:t}){if(!this._textureInvalidated)return;if(this._textureInvalidated=!1,this._texture||(this._texture=this._createTexture(e)),!this.source)return void this._texture.setData(null);this._texture.resize(this._sourceWidth,this._sourceHeight);const i=nt(this.source);try{if(this._uploadStatus!=null){const{controller:s,resolver:a}=this._uploadStatus,o={signal:s.signal},{width:r,height:h}=this,d=this._texture;await t.textureUploadManager.enqueueTextureUpdate({data:i,texture:d,width:r,height:h},o),a.resolve(),this._uploadStatus=null}else this._texture.setData(i);this.ready()}catch(s){T(s)}}onDetach(){this.destroy()}_createTransforms(){return{displayViewScreenMat3:C()}}_createTexture(e){const t=this.immutable,i=new F;return i.internalFormat=t?U.RGBA8:q.RGBA,i.wrapMode=G.CLAMP_TO_EDGE,i.isImmutable=t,i.width=this._sourceWidth,i.height=this._sourceHeight,new K(e,i)}};class R extends et{}n([Y(0,b)],R.prototype,"position",void 0);class lt extends st{}class u extends it{}n([l(J)],u.prototype,"texture",void 0),n([l(Z)],u.prototype,"dvsMat3",void 0),n([l(b)],u.prototype,"coordScale",void 0),n([l($)],u.prototype,"opacity",void 0);class c extends O{constructor(){super(...arguments),this.type="BitmapShader"}vertex(t){const i=this.config.dvsMat3.multiply(new j(t.position.multiply(this.config.coordScale),1));return{glPosition:new y(i,1),texcoord:t.position}}fragment(t){const i=new Q;let s;return s=this.bicubic?at(this.config.texture,t.texcoord,this.config.coordScale):X(this.config.texture,t.texcoord),i.fragColor=new y(s.rgb.multiply(this.config.opacity),s.a.multiply(this.config.opacity)),i}}n([l(u)],c.prototype,"config",void 0),n([tt],c.prototype,"bicubic",void 0),n([w(0,S(R))],c.prototype,"vertex",null),n([w(0,S(lt))],c.prototype,"fragment",null);const m={nearest:{samplingMode:x.NEAREST,mips:!1},bilinear:{samplingMode:x.LINEAR,mips:!1},bicubic:{samplingMode:x.LINEAR,mips:!1},trilinear:{samplingMode:x.LINEAR_MIPMAP_LINEAR,mips:!0}},ut=(e,t,i)=>{if(i.samplingMode==="dynamic"){const{state:s}=e,a=t.resolution/t.pixelRatio/s.resolution,o=Math.round(e.pixelRatio)!==e.pixelRatio,r=a>1.05||a<.95;return s.rotation||r||o||t.isSourceScaled||t.rotation?m.bilinear:m.nearest}return m[i.samplingMode]};class ct extends rt{constructor(){super(...arguments),this.name="BrushBitmap",this.type=ot.Bitmap,this.shaders={bitmap:new c}}render(t,i){const{context:s,renderingOptions:a,painter:o}=t;for(const r of i.bitmaps){const h=r.texture;if(!r.source||!r.isReady||h==null)continue;const d=ut(t,r,a);t.timeline.begin(this.name),o.setPipelineState({depth:!1,stencil:{test:{mask:255,ref:r.stencilRef,compare:V.EQUAL,op:{fail:_.KEEP,zFail:_.KEEP,zPass:_.KEEP}},write:!1},color:{write:[!0,!0,!0,!0],blendMode:r.blendFunction==="additive"?"additive":"composite"}}),r.setSamplingProfile(d);const{coordScale:k,computedOpacity:A,transforms:P}=r,E={texture:{texture:h,unit:z},dvsMat3:P.displayViewScreenMat3,coordScale:k,opacity:A};o.submitDrawMesh(s,{shader:this.shaders.bitmap,uniforms:{config:E},defines:{bicubic:d===m.bicubic},optionalAttributes:null,useComputeBuffer:!1},o.quadMesh),t.timeline.end(this.name)}}}export{ht as S,M as f,B as g,v as l,ct as p};
