import{B as h,b_ as n,bl as m,v as s,x as i,J as d,z as S,c8 as g,a0 as y}from"./main-BFDurRCu.js";import{f as R,s as w}from"./utils-BO8hgPs3.js";import{o as J}from"./utils-DpLVEUvg.js";let o=class extends h{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:m(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([S("esri.rest.support.ProjectParameters")],o);const v=g(o);async function O(e,t,r){t=v(t);const a=R(e),p={...a.query,f:"json",...t.toJSON()},f=t.outSpatialReference,u=m(t.geometries[0]),c=w(p,r);return y(a.path+"/project",c).then(({data:{geometries:l}})=>J(l,u,f))}export{O as n,o as p};
