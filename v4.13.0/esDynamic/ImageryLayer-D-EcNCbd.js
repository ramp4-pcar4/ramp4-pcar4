import{h as V,B as T,v as s,x as a,H as N,z as R,bn as ne,c2 as q,J as ee,bV as Ve,aw as xt,lj as ce,li as He,lx as ke,bl as H,bx as B,am as ot,b$ as qe,I as J,bw as te,bJ as zt,ak as A,a0 as x,b_ as lt,ly as Ut,aZ as Bt,i as ut,s as S,lz as Qt,ab as Ht,bv as kt,h0 as $t,bY as Wt,q as Zt,by as Kt}from"./main-BFDurRCu.js";import{S as Xt}from"./MultiOriginJSONSupport-BqiFJbbt.js";import{h as Yt}from"./Layer-DvVVmz9x.js";import{w as ei,y as ti,b as ii,d as ri,l as si}from"./OperationalLayer-CbXUnTH0.js";import{o as ni,m as ai,c as oi,n as li,j as ui,$ as pi,b as mi,e as ci,k as Re,q as pt,f as di,v as yi,p as hi,h as gi,V as fi,s as wi,u as Ri,l as vi}from"./datasetUtils-DYlC2Qty.js";import{N as F,y as k,h as bi,a as Si,j as Ii,u as xi,p as Fi,l as Di,c as Ti,E as Ni,q as Pi,D as ji,B as Ci,t as Oi,d as _i}from"./RasterJobHandlerMixin-DESVihMQ.js";import{u as Mi}from"./pixelRangeUtils-DcEknavd.js";import{A as Ft,B as Dt,c as Ai,w as Vi,x as qi,a as Ee,y as Je,n as ve,l as Ei,m as Tt,_ as Ji,j as Nt,P as Gi}from"./RasterSymbolizer-BN6RVtx9.js";import{f as Li}from"./commonProperties-CJLeiNuA.js";import{m as zi}from"./Field-BIQ-quF4.js";import{Z as Ui}from"./FieldsIndex-Bt0Y8aWr.js";import{t as Pt}from"./imageBitmapUtils-wCApjb1B.js";import{c as mt,l as Bi}from"./dataUtils-CfR0oe2x.js";import{R as be}from"./normalizeUtils-u00NGW3M.js";import{f as E,u as G,s as L}from"./utils-BO8hgPs3.js";import{s as Qi,R as ct}from"./Query-n1aoaaFC.js";import{u as jt}from"./TimeExtent-Cf2Pienb.js";import{g as Ct}from"./FeatureSet-BVGGhhH9.js";import{f as Ot,p as Hi,c as ki,o as $i}from"./RasterPresetRendererMixin-CdHfKJ2u.js";import{i as Wi,s as Zi}from"./executeForIds-CRDS8hwo.js";import{s as Ki}from"./executeQueryJSON-D8fHgTZN.js";import{l as Xi}from"./ArcGISService-B6M5rzsr.js";import{p as Yi}from"./BlendLayer-DjW_5k0v.js";import{e as er}from"./CustomParametersMixin-CSMgHDaw.js";import{j as tr}from"./PortalLayer-B34ZUA2x.js";import{f as ir}from"./RefreshableLayer-Qpvyi8qY.js";import{t as rr}from"./ScaleRangeLayer-x42fwED3.js";import{c as sr}from"./TemporalLayer-lQRje9wB.js";import{t as nr}from"./versionUtils-BwTR8Ufq.js";import{p as ar}from"./popupUtils-B99PyAFi.js";import{A as $e}from"./interfaces-Cwm0pihk.js";const or={StretchFunction:{arguments:{ComputeGamma:{isDataset:!1,isPublic:!1,name:"ComputeGamma",type:"RasterFunctionVariable",value:!1},DRA:{isDataset:!1,isPublic:!1,name:"DRA",type:"RasterFunctionVariable",value:!1},EstimateStatsHistogram:{isDataset:!1,isPublic:!1,name:"EstimateStatsHistogram",type:"RasterFunctionVariable",value:!1},Gamma:{displayName:"Gamma",isDataset:!1,isPublic:!1,name:"Gamma",type:"RasterFunctionVariable"},Histograms:{isDataset:!1,isPublic:!1,name:"Histograms",type:"RasterFunctionVariable"},Max:{isDataset:!1,isPublic:!1,name:"Max",type:"RasterFunctionVariable",value:255},MaxPercent:{isDataset:!1,isPublic:!1,name:"MaxPercent",type:"RasterFunctionVariable",value:.5},Min:{isDataset:!1,isPublic:!1,name:"Min",type:"RasterFunctionVariable",value:0},MinPercent:{isDataset:!1,isPublic:!1,name:"MinPercent",type:"RasterFunctionVariable",value:.25},NumberOfStandardDeviations:{isDataset:!1,isPublic:!1,name:"NumberOfStandardDeviation",type:"RasterFunctionVariable",value:2},Raster:{isDataset:!0,isPublic:!1,name:"Raster",type:"RasterFunctionVariable"},SigmoidStrengthLevel:{isDataset:!1,isPublic:!1,name:"SigmoidStrengthLevel",type:"RasterFunctionVariable",value:2},Statistics:{isDataset:!1,isPublic:!1,name:"Statistics",type:"RasterFunctionVariable"},StretchType:{isDataset:!1,isPublic:!1,name:"StretchType",type:"RasterFunctionVariable",value:0},type:"StretchFunctionArguments",UseGamma:{isDataset:!1,isPublic:!1,name:"UseGamma",type:"RasterFunctionVariable",value:!1}},description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",function:{description:"Enhances an image by adjusting the range of values displayed. This does not alter the underlying pixel values. If a pixel has a value outside of the specified range, it will appear as either the minimum or maximum value.",name:"Stretch",pixelType:"UNKNOWN",type:"StretchFunction"},functionType:0,name:"Stretch",thumbnail:""},RemapFunction:{name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table.",function:{type:"RemapFunction",pixelType:"UNKNOWN",name:"Remap",description:"Changes pixel values by assigning new values to ranges of pixel values or using an external table."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},UseTable:{name:"UseTable",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},InputRanges:{name:"InputRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Input Ranges"},OutputValues:{name:"OutputValues",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"Output Values"},NoDataRanges:{name:"NoDataRanges",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable",displayName:"NoData Ranges"},Table:{name:"Table",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputField:{name:"InputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},OutputField:{name:"OutputField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},InputMaxField:{name:"InputMaxField",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},RemapTableType:{name:"RemapTableType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},AllowUnmatched:{name:"AllowUnmatched",isPublic:!1,isDataset:!1,value:!0,type:"RasterFunctionVariable"},type:"RemapFunctionArguments"},functionType:0,thumbnail:""},ColormapFunction:{name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp.",function:{type:"ColormapFunction",pixelType:"UNKNOWN",name:"Colormap",description:"Changes pixel values to display the raster data as either a grayscale or a red, green, blue (RGB) image, based on a colormap or a color ramp."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},ColormapName:{name:"ColormapName",isPublic:!1,isDataset:!1,value:"Gray",type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},type:"ColormapFunctionArguments"},functionType:0,thumbnail:""},ShadedReliefFunction:{name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image.",function:{type:"ShadedReliefFunction",pixelType:"UNKNOWN",name:"Shaded Relief",description:"Creates a multiband, color coded, 3D representation of the surface, with the sun's relative position taken into account for shading the image."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ColorSchemeType:{name:"ColorSchemeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ColorRamp:{name:"ColorRamp",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Colormap:{name:"Colormap",isPublic:!1,isDataset:!1,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"ShadedReliefFunctionArguments"},functionType:0,thumbnail:""},HillshadeFunction:{name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image",function:{type:"HillshadeFunction",pixelType:"UNKNOWN",name:"Hillshade",description:"Creates a 3D representation of the surface, with the sun's relative position taken into account for shading the image"},arguments:{DEM:{name:"DEM",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},HillshadeType:{name:"HillshadeType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},Azimuth:{name:"Azimuth",isPublic:!1,isDataset:!1,value:315,type:"RasterFunctionVariable"},Altitude:{name:"Altitude",isPublic:!1,isDataset:!1,value:45,type:"RasterFunctionVariable"},SlopeType:{name:"SlopeType",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},ZFactor:{name:"ZFactor",isPublic:!1,isDataset:!1,value:1,type:"RasterFunctionVariable"},PSPower:{name:"PSPower",isPublic:!1,isDataset:!1,value:.664,type:"RasterFunctionVariable"},PSZFactor:{name:"PSZFactor",isPublic:!1,isDataset:!1,value:.024,type:"RasterFunctionVariable"},RemoveEdgeEffect:{name:"RemoveEdgeEffect",isPublic:!1,isDataset:!1,value:!1,type:"RasterFunctionVariable"},type:"HillshadeFunctionArguments"},functionType:0,thumbnail:""},ResampleFunction:{name:"Resample",description:"Changes the cell size of a raster.",function:{type:"ResampleFunction",pixelType:"UNKNOWN",name:"Resample",description:"Changes the cell size of a raster."},arguments:{Raster:{name:"Raster",isPublic:!1,isDataset:!0,type:"RasterFunctionVariable"},ResamplingType:{name:"ResamplingType",isPublic:!1,isDataset:!1,value:0,type:"RasterFunctionVariable"},InputCellSize:{name:"InputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},OutputCellSize:{name:"OutputCellsize",isPublic:!1,isDataset:!1,value:{x:0,y:0},type:"RasterFunctionVariable"},type:"ResampleFunctionArguments"},functionType:0,thumbnail:""}},lr=new Set(["u1","u2","u4","u8","s8","u16","s16"]),ur={simple_scalar:"Simple Scalar",wind_barb:"Wind Barb",single_arrow:"Single Arrow",beaufort_kn:"Beaufort Wind (Knots)",beaufort_m:"Beaufort Wind (MetersPerSecond)",ocean_current_m:"Ocean Current (MetersPerSecond)",ocean_current_kn:"Ocean Current (Knots)"},pr=new Set(["raster-stretch","unique-value","class-breaks","raster-shaded-relief","vector-field","raster-colormap"]);function _t(r){return pr.has(r.type)}function dt(r,i){if(!r||!i)return V(r||i);const o=V(r);if(o.functionDefinition&&i.rasterFunctionDefinition){const e=i.rasterFunctionDefinition;(e.thumbnail||e.thumbnailEx)&&(e.thumbnail=e.thumbnailEx=void 0),Mt(o.functionDefinition.arguments,i),o.rasterFunctionDefinition=o.functionDefinition.toJSON()}else i.functionName?.toLowerCase()!=="none"&&(At(o.functionArguments).Raster=i);return o}function Mt(r,i){for(const o in r)o.toLowerCase()==="raster"&&(r[o].type==="RasterFunctionVariable"?(r[o]=i.rasterFunctionDefinition,r[o].type="RasterFunctionTemplate"):r[o].type==="RasterFunctionTemplate"&&Mt(r[o].arguments,i))}function ie(r){const i=V(or[r.functionName+"Function"]),o=r.functionArguments;for(const e in o)e.toLowerCase()==="raster"?(i.arguments[e]=ie(o[e]),i.arguments[e].type="RasterFunctionTemplate"):e.toLowerCase()==="colormap"?(i.arguments[e].value=wr(o[e]),i.arguments.ColorSchemeType.value=0):i.arguments[e].value=o[e];return i}function mr(r,i){switch(i=i||{},r.type){case"raster-stretch":return yr(r,i);case"class-breaks":return hr(r,i);case"unique-value":return gr(r,i);case"raster-colormap":return fr(r,i);case"vector-field":return cr(r,i);case"raster-shaded-relief":return dr(r,i);case"flow":throw new Error("Unsupported rendering rule.")}}function At(r){const i=r?.Raster??r?.raster;return i&&i.declaredClass==="esri.layers.support.RasterFunction"?At(i.functionArguments):r}const Ge={none:0,standardDeviation:3,histogramEqualization:4,minMax:5,percentClip:6,sigmoid:9};function cr(r,i){const o=new F;o.functionName="VectorFieldRenderer";const{dataType:e,bandNames:t}=i,n=e==="vector-uv";let l,u;if(t&&t.length===2){const g=t.map(f=>f.toLowerCase());l=g.indexOf("magnitude"),u=g.indexOf("direction")}l!==-1&&l!==null||(l=0,u=1);const p=r.rotationType==="arithmetic"?1:2,c=r.flowRepresentation==="flow-from"?0:1,m=r.visualVariables?r.visualVariables.find(g=>g.field==="Magnitude"):new Li,d={magnitudeBandID:l,directionBandID:u,isUVComponents:n,referenceSystem:p,massFlowAngleRepresentation:c,symbolTileSize:50,symbolTileSizeUnits:100,calculationMethod:"Vector Average",symbologyName:ur[r.style.toLowerCase().replace("-","_")],minimumMagnitude:m.minDataValue,maximumMagnitude:m.maxDataValue,minimumSymbolSize:m.minSize,maximumSymbolSize:m.maxSize};o.functionArguments=d;const y=ie(o);return i.convertToRFT?F.fromJSON({rasterFunctionDefinition:y}):o}function dr(r,i){const o=i.convertToRFT;if(i.dataType!=="elevation"&&(i.dataType!=="generic"||i.bandCount!==1||i.pixelType!=="s16"&&i.pixelType!=="s32"&&i.pixelType!=="f32"&&i.pixelType!=="f64"))return new F;const e=new F;e.functionName="Hillshade";const t=r.hillshadeType==="traditional"?0:1,n=r.scalingType==="none"?1:3,l={HillshadeType:t,SlopeType:n,ZFactor:r.zFactor};return t===0&&(l.Azimuth=r.azimuth,l.Altitude=r.altitude),n===3&&(l.PSPower=r.pixelSizePower,l.PSZFactor=r.pixelSizeFactor),e.functionArguments=l,e.variableName="Raster",r.colorRamp&&(e.functionName="ShadedRelief",o?l.ColorRamp=Ft(r.colorRamp):l.Colormap=Dt(r.colorRamp)),o?new F({rasterFunctionDefinition:ie(e)}):e}function yr(r,i){const o=i.convertToRFT,e=new F;e.functionName="Stretch";const t=Ge[Ai.toJSON(r.stretchType)],n="u8",l=r.customStatistics?.map(p=>[p.min,p.max,p.avg??0,p.stddev??1]),u={StretchType:t,Statistics:l,DRA:r.dynamicRangeAdjustment,UseGamma:r.useGamma,Gamma:r.gamma,ComputeGamma:r.computeGamma};if(r.outputMin!=null&&(u.Min=r.outputMin),r.outputMax!=null&&(u.Max=r.outputMax),t===Ge.standardDeviation?(u.NumberOfStandardDeviations=r.numberOfStandardDeviations,e.outputPixelType=n):t===Ge.percentClip?(u.MinPercent=r.minPercent,u.MaxPercent=r.maxPercent,e.outputPixelType=n):t===Ge.minMax?e.outputPixelType=n:t===Ge.sigmoid&&(u.SigmoidStrengthLevel=r.sigmoidStrengthLevel),e.functionArguments=u,e.variableName="Raster",r.colorRamp){const p=r.colorRamp,c=new F;if(o)c.functionArguments={ColorRamp:Ft(p)};else{const m=Vi(p,!0);if(m)c.functionArguments={colorRampName:m};else if(!i.convertColorRampToColormap||p.type!=="algorithmic"&&p.type!=="multipart"){const d=r.colorRamp.toJSON();d.type==="algorithmic"?d.algorithm=d.algorithm||"esriCIELabAlgorithm":d.type==="multipart"&&d.colorRamps?.length&&d.colorRamps.forEach(y=>y.algorithm=y.algorithm||"esriCIELabAlgorithm"),c.functionArguments={colorRamp:d}}else c.functionArguments={Colormap:Dt(p)}}return c.variableName="Raster",c.functionName="Colormap",c.functionArguments.Raster=e,o?new F({rasterFunctionDefinition:ie(c)}):c}return o?new F({rasterFunctionDefinition:ie(e)}):e}function hr(r,i){const o=[],e=[],t=[],n=[],{pixelType:l,rasterAttributeTable:u}=i,p=u==null?null:u.features,c=Vt(u);if(c&&p&&Array.isArray(p)&&r.classBreakInfos){r.classBreakInfos.forEach((h,b)=>{const j=h.symbol?.color;let w;j?.a&&h.minValue!=null&&h.maxValue!=null&&p.forEach(v=>{h.minValue!=null&&h.maxValue!=null&&(w=v.attributes[r.field],(w>=h.minValue&&w<h.maxValue||b===r.classBreakInfos.length-1&&w>=h.minValue)&&n.push([v.attributes[c],j.r,j.g,j.b]))})});const g=l?We(n,l):n,f=new F;return f.functionName="Colormap",f.functionArguments={},f.functionArguments.Colormap=g,f.variableName="Raster",i.convertToRFT?new F({rasterFunctionDefinition:ie(f)}):f}r.classBreakInfos.forEach((g,f)=>{if(g.minValue==null||g.maxValue==null)return;const h=g.symbol&&g.symbol.color;h?.a?(f===0?o.push(g.minValue,g.maxValue+1e-4):o.push(g.minValue+1e-4,g.maxValue+1e-4),e.push(f),n.push([f,h.r,h.g,h.b])):t.push(g.minValue,g.maxValue)});const m=l?We(n,l):n,d=new F;d.functionName="Remap",d.functionArguments={InputRanges:o,OutputValues:e,NoDataRanges:t},d.variableName="Raster";const y=new F;return y.functionName="Colormap",y.functionArguments={Colormap:m,Raster:d},i.convertToRFT?new F({rasterFunctionDefinition:ie(y)}):y}function We(r,i){const o=lr.has(i)?Mi(i):null;return o&&r.push([Math.floor(o[0]-1),0,0,0],[Math.ceil(o[1]+1),0,0,0]),r}function Vt(r){if(r==null)return;const{fields:i}=r;return i?.find(o=>o?.name&&o.name.toLowerCase()==="value")?.name}function gr(r,i){const o=[],{pixelType:e,rasterAttributeTable:t}=i,n=t==null?null:t.features,l=Vt(t),u=r.defaultSymbol?.color?.toRgb(),p=r.uniqueValueInfos;if(p)if(n){if(l){const d=new Map;p.forEach(g=>{const f=g.value,h=qt(g);f!=null&&h?.a&&d.set(String(f),h.toRgb())});const y=r.field;y&&n.forEach(({attributes:g})=>{const f=String(g[y]),h=g[l],b=d.get(f);b?o.push([h,...b]):u&&o.push([h,...u])})}}else for(let d=0;d<p.length;d++){const y=p[d],g=qt(y),f=+y.value;if(g?.a){if(isNaN(f))return null;o.push([f,g.r,g.g,g.b])}}const c=e?We(o,e):o,m=new F;return m.functionName="Colormap",m.functionArguments={},m.functionArguments.Colormap=c,m.variableName="Raster",i.convertToRFT?new F({rasterFunctionDefinition:ie(m)}):m}function qt(r){return r.symbol?.type==="polygon-3d"?r.symbol.symbolLayers?.find(i=>i.type==="fill")?.material?.color:r.symbol?.color}function fr(r,i){const o=r.extractColormap();if(!o||o.length===0)return null;const{pixelType:e}=i,t=e?We(o,e):o,n=new F;return n.functionName="Colormap",n.functionArguments={},n.functionArguments.Colormap=t,i.convertToRFT?new F({rasterFunctionDefinition:ie(n)}):n}function wr(r){const i=[],o=[];return r.forEach(e=>{i.push(e[0]),o.push(qi([...e.slice(1),255]))}),{type:"RasterColormap",values:i,colors:o}}let C=class extends T{constructor(){super(...arguments),this.layer=null,this.requestRawData=!1,this.compression=void 0,this.lercVersion=2}get adjustAspectRatio(){return this.layer.adjustAspectRatio}writeAdjustAspectRatio(r,i,o){this.layer.version<10.3||(i[o]=r)}get bandIds(){return this.layer.bandIds}get compressionQuality(){return this.layer.compressionQuality}writeCompressionQuality(r,i,o){this.format&&this.format.toLowerCase().includes("jpg")&&r!=null&&(i[o]=r)}get compressionTolerance(){return this.layer.compressionTolerance}writeCompressionTolerance(r,i,o){this.format==="lerc"&&r!=null&&(i[o]=r)}get format(){return this.requestRawData||this.layer.renderer?.type==="vector-field"?"lerc":this.layer.format}get interpolation(){return this.layer.interpolation}get noData(){return this.layer.noData}get noDataInterpretation(){return this.layer.noDataInterpretation}get pixelType(){const{layer:r}=this;return r.pixelType!==r.serviceRasterInfo.pixelType?r.pixelType:void 0}writeLercVersion(r,i,o){this.format==="lerc"&&this.layer.version>=10.5&&(i[o]=r)}get version(){const r=this.layer;return r.commitProperty("bandIds"),r.commitProperty("format"),r.commitProperty("compressionQuality"),r.commitProperty("compressionTolerance"),r.commitProperty("interpolation"),r.commitProperty("noData"),r.commitProperty("noDataInterpretation"),r.commitProperty("mosaicRule"),r.commitProperty("rasterFunction"),r.commitProperty("adjustAspectRatio"),r.commitProperty("pixelFilter"),r.commitProperty("pixelType"),r.commitProperty("definitionExpression"),r.commitProperty("multidimensionalSubset"),(this._get("version")||0)+1}set version(r){this._set("version",r)}get mosaicRule(){const r=this.layer;let i=r.mosaicRule;const o=r.definitionExpression;return i?o&&o!==i.where&&(i=i.clone(),i.where=o):o&&(i=new k({where:o})),i}get rasterFunction(){const r=this.layer;let{rasterFunction:i}=r;const o=r.pixelFilter,e=!r.format||r.format.includes("jpg")||r.format.includes("png");this.requestRawData||(i=this._addResampleRasterFunction(i));const t=r.multidimensionalSubset?.areaOfInterest;return t&&(i=Rr(i,t)),this.requestRawData||!e||o||r.renderer?.type==="vector-field"||(i=this.combineRendererWithRenderingRule(i)),i}combineRendererWithRenderingRule(r){const i=this.layer,{rasterInfo:o,renderer:e}=i;return r=r||i.rasterFunction,!e||!_t(e)?r:dt(mr(e,{rasterAttributeTable:o.attributeTable,pixelType:o.pixelType,dataType:o.dataType,bandNames:o.bandInfos.map(({name:t})=>t),convertColorRampToColormap:i.version<10.6,convertToRFT:!!r?.rasterFunctionDefinition,bandCount:o.bandCount}),r)}_addResampleRasterFunction(r){if(this.layer.renderer?.type!=="vector-field"||r?.functionName==="Resample")return r;const i=this.layer.serviceDataType==="esriImageServiceDataTypeVector-UV"?7:10,o=this.layer.serviceRasterInfo.pixelSize;let e=new F({functionName:"Resample",functionArguments:{ResamplingType:i,InputCellSize:o}});return e=r?.rasterFunctionDefinition?new F({rasterFunctionDefinition:ie(e)}):e,dt(e,r)}};function Rr(r,i){const o=new F({functionName:"Clip",functionArguments:{ClippingGeometry:i.toJSON(),ClippingType:1}});return dt(o,r)}s([a()],C.prototype,"layer",void 0),s([a()],C.prototype,"requestRawData",void 0),s([a({json:{write:!0}})],C.prototype,"adjustAspectRatio",null),s([N("adjustAspectRatio")],C.prototype,"writeAdjustAspectRatio",null),s([a({json:{write:!0}})],C.prototype,"bandIds",null),s([a({json:{write:!0}})],C.prototype,"compression",void 0),s([a({json:{write:!0}})],C.prototype,"compressionQuality",null),s([N("compressionQuality")],C.prototype,"writeCompressionQuality",null),s([a({json:{write:!0}})],C.prototype,"compressionTolerance",null),s([N("compressionTolerance")],C.prototype,"writeCompressionTolerance",null),s([a({json:{write:!0}})],C.prototype,"format",null),s([a({type:String,json:{read:{reader:Ee.read},write:{writer:Ee.write}}})],C.prototype,"interpolation",null),s([a({json:{write:!0}})],C.prototype,"noData",null),s([a({type:String,json:{read:{reader:Je.read},write:{writer:Je.write}}})],C.prototype,"noDataInterpretation",null),s([a({type:ve.apiValues,json:{read:ve.read,write:ve.write}})],C.prototype,"pixelType",null),s([a({json:{write:!0}})],C.prototype,"lercVersion",void 0),s([N("lercVersion")],C.prototype,"writeLercVersion",null),s([a({type:Number})],C.prototype,"version",null),s([a({json:{write:!0}})],C.prototype,"mosaicRule",null),s([a({json:{write:!0,name:"renderingRule"}})],C.prototype,"rasterFunction",null),C=s([R("esri.layers.support.ExportImageServiceParameters")],C);let de=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.fromGeometry=null,this.toGeometry=null,this.objectIds=null,this.where=null,this.maxCount=null}};s([a({type:q,json:{read:!0}})],de.prototype,"fromGeometry",void 0),s([a({type:q,json:{read:!0,write:!0}})],de.prototype,"toGeometry",void 0),s([a({json:{write:!0}})],de.prototype,"objectIds",void 0),s([a({type:String,json:{write:!0}})],de.prototype,"where",void 0),s([a({type:Number,json:{write:!0}})],de.prototype,"maxCount",void 0),de=s([R("esri.rest.support.FindImagesParameters")],de);const Et=r=>{let i=class extends r{constructor(){super(...arguments),this.make=null,this.model=null,this.focalLength=null,this.pixelSize=null,this.rows=null,this.cols=null}};return s([a({json:{write:!0}})],i.prototype,"make",void 0),s([a({json:{write:!0}})],i.prototype,"model",void 0),s([a({json:{write:!0}})],i.prototype,"focalLength",void 0),s([a({json:{write:!0}})],i.prototype,"pixelSize",void 0),s([a({json:{write:!0}})],i.prototype,"rows",void 0),s([a({json:{write:!0}})],i.prototype,"cols",void 0),i=s([R("esri.rest.support.CameraInfoMixin")],i),i};let $=class extends Et(T){constructor(){super(...arguments),this.id=null,this.referenceUri=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.perspectiveCenter=null,this.orientation=null}writeAcquisitionDate(r,i){i.acquisitionDate=r?.getTime()}};s([a({json:{write:!0}})],$.prototype,"id",void 0),s([a({json:{name:"uri",write:!0}})],$.prototype,"referenceUri",void 0),s([a({type:Date,json:{write:!0}})],$.prototype,"acquisitionDate",void 0),s([N("acquisitionDate")],$.prototype,"writeAcquisitionDate",null),s([a({json:{write:!0}})],$.prototype,"cameraID",void 0),s([a({type:q,json:{write:!0}})],$.prototype,"center",void 0),s([a({type:q,json:{write:!0}})],$.prototype,"perspectiveCenter",void 0),s([a({json:{write:!0}})],$.prototype,"orientation",void 0),$=s([R("esri.rest.support.ImageInspectionInfo")],$);const vr=$;let Ze=class extends T{constructor(){super(...arguments),this.images=null}};s([a({type:[vr],json:{write:!0}})],Ze.prototype,"images",void 0),Ze=s([R("esri.rest.support.FindImagesResult")],Ze);var yt;let Se=yt=class extends T{constructor(r){super(r),this.angleNames=null,this.point=null,this.spatialReference=null,this.rasterId=null}clone(){return new yt(V({angleNames:this.angleNames,point:this.point,spatialReference:this.spatialReference,rasterId:this.rasterId}))}};s([a({type:[String],json:{name:"angleName",write:!0}})],Se.prototype,"angleNames",void 0),s([a({type:q,json:{write:!0}})],Se.prototype,"point",void 0),s([a({type:ee,json:{write:!0}})],Se.prototype,"spatialReference",void 0),s([a({type:Ve,json:{write:!0}})],Se.prototype,"rasterId",void 0),Se=yt=s([R("esri.rest.support.ImageAngleParameters")],Se);let De=class extends T{constructor(r){super(r),this.north=null,this.up=null,this.spatialReference=null}};s([a({type:Number,json:{write:!0}})],De.prototype,"north",void 0),s([a({type:Number,json:{write:!0}})],De.prototype,"up",void 0),s([a({type:ee,json:{write:!0}})],De.prototype,"spatialReference",void 0),De=s([R("esri.rest.support.ImageAngleResult")],De);const Q=new xt({esriMensurationPoint:"point",esriMensurationCentroid:"centroid",esriMensurationDistanceAndAngle:"distance-and-angle",esriMensurationAreaAndPerimeter:"area-and-perimeter",esriMensurationHeightFromBaseAndTop:"base-and-top",esriMensurationHeightFromBaseAndTopShadow:"base-and-top-shadow",esriMensurationHeightFromTopAndTopShadow:"top-and-top-shadow",esriMensurationPoint3D:"point-3D",esriMensurationCentroid3D:"centroid-3D",esriMensurationDistanceAndAngle3D:"distance-and-angle-3D",esriMensurationAreaAndPerimeter3D:"area-and-perimeter-3D"});let ye=class extends T{constructor(){super(...arguments),this.value=null,this.displayValue=null,this.uncertainty=null}};s([a({type:Number,json:{read:!0,write:!0}})],ye.prototype,"value",void 0),s([a({type:String,json:{read:!0,write:!0}})],ye.prototype,"displayValue",void 0),s([a({type:Number,json:{read:!0,write:!0}})],ye.prototype,"uncertainty",void 0),ye=s([R("esri.rest.support.imageMeasureUtils.BaseImageMeasureResultValue")],ye);let Te=class extends ye{constructor(){super(...arguments),this.unit=null}};s([a({type:String,json:{read:ce.read,write:ce.write}})],Te.prototype,"unit",void 0),Te=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultLengthValue")],Te);let Ke=class extends ye{constructor(){super(...arguments),this.unit=null}};s([a({type:String,json:{read:He.read,write:He.write}})],Ke.prototype,"unit",void 0),Ke=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultAreaValue")],Ke);let Le=class extends ye{constructor(){super(...arguments),this.unit=null}};s([a({type:String,json:{read:ke.read,write:ke.write}})],Le.prototype,"unit",void 0),Le=s([R("esri.rest.support.imageMeasureUtils.ImageMeasureResultAngleValue")],Le);let W=class extends T{constructor(r){super(r),this.type=null,this.measureOperation=null,this.mosaicRule=null,this.pixelSize=null,this.raster=void 0}};s([a()],W.prototype,"type",void 0),s([a({type:Q.apiValues,json:{read:Q.read,write:Q.write}})],W.prototype,"measureOperation",void 0),s([a({type:k,json:{write:!0}})],W.prototype,"mosaicRule",void 0),s([a({type:q,json:{write:!0}})],W.prototype,"pixelSize",void 0),s([a({json:{write:!0}})],W.prototype,"raster",void 0),W=s([R("esri.rest.support.BaseImageMeasureParameters")],W);var ht;let ae=ht=class extends W{constructor(){super(...arguments),this.type="area-perimeter",this.geometry=null,this.is3D=!1,this.linearUnit="meters",this.areaUnit="square-meters"}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=r.toJSON())}get measureOperation(){return this.is3D?"area-and-perimeter-3D":"area-and-perimeter"}clone(){return new ht(V({geometry:this.geometry,is3D:this.is3D,linearUnit:this.linearUnit,areaUnit:this.areaUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([a({types:B,json:{name:"fromGeometry",read:!0,write:!0}})],ae.prototype,"geometry",void 0),s([N("geometry")],ae.prototype,"writeGeometry",null),s([a({type:Q.apiValues,json:{write:Q.write}})],ae.prototype,"measureOperation",null),s([a({json:{read:!0}})],ae.prototype,"is3D",void 0),s([a({type:String,json:{read:ce.read,write:ce.write}})],ae.prototype,"linearUnit",void 0),s([a({type:String,json:{read:He.read,write:He.write}})],ae.prototype,"areaUnit",void 0),ae=ht=s([R("esri.rest.support.ImageAreaParameters")],ae);let he=class extends T{constructor(r){super(r),this.name=null,this.sensorName=null}};s([a({type:String,json:{read:!0,write:!0}})],he.prototype,"name",void 0),s([a({type:String,json:{read:!0,write:!0}})],he.prototype,"sensorName",void 0),he=s([R("esri.rest.support.BaseImageMeasureResult")],he);let ze=class extends he{constructor(){super(...arguments),this.area=null,this.perimeter=null}};s([a({type:Ke,json:{read:!0,write:!0}})],ze.prototype,"area",void 0),s([a({type:Te,json:{read:!0,write:!0}})],ze.prototype,"perimeter",void 0),ze=s([R("esri.rest.support.ImageAreaResult")],ze);let Xe=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.outSpatialReference=null}};s([a({type:ee,json:{name:"outSR",write:!0}})],Xe.prototype,"outSpatialReference",void 0),Xe=s([R("esri.rest.support.ImageBoundaryParameters")],Xe);let Ne=class extends T{constructor(){super(...arguments),this.area=null,this.geometry=null}readGeometry(r,i){return r==null?null:r.rings?ot.fromJSON(r):qe.fromJSON(r)}};s([a({type:Number,json:{write:!0}})],Ne.prototype,"area",void 0),s([a({types:B,json:{name:"shape",write:!0}})],Ne.prototype,"geometry",void 0),s([J("geometry")],Ne.prototype,"readGeometry",null),Ne=s([R("esri.rest.support.ImageBoundaryResult")],Ne);var gt;let re=gt=class extends W{constructor(){super(...arguments),this.type="distance-angle",this.fromGeometry=null,this.toGeometry=null,this.is3D=!1,this.linearUnit="meters",this.angularUnit="degrees"}writeFromGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=r.toJSON())}get measureOperation(){return this.is3D?"distance-and-angle-3D":"distance-and-angle"}clone(){return new gt(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,is3D:this.is3D,linearUnit:this.linearUnit,angularUnit:this.angularUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([a({type:q,json:{read:!0,write:!0}})],re.prototype,"fromGeometry",void 0),s([N("fromGeometry")],re.prototype,"writeFromGeometry",null),s([a({type:q,json:{read:!0,write:!0}})],re.prototype,"toGeometry",void 0),s([a({type:Q.apiValues,json:{write:Q.write}})],re.prototype,"measureOperation",null),s([a({json:{read:!0}})],re.prototype,"is3D",void 0),s([a({type:String,json:{read:ce.read,write:ce.write}})],re.prototype,"linearUnit",void 0),s([a({type:String,json:{read:ke.read,write:ke.write}})],re.prototype,"angularUnit",void 0),re=gt=s([R("esri.rest.support.ImageDistanceParameters")],re);let Pe=class extends he{constructor(){super(...arguments),this.distance=null,this.azimuthAngle=null,this.elevationAngle=null}};s([a({type:Te,json:{read:!0,write:!0}})],Pe.prototype,"distance",void 0),s([a({type:Le,json:{read:!0,write:!0}})],Pe.prototype,"azimuthAngle",void 0),s([a({type:Le,json:{read:!0,write:!0}})],Pe.prototype,"elevationAngle",void 0),Pe=s([R("esri.rest.support.ImageDistanceResult")],Pe);let oe=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.geometry=null,this.objectIds=null,this.spatialRelationship="intersects",this.timeExtent=null,this.where=null}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=JSON.stringify(r.toJSON()))}};s([a({types:B,json:{read:te,write:!0}})],oe.prototype,"geometry",void 0),s([N("geometry")],oe.prototype,"writeGeometry",null),s([a({json:{write:!0}})],oe.prototype,"objectIds",void 0),s([zt(Qi,{ignoreUnknown:!1,name:"spatialRel"})],oe.prototype,"spatialRelationship",void 0),s([a({type:jt,json:{name:"time",write:!0}})],oe.prototype,"timeExtent",void 0),s([a({type:String,json:{write:!0}})],oe.prototype,"where",void 0),oe=s([R("esri.rest.support.ImageGPSInfoParameters")],oe);let Ye=class extends Et(T){constructor(){super(...arguments),this.id=null}};s([a({json:{write:!0}})],Ye.prototype,"id",void 0),Ye=s([R("esri.rest.support.CameraInfo")],Ye);const br=Ye;let Z=class extends T{constructor(){super(...arguments),this.id=null,this.name=null,this.acquisitionDate=null,this.cameraID=null,this.center=null,this.gps=null,this.orientation=null}writeAcquisitionDate(r,i){i.acquisitionDate=r?.getTime()}};s([a({json:{write:!0}})],Z.prototype,"id",void 0),s([a({json:{write:!0}})],Z.prototype,"name",void 0),s([a({type:Date,json:{write:!0}})],Z.prototype,"acquisitionDate",void 0),s([N("acquisitionDate")],Z.prototype,"writeAcquisitionDate",null),s([a({json:{write:!0}})],Z.prototype,"cameraID",void 0),s([a({type:q,json:{write:!0}})],Z.prototype,"center",void 0),s([a({json:{write:!0}})],Z.prototype,"gps",void 0),s([a({json:{write:!0}})],Z.prototype,"orientation",void 0),Z=s([R("esri.rest.support.ImageGPSInfo")],Z);const Sr=Z;let Ue=class extends T{constructor(){super(...arguments),this.images=null,this.cameras=null}};s([a({type:[Sr],json:{write:!0}})],Ue.prototype,"images",void 0),s([a({type:[br],json:{write:!0}})],Ue.prototype,"cameras",void 0),Ue=s([R("esri.rest.support.ImageGPSInfoResult")],Ue);var ft;let le=ft=class extends W{constructor(){super(...arguments),this.type="height",this.fromGeometry=null,this.toGeometry=null,this.operationType="base-and-top",this.linearUnit="meters"}writeFromGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=r.toJSON())}get measureOperation(){return this.operationType}clone(){return new ft(V({fromGeometry:this.fromGeometry,toGeometry:this.toGeometry,operationType:this.operationType,linearUnit:this.linearUnit,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([a({type:q,json:{read:!0}})],le.prototype,"fromGeometry",void 0),s([N("fromGeometry")],le.prototype,"writeFromGeometry",null),s([a({type:q,json:{read:!0,write:!0}})],le.prototype,"toGeometry",void 0),s([a({type:Q.apiValues,json:{write:Q.write}})],le.prototype,"measureOperation",null),s([a({json:{read:!0}})],le.prototype,"operationType",void 0),s([a({type:String,json:{read:ce.read,write:ce.write}})],le.prototype,"linearUnit",void 0),le=ft=s([R("esri.rest.support.ImageHeightParameters")],le);let et=class extends he{constructor(){super(...arguments),this.height=null}};s([a({type:Te,json:{read:!0,write:!0}})],et.prototype,"height",void 0),et=s([R("esri.rest.support.ImageHeightResult")],et);var wt;let O=wt=class extends T{constructor(){super(...arguments),this.geometry=null,this.rasterFunctions=null,this.pixelSize=null,this.returnGeometry=!0,this.returnCatalogItems=!0,this.returnPixelValues=!0,this.maxItemCount=null,this.timeExtent=null,this.raster=void 0,this.viewId=void 0,this.processAsMultidimensional=!1}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=JSON.stringify(r.toJSON()))}set mosaicRule(r){let i=r;i?.mosaicMethod&&(i=k.fromJSON({...i.toJSON(),mosaicMethod:i.mosaicMethod,mosaicOperation:i.mosaicOperation})),this._set("mosaicRule",i)}writeMosaicRule(r,i,o){r!=null&&(i[o]=JSON.stringify(r.toJSON()))}set rasterFunction(r){let i=r;i?.rasterFunction&&(i=F.fromJSON({...i.toJSON(),rasterFunction:i.rasterFunction,rasterFunctionArguments:i.rasterFunctionArguments})),this._set("rasterFunction",i)}writeRasterFunction(r,i,o){r!=null&&(i[o]=JSON.stringify(r.toJSON())),r.rasterFunctionDefinition&&(i[o]=JSON.stringify(r.rasterFunctionDefinition))}writeRasterFunctions(r,i,o){r!=null&&(i[o]=JSON.stringify(r.map(e=>e.rasterFunctionDefinition||e.toJSON())))}writePixelSize(r,i,o){r!=null&&(i[o]=JSON.stringify(r))}writeTimeExtent(r,i,o){if(r!=null){const e=r.start!=null?r.start.getTime():null,t=r.end!=null?r.end.getTime():null;i[o]=e!=null?t!=null?`${e},${t}`:`${e}`:null}}clone(){return new wt(V({geometry:this.geometry,mosaicRule:this.mosaicRule,rasterFunction:this.rasterFunction,rasterFunctions:this.rasterFunctions,pixelSize:this.pixelSize,returnGeometry:this.returnGeometry,returnCatalogItems:this.returnCatalogItems,returnPixelValues:this.returnPixelValues,maxItemCount:this.maxItemCount,processAsMultidimensional:this.processAsMultidimensional,raster:this.raster,viewId:this.viewId,timeExtent:this.timeExtent}))}};s([a({types:B,json:{write:!0}})],O.prototype,"geometry",void 0),s([N("geometry")],O.prototype,"writeGeometry",null),s([a({type:k,json:{write:!0}})],O.prototype,"mosaicRule",null),s([N("mosaicRule")],O.prototype,"writeMosaicRule",null),s([a({type:F,json:{write:!0,name:"renderingRule"}})],O.prototype,"rasterFunction",null),s([N("rasterFunction")],O.prototype,"writeRasterFunction",null),s([a({type:[F],json:{write:!0,name:"renderingRules"}})],O.prototype,"rasterFunctions",void 0),s([N("rasterFunctions")],O.prototype,"writeRasterFunctions",null),s([a({type:q,json:{write:!0}})],O.prototype,"pixelSize",void 0),s([N("pixelSize")],O.prototype,"writePixelSize",null),s([a({type:Boolean,json:{write:!0}})],O.prototype,"returnGeometry",void 0),s([a({type:Boolean,json:{write:!0}})],O.prototype,"returnCatalogItems",void 0),s([a({type:Boolean,json:{write:!0}})],O.prototype,"returnPixelValues",void 0),s([a({type:Number,json:{write:!0}})],O.prototype,"maxItemCount",void 0),s([a({type:jt,json:{write:{target:"time"}}})],O.prototype,"timeExtent",void 0),s([N("timeExtent")],O.prototype,"writeTimeExtent",null),s([a({json:{write:!0}})],O.prototype,"raster",void 0),s([a({json:{write:!0}})],O.prototype,"viewId",void 0),s([a({type:Boolean,json:{write:!0}})],O.prototype,"processAsMultidimensional",void 0),O=wt=s([R("esri.rest.support.ImageIdentifyParameters")],O);let K=class extends T{constructor(){super(...arguments),this.catalogItemVisibilities=null,this.catalogItems=null,this.location=null,this.name=null,this.objectId=null,this.processedValues=null,this.properties=null,this.value=null}};s([a({json:{write:!0}})],K.prototype,"catalogItemVisibilities",void 0),s([a({type:Ct,json:{write:!0}})],K.prototype,"catalogItems",void 0),s([a({type:q,json:{write:!0}})],K.prototype,"location",void 0),s([a({json:{write:!0}})],K.prototype,"name",void 0),s([a({json:{write:!0}})],K.prototype,"objectId",void 0),s([a({json:{write:!0}})],K.prototype,"processedValues",void 0),s([a({json:{write:!0}})],K.prototype,"properties",void 0),s([a({json:{write:!0}})],K.prototype,"value",void 0),K=s([R("esri.rest.support.ImageIdentifyResult")],K);var Rt;let je=Rt=class extends T{constructor(){super(...arguments),this.geometries=null,this.rasterId=null}writeGeometry(r,i,o){i.geometries={geometryType:"esriGeometryPoint",geometries:r.map(e=>e.toJSON())}}clone(){return new Rt({geometries:this.geometries?.map(r=>r.clone())??[],rasterId:this.rasterId})}};s([a({type:[q],json:{write:!0}})],je.prototype,"geometries",void 0),s([N("geometries")],je.prototype,"writeGeometry",null),s([a({type:Ve,json:{write:!0}})],je.prototype,"rasterId",void 0),je=Rt=s([R("esri.rest.support.ImagePixelLocationParameters")],je);let tt=class extends T{constructor(){super(...arguments),this.geometries=null}};s([a({json:{write:!0}})],tt.prototype,"geometries",void 0),tt=s([R("esri.rest.support.ImagePixelLocationResult")],tt);var vt;let Ie=vt=class extends W{constructor(){super(...arguments),this.type="point",this.geometry=null,this.is3D=!1}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=r.toJSON())}get measureOperation(){const{is3D:r,geometry:i}=this;return i.type==="point"?r?"point-3D":"point":r?"centroid-3D":"centroid"}clone(){return new vt(V({geometry:this.geometry,is3D:this.is3D,mosaicRule:this.mosaicRule,pixelSize:this.pixelSize,raster:this.raster}))}};s([a({types:B,json:{name:"fromGeometry",read:te}})],Ie.prototype,"geometry",void 0),s([N("geometry")],Ie.prototype,"writeGeometry",null),s([a({type:Q.apiValues,json:{read:Q.read,write:Q.write}})],Ie.prototype,"measureOperation",null),s([a({json:{read:!0}})],Ie.prototype,"is3D",void 0),Ie=vt=s([R("esri.rest.support.ImagePointParameters")],Ie);let it=class extends he{constructor(){super(...arguments),this.point=null}};s([a({type:q,json:{name:"point.value",read:!0,write:!0}})],it.prototype,"point",void 0),it=s([R("esri.rest.support.ImagePointResult")],it);let xe=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.geometries=[],this.rasterIds=null,this.outSpatialReference=null}writeGeometries(r,i,o){i.geometries=r?.length?{geometryType:H(r[0]),geometries:r.map(e=>({...e.toJSON(),spatialReference:void 0}))}:null}};s([a({types:[B]})],xe.prototype,"geometries",void 0),s([N("geometries")],xe.prototype,"writeGeometries",null),s([a({type:[Ve],json:{write:!0}})],xe.prototype,"rasterIds",void 0),s([a({type:ee,json:{name:"outSR",write:!0}})],xe.prototype,"outSpatialReference",void 0),xe=s([R("esri.rest.support.ImageToMapMultirayParameters")],xe);let ue=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.outSpatialReference=null,this.depthOffset=0,this.adjust=!1}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]={...r.toJSON(),spatialReference:void 0})}};s([a({types:B,json:{read:te,write:!0}})],ue.prototype,"geometry",void 0),s([N("geometry")],ue.prototype,"writeGeometry",null),s([a({json:{write:!0}})],ue.prototype,"rasterId",void 0),s([a({type:ee,json:{name:"outSR",write:!0}})],ue.prototype,"outSpatialReference",void 0),s([a({json:{name:"options.DOff",write:!0}})],ue.prototype,"depthOffset",void 0),s([a({json:{name:"options.Adjust",write:!0}})],ue.prototype,"adjust",void 0),ue=s([R("esri.rest.support.ImageToMapParameters")],ue);let Be=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.referenceUri=null,this.rasterId=null}};s([a({type:String,json:{name:"uri",write:!0}})],Be.prototype,"referenceUri",void 0),s([a({type:Number,json:{write:!0}})],Be.prototype,"rasterId",void 0),Be=s([R("esri.rest.support.ImageUrlParameters")],Be);let rt=class extends T{constructor(){super(...arguments),this.url=null}};s([a({json:{name:"imageURL",write:!0}})],rt.prototype,"url",void 0),rt=s([R("esri.rest.support.ImageUrlResult")],rt);const bt=new xt({0:"constant",1:"plane",2:"minimum",3:"maximum",4:"average"},{useNumericKeys:!0});let pe=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.geometries=[],this.mosaicRule=null,this.pixelSize=null,this.constantZ=null,this.baseType="plane"}writeGeometries(r,i,o){r?.length&&(i.geometryType=H(r[0]),i.geometries=r.map(e=>e.toJSON()))}};s([a({types:[B]})],pe.prototype,"geometries",void 0),s([N("geometries")],pe.prototype,"writeGeometries",null),s([a({type:k,json:{write:!0}})],pe.prototype,"mosaicRule",void 0),s([a({type:q,json:{write:!0}})],pe.prototype,"pixelSize",void 0),s([a({json:{write:!0}})],pe.prototype,"constantZ",void 0),s([a({type:bt.apiValues,json:{read:bt.read,write:bt.write}})],pe.prototype,"baseType",void 0),pe=s([R("esri.rest.support.ImageVolumeParameters")],pe);let X=class extends T{constructor(){super(...arguments),this.area=null,this.cut=null,this.fill=null,this.maxZ=null,this.minZ=null,this.meanZ=null,this.cutCellCount=null,this.fillCellCount=null}};s([a({json:{write:!0}})],X.prototype,"area",void 0),s([a({json:{write:!0}})],X.prototype,"cut",void 0),s([a({json:{write:!0}})],X.prototype,"fill",void 0),s([a({json:{name:"maxz",write:!0}})],X.prototype,"maxZ",void 0),s([a({json:{name:"minz",write:!0}})],X.prototype,"minZ",void 0),s([a({json:{name:"meanz",write:!0}})],X.prototype,"meanZ",void 0),s([a({json:{write:!0}})],X.prototype,"cutCellCount",void 0),s([a({json:{write:!0}})],X.prototype,"fillCellCount",void 0),X=s([R("esri.rest.support.ImageVolume")],X);const Ir=X;let st=class extends T{constructor(){super(...arguments),this.volumes=[]}};s([a({type:[Ir],json:{write:!0}})],st.prototype,"volumes",void 0),st=s([R("esri.rest.support.ImageVolumeResult")],st);let Fe=class extends ne.ClonableMixin(T){constructor(){super(...arguments),this.geometry=null,this.rasterId=null,this.visibleOnly=!1}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]=JSON.stringify(r))}};s([a({types:B,json:{read:te,write:!0}})],Fe.prototype,"geometry",void 0),s([N("geometry")],Fe.prototype,"writeGeometry",null),s([a({json:{write:!0}})],Fe.prototype,"rasterId",void 0),s([a({json:{name:"options.VisibleOnly",write:!0}})],Fe.prototype,"visibleOnly",void 0),Fe=s([R("esri.rest.support.MapToImageParameters")],Fe);let ge=class extends T{constructor(){super(...arguments),this.geometry=null,this.length=null,this.area=null,this.center=null}readCenter(r,i){return r.spatialReference||(r={...r,spatialReference:i.Shape.spatialReference}),q.fromJSON(r)}};s([a({types:B,json:{name:"Shape",read:te,write:!0}})],ge.prototype,"geometry",void 0),s([a({json:{name:"Length",write:!0}})],ge.prototype,"length",void 0),s([a({json:{name:"Area",write:!0}})],ge.prototype,"area",void 0),s([a({type:q,json:{name:"Center",write:!0}})],ge.prototype,"center",void 0),s([J("center")],ge.prototype,"readCenter",null),ge=s([R("esri.rest.support.MeasureAreaFromImageResult")],ge);var St;let Ce=St=class extends T{constructor(){super(...arguments),this.geometry=null,this.rasterId=void 0}writeGeometry(r,i,o){r!=null&&(i.geometryType=H(r),i[o]={...r.toJSON(),spatialReference:void 0})}clone(){const r=V({geometry:this.geometry,rasterId:this.rasterId});return new St(r)}};s([a({types:B,json:{name:"fromGeometry",read:te,write:!0}})],Ce.prototype,"geometry",void 0),s([N("geometry")],Ce.prototype,"writeGeometry",null),s([a({json:{write:!0}})],Ce.prototype,"rasterId",void 0),Ce=St=s([R("esri.rest.support.MeasureFromImageParameters")],Ce);let Qe=class extends T{constructor(){super(...arguments),this.geometry=null,this.length=null}};s([a({types:B,json:{name:"Shape",read:te,write:!0}})],Qe.prototype,"geometry",void 0),s([a({json:{name:"Length",write:!0}})],Qe.prototype,"length",void 0),Qe=s([R("esri.rest.support.MeasureLengthFromImageResult")],Qe);function It(r){const i=r?.time;if(i&&(i.start!=null||i.end!=null)){const o=[];i.start!=null&&o.push(i.start),i.end==null||o.includes(i.end)||o.push(i.end),r.time=o.join(",")}}async function Jt(r,i,o){i=A(Ii,i);const e=E(r),t=i.geometry?[i.geometry]:[],n=await be(t),l=i.toJSON();It(l);const u=n?.[0];u!=null&&(l.geometry=se(u));const p=G({...e.query,f:"json",...l});return L(p,o)}async function xr(r,i,o){const e=(i=A(pe,i)).toJSON();e.geometries=JSON.stringify(e.geometries);const t=E(r),n=G({...t.query,f:"json",...e}),l=L(n,o),{data:u}=await x(`${t.path}/calculateVolume`,l);return st.fromJSON({volumes:u.results})}async function Fr(r,i,o){const e=(i=A(Se,i)).toJSON();e.angleName!=null&&(e.angleName=e.angleName.join(",")),i?.point?.spatialReference?.imageCoordinateSystem&&(e.point.spatialReference=at(i.point.spatialReference)),i?.spatialReference?.imageCoordinateSystem&&(e.spatialReference=Oe(i.spatialReference));const t=E(r),n=G({...t.query,f:"json",...e}),l=L(n,o),{data:u}=await x(`${t.path}/computeAngles`,l);return u.spatialReference=u.spatialReference?u.spatialReference.geodataXform!=null?new ee({wkid:0,imageCoordinateSystem:u.spatialReference}):ee.fromJSON(u.spatialReference):null,u.north==="NaN"&&(u.north=null),u.up==="NaN"&&(u.up=null),new De(u)}async function Dr(r,i,o){const e=(i=A(je,i)).toJSON(),{geometries:t}=i;if(t)for(let c=0;c<t.length;c++)t[c].spatialReference?.imageCoordinateSystem&&(e.geometries.geometries[c].spatialReference=at(t[c].spatialReference));const n=E(r),l=G({...n.query,f:"json",...e}),u=L(l,o),{data:p}=await x(`${n.path}/computePixelLocation`,u);return tt.fromJSON(p)}async function Tr(r,i,o){const e=await Jt(r,i,o),t=E(r),{data:n}=await x(`${t.path}/computeStatisticsHistograms`,e),{statistics:l}=n;return l?.length&&l.forEach(u=>{u.avg=u.mean,u.stddev=u.standardDeviation}),{statistics:l,histograms:n.histograms}}async function Nr(r,i,o){const e=await Jt(r,i,o),t=E(r),{data:n}=await x(`${t.path}/computeHistograms`,e);return{histograms:n.histograms}}async function Pr(r,i,o){const e=(i=A(bi,i)).toJSON();It(e),e.outFields?.length&&(e.outFields=e.outFields.join(","));const t=await be(i.geometry),n=t?.[0];n!=null&&(e.geometry=se(n));const l=E(r),u=G({...l.query,f:"json",...e}),p=L(u,o),{data:c}=await x(`${l.path}/getSamples`,p),m=c.samples.map(d=>{const y=d.value==="NaN"||d.value===""?null:d.value.split(" ").map(g=>Number(g));return{...d,pixelValue:y}});return Si.fromJSON({samples:m})}async function Gt(r,i,o){i=A(O,i);const e=E(r),t=i.geometry?[i.geometry]:[];return be(t).then(n=>{const l=i.toJSON(),u=n?.[0];u!=null&&(l.geometry=JSON.stringify(se(u)));const p=G({...e.query,f:"json",...l}),c=L(p,o);return x(e.path+"/identify",c)}).then(n=>K.fromJSON(n.data))}async function jr(r,i,o){i=A(le,i);const e=await nt(r,i,[i.fromGeometry,i.toGeometry],o);return et.fromJSON(e)}async function Cr(r,i,o){i=A(ae,i);const e=await nt(r,i,[i.geometry],o);return ze.fromJSON(e)}async function Or(r,i,o){i=A(Ie,i);const e=await nt(r,i,[i.geometry],o);return it.fromJSON(e)}async function _r(r,i,o){i=A(re,i);const e=await nt(r,i,[i.fromGeometry,i.toGeometry],o);return Pe.fromJSON(e)}async function nt(r,i,o,e){const t=E(r),n=await be(o),l=i.toJSON();n[0]!=null&&(l.fromGeometry=JSON.stringify(se(n[0]))),n[1]!=null&&(l.toGeometry=JSON.stringify(se(n[1])));const u=G({...t.query,f:"json",...l}),p=L(u,e),{data:c}=await x(t.path+"/measure",p);return c}async function Mr(r,i,o){const e=await Lt(r,i,o);return Qe.fromJSON(e)}async function Ar(r,i,o){const e=await Lt(r,i,o);return ge.fromJSON(e)}async function Lt(r,i,o){i=A(Ce,i);const e=E(r),t=i.toJSON(),n=G({...e.query,f:"json",...t}),l=L(n,o),{data:u}=await x(e.path+"/measureFromImage",l);return u}function se(r){const i=r.toJSON();return r.spatialReference?.imageCoordinateSystem&&(i.spatialReference=at(r.spatialReference)),i}function at(r){const{imageCoordinateSystem:i}=r;if(i){const{id:o,referenceServiceName:e}=i;return o!=null?e?{icsid:o,icsns:e}:{icsid:o}:{ics:i}}return r.toJSON()}function Oe(r,i){if(!r.imageCoordinateSystem)return lt(r);const o=at(r),{icsid:e,icsns:t}=o;return e==null||t!=null&&!i?.toLowerCase().includes("/"+t.toLowerCase()+"/")?JSON.stringify(o):`0:${e}`}async function Vr(r,i,o){i=A(Xe,i);const e=E(r),t=i.toJSON();i.outSpatialReference&&(t.outSR=Oe(i.outSpatialReference));const n=G({...e.query,f:"json",...t}),l=L(n,o),{data:u}=await x(e.path+"/queryBoundary",l);return Ne.fromJSON(u)}async function qr(r,i,o){const e=(i=A(oe,i)).toJSON();It(e),e.objectIds?.length&&(e.objectIds=e.objectIds.join(",")),e.geometry||e.objectIds||e.time||e.where||(e.where="1=1");const t=await be(i.geometry),n=t?.[0];n!=null&&(e.geometry=se(n));const l=n?.spatialReference??i.geometry?.spatialReference;l&&(e.inSR=Oe(l));const u=E(r),p=G({...u.query,f:"json",...e}),c=L(p,o),{data:m}=await x(`${u.path}/queryGPSInfo`,c);return Ue.fromJSON(m)}async function Er(r,i,o){const e=(i=A(ue,i)).toJSON();i.geometry.spatialReference.imageCoordinateSystem&&(e.geometry=se(i.geometry)),i.depthOffset&&i.adjust||delete e.options;const t=E(r),n=G({...t.query,f:"json",...e}),l=L(n,o),{data:u}=await x(`${t.path}/imageToMap`,l);return te(u)}async function Jr(r,i,o){const e=(i=A(xe,i)).toJSON();i.rasterIds?.length&&(e.rasterIds=i.rasterIds.join(","));const t=E(r),n=G({...t.query,f:"json",...e}),l=L(n,o),{data:u}=await x(`${t.path}/imageToMapMultiray`,l);return te(u)}async function Gr(r,i,o){const e=(i=A(Fe,i)).toJSON(),t=await be(i.geometry),n=t?.[0];n!=null&&(e.geometry=se(n)),i.visibleOnly||delete e.options;const l=n?.spatialReference??i.geometry?.spatialReference;l&&(e.inSR=Oe(l));const u=E(r),p=G({...u.query,f:"json",...e}),c=L(p,o),{data:m}=await x(`${u.path}/mapToImage`,c);return te(m)}async function Lr(r,i,o){const e=(i=A(Be,i)).toJSON(),t=E(r),n=G({...t.query,f:"json",...e}),l=L(n,o),{data:u}=await x(`${t.path}/getImageUrl`,l);return rt.fromJSON(u)}async function zr(r,i,o){const e=(i=A(de,i)).toJSON(),t=await be([i.fromGeometry,i.toGeometry]);t[0]!=null&&(e.fromGeometry=se(t[0]),t[0].spatialReference&&(e.inSR=Oe(t[0].spatialReference))),t[1]!=null&&(e.toGeometry=se(t[1])),i.objectIds?.length&&(e.objectIds=e.objectIds.join(","));const n=E(r),l=G({...n.query,f:"json",...e}),u=L(l,o),{data:p}=await x(`${n.path}/find`,u);return Ze.fromJSON(p)}async function Ur(r,i,o){const e=E(r),t=G({...e?.query,f:"json"}),n=L(t,o),l=`${e?.path}/${i}/info`,u=x(`${l}`,n),p=x(`${l}/keyProperties`,n),c=await Promise.allSettled([u,p]),m=c[0].status==="fulfilled"?c[0].value.data:null,d=c[1].status==="fulfilled"?c[1].value.data:null;let y=null;m.statistics?.length&&(y=m.statistics.map(_=>({min:_[0],max:_[1],avg:_[2],stddev:_[3]})));const g=qe.fromJSON(m.extent),f=Math.ceil(g.width/m.pixelSizeX-.1),h=Math.ceil(g.height/m.pixelSizeY-.1),b=g.spatialReference,j=new q({x:m.pixelSizeX,y:m.pixelSizeY,spatialReference:b}),w=m.histograms?.length?m.histograms:null,v=new Ei({origin:m.origin,blockWidth:m.blockWidth,blockHeight:m.blockHeight,firstPyramidLevel:m.firstPyramidLevel,maximumPyramidLevel:m.maxPyramidLevel});return new Tt({width:f,height:h,bandCount:m.bandCount,extent:g,spatialReference:b,pixelSize:j,pixelType:m.pixelType.toLowerCase(),statistics:y,histograms:w,keyProperties:d,storageInfo:v})}const Br=new Set(["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff"]),Qr=Ut($t,{min:0,max:255});function Hr(r){const i=JSON.stringify(r),o=i.includes('"rasterFunctionDefinition":{'),e=o?i.match(/"type":"(.*?FunctionArguments")/gi):i.match(/"rasterFunction":"(.*?")/gi),t=e?.map(n=>o?n.slice(8,-18):n.slice(18,-1));return t?t.join("/"):null}const kr=r=>{let i=class extends r{constructor(){super(...arguments),this._functionRasterInfos={},this._serviceSupportsMosaicRule=null,this.adjustAspectRatio=null,this.bandIds=void 0,this.capabilities=null,this.compressionQuality=void 0,this.compressionTolerance=.01,this.copyright=null,this.defaultMosaicRule=null,this.definitionExpression=null,this.exportImageServiceParameters=null,this.rasterInfo=null,this.fields=null,this.fullExtent=null,this.hasMultidimensions=!1,this.imageMaxHeight=4100,this.imageMaxWidth=4100,this.interpolation=void 0,this.minScale=0,this.maxScale=0,this.multidimensionalInfo=null,this.multidimensionalSubset=null,this.noData=null,this.noDataInterpretation=void 0,this.objectIdField=null,this.geometryType="polygon",this.typeIdField=null,this.types=[],this.pixelFilter=null,this.raster=void 0,this.sourceType=null,this.viewId=void 0,this.symbolizer=null,this.rasterFunctionInfos=null,this.serviceDataType=null,this.spatialReference=null,this.pixelType=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.url=null,this.version=void 0}initialize(){this._set("exportImageServiceParameters",new C({layer:this}))}readServiceSupportsMosaicRule(e,t){return this._isMosaicRuleSupported(t)}get _rasterFunctionNamesIndex(){const e=new Map;return!this.rasterFunctionInfos||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.length<1||this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.forEach(t=>{e.set(t.name.toLowerCase().replaceAll(/ /gi,"_"),t.name)}),e}readBandIds(e,t){if(Array.isArray(e)&&e.length>0&&e.every(n=>typeof n=="number"))return e}readCapabilities(e,t){return this._readCapabilities(t)}writeCompressionQuality(e,t,n){e!=null&&this.format!=="lerc"&&(t[n]=e)}writeCompressionTolerance(e,t,n){this.format==="lerc"&&e!=null&&(t[n]=e)}readDefaultMosaicRule(e,t){return this._serviceSupportsMosaicRule?k.fromJSON(t):null}get fieldsIndex(){return this.fields?new Ui(this.fields):null}set format(e){e&&Br.has(e.toLowerCase())&&this._set("format",e.toLowerCase())}readFormat(e,t){return t.serviceDataType==="esriImageServiceDataTypeVector-UV"||t.serviceDataType==="esriImageServiceDataTypeVector-MagDir"||this.pixelFilter!=null?"lerc":"jpgpng"}readMinScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}readMaxScale(e,t){return t.minLOD!=null&&t.maxLOD!=null?e:0}set mosaicRule(e){let t=e;t?.mosaicMethod&&(t=k.fromJSON({...t.toJSON(),mosaicMethod:t.mosaicMethod,mosaicOperation:t.mosaicOperation})),this._set("mosaicRule",t)}readMosaicRule(e,t){const n=e||t.mosaicRule;return n?k.fromJSON(n):this._isMosaicRuleSupported(t)?k.fromJSON(t):null}writeMosaicRule(e,t,n){const{mosaicRule:l}=this;this._isValidCustomizedMosaicRule(l)&&(t[n]=l.toJSON())}writeNoData(e,t,n){e!=null&&typeof e=="number"&&(t[n]=Qr(e))}readObjectIdField(e,t){return e||(e=t.fields.find(n=>n.type==="esriFieldTypeOID"||n.type==="oid")?.name),e}get parsedUrl(){return Bt(this.url)}readSourceType(e,t){return this._isMosaicDataset(t)?"mosaic-dataset":"raster-dataset"}get renderer(){const{activePresetRendererName:e,presetRenderers:t}=this;return e?t?.find(({name:n})=>n===e)?.renderer.clone():this.internalRenderer}set renderer(e){this.activePresetRendererName=null,this.internalRenderer=e}set internalRenderer(e){this.loaded&&(e=this._configRenderer(e)),this._set("internalRenderer",e)}readRenderer(e,t,n){const l=t?.layerDefinition?.drawingInfo?.renderer,u=Ti(l,n);return u==null?null:(u.type==="vector-field"&&t.symbolTileSize&&!l.symbolTileSize&&(u.symbolTileSize=t.symbolTileSize),_t(u)||ut.getLogger(this).warn("ArcGISImageService","Imagery layer doesn't support given renderer type."),u)}writeRenderer(e,t,n){t.layerDefinition=t.layerDefinition||{},t.layerDefinition.drawingInfo=t.layerDefinition.drawingInfo||{},t.layerDefinition.drawingInfo.renderer=e.toJSON(),e.type==="vector-field"&&(t.symbolTileSize=e.symbolTileSize)}get rasterFields(){const e=this.fields?.map(l=>l.clone())??[];e.push(ni()),this.sourceType==="mosaic-dataset"&&this.fields?.length&&e.push(ai()),this.version>=10.4&&this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.some(({name:l})=>l.toLowerCase()==="none")&&e.push(oi()),this.rasterFunctionInfos!=null&&this.rasterFunctionInfos.filter(({name:l})=>l.toLowerCase()!=="none").forEach(({name:l})=>e.push(li(l)));const{rasterInfo:t}=this;if(this._isVectorDataSet()){const l=t?.multidimensionalInfo?.variables[0].unit?.trim(),u=ui(l),p=pi();e.push(u,p)}if(t?.multidimensionalInfo&&this.sourceType==="raster-dataset"){const l=mi(t.multidimensionalInfo);e.push(...l)}const n=t?.attributeTable;if(n!=null){const l=ci(n);e.push(...l)}return e}set rasterFunction(e){let t=e;t?.rasterFunction&&(t=F.fromJSON({...t.toJSON(),rasterFunction:t.rasterFunction,rasterFunctionArguments:t.rasterFunctionArguments})),this._set("rasterFunction",t)}readRasterFunction(e,t){const n=t.rasterFunctionInfos;return t.renderingRule||n?.length&&n[0].name!=="None"?this._isRFTJson(t.renderingRule)?F.fromJSON({rasterFunctionDefinition:t.renderingRule}):F.fromJSON(t.renderingRule||{rasterFunctionInfos:t.rasterFunctionInfos}):null}readSpatialReference(e,t){const n=e||t.extent.spatialReference;return n?ee.fromJSON(n):null}writePixelType(e,t,n){this.serviceRasterInfo!=null&&this.pixelType===this.serviceRasterInfo.pixelType||(t[n]=ve.toJSON(e))}readVersion(e,t){let n=t.currentVersion;return n||(n=t.hasOwnProperty("fields")||t.hasOwnProperty("timeInfo")?10:9.3),n}applyFilter(e){let t=e;return this.pixelFilter&&(t=this._clonePixelData(e),this.pixelFilter(t)),t}async applyRenderer(e,t){let n=e;const{renderer:l,symbolizer:u,pixelFilter:p}=this;if(!this._isPicture()&&l&&u&&!p){await this._updateSymbolizer(u,l);const{bandIds:c}=this;n=await this._symbolize({pixelData:e,bandIds:c,symbolizer:u},t)}return n}destroy(){this._shutdownJobHandler()}async calculateVolume(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsCalculateVolume)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return e=V(e),this.mosaicRule&&e.mosaicRule==null&&(e.mosaicRule=this.mosaicRule),xr(this.url,e,this._getRequestOptions(t))}async computeAngles(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeAngles)throw new S("imagery-layer:compute-angles","this operation is not supported on the input image service");return Fr(this.url,e,this._getRequestOptions(t))}async computePixelSpaceLocations(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputePixelLocation)throw new S("imagery-layer:compute-pixel-space-locations","this operation is not supported on the input image service");return Dr(this.url,e,this._getRequestOptions(t))}async computeHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeHistograms)throw new S("imagery-layer:compute-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),Nr(this.url,e,this._getRequestOptions(t))}async computeStatisticsHistograms(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsComputeStatisticsHistograms)throw new S("imagery-layer:compute-statistics-histograms","this operation is not supported on the input image service");return e=V(e),this._applyMosaicAndRenderingRules(e),Tr(this.url,e,this._getRequestOptions(t))}async measureHeight(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(e.operationType==="base-and-top"?n.mensuration.supportsHeightFromBaseAndTop:e.operationType==="base-and-top-shadow"?n.mensuration.supportsHeightFromBaseAndTopShadow:n.mensuration.supportsHeightFromTopAndTopShadow))throw new S("imagery-layer:measure-height","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),jr(this.url,e,this._getRequestOptions(t))}async measureAreaAndPerimeter(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsAreaAndPerimeter&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-area-and-perimeter","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Cr(this.url,e,this._getRequestOptions(t))}async measureDistanceAndAngle(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsDistanceAndAngle&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-distance-and-angle","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),_r(this.url,e,this._getRequestOptions(t))}async measurePointOrCentroid(e,t){const n=await this._fetchCapabilities(t?.signal);if(!(n.mensuration.supportsPointOrCentroid&&(!e.is3D||n.mensuration.supports3D)))throw new S("imagery-layer:measure-point-or-centroid","this operation is not supported on the input image service");return e=V(e),this._applyMosaicRule(e),Or(this.url,e,this._getRequestOptions(t))}async measureLengthFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-length-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polyline")throw new S("imagery-layer:measure-length-from-image","this input geometry must be a polyline");return Mr(this.url,e,this._getRequestOptions(t))}async measureAreaFromImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMeasureFromImage)throw new S("imagery-layer:measure-area-from-image","this operation is not supported on the input image service");if(e.geometry.type!=="polygon")throw new S("imagery-layer:measure-area-from-image","this input geometry must be a polygon");return Ar(this.url,e,this._getRequestOptions(t))}getField(e){const{fieldsIndex:t}=this;return t?.get(e)}getFieldDomain(e,t){const n=this.getField(e);return n?n.domain:null}fetchImage(e,t,n,l={}){if(Qt(ut.getLogger(this),"`ImageryLayer.fetchImage` is deprecated in favor of 'ImageryLayer.fetchPixels'.",{replacement:"ImageryLayer.fetchPixels",version:"4.33",warnOnce:!0}),e==null||t==null||n==null)throw new S("imagery-layer:fetch-image","Insufficient parameters for requesting an image. A valid extent, width and height values are required.");return this.internalFetchImage(e,t,n,l)}async internalFetchImage(e,t,n,l={}){await this._updateCurrentRasterInfo();const u=this.getExportImageServiceParameters(e,t,n,l.timeExtent);if(u==null){if(l.requestAsImageElement&&this._canRequestImageElement(this.format)){const j=document.createElement("canvas");return j.width=t,j.height=n,l.returnImageBitmap?{imageBitmap:await Pt(j,`${o(this.parsedUrl)}/exportImage`,l.signal)}:{imageOrCanvasElement:j}}const{bandIds:d,rasterInfo:y}=this,g=(d?.length||y.bandCount)??0,f=t*n,h=y.pixelType,b=[];for(let j=0;j<g;j++)b.push(mt.createEmptyBand(h,f));return{pixelData:{pixelBlock:new mt({width:t,height:n,pixels:b,mask:new Uint8Array(f),pixelType:h}),extent:e}}}const p=!!l.requestAsImageElement&&!this.pixelFilter,c=p&&!!l.returnImageBitmap,m={imageServiceParameters:u,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:p,returnImageBitmap:c,signal:l.signal};return this._requestArrayBuffer(m)}async fetchPixels(e,t,n,l={}){await this._initJobHandler(),l.applyRendering&&await this._updateCurrentRasterInfo();const u=l.applyRendering?void 0:new C({layer:this,requestRawData:!0,interpolation:l.interpolation??"nearest",bandIds:l.bandIds??[]}),p=this.getExportImageServiceParameters(e,t,n,l.timeExtent,u);if(p==null)return{extent:e,pixelBlock:null};delete p.pixelType,delete p.bandIds,delete p.compressionQuality;const c={imageServiceParameters:p,imageProps:{extent:e,width:t,height:n,format:this.format},requestAsImageElement:!1,returnImageBitmap:!1,signal:l.signal},{pixelData:m}=await this._requestArrayBuffer(c);return m??{extent:e,pixelBlock:null}}fetchKeyProperties(e){return x(o(this.parsedUrl)+"/keyProperties",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>t.data)}fetchRasterAttributeTable(e){return this.version<10.1?Promise.reject(new S("#fetchRasterAttributeTable()","Failed to get rasterAttributeTable")):x(o(this.parsedUrl)+"/rasterAttributeTable",{query:this._getQueryParams({renderingRule:this.version>=10.3?e?.rasterFunction:null})}).then(t=>Ct.fromJSON(t.data))}getCatalogItemRasterInfo(e,t){const n={...t,query:this._getQueryParams()};return Ur(o(this.parsedUrl),e,n)}async getCatalogItemICSInfo(e,t){const{data:n}=await x(o(this.parsedUrl)+"/"+e+"/info/ics",{query:this._getQueryParams(),...t}),l=n?.ics;if(!l)return;let u=null;try{u=(await x(o(this.parsedUrl)+"/"+e+"/info",{query:this._getQueryParams(),...t})).data.extent}catch{}if(!u?.spatialReference)return{ics:l,icsToPixelTransform:null,icsExtent:null,northDirection:null};const p=this.version>=10.7?x(o(this.parsedUrl)+"/"+e+"/info/icstopixel",{query:this._getQueryParams(),...t}).then(I=>I.data).catch(()=>({})):{},c=u.spatialReference,m={geometries:JSON.stringify({geometryType:"esriGeometryEnvelope",geometries:[u]}),inSR:lt(c),outSR:"0:"+e},d=x(o(this.parsedUrl)+"/project",{query:this._getQueryParams(m),...t}).then(I=>I.data).catch(()=>({})),y=5,g=(u.xmin+u.xmax)/2,f=(u.ymax-u.ymin)/(y+1),h=u.ymin+f,b=[];for(let I=0;I<y;I++)b.push({x:g,y:h+f*I});const j={geometries:JSON.stringify({geometryType:"esriGeometryPoint",geometries:b}),inSR:lt(c),outSR:"0:"+e},w=x(o(this.parsedUrl)+"/project",{query:this._getQueryParams(j),...t}).then(I=>I.data).catch(()=>({})),v=await Promise.all([p,d,w]);let _=v[0].ipxf;if(_==null){const I=l.geodataXform?.xf_0;I?.name?.toLowerCase()==="topup"&&I?.coefficients?.length===6&&(_={affine:{name:"ics [sensor: Frame] to pixel (column, row) transformation",coefficients:I.coefficients,cellsizeRatio:0,type:"GeometricXform"}})}const P=qe.fromJSON(v[1]?.geometries?.[0]);P&&(P.spatialReference=new ee({wkid:0,imageCoordinateSystem:l}));const D=v[2].geometries?v[2].geometries.filter(I=>I?.x!=null&&I.y!=null&&I.x!=="NaN"&&I.y!=="NaN"):[],M=D.length;if(M<3)return{ics:l,icsToPixelTransform:_,icsExtent:P,northDirection:null};let U=0,_e=0,fe=0,Me=0;for(let I=0;I<M;I++)U+=D[I].x,_e+=D[I].y,fe+=D[I].x*D[I].x,Me+=D[I].x*D[I].y;const Y=(M*Me-U*_e)/(M*fe-U*U);let we=0;const Ae=D[y-1].x>D[0].x,me=D[y-1].y>D[0].y;return Y===1/0?we=me?90:270:Y===0?we=Ae?0:180:Y>0?we=Ae?180*Math.atan(Y)/Math.PI:180*Math.atan(Y)/Math.PI+180:Y<0&&(we=me?180+180*Math.atan(Y)/Math.PI:360+180*Math.atan(Y)/Math.PI),{ics:l,icsToPixelTransform:_,icsExtent:P,northDirection:we}}async generateRasterInfo(e,t){e=A(F,e);const n={...t,query:this._getQueryParams()};if(!e||e.functionName?.toLowerCase()==="none"||this._isVectorFieldResampleFunction(e))return this.serviceRasterInfo??Ot(o(this.parsedUrl),this.sourceJSON,n);const l=Hr(e);if(!l)throw new S("imagery-layer:generate-raster-info","the rendering rule is not supported");if(this._functionRasterInfos[l])return this._functionRasterInfos[l];const u=Hi(o(this.parsedUrl),e,n);this._functionRasterInfos[l]=u;try{return await u}catch(p){throw this._functionRasterInfos[l]=null,p}}getExportImageServiceParameters(e,t,n,l,u){e=e.clone().shiftCentralMeridian();const p=Oe(e.spatialReference,o(this.parsedUrl));u??=this.exportImageServiceParameters;const c=u.toJSON(),{bandIds:m,noData:d}=c;let{renderingRule:y}=c;const g=this.rasterFunction?.rasterFunctionDefinition,f=this.renderer?.type,h=!f||f==="raster-stretch"||f==="raster-colormap"||f==="unique-value"||f==="class-breaks"||f==="raster-shaded-relief";if(m?.length&&this._hasRasterFunction(this.rasterFunction)&&!g&&h){const w={rasterFunction:"ExtractBand",rasterFunctionArguments:{BandIds:m}};if(y.rasterFunction==="Stretch")w.rasterFunctionArguments.Raster=y.rasterFunctionArguments.Raster,y.rasterFunctionArguments.Raster=w;else if(y.rasterFunction==="Colormap"){const v=y.rasterFunctionArguments.Raster;v?.rasterFunction==="Stretch"?(w.rasterFunctionArguments.Raster=v.rasterFunctionArguments.Raster,v.rasterFunctionArguments.Raster=w):(w.rasterFunctionArguments.Raster=v,y.rasterFunctionArguments.Raster=w)}else w.rasterFunctionArguments.Raster=y,y=w;c.bandIds=void 0}else c.bandIds=m?.join(",");Array.isArray(d)&&d.length>0&&(c.noData=d.join(","));const b=this._processMultidimensionalIntersection(null,l,u.mosaicRule);if(b.isOutSide)return null;c.mosaicRule=b.mosaicRule!=null?JSON.stringify(b.mosaicRule):null,l=b.timeExtent,c.renderingRule=this._getRenderingRuleString(F.fromJSON(y));const j={};if(l!=null){const{start:w,end:v}=l.toJSON();w&&v&&w===v?j.time=""+w:w==null&&v==null||(j.time=`${w??"null"},${v??"null"}`)}return{bbox:e.xmin+","+e.ymin+","+e.xmax+","+e.ymax,bboxSR:p,imageSR:p,size:t+","+n,...c,...j}}async getSamples(e,t){if(!(await this._fetchCapabilities(t?.signal))?.operations.supportsGetSamples)throw new S("imagery-layer:get-samples","getSamples operation is not supported on the input image service");e=V(e);const{raster:n}=this;return n&&e.raster==null&&(e.raster=n),Pr(this.url,e,this._getRequestOptions(t))}async identify(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsIdentify)throw new S("imagery-layer:identify","identify operation is not supported on the input image service");e=V(e),this.version<10.91&&e.geometry?.type==="extent"&&(e.geometry=ot.fromExtent(e.geometry));const n=this._processMultidimensionalIntersection(e.geometry,e.timeExtent,e.mosaicRule||this.mosaicRule);if(n.isOutSide)throw new S("imagery-layer:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");e.timeExtent=n.timeExtent,e.mosaicRule=n.mosaicRule;const{raster:l,rasterFunction:u}=this;return u&&e.rasterFunction==null&&(e.rasterFunction=u),l&&e.raster==null&&(e.raster=l),Gt(this.url,e,this._getRequestOptions(t))}async imageToMap(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMap)throw new S("imagery-layer:image-to-map","imageToMap operation is not supported on the input image service");return Er(o(this.parsedUrl),e,this._getRequestOptions(t))}async imageToMapMultiray(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsImageToMapMultiray)throw new S("imagery-layer:image-to-map-multiray","imageToMapMultiray operation is not supported on the input image service");return Jr(o(this.parsedUrl),e,this._getRequestOptions(t))}async mapToImage(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsMapToImage)throw new S("imagery-layer:map-to-image","mapToImage operation is not supported on the input image service");return Gr(o(this.parsedUrl),e,this._getRequestOptions(t))}async findImages(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsFindImages)throw new S("imagery-layer:find-images","findImages operation is not supported on the input image service");return zr(o(this.parsedUrl),e,this._getRequestOptions(t))}async getImageUrl(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsGetImageUrl)throw new S("imagery-layer:get-image-url","getImageUrl operation is not supported on the input image service");return Lr(o(this.parsedUrl),e,this._getRequestOptions(t))}createQuery(){return new ct({outFields:["*"],returnGeometry:!0,where:this.definitionExpression||"1=1"})}async queryBoundary(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryBoundary)throw new S("imagery-layer:query-boundary","queryBoundary operation is not supported on the input image service");return e=e??{outSpatialReference:this.spatialReference},Vr(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasters(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),Ki(this.url,e,t)}async queryObjectIds(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),Wi(this.url,e,t)}async queryGPSInfo(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQueryGPSInfo)throw new S("imagery-layer:query-gps-info","queryGPSInfo operation is not supported on the input image service");return e=e??{where:"1=1"},qr(o(this.parsedUrl),e,this._getRequestOptions(t))}async queryRasterCount(e,t){return{query:e,requestOptions:t}=await this._prepareForQuery(e,t),Zi(this.url,e,t)}async queryVisibleRasters(e,t){if(!e)throw new S("imagery-layer: query-visible-rasters","missing query parameter");await this.load();const{pixelSize:n,returnDomainValues:l,returnTopmostRaster:u,showNoDataRecords:p}=t||{pixelSize:null,returnDomainValues:!1,returnTopmostRaster:!1,showNoDataRecords:!1};let c=!1,m=null,d=null;const y=Re.servicePixelValue.toLowerCase(),g=this._rasterFunctionNamesIndex;if(e.outFields!=null&&(c=e.outFields.some(P=>!P.toLowerCase().startsWith(y)),this.version>=10.4)){const P=e.outFields.filter(M=>M.toLowerCase().startsWith(y)&&M.length>y.length).map(M=>{const U=M.slice(y.length+1);return[this._updateRenderingRulesFunctionName(U,g),U]});m=P.map(M=>new F({functionName:M[0]})),d=P.map(M=>M[1]);const{rasterFunction:D}=this;m.length===0?D?.functionName?(m.push(D),d.push(D.functionName)):m=null:D?.functionName&&!m.some(M=>M.functionName===D.functionName)&&(m.push(D),d.push(D.functionName))}const f=e.outSpatialReference==null||e.outSpatialReference.equals(this.spatialReference),{multidimensionalSubset:h}=this;let b=e.timeExtent||this.timeExtent;if(h){const{isOutside:P,intersection:D}=pt(h,{geometry:e.geometry,timeExtent:e.timeExtent,multidimensionalDefinition:this.exportImageServiceParameters.mosaicRule?.multidimensionalDefinition});if(P)throw new S("imagery-layer:query-visible-rasters","the request cannot be fulfilled when falling outside of the multidimensional subset");D?.timeExtent!=null&&(b=D.timeExtent)}const j=this._combineMosaicRuleWithTimeExtent(this.exportImageServiceParameters.mosaicRule,b);let w=e.geometry;this.version<10.91&&w?.type==="extent"&&(w=ot.fromExtent(w));const v=this._getQueryParams({geometry:w,timeExtent:b,mosaicRule:j,rasterFunction:this.version<10.4?this.rasterFunction:null,rasterFunctions:m,pixelSize:n,returnCatalogItems:c,returnGeometry:f,raster:this.raster,maxItemCount:u?1:null});delete v.f;const _=new O(v);try{await this._generateRasterInfo(this.rasterFunction);const P=await Gt(this.url,_,{signal:t?.signal,query:{...this.customParameters}}),D=e.outFields,M=P.value!=null&&P.value.toLowerCase().includes("nodata"),U=c&&!f&&P?.catalogItems?.features.length&&(p||!M),_e=this.multidimensionalInfo&&this.sourceType==="raster-dataset"?di({rasterInfo:this.rasterInfo,multidimensionalDefinition:j?.multidimensionalDefinition,timeExtent:b,multidimensionalSubset:this.multidimensionalSubset}):null;if(!U)return this._processVisibleRastersResponse(P,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:D,effectiveMultidimensionalDefinition:_e});const fe=this.objectIdField||"ObjectId",Me=P.catalogItems?.features??[],Y=Me.map(me=>me.attributes?.[fe]),we=new ct({objectIds:Y,returnGeometry:!0,outSpatialReference:e.outSpatialReference,outFields:[fe]}),Ae=await this.queryRasters(we);return Ae?.features?.length&&Ae.features.forEach(me=>{Me.forEach(I=>{I.attributes[fe]===me.attributes[fe]&&me.geometry&&(I.geometry=me.geometry.clone(),e.outSpatialReference!=null&&(I.geometry.spatialReference=e.outSpatialReference))})}),this._processVisibleRastersResponse(P,{returnDomainValues:l,templateRRFunctionNames:d,showNoDataRecords:p,templateFields:D,effectiveMultidimensionalDefinition:_e})}catch{throw new S("imagery-layer:query-visible-rasters","encountered error when querying visible rasters")}}async fetchVariableStatisticsHistograms(e,t){const n=x(o(this.parsedUrl)+"/statistics",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>p.data?.statistics),l=x(o(this.parsedUrl)+"/histograms",{query:this._getQueryParams({variable:e}),signal:t}).then(p=>p.data?.histograms),u=await Promise.all([n,l]);return u[0]&&u[0].forEach(p=>{p.avg=p.mean,p.stddev=p.standardDeviation}),{statistics:u[0]||null,histograms:u[1]||null}}getMultidimensionalSubsetVariables(e){const t=e??this.serviceRasterInfo.multidimensionalInfo;return yi(this.multidimensionalSubset,t)}async _fetchService(e){await this._fetchServiceInfo(e),this.rasterInfo||(this.rasterInfo=this.serviceRasterInfo);const t=this.sourceJSON,n=this.serviceRasterInfo!=null?Promise.resolve(this.serviceRasterInfo):Ot(o(this.parsedUrl),t,{signal:e,query:this._getQueryParams()}).then(p=>(this._set("serviceRasterInfo",p),this._set("multidimensionalInfo",p.multidimensionalInfo),ki(p,t),p)),l=this._hasRasterFunction(this.rasterFunction)?this._generateRasterInfo(this.rasterFunction,{signal:e}):null,u=this._getRasterFunctionInfos();return Promise.all([n,l,u]).then(p=>{p[1]?this._set("rasterInfo",p[1]):this._set("rasterInfo",p[0]),p[2]&&this._set("rasterFunctionInfos",p[2]),this.internalRenderer&&!this._isSupportedRenderer(this.internalRenderer)&&(this._set("internalRenderer",null),ut.getLogger(this).warn("ArcGISImageService","Switching to the default renderer. Renderer applied is not valid for this Imagery Layer")),this._set("internalRenderer",this._configRenderer(this.renderer)),this.addHandles([Ht(()=>this.rasterFunction,m=>{(this.renderer||this.symbolizer||this.popupEnabled&&this.popupTemplate)&&this._generateRasterInfo(m).then(d=>{d&&(this.rasterInfo=d)})})]);const{serviceRasterInfo:c}=this;c.multidimensionalInfo!=null&&this._updateMultidimensionalDefinition(c)})}_combineMosaicRuleWithTimeExtent(e,t){const n=this.timeInfo,{multidimensionalInfo:l}=this.serviceRasterInfo;if(e==null||l==null||t==null||n?.startField==null)return e;const{startField:u}=n,p=l.variables.some(h=>h.dimensions.some(b=>b.name===u))?u:"StdTime";if(e=e.clone(),this.sourceType==="mosaic-dataset")return e.multidimensionalDefinition=e.multidimensionalDefinition?.filter(h=>h.dimensionName!==p),this._cleanupMultidimensionalDefinition(e);e.multidimensionalDefinition=e.multidimensionalDefinition||[];const c=e.multidimensionalDefinition.filter(h=>h.dimensionName===p),m=t.start!=null?t.start.getTime():null,d=t.end!=null?t.end.getTime():null,y=m==null||d==null||m===d,g=y?[m||d]:[[m,d]],f=this.version>=10.8;if(c.length)c.forEach(h=>{h.dimensionName===p&&(f?(h.dimensionName=null,h.isSlice=!1,h.values=[]):(h.isSlice=y,h.values=g))});else if(!f){const h=e.multidimensionalDefinition.filter(b=>b.variableName!=null&&b.dimensionName==null);h.length?h.forEach(b=>{b.dimensionName=p,b.isSlice=y,b.values=g}):e.multidimensionalDefinition.push(new hi({variableName:"",dimensionName:p,isSlice:y,values:g}))}return this._cleanupMultidimensionalDefinition(e)}_cleanupMultidimensionalDefinition(e){return e==null?null:(e.multidimensionalDefinition&&(e.multidimensionalDefinition=e.multidimensionalDefinition.filter(t=>!(!t.variableName&&!t.dimensionName)),e.multidimensionalDefinition.length===0&&(e.multidimensionalDefinition=null)),this.sourceType!=="mosaic-dataset"&&e.multidimensionalDefinition==null?null:e)}async _prepareForQuery(e,t){if(!(await this._fetchCapabilities(t?.signal)).operations.supportsQuery)throw new S("imagery-layer:query-rasters","query operation is not supported on the input image service");return e=e!=null?A(ct,e):this.createQuery(),t=this._getRequestOptions(t),this.raster&&(t.query={...t.query,raster:this.raster}),{query:e,requestOptions:t}}_isSupportedRenderer(e){const{rasterInfo:t,rasterFunction:n}=this;return e.type==="unique-value"&&this._hasRasterFunction(n)&&t?.bandCount===1&&["u8","s8"].includes(t.pixelType)||t!=null&&e!=null&&Ni(t).includes(e.type)}async _fetchCapabilities(e){return this.capabilities||await this._fetchServiceInfo(e),this.capabilities}async _fetchServiceInfo(e){let t=this.sourceJSON;if(!t){const{data:n,ssl:l}=await x(o(this.parsedUrl),{query:this._getQueryParams(),signal:e});t=n,this.sourceJSON=t,l&&(this.url=this.url.replace(/^http:/i,"https:"))}if(t.capabilities?.toLowerCase().split(",").map(n=>n.trim()).indexOf("tilesonly")>-1)throw new S("imagery-layer:fetch-service-info","use ImageryTileLayer to open tiles-only image services");this.read(t,{origin:"service",url:this.parsedUrl})}_isMosaicDataset(e){return e.serviceSourceType?e.serviceSourceType==="esriImageServiceSourceTypeMosaicDataset":e.fields?.length>0}_isMosaicRuleSupported(e){if(!e)return!1;const t=this._isMosaicDataset(e),n=e.currentVersion>=10.71&&e.hasMultidimensions&&!(e.fields?.length>1);return t||n}_isVectorFieldResampleFunction(e){if(e==null)return!1;const{functionName:t,functionArguments:n}=e,l=t?.toLowerCase()==="resample",u=n?.ResampleType||n?.resampleType;return l&&(u===7||u===10)}_isPicture(){return!this.format||this.format.includes("jpg")||this.format.includes("png")}_configRenderer(e){const t=this._isPicture(),{rasterInfo:n}=this;if(!t&&!this.pixelFilter||this._isVectorDataSet()){const l=this.mosaicRule?.multidimensionalDefinition?.[0].variableName,u=Pi({variableName:l,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&n.bandCount>=3){const c=u?.bandIds??ji(n);!c||n.bandCount===3&&c[0]===0&&c[1]===1&&c[2]===2||(this.bandIds=c)}e||(e=u?.renderer??Ci(n,{bandIds:this.bandIds,variableName:this.rasterFunction?null:l}));const p=Oi(e.toJSON());this.symbolizer?(this.symbolizer.rendererJSON=p,this.symbolizer.rasterInfo=n):this.symbolizer=new Ji({rendererJSON:p,rasterInfo:n}),this.symbolizer.bind().success||(this.symbolizer=null)}return e}_clonePixelData(e){return e==null?e:{extent:e.extent&&e.extent.clone(),pixelBlock:e.pixelBlock!=null?e.pixelBlock.clone():null}}_getQueryParams(e){e?.renderingRule!=null&&typeof e.renderingRule!="string"&&(e.renderingRule=this._getRenderingRuleString(e.renderingRule));const{raster:t,viewId:n}=this;return{raster:t,viewId:n,f:"json",...e,...this.customParameters}}_getRequestOptions(e){return{...e,query:{...e?.query,...this.customParameters}}}_decodePixelBlock(e,t,n){return this._rasterJobHandler?this._rasterJobHandler.decode({data:e,options:t}):Nt(e,t,n)}async _getRasterFunctionInfos(e){const t=this.sourceJSON.rasterFunctionInfos;return this.loaded?t:t&&this.version>=10.3?t.length===1&&t[0].name.toLowerCase()==="none"?t:(await x(o(this.parsedUrl)+"/rasterFunctionInfos",{query:this._getQueryParams(),signal:e})).data?.rasterFunctionInfos:null}_canRequestImageElement(e){return!this.pixelFilter&&(!e||e.includes("png"))}async _requestArrayBuffer(e){const{imageProps:t,requestAsImageElement:n,returnImageBitmap:l,signal:u}=e;if(n&&this._canRequestImageElement(t.format)){const f=`${o(this.parsedUrl)}/exportImage`,{data:h}=await x(f,{responseType:l?"blob":"image",query:this._getQueryParams({f:"image",...this.refreshParameters,...e.imageServiceParameters}),signal:u});return h instanceof Blob?{imageBitmap:await Pt(h,f,u),params:t}:{imageOrCanvasElement:h,params:t}}const p=this._initJobHandler(),c=x(o(this.parsedUrl)+"/exportImage",{responseType:"array-buffer",query:this._getQueryParams({f:"image",...e.imageServiceParameters}),signal:u}),m=(await Promise.all([c,p]))[0].data,d=t.format||"jpgpng";let y=d;if(y!=="bsq"&&y!=="bip"&&(y=Gi(m)),!y)throw new S("imagery-layer:fetch-image","unsupported format signature "+String.fromCharCode.apply(null,new Uint8Array(m)));const g={signal:u};return{pixelData:{pixelBlock:await(d==="gif"||d==="bmp"||d.includes("png")&&(y==="png"||y==="jpg")?Nt(m,{useCanvas:!0,...t},g):this._decodePixelBlock(m,{width:t.width,height:t.height,planes:null,pixelType:null,noDataValue:null,format:d},g)),extent:t.extent},params:t}}_generateRasterInfo(e,t){return this.generateRasterInfo(e,t).catch(()=>null)}_isValidCustomizedMosaicRule(e){return e&&JSON.stringify(e.toJSON())!==JSON.stringify(this.defaultMosaicRule?.toJSON())}_updateMultidimensionalDefinition(e){if(this._isValidCustomizedMosaicRule(this.mosaicRule))return;let t=gi(e,{multidimensionalSubset:this.multidimensionalSubset});if(t!=null&&t.length>0){this.mosaicRule=this.mosaicRule||new k;const n=this.mosaicRule.multidimensionalDefinition;!this.sourceJSON.defaultVariableName&&this.rasterFunction&&this.rasterFunction.functionName?.toLowerCase()!=="none"&&t.forEach(l=>l.variableName=""),t=t.filter(({variableName:l,dimensionName:u})=>l&&l!=="*"||u),!n?.length&&t.length&&(this.mosaicRule.multidimensionalDefinition=t)}}_processVisibleRastersResponse(e,t){t=t||{};const n=e.value,{templateRRFunctionNames:l,showNoDataRecords:u,returnDomainValues:p,templateFields:c}=t,m=e.processedValues;let d=e.catalogItems?.features,y=e.properties?.Values?.map(v=>v.replaceAll(/ /gi,", "))||[];const g=this.objectIdField||"ObjectId",f=typeof n=="string"&&n.toLowerCase().includes("nodata"),h=[];if(n&&!d&&(!f||u)){const v={};v[g]=0,y=[n],d=[new kt({geometry:this.fullExtent,attributes:v})],this.multidimensionalInfo&&this.sourceType==="raster-dataset"&&fi(this.rasterFields,v,t.effectiveMultidimensionalDefinition)}if(!d)return[];this._updateResponseFieldNames(d,c),f&&!u&&(d=[]);const{itemPixelValue:b,servicePixelValue:j}=Re,w=this.rasterFields.some(v=>v.name===b);for(let v=0;v<d.length;v++){const _=d[v];if(n!=null){const P=y[v],D=this.rasterFunction&&m&&m.length>0&&l&&l.length>0&&l.includes(this.rasterFunction.functionName)?m[l.indexOf(this.rasterFunction.functionName)]:n;if(P.toLowerCase()==="nodata"&&!u)continue;w&&(_.attributes[b]=P),_.attributes[j]=D,this._updateFeatureWithMagDirValues(_,P);const M=this.fields&&this.fields.length>0;let U=this.rasterFunction&&this.serviceRasterInfo.attributeTable!=null?M?P:n:D;this.rasterFunction||(U=M?P:n),this._updateFeatureWithRasterAttributeTableValues(_,U)}if(_.sourceLayer=_.layer=this,p&&this._updateFeatureWithDomainValues(_),l&&m&&l.length===m.length)for(let P=0;P<l.length;P++){const D=`${Re.servicePixelValue}.${l[P]}`;_.attributes[D]=m[P]}h.push(d[v])}return h}_processMultidimensionalIntersection(e,t,n){const{multidimensionalSubset:l}=this;if(!l)return{isOutSide:!1,timeExtent:t,mosaicRule:n=this._combineMosaicRuleWithTimeExtent(n,t)};if(l){const{isOutside:u,intersection:p}=pt(l,{geometry:e,timeExtent:t});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null};p?.timeExtent!=null&&(t=p.timeExtent)}if(n=this._combineMosaicRuleWithTimeExtent(n,t),n?.multidimensionalDefinition){const{isOutside:u}=pt(l,{multidimensionalDefinition:n.multidimensionalDefinition});if(u)return{isOutSide:!0,timeExtent:null,mosaicRule:null}}return{isOutSide:!1,timeExtent:t,mosaicRule:n}}_updateFeatureWithRasterAttributeTableValues(e,t){const n=this.rasterInfo.attributeTable||this.serviceRasterInfo.attributeTable;if(n==null)return;const{features:l,fields:u}=n,p=u.map(m=>m.name).find(m=>m.toLowerCase()==="value");if(!p)return;const c=l.filter(m=>m.attributes[p]===(t!=null?parseInt(t,10):null));c&&c[0]&&u.forEach(m=>{const d=wi+m.name;e.attributes[d]=c[0].attributes[m.name]})}_updateFeatureWithMagDirValues(e,t){if(!this._isVectorDataSet())return;const n=t.split(/,\s*/).map(m=>parseFloat(m)),l=n.map(m=>[m]),u=n.map(m=>({minValue:m,maxValue:m,noDataValue:null})),p=new mt({height:1,width:1,pixelType:"f32",pixels:l,statistics:u});this.pixelFilter!=null&&this.pixelFilter({pixelBlock:p,extent:new qe(0,0,0,0,this.spatialReference)});const c=this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"?[p.pixels[0][0],p.pixels[1][0]]:Bi([p.pixels[0][0],p.pixels[1][0]]);e.attributes[Re.magnitude]=c[0],e.attributes[Re.direction]=c[1]}_updateFeatureWithDomainValues(e){(this.fields&&this.fields.filter(n=>n.domain&&n.domain.type==="coded-value"))?.forEach(n=>{const l=e.attributes[n.name];if(l!=null){const u=n.domain.codedValues.find(p=>p.code===l);u&&(e.attributes[n.name]=u.name)}})}_updateResponseFieldNames(e,t){if(!t||t.length<1)return;const n=this.fieldsIndex;n!=null&&e.forEach(l=>{if(l?.attributes)for(const u of t){const p=n.get(u)?.name;p&&p!==u&&(l.attributes[u]=l.attributes[p],delete l.attributes[p])}})}_getRenderingRuleString(e){if(e){let t=e.toJSON();return t=t.rasterFunctionDefinition??t,(t.thumbnail||t.thumbnailEx)&&(t.thumbnail=t.thumbnailEx=null),JSON.stringify(t)}return null}_hasRasterFunction(e){return e?.functionName!=null&&e.functionName.toLowerCase()!=="none"}_updateRenderingRulesFunctionName(e,t){if(!e||e.length<1)return;if(e==="Raw")return e.replace("Raw","None");const n=e.toLowerCase().replaceAll(/ /gi,"_");return t.has(n)?t.get(n):e}_isRFTJson(e){return e?.name&&e.arguments&&e.function&&e.hasOwnProperty("functionType")}_isVectorDataSet(){return this.serviceDataType==="esriImageServiceDataTypeVector-UV"||this.serviceDataType==="esriImageServiceDataTypeVector-MagDir"}_applyMosaicAndRenderingRules(e){const{raster:t,mosaicRule:n,rasterFunction:l}=this;l&&e.rasterFunction==null&&(e.rasterFunction=l),n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}async _updateCurrentRasterInfo(e){if(this.renderer||this.symbolizer){const t=await this._generateRasterInfo(this.rasterFunction,{signal:e});t&&(this.rasterInfo=t)}}_applyMosaicRule(e){const{raster:t,mosaicRule:n}=this;n&&e.mosaicRule==null&&(e.mosaicRule=n),t&&e.raster==null&&(e.raster=t)}_readCapabilities(e){const t=e.capabilities?e.capabilities.toLowerCase().split(",").map(v=>v.trim()):["image","catalog"],{currentVersion:n,maxRecordCount:l}=e,u=t.includes("image"),p=e.serviceDataType==="esriImageServiceDataTypeElevation",c=!(!e.spatialReference&&!e.extent?.spatialReference),m=t.includes("edit"),d=t.includes("mensuration")&&c,y=e.mensurationCapabilities==null?[]:e.mensurationCapabilities.toLowerCase().split(",").map(v=>v.trim()),g=d&&y.includes("basic"),f=this._isMosaicDataset(e)&&t.includes("catalog"),h=t.includes("download"),b=n>=10.7&&p||n>=11.4&&(p||d&&y.includes("3d")),j=f&&e.fields&&e.fields.length>0,w=j&&e.supportsAdvancedQueries?e.advancedQueryCapabilities:void 0;return{data:{supportsAttachment:!1},operations:{supportsComputeHistograms:u,supportsExportImage:u,supportsIdentify:u,supportsImageToMap:n>=11.2&&f,supportsImageToMapMultiray:n>=11.2&&f,supportsMapToImage:n>=11.2&&f,supportsFindImages:n>=11.2&&f,supportsGetImageUrl:n>=11.3&&h,supportsMeasure:d,supportsMeasureFromImage:n>=11.2,supportsDownload:h,supportsQuery:j,supportsGetSamples:n>=10.2&&u,supportsProject:n>=10.3&&u,supportsComputeStatisticsHistograms:n>=10.4&&u,supportsQueryBoundary:n>=10.6&&u,supportsCalculateVolume:b,supportsComputePixelLocation:n>=10.7&&f,supportsComputeAngles:n>=10.91,supportsQueryGPSInfo:n>=11.2&&f,supportsAdd:m,supportsDelete:m,supportsEditing:m,supportsUpdate:m,supportsCalculate:!1,supportsTruncate:!1,supportsValidateSql:!1,supportsChangeTracking:!1,supportsQueryAttachments:!1,supportsResizeAttachments:!1,supportsSync:!1,supportsExceedsLimitStatistics:!1,supportsQueryAnalytics:!1,supportsQueryBins:!1,supportsQueryTopFeatures:!1,supportsAsyncConvert3D:!1},query:{maxRecordCount:l,maxRecordCountFactor:void 0,maxUniqueIDCount:void 0,supportsStatistics:!!w?.supportsStatistics,supportsOrderBy:!!w?.supportsOrderBy,supportsDistinct:!!w?.supportsDistinct,supportsPagination:!!w?.supportsPagination,supportsPaginationOnAggregatedQueries:!!w?.supportsPaginationOnAggregatedQueries,supportsStandardizedQueriesOnly:!!w?.useStandardizedQueries,supportsPercentileStatistics:!!w?.supportsPercentileStatistics,supportsCentroid:!!w?.supportsReturningGeometryCentroid,supportsCurrentUser:!1,supportsDistance:!!w?.supportsQueryWithDistance,supportsExtent:!!w?.supportsReturningQueryExtent,supportsGeometryProperties:!!w?.supportsReturningGeometryProperties,supportsHavingClause:!!w?.supportsHavingClause,supportsQuantization:!1,supportsQuantizationEditMode:!1,supportsQueryGeometry:!1,supportsResultType:!1,supportsReturnMesh:!1,supportsMaxRecordCountFactor:!1,supportsSqlExpression:w?.supportsSqlExpression??!!w,supportsTopFeaturesQuery:!1,supportsQueryByAnonymous:!1,supportsQueryByOthers:!1,supportsHistoricMoment:!1,supportsFormatPBF:!1,supportsDisjointSpatialRelationship:!1,supportsCacheHint:!1,supportsSpatialAggregationStatistics:!1,supportedSpatialAggregationStatistics:{envelope:!1,centroid:!1,convexHull:!1},supportsDefaultSpatialReference:!!w?.supportsDefaultSR,supportsFullTextSearch:!1,supportsCompactGeometry:!1,standardMaxRecordCount:void 0,tileMaxRecordCount:void 0,supportsTrueCurve:!1},mensuration:{supportsDistanceAndAngle:g,supportsAreaAndPerimeter:g,supportsPointOrCentroid:g,supportsHeightFromBaseAndTop:d&&y.includes("base-top height"),supportsHeightFromBaseAndTopShadow:d&&y.includes("base-top shadow height"),supportsHeightFromTopAndTopShadow:d&&y.includes("top-top shadow height"),supports3D:d&&y.includes("3d")}}}};function o(e){return e?.path??""}return s([a({clonable:!1})],i.prototype,"_functionRasterInfos",void 0),s([a({readOnly:!0})],i.prototype,"_serviceSupportsMosaicRule",void 0),s([J("_serviceSupportsMosaicRule",["currentVersion","fields"])],i.prototype,"readServiceSupportsMosaicRule",null),s([a({readOnly:!0})],i.prototype,"_rasterFunctionNamesIndex",null),s([a()],i.prototype,"adjustAspectRatio",void 0),s([a({type:[Ve],json:{write:!0}})],i.prototype,"bandIds",void 0),s([J("bandIds")],i.prototype,"readBandIds",null),s([a({readOnly:!0,json:{read:!1}})],i.prototype,"capabilities",void 0),s([J("service","capabilities",["capabilities","currentVersion","serviceDataType"])],i.prototype,"readCapabilities",null),s([a({type:Number})],i.prototype,"compressionQuality",void 0),s([N("compressionQuality")],i.prototype,"writeCompressionQuality",null),s([a({type:Number})],i.prototype,"compressionTolerance",void 0),s([N("compressionTolerance")],i.prototype,"writeCompressionTolerance",null),s([a({json:{read:{source:"copyrightText"}}})],i.prototype,"copyright",void 0),s([a({readOnly:!0,dependsOn:["_serviceSupportsMosaicRule"]})],i.prototype,"defaultMosaicRule",void 0),s([J("defaultMosaicRule",["defaultMosaicMethod"])],i.prototype,"readDefaultMosaicRule",null),s([a({type:String,json:{name:"layerDefinition.definitionExpression",write:{enabled:!0,allowNull:!0}}})],i.prototype,"definitionExpression",void 0),s([a({readOnly:!0,constructOnly:!0})],i.prototype,"exportImageServiceParameters",void 0),s([a()],i.prototype,"rasterInfo",void 0),s([a({readOnly:!0,type:[zi]})],i.prototype,"fields",void 0),s([a({readOnly:!0})],i.prototype,"fieldsIndex",null),s([a({type:["png","png8","png24","png32","jpg","bmp","gif","jpgpng","lerc","tiff","bip","bsq"],json:{write:!0}})],i.prototype,"format",null),s([J("service","format",["serviceDataType"])],i.prototype,"readFormat",null),s([a({type:qe})],i.prototype,"fullExtent",void 0),s([a({readOnly:!0})],i.prototype,"hasMultidimensions",void 0),s([a({json:{read:{source:"maxImageHeight"}}})],i.prototype,"imageMaxHeight",void 0),s([a({json:{read:{source:"maxImageWidth"}}})],i.prototype,"imageMaxWidth",void 0),s([a({type:String,json:{type:Ee.jsonValues,read:Ee.read,write:Ee.write}})],i.prototype,"interpolation",void 0),s([a()],i.prototype,"minScale",void 0),s([J("service","minScale")],i.prototype,"readMinScale",null),s([a()],i.prototype,"maxScale",void 0),s([J("service","maxScale")],i.prototype,"readMaxScale",null),s([a({type:k})],i.prototype,"mosaicRule",null),s([J("mosaicRule",["mosaicRule","defaultMosaicMethod"])],i.prototype,"readMosaicRule",null),s([N("mosaicRule")],i.prototype,"writeMosaicRule",null),s([a()],i.prototype,"multidimensionalInfo",void 0),s([a({type:xi,json:{write:!0}})],i.prototype,"multidimensionalSubset",void 0),s([a({json:{type:Ve}})],i.prototype,"noData",void 0),s([N("noData")],i.prototype,"writeNoData",null),s([a({type:String,json:{type:Je.jsonValues,read:Je.read,write:Je.write}})],i.prototype,"noDataInterpretation",void 0),s([a({type:String,readOnly:!0,json:{read:{source:["fields"]}}})],i.prototype,"objectIdField",void 0),s([J("objectIdField")],i.prototype,"readObjectIdField",null),s([a({readOnly:!0})],i.prototype,"geometryType",void 0),s([a({})],i.prototype,"typeIdField",void 0),s([a({})],i.prototype,"types",void 0),s([a({readOnly:!0})],i.prototype,"parsedUrl",null),s([a({type:Function})],i.prototype,"pixelFilter",void 0),s([a()],i.prototype,"raster",void 0),s([a({readOnly:!0})],i.prototype,"sourceType",void 0),s([J("sourceType",["serviceSourceType","fields"])],i.prototype,"readSourceType",null),s([a()],i.prototype,"viewId",void 0),s([a()],i.prototype,"renderer",null),s([a({types:Di,json:{name:"layerDefinition.drawingInfo.renderer",origins:{"web-scene":{types:Fi,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:e=>({enabled:e&&e.type!=="vector-field"&&e.type!=="flow"})}}}}})],i.prototype,"internalRenderer",null),s([J("internalRenderer")],i.prototype,"readRenderer",null),s([N("internalRenderer")],i.prototype,"writeRenderer",null),s([a({clonable:!1})],i.prototype,"symbolizer",void 0),s([a(ei)],i.prototype,"opacity",void 0),s([a({readOnly:!0})],i.prototype,"rasterFields",null),s([a({constructOnly:!0})],i.prototype,"rasterFunctionInfos",void 0),s([a({type:F,json:{name:"renderingRule"}})],i.prototype,"rasterFunction",null),s([J("rasterFunction",["renderingRule","rasterFunctionInfos"])],i.prototype,"readRasterFunction",null),s([a({readOnly:!0})],i.prototype,"serviceDataType",void 0),s([a({readOnly:!0,type:ee})],i.prototype,"spatialReference",void 0),s([J("spatialReference",["spatialReference","extent"])],i.prototype,"readSpatialReference",null),s([a({type:ve.apiValues,json:{read:ve.read,type:ve.jsonValues}})],i.prototype,"pixelType",void 0),s([N("pixelType")],i.prototype,"writePixelType",null),s([a({constructOnly:!0,type:Tt})],i.prototype,"serviceRasterInfo",void 0),s([a()],i.prototype,"sourceJSON",void 0),s([a(ti)],i.prototype,"url",void 0),s([a({readOnly:!0})],i.prototype,"version",void 0),s([J("version",["currentVersion","fields","timeInfo"])],i.prototype,"readVersion",null),i=s([R("esri.layers.mixins.ArcGISImageService")],i),i};let z=class extends Yi(sr(rr(ii(tr($i(kr(_i(ir(er(Xi(Xt(ne.ClonableMixin(Yt))))))))))))){constructor(...r){super(...r),this.isReference=null,this.operationalLayerType="ArcGISImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.type="imagery",this._debouncedSaveOperations=Wt(async(i,o,e)=>{const{save:t,saveAs:n}=await import("./imageryUtils-DHYzIRVX.js");switch(i){case $e.SAVE:return t(this,o);case $e.SAVE_AS:return n(this,e,o)}})}normalizeCtorArgs(r,i){return typeof r=="string"?{url:r,...i}:r}load(r){const i=r!=null?r.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},r).catch(Zt).then(()=>this._fetchService(i))),Promise.resolve(this)}get legendEnabled(){return!this._isPreviewLayer&&(this._get("legendEnabled")??!0)}set legendEnabled(r){this._set("legendEnabled",r)}get listMode(){return this._isPreviewLayer?"hide":this._get("listMode")}set listMode(r){this._set("listMode",r)}writeOperationalLayerType(r,i,o){const e=this.renderer?.type==="vector-field";i[o]=e?"ArcGISImageServiceVectorLayer":"ArcGISImageServiceLayer"}get defaultPopupTemplate(){return this.createPopupTemplate()}get _isPreviewLayer(){return!(!this.raster||!this.url?.toLowerCase().includes("/rasterrendering/imageserver"))}createPopupTemplate(r){const{rasterFields:i}=this,o=new Set,e=Re.itemPixelValue.toLowerCase(),t=this.sourceType==="raster-dataset",n=Ri.toLowerCase(),l=`${Re.servicePixelValue.toLowerCase()}.`;for(const c of i){const m=c.name.toLowerCase();m===e||m.startsWith(l)||t&&m.startsWith(n)||o.add(c.name)}const u=ar({fields:i,title:this.title},{...r,visibleFieldNames:o}),{rasterInfo:p}=this;return u?.fieldInfos&&p&&vi(u.fieldInfos,p),u}queryFeatures(r,i){return this.queryRasters(r,i).then(o=>{if(o?.features)for(const e of o.features)e.layer=e.sourceLayer=this;return o})}queryFeatureCount(r,i){return this.queryRasterCount(r,i)}redraw(){this.emit("redraw")}async save(r){return this._debouncedSaveOperations($e.SAVE,r)}async saveAs(r,i){return this._debouncedSaveOperations($e.SAVE_AS,i,r)}serviceSupportsSpatialReference(r){return nr(this,r)}write(r,i){if(!this._isPreviewLayer)return super.write(r,i);if(i?.messages){const o=`${i.origin}/${i.layerContainerType||"operational-layers"}`;i.messages.push(new S("layer:unsupported",`Imagery preview layer (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${o}'`,{layer:this}))}return null}};s([a(ri)],z.prototype,"legendEnabled",null),s([a({type:["show","hide"]})],z.prototype,"listMode",null),s([a({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],z.prototype,"isReference",void 0),s([a({type:["ArcGISImageServiceLayer"],json:{origins:{"web-map":{type:["ArcGISImageServiceLayer","ArcGISImageServiceVectorLayer"],read:!1,write:{target:"layerType",ignoreOrigin:!0}}}}})],z.prototype,"operationalLayerType",void 0),s([N("web-map","operationalLayerType")],z.prototype,"writeOperationalLayerType",null),s([a(si)],z.prototype,"popupEnabled",void 0),s([a({type:Kt,json:{read:{source:"popupInfo"},write:{target:"popupInfo"}}})],z.prototype,"popupTemplate",void 0),s([a({readOnly:!0})],z.prototype,"defaultPopupTemplate",null),s([a({readOnly:!0,json:{read:!1}})],z.prototype,"type",void 0),s([a({readOnly:!0})],z.prototype,"_isPreviewLayer",null),z=s([R("esri.layers.ImageryLayer")],z);const $r=z;export{$r as default};
