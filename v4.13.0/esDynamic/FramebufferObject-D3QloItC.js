import{fV as A,i as D}from"./main-BFDurRCu.js";import{E as M}from"./VertexArrayObject-CieliEx4.js";import{G as w,e as _,S as m,c as P}from"./Texture-D5XWO2GQ.js";import{o as p,e as o,G as a,t as f,F as T,X as R,Y as y,N as z,V as X,k as v,H as N,g as B,n as F,h as U}from"./enums-wEDHPbCF.js";class L{constructor(t,e=0,i=e){this.internalFormat=t,this.width=e,this.height=i,this.multisampled=!1,this.samples=1}}function I(s){return s.width<=0||s.height<=0||s.internalFormat==null?0:s.width*s.height*w(s.internalFormat)}class O{constructor(t,e){this._context=t,this._descriptor=e,this.type=_.Renderbuffer,this._context.instanceCounter.increment(p.Renderbuffer,this);const i=this._context.gl;this.glName=i.createRenderbuffer(),this._context.bindRenderbuffer(this);const{width:r,height:n,internalFormat:h,multisampled:c}=e;c?i.renderbufferStorageMultisample(i.RENDERBUFFER,this.samples,h,r,n):i.renderbufferStorage(i.RENDERBUFFER,h,r,n),this._context.bindRenderbuffer(null)}get descriptor(){return this._descriptor}get samples(){const t=this._descriptor.samples,e=this._context.parameters.maxSamples;return t?Math.min(t,e):e}get usedMemory(){return I(this._descriptor)}resize(t,e){const i=this._descriptor;if(i.width===t&&i.height===e)return;i.width=t,i.height=e;const r=this._context.gl;this._context.bindRenderbuffer(this),i.multisampled?r.renderbufferStorageMultisample(r.RENDERBUFFER,this.samples,i.internalFormat,i.width,i.height):r.renderbufferStorage(r.RENDERBUFFER,i.internalFormat,i.width,i.height),this._context.bindRenderbuffer(null)}dispose(){this._context&&(this._context.gl.deleteRenderbuffer(this.glName),this._context.instanceCounter.decrement(p.Renderbuffer,this),this._context=null)}}const H=()=>D.getLogger("esri.views.webgl.FramebufferObject");class d{constructor(t,e,i){if(this._context=t,this._glName=null,this._colorAttachments=new Map,this._depthStencilBuffer=null,this._depthStencilTexture=null,this._initialized=!1,t.instanceCounter.increment(p.FramebufferObject,this),e!=null){const r=E(e)?e:new m(t,e);this._colorAttachments.set(o,r),this._validateTextureDescriptor(r.descriptor),this._validateColorAttachmentPoint(o)}if(i!=null)if(j(i))this._depthStencilTexture=E(i)?i:new m(t,i),this._validateTextureDescriptor(this._depthStencilTexture.descriptor);else{const r=G(i)?i:new O(t,i);this._depthStencilBuffer=r,this._validateRenderbufferDescriptor(r.descriptor)}}dispose(){const{_colorAttachments:t,_glName:e}=this;if(t.size===0&&!this._depthStencilBuffer&&!this._depthStencilTexture&&!e)return;const{_context:i}=this,r=i.getBoundFramebufferObject();t.forEach((n,h)=>this.detachColorTexture(h)?.dispose()),this.detachDepthStencilBuffer()?.dispose(),this.detachDepthStencilTexture()?.dispose(),i.gl.deleteFramebuffer(e),this._glName=null,i.bindFramebuffer(r===this?null:r),i.instanceCounter.decrement(p.FramebufferObject,this)}get glName(){return this._glName}get colorTexture(){return this._colorAttachments.get(o)}get depthStencil(){return this._depthStencilTexture||this._depthStencilBuffer}get depthStencilTexture(){return this._depthStencilTexture}get width(){return(this._colorAttachments.get(o)??this._depthStencilTexture??this._depthStencilBuffer)?.descriptor?.width??0}get height(){return(this._colorAttachments.get(o)??this._depthStencilTexture??this._depthStencilBuffer)?.descriptor?.height??0}get usedMemory(){return[...this._colorAttachments].reduce((t,[e,i])=>t+i.usedMemory,this.depthStencil?.usedMemory??0)}static{this._MAX_COLOR_ATTACHMENTS=-1}getColorTexture(t){const e=this._colorAttachments.get(t);return e&&E(e)?e:null}get colorAttachments(){return[...this._colorAttachments.keys()]}attachColorTexture(t,e=o){if(!t)return;this._validateColorAttachmentPoint(e);const{descriptor:i}=t;this._validateTextureDescriptor(i),this.detachColorTexture(e)?.dispose(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,e)),this._colorAttachments.set(e,t)}detachColorTexture(t=o){const e=this._colorAttachments.get(t);if(e)return this._initialized&&this._context.temporaryBindFramebufferObject(this,()=>{this._framebufferTexture2D(null,t)}),this._colorAttachments.delete(t),e}setColorTextureTarget(t,e=o,i=0){const r=this._colorAttachments.get(e);r&&(t===a.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(r.glName,e,f.FRAMEBUFFER,0,i):this._framebufferTexture2D(r.glName,e,t,f.FRAMEBUFFER,0))}attachDepthStencil(t){if(t)switch(t.type){case _.Texture:return this._attachDepthStencilTexture(t);case _.Renderbuffer:return this._attachDepthStencilBuffer(t)}}_attachDepthStencilTexture(t){if(t==null)return;const{descriptor:e}=t,{pixelFormat:i,dataType:r}=e;i===T.DEPTH_STENCIL||i===T.DEPTH_COMPONENT?i!==T.DEPTH_STENCIL||r===R.UNSIGNED_INT_24_8?i!==T.DEPTH_COMPONENT||r===R.UNSIGNED_INT||r===R.UNSIGNED_SHORT?(this._validateTextureDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(t.glName,g(i))),this._depthStencilTexture?.dispose(),this._depthStencilTexture=t):console.error("Depth texture must have data type of UNSIGNED_INT or UNSIGNED_SHORT!"):console.error("Depth/Stencil texture must have data type of UNSIGNED_INT_24_8!"):console.error("Depth/Stencil texture must have a pixel type of DEPTH_STENCIL!")}detachDepthStencilTexture(){const t=this._depthStencilTexture;return t&&this._initialized&&this._context.temporaryBindFramebufferObject(this,()=>{this._framebufferTexture2D(null,g(t.descriptor.pixelFormat))}),this._depthStencilTexture=null,t}_attachDepthStencilBuffer(t){if(t==null)return;const e=t.descriptor;if(this._validateRenderbufferDescriptor(e),this._disposeDepthStencilAttachments(),this._initialized){this._context.bindFramebuffer(this);const{gl:i}=this._context,r=this._getGLAttachmentPoint(e);i.framebufferRenderbuffer(f.FRAMEBUFFER,r,i.RENDERBUFFER,t.glName)}this._depthStencilBuffer=t}detachDepthStencilBuffer(){const t=this._depthStencilBuffer;if(t&&this._initialized){const{_context:e}=this,i=e.getBoundFramebufferObject();e.bindFramebuffer(this);const{gl:r}=e,n=this._getGLAttachmentPoint(t.descriptor);r.framebufferRenderbuffer(f.FRAMEBUFFER,n,r.RENDERBUFFER,null),e.bindFramebuffer(i)}return this._depthStencilBuffer=null,t}invalidateAttachments(t){const{_context:e}=this;e.temporaryBindFramebufferObject(this,()=>e.gl.invalidateFramebuffer(f.FRAMEBUFFER,t),!0)}copyToTexture(t,e,i,r,n,h,c){(t<0||e<0||n<0||h<0)&&console.error("Offsets cannot be negative!"),(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!");const l=c.descriptor;c.descriptor.target!==a.TEXTURE_2D&&console.error("Texture target must be TEXTURE_2D!"),(l?.width==null||l?.height==null||t+i>this.width||e+r>this.height||n+i>l.width||h+r>l.height)&&console.error("Bad dimensions, the current input values will attempt to read or copy out of bounds!");const u=this._context,b=u.bindTexture(c,m.TEXTURE_UNIT_FOR_UPDATES);u.setActiveTexture(m.TEXTURE_UNIT_FOR_UPDATES),u.bindFramebuffer(this),u.gl.copyTexSubImage2D(a.TEXTURE_2D,0,n,h,t,e,i,r),u.bindTexture(b,m.TEXTURE_UNIT_FOR_UPDATES)}readPixels(t,e,i,r,n,h,c){(i<=0||r<=0)&&console.error("Copy width and height must be greater than zero!"),c||console.error("Target memory is not initialized!"),this._context.bindFramebuffer(this),this._context.gl.readPixels(t,e,i,r,n,h,c)}async readPixelsAsync(t,e,i,r,n,h,c){const{gl:l}=this._context,u=M.createPixelPack(this._context,y.STREAM_READ,c.byteLength);this._context.bindBuffer(u);const b=this._context.getBoundFramebufferObject();this._context.bindFramebuffer(this),l.readPixels(t,e,i,r,n,h,0),this._context.unbindBuffer(z.PIXEL_PACK_BUFFER),this._context.bindFramebuffer(b),await u.getSubDataAsync(c),u.dispose()}resize(t,e){if(this.width===t&&this.height===e)return;const i={width:t,height:e};x(i,this._context.parameters.maxTextureSize),this._colorAttachments.forEach(r=>r.resize(i.width,i.height)),this._depthStencilTexture?.resize(i.width,i.height),this._initialized&&(x(i,this._context.parameters.maxRenderbufferSize),this._depthStencilBuffer?.resize(i.width,i.height),this._context.getBoundFramebufferObject()===this&&this._context.bindFramebuffer(null),this._initialized=!1)}initializeAndBind(t=f.FRAMEBUFFER){const{gl:e}=this._context;if(this._initialized)return void e.bindFramebuffer(t,this.glName);this._glName&&e.deleteFramebuffer(this._glName);const i=e.createFramebuffer();if(e.bindFramebuffer(t,i),this._colorAttachments.forEach((r,n)=>{const h=C(r);h===a.TEXTURE_2D_ARRAY?this._framebufferTextureLayer(r.glName,n,t,0,0):this._framebufferTexture2D(r.glName,n,h,t)}),this._depthStencilBuffer){const r=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);e.framebufferRenderbuffer(t,r,e.RENDERBUFFER,this._depthStencilBuffer.glName)}else if(this._depthStencilTexture){const r=g(this._depthStencilTexture.descriptor.pixelFormat);this._framebufferTexture2D(this._depthStencilTexture.glName,r,C(this._depthStencilTexture),t)}P()&&e.checkFramebufferStatus(t)!==e.FRAMEBUFFER_COMPLETE&&console.error("Framebuffer is incomplete!"),this._glName=i,this._initialized=!0}_framebufferTexture2D(t,e=o,i=a.TEXTURE_2D,r=f.FRAMEBUFFER,n=0){this._context.gl.framebufferTexture2D(r,e,i,t,n)}_framebufferTextureLayer(t,e=o,i=f.FRAMEBUFFER,r=0,n=0){this._context.gl.framebufferTextureLayer(i,e,t,r,n)}_disposeDepthStencilAttachments(){const t=this._context.gl;if(this._depthStencilBuffer){if(this._initialized){this._context.bindFramebuffer(this);const e=this._getGLAttachmentPoint(this._depthStencilBuffer.descriptor);t.framebufferRenderbuffer(f.FRAMEBUFFER,e,t.RENDERBUFFER,null)}this._depthStencilBuffer=A(this._depthStencilBuffer)}this._depthStencilTexture&&(this._initialized&&(this._context.bindFramebuffer(this),this._framebufferTexture2D(null,g(this._depthStencilTexture.descriptor.pixelFormat))),this._depthStencilTexture=A(this._depthStencilTexture))}_validateTextureDescriptor(t){t.target!==a.TEXTURE_2D&&t.target!==a.TEXTURE_CUBE_MAP&&t.target!==a.TEXTURE_2D_ARRAY&&console.error("Texture type must be TEXTURE_2D, TEXTURE_2D_ARRAY or TEXTURE_CUBE_MAP!"),x(t,this._context.parameters.maxTextureSize),this._validateBufferDimensions(t)}_validateRenderbufferDescriptor(t){x(t,this._context.parameters.maxRenderbufferSize),this._validateBufferDimensions(t)}_validateBufferDimensions(t){t.width<=0&&(t.width=this.width),t.height<=0&&(t.height=this.height),this.width>0&&this.height>0&&(this.width===t.width&&this.height===t.height||console.error("Attachment size must match framebuffer size!"))}_getGLAttachmentPoint(t){switch(t.internalFormat){case F.DEPTH_COMPONENT16:case F.DEPTH_COMPONENT24:case F.DEPTH_COMPONENT32F:return U;case N.DEPTH24_STENCIL8:case N.DEPTH32F_STENCIL8:return B;case X.STENCIL_INDEX8:return v}}_validateColorAttachmentPoint(t){if(d._MAX_COLOR_ATTACHMENTS===-1){const{gl:i}=this._context;d._MAX_COLOR_ATTACHMENTS=i.getParameter(i.MAX_COLOR_ATTACHMENTS)}const e=t-o;e+1>d._MAX_COLOR_ATTACHMENTS&&D.getLogger("esri.views.webgl.FrameBufferObject").error("esri.FrameBufferObject",`illegal attachment point for color attachment: ${e+1}. Implementation supports up to ${d._MAX_COLOR_ATTACHMENTS} color attachments`)}}function E(s){return S(s)===_.Texture}function G(s){return S(s)===_.Renderbuffer}function j(s){return E(s)||Y(s)}function Y(s){return S(s)===_.TextureDescriptor}function S(s){return s!=null&&"type"in s?s.type:null}function x(s,t){const e=Math.max(s.width,s.height);if(e>t){H().warnOnce(`Resizing FBO attachment size ${s.width}x${s.height} to device limit ${t}`);const i=t/e;return s.width=Math.round(s.width*i),s.height=Math.round(s.height*i),!1}return!0}function C(s){return s.descriptor.target===a.TEXTURE_CUBE_MAP?a.TEXTURE_CUBE_MAP_POSITIVE_X:s.descriptor.target===a.TEXTURE_2D_ARRAY?a.TEXTURE_2D_ARRAY:a.TEXTURE_2D}function g(s){return s===T.DEPTH_COMPONENT?U:B}export{d as R,L as i,O as s};
