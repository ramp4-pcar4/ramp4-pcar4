import{dv as Z,cD as z,dw as A,dx as H}from"./main-BFDurRCu.js";function b(t,i,a,s){if(t.type==="point")return t.x+=i,t.y+=a,t.hasZ&&s!=null,t;if(t.type==="multipoint"){const y=t.points;for(let e=0;e<y.length;e++)y[e]=B(y[e],i,a,s);return t}if(t.type==="extent")return t.xmin+=i,t.xmax+=i,t.ymin+=a,t.ymax+=a,t;const m=Z(t),n=t.type==="polyline"?t.paths:t.rings;for(let y=0;y<m.length;y++){const e=m[y];for(let x=0;x<e.length;x++)e[x]=B(e[x],i,a,s)}return"paths"in t?t.paths=n:t.rings=n,t}function J(t,i,a,s,m){const n=t.clone(),y=s.resolution;if(n.type==="point"){if(m)b(n,i*y,-a*y);else{const e=s.state.transform,x=s.state.inverseTransform,r=e[0]*n.x+e[2]*n.y+e[4],f=e[1]*n.x+e[3]*n.y+e[5];n.x=x[0]*(r+i)+x[2]*(f+a)+x[4],n.y=x[1]*(r+i)+x[3]*(f+a)+x[5]}return n}if(n.type==="multipoint"){if(m)b(n,i*y,-a*y);else{const e=n.points,x=s.state.transform,r=s.state.inverseTransform;for(let f=0;f<e.length;f++){const p=e[f],c=x[0]*p[0]+x[2]*p[1]+x[4],v=x[1]*p[0]+x[3]*p[1]+x[5],o=r[0]*(c+i)+r[2]*(v+a)+r[4],u=r[1]*(c+i)+r[3]*(v+a)+r[5];e[f]=w(p,o,u)}}return n}if(n.type==="extent"){if(m)b(n,i*y,-a*y);else{const e=s.state.transform,x=s.state.inverseTransform,r=e[0]*n.xmin+e[2]*n.ymin+e[4],f=e[1]*n.xmin+e[3]*n.ymin+e[5],p=e[0]*n.xmax+e[2]*n.ymax+e[4],c=e[1]*n.xmax+e[3]*n.ymax+e[5];n.xmin=x[0]*(r+i)+x[2]*(f+a)+x[4],n.ymin=x[1]*(r+i)+x[3]*(f+a)+x[5],n.xmax=x[0]*(p+i)+x[2]*(c+a)+x[4],n.ymax=x[1]*(p+i)+x[3]*(c+a)+x[5]}return n}if(m)b(n,i*y,-a*y);else{const e=Z(n),x=n.type==="polyline"?n.paths:n.rings,r=s.state.transform,f=s.state.inverseTransform;for(let p=0;p<e.length;p++){const c=e[p];for(let v=0;v<c.length;v++){const o=c[v],u=r[0]*o[0]+r[2]*o[1]+r[4],h=r[1]*o[0]+r[3]*o[1]+r[5],M=f[0]*(u+i)+f[2]*(h+a)+f[4],g=f[1]*(u+i)+f[3]*(h+a)+f[5];c[v]=w(o,M,g)}}"paths"in n?n.paths=x:n.rings=x}return n}function K(t,i,a,s){if(t.type==="point"){const{x:o,y:u}=t,h=s?s[0]:o,M=s?s[1]:u,g=t.clone(),d=(o-h)*i+h,l=(u-M)*a+M;return g.x=d,g.y=l,g}if(t.type==="multipoint"){const o=Z(t),u=z(),[h,M,g,d]=A(u,[o]),l=s?s[0]:(h+g)/2,T=s?s[1]:(d+M)/2,q=t.clone(),j=q.points;for(let D=0;D<j.length;D++){const k=j[D],[C,E]=k,F=(C-l)*i+l,G=(E-T)*a+T;j[D]=w(k,F,G)}return q}if(t.type==="extent"){const{xmin:o,xmax:u,ymin:h,ymax:M}=t,g=s?s[0]:(o+u)/2,d=s?s[1]:(M+h)/2,l=t.clone();if(l.xmin=(o-g)*i+g,l.ymax=(M-d)*a+d,l.xmax=(u-g)*i+g,l.ymin=(h-d)*a+d,l.xmin>l.xmax){const T=l.xmin,q=l.xmax;l.xmin=q,l.xmax=T}if(l.ymin>l.ymax){const T=l.ymin,q=l.ymax;l.ymin=q,l.ymax=T}return l}const m=Z(t),n=z(),[y,e,x,r]=A(n,m),f=s?s[0]:(y+x)/2,p=s?s[1]:(r+e)/2,c=t.clone(),v=c.type==="polyline"?c.paths:c.rings;for(let o=0;o<m.length;o++){const u=m[o];for(let h=0;h<u.length;h++){const M=u[h],[g,d]=M,l=(g-f)*i+f,T=(d-p)*a+p;v[o][h]=w(M,l,T)}}return"paths"in c?c.paths=v:c.rings=v,c}function L(t,i,a,s,m,n){const y=Math.sqrt((a-t)*(a-t)+(s-i)*(s-i));return Math.sqrt((m-t)*(m-t)+(n-i)*(n-i))/y}function N(t,i,a,s=!1){const m=Math.atan2(i.y-a.y,i.x-a.x)-Math.atan2(t.y-a.y,t.x-a.x),n=Math.atan2(Math.sin(m),Math.cos(m));return s?n:H(n)}function B(t,i,a,s){return w(t,t[0]+i,t[1]+a,t[2]!=null&&s!=null?t[2]+s:void 0)}function w(t,i,a,s){const m=[i,a];return t.length>2&&m.push(t[2]),t.length>3&&m.push(t[3]),m}export{L as a,J as i,N as m,K as s};
