const u=-3;var _;(function(z){z[z.ALL=0]="ALL",z[z.SOME=1]="SOME"})(_||(_={}));class m{get size(){return this._size}constructor(i=10485760){this._maxSize=i,this._db=new Map,this._size=0,this._hit=0,this._miss=0,this._users=new Map,this._sizeLimits=new Map}destroy(){this.clearAll(),this._sizeLimits.clear(),this._users.clear()}register(i){this._users.set(i.id.slice(0,-1),i)}deregister(i){this.clear(i),this._sizeLimits.delete(i),this._users.delete(i.id.slice(0,-1))}get maxSize(){return this._maxSize}set maxSize(i){this._maxSize=Math.max(i,-1),this._checkSize()}getSize(i,t){return this._db.get(i.id+t)?.size??0}put(i,t,e,h,n){t=i.id+t;const s=this._db.get(t);if(s&&(this._size-=s.size,i.size-=s.size,this._db.delete(t),s.entry!==e&&this._notifyRemove(t,s.entry,s.size,_.ALL)),h>this._maxSize)return void this._notifyRemove(t,e,h,_.ALL);if(e===void 0)return void console.warn("Refusing to cache undefined entry ");if(!h||h<0)return console.warn(`Refusing to cache entry with size ${h} for key ${t}`),void this._notifyRemove(t,e,0,_.ALL);const r=1+Math.max(n,-4)- -3;this._db.set(t,new b(e,h,r)),this._size+=h,i.size+=h,this._checkSize()}updateSize(i,t,e,h){t=i.id+t;const n=this._db.get(t);if(n&&n.entry===e){for(this._size-=n.size,i.size-=n.size;h>this._maxSize;){const s=this._notifyRemove(t,e,h,_.SOME);if(!(s!=null&&s>0))return void this._db.delete(t);h=s}n.size=h,this._size+=h,i.size+=h,this._checkSize()}}pop(i,t){t=i.id+t;const e=this._db.get(t);if(e)return this._size-=e.size,i.size-=e.size,this._db.delete(t),++this._hit,e.entry;++this._miss}get(i,t){t=i.id+t;const e=this._db.get(t);if(e!==void 0)return this._db.delete(t),e.lives=e.lifetime,this._db.set(t,e),++this._hit,e.entry;++this._miss}peek(i,t){const e=this._db.get(i.id+t);return e?++this._hit:++this._miss,e?.entry}get performanceInfo(){const i={Size:Math.round(this._size/1048576)+"/"+Math.round(this._maxSize/1048576)+"MB","Hit rate":Math.round(100*this._getHitRate())+"%",Entries:this._db.size.toString()},t={},e=new Array;this._db.forEach((s,r)=>{const o=s.lifetime;e[o]=(e[o]||0)+s.size,this._users.forEach(d=>{const{id:f,name:a}=d;if(r.startsWith(f)){const l=t[a]||0;t[a]=l+s.size}})});const h={};this._users.forEach(s=>{const r=s.name;if("hitRate"in s&&typeof s.hitRate=="number"&&!isNaN(s.hitRate)&&s.hitRate>0){const o=t[r]||0;t[r]=o,h[r]=Math.round(100*s.hitRate)+"%"}else h[r]="0%"});const n=Object.keys(t);n.sort((s,r)=>t[r]-t[s]),n.forEach(s=>i[s]=Math.round(t[s]/2**20)+"MB / "+h[s]);for(let s=e.length-1;s>=0;--s){const r=e[s];r&&(i["Priority "+(s+-3-1)]=Math.round(r/this._size*100)+"%")}return i}resetStats(){this._hit=this._miss=0,this._users.forEach(i=>i.resetHitRate())}clear(i){const t=i.id;this._db.forEach((e,h)=>{h.startsWith(t)&&(this._size-=e.size,this._db.delete(h),this._notifyRemove(h,e.entry,e.size,_.ALL))}),i.size=0}clearAll(){this._db.forEach((i,t)=>this._notifyRemove(t,i.entry,i.size,_.ALL)),this._users.forEach(i=>i.size=0),this._size=0,this._db.clear()}*values(i){for(const[t,e]of this._db)t.startsWith(i.id)&&(yield e.entry)}_getHitRate(){return this._hit/(this._hit+this._miss)}_notifyRemove(i,t,e,h){const n=this._users.get(i.split(c)[0])?.removeFunc,s=n?.(t,h,e);return typeof s=="number"?s:null}_checkSize(){this._sizeLimits.forEach((i,t)=>this._checkSizeLimits(i,t)),this._checkSizeLimits(this.maxSize)}setMaxSize(i,t){t==null||t<=0?this._sizeLimits.delete(i):this._sizeLimits.set(i,t)}_checkSizeLimits(i,t){const e=t??this;if(e.size<=i)return;const h=t?.id;let n=!0;for(;n;){n=!1;for(const[s,r]of this._db)if(r.lifetime===0&&(!h||s.startsWith(h))){const o=t??this._users.get(s.split(c)[0]);if(this._purgeItem(s,r,o),e.size<=.9*i)return;n||=this._db.has(s)}}for(const[s,r]of this._db)if(!h||s.startsWith(h)){const o=t??this._users.get(s.split(c)[0]);if(this._purgeItem(s,r,o),e.size<=.9*i)return}}_purgeItem(i,t,e){if(this._db.delete(i),t.lives<=1){this._size-=t.size,e&&(e.size-=t.size);const h=this._notifyRemove(i,t.entry,t.size,_.SOME);h!=null&&h>0&&(this._size+=h,e&&(e.size+=h),t.lives=t.lifetime,t.size=h,this._db.set(i,t))}else--t.lives,this._db.set(i,t)}}class b{constructor(i,t,e){this.entry=i,this.size=t,this.lifetime=e,this.lives=e}}const c=":";export{m as h,u as t};
