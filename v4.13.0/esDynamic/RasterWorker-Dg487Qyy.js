import{v as f,bJ as u,z as p,b$ as n,c2 as S}from"./main-BFDurRCu.js";import{c as y}from"./GeographicTransformation-Ccb709r9.js";import{c as i,f as d,I as x,R as h,T as O,D as J,j as N,u as B,s as P}from"./dataUtils-CfR0oe2x.js";import{h as b,j as g,_ as v,p as k}from"./RasterSymbolizer-BN6RVtx9.js";import{T as w}from"./rasterFunctionHelper-ABMN-R6n.js";import{v as z,s as T}from"./rasterProjectionHelper-DGqzGF1m.js";import{t as D,m as I,n as F}from"./PolynomialTransform-XpKTtnAc.js";var m;let l=m=class extends D{constructor(){super(...arguments),this.type="identity"}clone(){return new m}};f([u({IdentityXform:"identity"})],l.prototype,"type",void 0),l=m=f([p("esri.layers.support.rasterTransforms.IdentityTransform")],l);const j={GCSShiftXform:F,IdentityXform:l,PolynomialXform:I};function E(a){if(!a?.type)return null;const e=j[a?.type];if(e){const r=new e;return r.read(a),r}return null}class G{convertVectorFieldData(e){const r=i.fromJSON(e.pixelBlock),s=d(r,e.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(e){const r=i.fromJSON(e.pixelBlock),s=b(r);return Promise.resolve(s)}async decode(e){const r=await g(e.data,e.options);return r&&r.toJSON()}symbolize(e){e.pixelBlock=i.fromJSON(e.pixelBlock),e.extent=e.extent?n.fromJSON(e.extent):null;const r=this.symbolizer.symbolize(e);return Promise.resolve(r!=null?r.toJSON():null)}async updateSymbolizer(e){this.symbolizer=v.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=w(e.rasterFunctionJSON)}async process(e){const r=this.rasterFunction.process({extent:n.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(s=>s!=null?i.fromJSON(s):null),primaryPixelSizes:e.primaryPixelSizes?.map(s=>s!=null?S.fromJSON(s):null),primaryRasterIds:e.primaryRasterIds});return r!=null?r.toJSON():null}stretch(e){const r=this.symbolizer.simpleStretch(i.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r?.toJSON())}estimateStatisticsHistograms(e){const r=k(i.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const r=x(i.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel??0,e.useBilinear===!1);return r&&r.forEach((s,o)=>{r.set(o,s?.toJSON())}),Promise.resolve(r)}clipTile(e){const r=i.fromJSON(e.pixelBlock),s=h({...e,pixelBlock:r});return Promise.resolve(s?.toJSON())}async mosaicAndTransform(e){const r=e.srcPixelBlocks.map(c=>c?new i(c):null),s=O(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let o,t=s;return e.coefs&&(t=J(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(o=N(e.destDimension,e.gcsGrid),t=B(t,e.isUV?"vector-uv":"vector-magdir",o)),{pixelBlock:t?.toJSON(),localNorthDirections:o}}async createFlowMesh(e,r){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:o,indexData:t}=await P(e.meshType,e.simulationSettings,s,r.signal);return{result:{vertexBuffer:o.buffer,indexBuffer:t.buffer},transferList:[o.buffer,t.buffer]}}async getProjectionOffsetGrid(e){const r=n.fromJSON(e.projectedExtent),s=n.fromJSON(e.srcBufferExtent);let o=null;e.datumTransformationSteps?.length&&(o=new y({steps:e.datumTransformationSteps})),await z();const t=e.rasterTransform?E(e.rasterTransform):null;return T({...e,projectedExtent:r,srcBufferExtent:s,datumTransformation:o,rasterTransform:t})}}export{G as default};
