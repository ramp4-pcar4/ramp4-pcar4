import{f_ as X,ac as Y,e1 as c,f$ as $,fV as B,am as J,c2 as V,g0 as H,bv as L,el as j,bh as K,dt as F,du as q,N as U,ab as p,v as b,x,g1 as Q,z as Z}from"./main-BFDurRCu.js";import ee from"./GraphicsLayer-BiEC2-gS.js";import{p as W,h as te}from"./videoUtils-yR40DhDQ.js";import{S as ie}from"./cimSymbolUtils-DCedSSCN.js";import{u as se}from"./OverlayContainer-Dk-Hr_7e.js";import{n as re}from"./vec2f64-CkowXrDb.js";import{O as S}from"./projectionUtils-B-CplN3q.js";import{e as oe}from"./Container-Dr2EdOEZ.js";import{n as ae,S as ne}from"./LayerView2D-BaefGYf9.js";import{P as le}from"./enums-wEDHPbCF.js";import{a as he,S as me}from"./Texture-D5XWO2GQ.js";import{t as ye}from"./GraphicContainer-c1LxUVI-.js";import{O as ce}from"./GraphicsView2D-D4hKcKkn.js";import{u as pe}from"./LayerView-DdANuT-Y.js";const T=2;class ue extends oe{constructor(e){super(),this.element=e,this._handles=new X,this.isWrapAround=!1,this.perspectiveTransform=re(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(Y(()=>this.element,()=>{const t=this.element;this.ready(),t&&this._handles.add($(t,"play",()=>this.requestRender()))},c))}getMesh(e){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=B(this.texture)}get textureSize(){if(!this.texture)return[1,1];const e=this.texture.descriptor;return[e.width,e.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(e){const t=this.element;if(t==null)return;const{context:l}=e,{videoWidth:a,videoHeight:s}=t;if(a!==0&&s!==0){if(this.texture)t.paused||this.texture.setData(t);else{const i=new he;i.wrapMode=le.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=s,this.texture=new me(l,i,t)}t.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(e)}}_createTransforms(){return null}updateDrawCoords(e,t,l,a){const s=this.element,i=this._getFrameInfo();if(!s||!i)return;const{spatialReference:n}=l;this._initializeData(e,i,n);const{controlPoints:h,horizon:m}=i,y=Math.sqrt(h.length),o=y,{x:u,y:_}=e,v=this._vertices,O=h[0],k=h[y-1],I=h[(o-1)*y],N=h[(o-1)*y+y-1],G=S(m?m[0].mapPoint:O.mapPoint,n),P=S(m?m[1].mapPoint:k.mapPoint,n),g=S(I.mapPoint,n),A=S(N.mapPoint,n);this.clipGeometry=m?new ae({geometry:J.fromJSON({rings:[[[g.x,g.y],[A.x,A.y],[P.x,P.y],[G.x,G.y],[g.x,g.y]]],spatialReference:n})}):null;for(let d=0;d<h.length;d++){const E=h[d],{sourcePoint:M,mapPoint:z}=E;if(M==null||z==null)continue;const w=S(z,n);v[d*T+0]=w.x-u,v[d*T+1]=w.y-_}let D=t;if(a){const d=Math.min(G.x,P.x,g.x,A.x),E=Math.max(G.x,P.x,g.x,A.x),{worldWidth:M,xBounds:z}=a,[w,R]=z;d<w&&E>w?D=M:E>R&&d<R&&(D=-M)}this.wrapAroundShift=D,this.isWrapAround=D!==0}draw(e,t){if(this.visible){if(!(this.isReady&&this._vertices&&this._indices&&this._texCoords))return void this.requestRender();this.stage||console.warn("OverlayMultipoint: stage is null"),t.render(e,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices})}}_initializeData(e,t,l){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=t,s=Math.sqrt(a.length),i=s,n=new Float32Array(T*a.length),h=new Uint16Array(2*a.length);for(let o=0;o<a.length;o++){const u=a[o],{sourcePoint:_,mapPoint:v}=u;if(_==null||v==null)continue;const O=S(v,l);n[o*T+0]=O.x-e.x,n[o*T+1]=O.y-e.y,h[2*o+0]=_.x,h[2*o+1]=_.y}const m=new Uint16Array(i*s+(i-2)*(s+2));let y=0;for(let o=0;o<i;o++){for(let u=0;u<s;u++)m[y++]=o*s+u,m[y++]=(o+1)*s+u;o<i-2&&(m[y++]=(o+1)*s+(s-1),m[y++]=(o+1)*s)}this._vertices=n,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const e=this._getFrameControlPoints(),t=this.frameHorizonPoints;let l=null;if(t){const a=t.startX,s=t.startY,i=t.endX,n=t.endY;l=[{sourcePoint:H(a,s),mapPoint:new V(t.startLongitude,t.startLatitude)},{sourcePoint:H(i,n),mapPoint:new V(t.endLongitude,t.endLatitude)}]}return{controlPoints:e,horizon:l}}_getFrameControlPoints(){const e=this.groundControlPoints,t=e?.length;if(!t)return[];const l=new Array(t),a=Math.max(...e.map(({x:i})=>i)),s=this.element.videoWidth/a;for(let i=0;i<t;i++){const{x:n,y:h,lat:m,lon:y}=e[i];l[i]={sourcePoint:H(n*s,-h*s),mapPoint:new V(y,m)}}return l}}const C=new K([255,127,0]),de=10005,fe=10018;let f=class extends ne(pe){constructor(){super(...arguments),this._graphicsLayer=new ee,this._frameOutlineGraphic=new L({symbol:new j({outline:{type:"simple-line",color:C}})}),this._frameCenterGraphic=new L({symbol:new F({color:C,style:"cross"})}),this._sensorTrailGraphic=new L({symbol:new q({color:C})}),this._sensorSightlineGraphic=new L({symbol:new q({color:C})}),this._sensorLocationGraphic=new L({symbol:new F({color:C})}),this._overlayContainer=null,this._sensorLocationSymbolType=null,this.layer=null,this.sensorLocationSymbol=null,this.symbolAngle=0,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){this._sensorLocationSymbolType=this.layer?.sensorSymbol.type,this._graphicsLayer.graphics.addMany([this._frameCenterGraphic,this._frameOutlineGraphic,this._sensorLocationGraphic,this._sensorSightlineGraphic,this._sensorTrailGraphic]),this.visibleTelemetryElements=new W({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new se,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new ce({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new ye(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([p(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),c),p(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),c),p(()=>this.layer.metadata,()=>this._updateSensorLocationSymbolAngle(),c),p(()=>this.layer?.frameCenterSymbol,()=>this._updateFrameCenterSymbol(),c),p(()=>this.layer?.frameOutlineSymbol,()=>this._updateFrameOutlineSymbol(),c),p(()=>this.layer?.sensorSightLineSymbol,()=>this._updateSensorSightlineSymbol(),c),p(()=>this.layer?.sensorSymbol,()=>this._updateSensorLocationSymbol(),c),p(()=>this.layer?.sensorTrailSymbol,()=>this._updateSensorTrailSymbol(),c),p(()=>this.symbolAngle,()=>this._updateSensorLocationSymbol(),c)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(r){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(r){this.graphicsView.processUpdate(r)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:r}=this.layer,{visibleTelemetryElements:e}=this;r&&e&&(e.frameOutline&&r.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,e.sensorTrail&&r.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,e.lineOfSight&&r.lineOfSight?this._sensorSightlineGraphic.geometry=this.layer.telemetry.lineOfSight:this._sensorSightlineGraphic.geometry=null,e.sensorLocation&&r.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,e.frameCenter&&r.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}_updateSensorLocationSymbolAngle(){if(!this.layer?.metadata?.size)return;const{source:r,symbolOffset:e=0}=this.layer.sensorSymbolOrientation||{};if(!r&&!e)return;const t=this.layer?.metadata?.get(de)?.value??0,l=this.layer?.metadata?.get(fe)?.value??0,a=te({cameraAzimuth:l,platformHeading:t,source:this.layer.sensorSymbolOrientation?.source,symbolOffset:this.layer.sensorSymbolOrientation?.symbolOffset??0});this.symbolAngle=Math.round(Math.abs(a))}_updateSensorLocationSymbol(){switch(this._sensorLocationSymbolType){case"simple-marker":this.sensorLocationSymbol=this.layer.sensorSymbol.clone(),this.sensorLocationSymbol.angle=this.symbolAngle,this._sensorLocationGraphic.symbol=this.sensorLocationSymbol.clone();break;case"picture-marker":this.sensorLocationSymbol=this.layer.sensorSymbol,this.sensorLocationSymbol.angle=this.symbolAngle,this._sensorLocationGraphic.symbol=this.sensorLocationSymbol;break;case"cim":this.sensorLocationSymbol=this.layer.sensorSymbol,ie(this.sensorLocationSymbol,this.symbolAngle,!0),this._sensorLocationGraphic.symbol=this.sensorLocationSymbol}}_updateFrameCenterSymbol(){this.layer?.frameCenterSymbol&&(this._frameCenterGraphic.symbol=this.layer.frameCenterSymbol.clone())}_updateFrameOutlineSymbol(){this.layer?.frameOutlineSymbol&&(this._frameOutlineGraphic.symbol=this.layer.frameOutlineSymbol.clone())}_updateSensorSightlineSymbol(){this.layer?.sensorSightLineSymbol&&(this._sensorSightlineGraphic.symbol=this.layer.sensorSightLineSymbol.clone())}_updateSensorTrailSymbol(){this.layer?.sensorTrailSymbol&&(this._sensorTrailGraphic.symbol=this.layer.sensorTrailSymbol.clone())}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const r=new ue(this.layer.videoElement);this.addAttachHandles([p(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints,this.layer.frameOpacity,this.layer.telemetryDisplay?.frame],()=>{const{visibleTelemetryElements:e}=this;r.frameHorizonPoints=this.layer.frameHorizonPoints,r.groundControlPoints=this.layer.groundControlPoints,r.opacity=this.layer.frameOpacity,r.visible=e?.frame??!1},c)]),this._overlayContainer.addChild(r),this.view.stage.requestRender()}};b([x()],f.prototype,"graphicsView",void 0),b([x()],f.prototype,"layer",void 0),b([x({types:Q})],f.prototype,"sensorLocationSymbol",void 0),b([x()],f.prototype,"symbolAngle",void 0),b([x({type:W})],f.prototype,"visibleTelemetryElements",void 0),f=b([Z("esri.views.2d.layers.VideoLayerView2D")],f);const ge=f;export{ge as default};
