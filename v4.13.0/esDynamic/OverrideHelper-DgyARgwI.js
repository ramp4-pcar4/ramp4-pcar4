import{h as v,bh as b}from"./main-BFDurRCu.js";import{i as M}from"./colorUtils-Eg6lOlXm.js";import{Z as C}from"./FieldsIndex-Bt0Y8aWr.js";import{h as I}from"./ArcadeExpression-XjY3x7KV.js";import{H as x,Y as d,X as O,F as k,a as h,s as S,O as N}from"./utils-BfXZnjCE.js";import P from"./callExpressionWithFeature-Bk8k1lJI.js";const T=m=>{if(!m)return[0,0,0,0];const{r:e,g:r,b:i,a:s}=m;return[e,r,i,255*s]};class t{static findApplicableOverrides(e,r,i){if(e&&r){if(e.primitiveName){let s=!1;for(const a of i)if(a.primitiveName===e.primitiveName){s=!0;break}if(!s)for(const a of r)a.primitiveName===e.primitiveName&&i.push(a)}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const s of e.effects)t.findApplicableOverrides(s,r,i);if(e.symbolLayers)for(const s of e.symbolLayers)t.findApplicableOverrides(s,r,i);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":case"CIMSolidFill":case"CIMPictureFill":case"CIMHatchFill":case"CIMGradientFill":case"CIMVectorMarker":case"CIMCharacterMarker":case"CIMPictureMarker":if(e.effects)for(const s of e.effects)t.findApplicableOverrides(s,r,i);if(e.markerPlacement&&t.findApplicableOverrides(e.markerPlacement,r,i),e.type==="CIMVectorMarker"){if(e.markerGraphics)for(const s of e.markerGraphics)t.findApplicableOverrides(s,r,i),t.findApplicableOverrides(s.symbol,r,i)}else e.type==="CIMCharacterMarker"?t.findApplicableOverrides(e.symbol,r,i):e.type==="CIMHatchFill"?t.findApplicableOverrides(e.lineSymbol,r,i):e.type==="CIMPictureMarker"&&t.findApplicableOverrides(e.animatedSymbolProperties,r,i)}}}static findEffectOverrides(e,r){if(!e)return null;if(e.type==="CIMGeometricEffectDashes"&&x(e),!r||!e.primitiveName)return{type:"cim-effect-param",effect:e,overrides:[]};const i=d(e),s=e.primitiveName,a=[];for(const o of r)o.primitiveName===s&&a.push(d(o));return{type:"cim-effect-param",effect:i,overrides:O(a)}}static async resolveSymbolOverrides(e,r,i,s,a,o,c){if(!e?.symbol)return null;let{symbol:l,primitiveOverrides:n}=e;const f=!!n;if(!f&&!s)return l;l=v(l),n=v(n);let y=!0;if(r||(r={attributes:{}},y=!1),f){if(y||(n=n.filter(p=>!p.valueExpressionInfo?.expression.includes("$feature"))),c||(n=n.filter(p=>!p.valueExpressionInfo?.expression.includes("$view"))),n.length>0){const p=k(r.attributes),u={spatialReference:i,fields:p,geometryType:a};await t.createRenderExpressions(n,u),t.evaluateOverrides(n,r,a??"esriGeometryPoint",o,c,new C(p))}t.applyOverrides(l,n)}return s&&t.applyDictionaryTextOverrides(l,r,s,null),l}static{this._expressionToRenderExpression=new Map}static async createRenderExpressions(e,r){const i=[];for(const s of e){const a=s.valueExpressionInfo;if(!a||t._expressionToRenderExpression.has(a.expression))continue;const o=I(a.expression,r.spatialReference);i.push(o),o.then(c=>t._expressionToRenderExpression.set(a.expression,c))}i.length>0&&await Promise.all(i)}static evaluateOverrides(e,r,i,s,a,o){const c={$view:{scale:a?.scale}};for(const l of e){l.value&&typeof l.value=="object"&&M(l.value)&&(l.propertyName==="Color"||l.propertyName==="StrokeColor")&&(l.value=T(l.value));const n=l.valueExpressionInfo;if(!n)continue;const f=t._expressionToRenderExpression.get(n.expression);f&&(l.value=P(f,r,c,i,o,s))}}static applyDictionaryTextOverrides(e,r,i,s,a="Normal"){if(e?.type)switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":case"CIMTextSymbol":{const o=e.symbolLayers;if(!o)return;for(const c of o)c&&c.type==="CIMVectorMarker"&&t.applyDictionaryTextOverrides(c,r,i,s,e.type==="CIMTextSymbol"?e.textCase:a)}break;case"CIMVectorMarker":{const o=e.markerGraphics;if(!o)return;for(const c of o)c&&t.applyDictionaryTextOverrides(c,r,i,s)}break;case"CIMMarkerGraphic":{const o=e.textString;if(o&&o.includes("[")){const c=h(o,i);e.textString=S(r,c,s,a)}}}}static applyOverrides(e,r,i,s){if(e.primitiveName){for(const a of r)if(a.primitiveName===e.primitiveName){const o=N(a.propertyName);if(s&&s.push({cim:e,nocapPropertyName:o,value:e[o]}),i){let c=!1;for(const l of i)l.primitiveName===e.primitiveName&&(c=!0);c||i.push(a)}a.value!=null&&(e[o]=a.value)}}switch(e.type){case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":if(e.effects)for(const a of e.effects)t.applyOverrides(a,r,i,s);if(e.symbolLayers)for(const a of e.symbolLayers)t.applyOverrides(a,r,i,s);break;case"CIMTextSymbol":break;case"CIMSolidStroke":case"CIMSolidFill":case"CIMVectorMarker":if(e.effects)for(const a of e.effects)t.applyOverrides(a,r,i,s);if(e.type==="CIMVectorMarker"&&e.markerGraphics)for(const a of e.markerGraphics)t.applyOverrides(a,r,i,s),t.applyOverrides(a.symbol,r,i,s)}}static restoreOverrides(e){for(const r of e)r.cim[r.nocapPropertyName]=r.value}static buildOverrideKey(e){let r="";for(const i of e)i.value!==void 0&&(r+=`${i.primitiveName}${i.propertyName}${JSON.stringify(i.value)}`);return r}static toValue(e,r){if(e==="DashTemplate")return r.split(" ").map(i=>Number(i));if(e==="Color"){const i=new b(r).toRgba();return i[3]*=255,i}return r}}export{t as OverrideHelper};
