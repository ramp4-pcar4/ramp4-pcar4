import{s as v,cq as m,cr as L,cs as I}from"./main-CnDVnExo.js";import{s as M}from"./associatedFeatureServiceUtils-BgKBP8pb.js";import{l as g}from"./fetchService-BzXPL_sv.js";import{s as y,c as f,l as T,n as C,i as G,y as P,e as b}from"./loadUtils-Com9uOWx.js";import{a as V}from"./lazyLayerLoader-l0dXrMnD.js";import N from"./PortalItem-DT83duN4.js";import{s as p}from"./portalItemUtils-ftIZhwiO.js";async function j(e){let{portalItem:a}=e;!a||a instanceof N||(a=new N(a));const r=await F(a);return new r.constructor({portalItem:a,...r.properties})}async function F(e){await e.load();const a=new b;return K(await S(e,a))}async function S(e,a){switch(e.type){case"3DTiles Service":return e.typeKeywords.includes("3DObject")?q():R();case"CSV":return E();case"Feature Collection":return J(e);case"Feature Service":return D(e,a);case"Feed":return Z();case"GeoJson":return A();case"Group Layer":return _();case"Image Service":return k(e,a);case"KML":return H();case"Knowledge Graph Layer":return z();case"Map Service":return W(e,a);case"Media Layer":return ee();case"Scene Service":return O(e,a);case"Stream Service":return x();case"Video Service":return $(e,a);case"Vector Tile Service":return U();case"WCS":return B();case"WFS":return Q();case"WMS":return X();case"WMTS":return Y();default:throw new v("portal:unknown-item-type","Unknown item type '${type}'",{type:e.type})}}async function K(e){const a=e.className,r=V[a];return{constructor:await r(),properties:e.properties}}async function W(e,a){return await ae(e,a)?{className:"TileLayer"}:{className:"MapImageLayer"}}async function D(e,a){const r=await d(e,a);if(typeof r=="object"){const{sourceJSON:t,className:c}=r,n={sourceJSON:t};return r.id!=null&&(n.layerId=r.id),{className:c||"FeatureLayer",properties:n}}return{className:"GroupLayer"}}async function O(e,a){const r=await d(e,a,async()=>{try{if(!e.url)return[];const{serverUrl:t}=await M(e.url,{sceneLayerItem:e});return(await a.fetchServiceMetadata(t))?.tables??[]}catch{return[]}});if(typeof r=="object"){const t={};let c;if(r.id!=null?(t.layerId=r.id,c=`${e.url}/layers/${r.id}`):c=e.url,e.typeKeywords?.length){for(const s of Object.keys(m))if(e.typeKeywords.includes(s))return{className:m[s]}}const n=await a.fetchServiceMetadata(c,{customParameters:await a.fetchCustomParameters(e,s=>y(s)?.customParameters)});return{className:m[n?.layerType]||"SceneLayer",properties:t}}return r===!1&&(await a.fetchServiceMetadata(e.url))?.layerType==="Voxel"?{className:"VoxelLayer"}:{className:"GroupLayer"}}async function J(e){await e.load();const a=p(e,"Map Notes"),r=p(e,"Markup");if(a||r)return{className:"MapNotesLayer"};if(p(e,"Route Layer"))return{className:"RouteLayer"};const t=await e.fetchData();return f(t)===1?{className:"FeatureLayer"}:{className:"GroupLayer"}}async function k(e,a){await e.load();const r=e.typeKeywords?.map(o=>o.toLowerCase())??[];if(r.includes("elevation 3d layer"))return{className:"ElevationLayer"};if(r.includes("tiled imagery"))return{className:"ImageryTileLayer"};const t=await a.fetchItemData(e),c=t?.layerType;if(c==="ArcGISTiledImageServiceLayer")return{className:"ImageryTileLayer"};if(c==="ArcGISImageServiceLayer")return{className:"ImageryLayer"};const n=await a.fetchServiceMetadata(e.url,{customParameters:await a.fetchCustomParameters(e)}),s=n.cacheType?.toLowerCase(),l=n.capabilities?.toLowerCase().includes("tilesonly"),i=n.tileInfo?.format?.toLowerCase()??"",u=s==null&&["jpg","jpeg","png","png8","png24","png32","mixed"].includes(i);return s==="map"||u||l?{className:"ImageryTileLayer"}:{className:"ImageryLayer"}}function x(){return{className:"StreamLayer"}}async function $(e,a){return typeof await d(e,a)=="object"?{className:"VideoLayer"}:{className:"GroupLayer"}}function U(){return{className:"VectorTileLayer"}}function A(){return{className:"GeoJSONLayer"}}function R(){return{className:"IntegratedMesh3DTilesLayer"}}function q(){return{className:"UnsupportedLayer"}}function E(){return{className:"CSVLayer"}}function H(){return{className:"KMLLayer"}}function z(){return{className:"KnowledgeGraphLayer"}}function B(){return{className:"WCSLayer"}}function Q(){return{className:"WFSLayer"}}function X(){return{className:"WMSLayer"}}function Y(){return{className:"WMTSLayer"}}function Z(){return{className:"StreamLayer"}}function _(){return{className:"GroupLayer"}}function ee(){return{className:"MediaLayer"}}async function ae(e,a){const{tileInfo:r}=await a.fetchServiceMetadata(e.url,{customParameters:await a.fetchCustomParameters(e)});return r}async function d(e,a,r){const{url:t,type:c}=e,n=c==="Feature Service";if(!t)return{};if(/\/\d+$/.test(t)){if(n){const i=await a.fetchServiceMetadata(t,{customParameters:await a.fetchCustomParameters(e,u=>y(u)?.customParameters)});return L(e,I()),{id:i.id,className:g(i.type),sourceJSON:i}}return{}}if(c==="Video Service")return!(((await a.fetchServiceMetadata(t)).layers?.length??0)>1)&&{};await e.load();let s=await a.fetchItemData(e);if(n){const{data:i,preferredHost:u}=await T(s,t,a);L(e,u);const o=w(i);if(typeof o=="object"){const h=C(i,o.id);o.className=G(h?.layerType)}return o}if(c==="Scene Service"&&(s=await P(e,s,a)),f(s)>0)return w(s);const l=await a.fetchServiceMetadata(t);return r&&(l.tables=await r()),w(l)}function w(e){return f(e)===1&&{id:y(e)?.id}}export{j as fromItem,S as selectLayerClassPath};
