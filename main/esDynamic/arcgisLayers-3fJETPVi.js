import{K as L,s as m,ct as v,cu as g,aZ as P,cv as U,cq as S}from"./main-CnDVnExo.js";import{s as O}from"./associatedFeatureServiceUtils-BgKBP8pb.js";import{t as y,l as d,n as T}from"./fetchService-BzXPL_sv.js";import{a as C}from"./lazyLayerLoader-l0dXrMnD.js";const F={FeatureLayer:!0,SceneLayer:!0,VideoLayer:!0};async function N(e){const{properties:s,url:r}=e,t={...s,url:r},l=await J(r,s?.customParameters),{Constructor:a,layerId:c,sourceJSON:u,parsedUrl:p,layers:o,tables:n}=l;if(o.length+n.length===0)return c!=null&&(t.layerId=c),u!=null&&(t.sourceJSON=u),new a(t);const i=new(await import("./GroupLayer-DVhg_2KP.js")).default({title:p.title});return await V(i,l,t),i}function b(e,s){return e?e.find(({id:r})=>r===s):null}function h(e,s,r,t,l){const a={...l,layerId:s};return e!=null&&(a.url=e),r!=null&&(a.sourceJSON=r),"sublayerTitleMode"in t.prototype&&(a.sublayerTitleMode="service-name"),new t(a)}async function V(e,s,r){const t=s.sublayerConstructorProvider;for(const{id:l,serverUrl:a}of s.layers){const c=b(s.sublayerInfos,l),u=h(a,l,c,(c&&t?.(c))??s.Constructor,r);e.add(u)}if(s.tables.length){const l=await w("FeatureLayer");s.tables.forEach(({id:a,serverUrl:c})=>{const u=h(c,a,b(s.tableInfos,a),l,r);e.tables.add(u)})}}async function J(e,s){let r=L(e);if(r==null&&(r=await k(e,s)),r==null)throw new m("arcgis-layers:url-mismatch","The url '${url}' is not a valid arcgis resource",{url:e});const{serverType:t,sublayer:l}=r;let a;const c={FeatureServer:"FeatureLayer",KnowledgeGraphServer:"KnowledgeGraphLayer",StreamServer:"StreamLayer",VectorTileServer:"VectorTileLayer",VideoServer:"VideoLayer"},u=t==="FeatureServer",p=t==="SceneServer",o={parsedUrl:r,Constructor:null,layerId:u||p?l??void 0:void 0,layers:[],tables:[]};switch(t){case"MapServer":if(l!=null){const{type:n}=await y(e,{customParameters:s});switch(a="FeatureLayer",n){case"Catalog Layer":a="CatalogLayer";break;case"Catalog Dynamic Group Layer":throw new m("arcgis-layers:unsupported",`fromUrl() not supported for "${n}" layers`)}}else a=await E(e,s)?"TileLayer":"MapImageLayer";break;case"ImageServer":{const n=await y(e,{customParameters:s}),{tileInfo:i,cacheType:f}=n;a=i?i?.format?.toUpperCase()!=="LERC"||f&&f.toLowerCase()!=="elevation"?"ImageryTileLayer":"ElevationLayer":"ImageryLayer";break}case"SceneServer":{const n=await y(r.url.path,{customParameters:s});if(a="SceneLayer",n){const i=n?.layers;if(n?.layerType==="Voxel")a="VoxelLayer";else if(i?.length){const f=i[0]?.layerType;f!=null&&S[f]!=null&&(a=S[f])}}break}case"3DTilesServer":throw new m("arcgis-layers:unsupported","fromUrl() not supported for 3DTiles layers");case"FeatureServer":if(a="FeatureLayer",l!=null){const n=await y(e,{customParameters:s});o.sourceJSON=n,o.preferredUrl=v(),a=d(n.type)}break;default:a=c[t]}if(F[a]&&l==null){const n=await x(e,t,s);if(u&&(o.preferredUrl=n.preferredUrl,o.sublayerInfos=n.layerInfos,o.tableInfos=n.tableInfos),n.layers.length+n.tables.length!==1)o.layers=n.layers,o.tables=n.tables,u&&n.layerInfos?.length&&(o.sublayerConstructorProvider=await G(n.layerInfos));else if(u||p){const i=n.layerInfos?.[0]??n.tableInfos?.[0];if(o.layerId=n.layers[0]?.id??n.tables[0]?.id,o.sourceJSON=i,u){const f=i?.type;a=d(f)}}}return o.Constructor=await w(a),o}async function k(e,s){const r=await y(e,{customParameters:s});let t=null,l=null;const a=r.type;if(a==="Feature Layer"||a==="Table"?(t="FeatureServer",l=r.id??null):a==="indexedVector"?t="VectorTileServer":r.hasOwnProperty("mapName")?t="MapServer":r.hasOwnProperty("bandCount")&&r.hasOwnProperty("pixelSizeX")?t="ImageServer":r.hasOwnProperty("maxRecordCount")&&r.hasOwnProperty("allowGeometryUpdates")?t="FeatureServer":r.hasOwnProperty("streamUrls")?t="StreamServer":I(r)?(t="SceneServer",l=r.id):r.hasOwnProperty("layers")&&I(r.layers?.[0])&&(t="SceneServer"),!t)return null;const c=l!=null?g(e):null;return{title:c!=null&&r.name||U(e),serverType:t,sublayer:l,url:{path:c!=null?c.serviceUrl:P(e).path}}}function I(e){return e!=null&&e.hasOwnProperty("store")&&e.hasOwnProperty("id")&&typeof e.id=="number"}async function x(e,s,r){let t,l,a,c=!1;switch(s){case"FeatureServer":{const o=await T(e,{customParameters:r});a=v(e,{preferredHost:o.preferredHost}),c=!!o.layersJSON,t=o.layersJSON||o.serviceJSON;break}case"SceneServer":{const o=await M(e,r);t=o.serviceInfo,l=o.tableServerUrl;break}default:t=await y(e,{customParameters:r})}const u=t?.layers,p=t?.tables;return{preferredUrl:a,layers:u?.map(o=>({id:o.id})).reverse()||[],tables:p?.map(o=>({serverUrl:l,id:o.id})).reverse()||[],layerInfos:c?u:[],tableInfos:c?p:[]}}async function M(e,s){const r=await y(e,{customParameters:s});if(!r.layers?.[0])return{serviceInfo:r};try{const{serverUrl:t}=await O(e),l=await y(t,{customParameters:s}).catch(()=>null);return l&&(r.tables=l.tables),{serviceInfo:r,tableServerUrl:t}}catch{return{serviceInfo:r}}}async function w(e){return(0,C[e])()}async function E(e,s){return(await y(e,{customParameters:s})).tileInfo}async function G(e){if(!e.length)return;const s=new Set,r=[];for(const{type:a}of e)s.has(a)||(s.add(a),r.push(w(d(a))));const t=await Promise.all(r),l=new Map;return Array.from(s).forEach((a,c)=>{l.set(a,t[c])}),a=>l.get(a.type)}export{N as fromUrl};
