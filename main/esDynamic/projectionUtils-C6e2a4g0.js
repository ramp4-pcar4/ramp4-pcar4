import{s as o,K as b,O as U}from"./main-CnDVnExo.js";import{m as h}from"./HeightModelInfo-BI9C0K3R.js";import{J as k,O as R,k as I,L as H,K as S}from"./projectionUtils-B4YRVrjd.js";function T(e,t,c){const n=p(e),s=t,g=C(n,s,c);if(n){const a=h.deriveUnitFromSR(n,e.spatialReference).heightUnit;if(!c&&a!==n.heightUnit){const r=new o("layerview:unmatched-height-unit",`The vertical units of the layer must match the horizontal units (${a})`,{horizontalUnit:a});return new o("layerview:unsupported-height-model-info","The vertical coordinate system of the layer is not supported",{heightModelInfo:n,error:r})}}if(!O(e)||g===i.Unsupported)return new o("layerview:unsupported-height-model-info","The vertical coordinate system of the layer is not supported",{heightModelInfo:n});switch(g){case i.Units:{const a=n?.heightUnit||"unknown",r=s?.heightUnit||"unknown",l=new o("layerview:incompatible-height-unit",`The vertical units of the layer (${a}) must match the vertical units of the scene (${r})`,{layerUnit:a,sceneUnit:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:n,sceneHeightModelInfo:s,error:l})}case i.HeightModel:{const a=n?.heightModel||"unknown",r=s?.heightModel||"unknown",l=new o("layerview:incompatible-height-model",`The height model of the layer (${a}) must match the height model of the scene (${r})`,{layerHeightModel:a,sceneHeightModel:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:n,sceneHeightModelInfo:s,error:l})}case i.CRS:{const a=n?.vertCRS||"unknown",r=s?.vertCRS||"unknown",l=new o("layerview:incompatible-vertical-datum",`The vertical datum of the layer (${a}) must match the vertical datum of the scene (${r})`,{layerDatum:a,sceneDatum:r});return new o("layerview:incompatible-height-model-info","The vertical coordinate system of the layer is incompatible with the scene",{layerHeightModelInfo:n,sceneHeightModelInfo:s,error:l})}}return null}function C(e,t,c){if(!f(e)||!f(t))return i.Unsupported;if(e==null||t==null)return i.Ok;if(!c&&e.heightUnit!==t.heightUnit)return i.Units;if(e.heightModel!==t.heightModel)return i.HeightModel;switch(e.heightModel){case"gravity-related-height":return i.Ok;case"ellipsoidal":return e.vertCRS===t.vertCRS?i.Ok:i.CRS;default:return i.Unsupported}}var i;function f(e){return e==null||e.heightModel!=null&&e.heightUnit!=null}function O(e){return"heightModelInfo"in e&&e.heightModelInfo!=null||e.spatialReference!=null||!w(e)}function p(e){if(e.type==="integrated-mesh-3dtiles")return null;const t=e.url?b(e.url):void 0;return!(e.spatialReference?.vcsWkid==null&&t!=null&&t.serverType==="ImageServer")&&m(e)&&e.heightModelInfo?e.heightModelInfo:w(e)?h.deriveUnitFromSR(j,e.spatialReference):null}function m(e){return"heightModelInfo"in e}function y(e){if(e.type==="unknown"||!("capabilities"in e))return!1;switch(e.type){case"catalog":case"catalog-footprint":case"csv":case"feature":case"geojson":case"subtype-group":case"ogc-feature":case"oriented-imagery":case"wfs":case"knowledge-graph-sublayer":return!0;default:return!1}}function w(e){return y(e)?!!(e.capabilities&&e.capabilities.data&&e.capabilities.data.supportsZ):v(e)}function $(e){return e.layers!=null||v(e)||y(e)||m(e)}function v(e){switch(e.type){case"building-scene":case"elevation":case"integrated-mesh":case"integrated-mesh-3dtiles":case"point-cloud":case"scene":case"voxel":return!0;case"base-dynamic":case"base-elevation":case"base-tile":case"bing-maps":case"catalog":case"catalog-footprint":case"catalog-dynamic-group":case"csv":case"dimension":case"geojson":case"feature":case"subtype-group":case"geo-rss":case"graphics":case"group":case"imagery":case"imagery-tile":case"kml":case"knowledge-graph":case"link-chart":case"knowledge-graph-sublayer":case"line-of-sight":case"map-image":case"map-notes":case"media":case"ogc-feature":case"open-street-map":case"oriented-imagery":case"parquet":case"route":case"stream":case"tile":case"unknown":case"unsupported":case"vector-tile":case"video":case"viewshed":case"wcs":case"web-tile":case"wfs":case"wms":case"wmts":case null:return!1}return!1}(function(e){e[e.Ok=0]="Ok",e[e.Units=1]="Units",e[e.HeightModel=2]="HeightModel",e[e.CRS=3]="CRS",e[e.Unsupported=4]="Unsupported"})(i||(i={}));const j=new h({heightModel:"gravity-related-height"});let u,d=null;async function D(e){d||(d=import("./geometryServiceUtils-TatImRPv.js").then(t=>u=t)),await d,U(e)}async function M(e,t,c,n){if(!e)return null;const s=e.spatialReference;return I()||H(s,t)?R(e,t):u?u.projectGeometry(e,t,c,n):(await Promise.race([D(n),S(n)]),M(e,t,c,n))}async function F(e,t){try{return e?.spatialReference?await k(e,t):null}catch{return null}}export{T as a,$ as g,p as l,F as p,M as s};
