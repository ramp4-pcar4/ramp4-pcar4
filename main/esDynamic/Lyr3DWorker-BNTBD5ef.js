import{u}from"./ILyr3DWasmPerSceneView-ChV4bxX0.js";import{fg as m}from"./main-CnDVnExo.js";function d(){return new Promise(s=>import("./lyr3DWorker-BAXzyQVJ.js").then(t=>t.l).then(({default:t})=>{const r=t({locateFile:h,onRuntimeInitialized:()=>s(r)})})).catch(s=>{throw s})}function h(s){return m(`esri/libs/lyr3d/${s}`)}let o,n;async function g(s){await p();const t={status:u.Failed,error:"",jobDescJson:"",data:new Uint8Array(0),missingInputUrls:[]};if(s.inputs.length<1)return{result:t,transferList:[]};const r={ptrs:[],sizes:[]};for(const e of s.inputs){const f=n._malloc(e.byteLength);new Uint8Array(n.HEAPU8.buffer,f,e.byteLength).set(new Uint8Array(e)),r.ptrs.push(f),r.sizes.push(e.byteLength)}const i=n.process(s.jobDescJson,s.id,r,s.isMissingResourceCase);t.status=i.status,t.missingInputUrls=i.missingInputUrls.slice();const l=i.status===u.Succeeded&&i.data,c=t.status===u.MissingInputs&&t.missingInputUrls.length>0;t.jobDescJson=i.jobDescJson.slice(),t.error=i.error.slice(),l?t.data=i.data.slice():c&&(t.originalInputs=s.inputs.slice());for(let e=0;e<r.ptrs.length;++e)n._free(r.ptrs[e]);const a=[];if(l)a.push(t.data.buffer);else if(c)for(const e of s.inputs)a.push(e);return{result:t,transferList:a}}function b(){n&&(n.uninitialize_lyr3d_worker_wasm(),n=null)}function p(){return n?Promise.resolve():(o||(o=d().then(s=>{n=s,n.initialize_lyr3d_worker_wasm(),o=null})),o)}export{b as destroyWasm,p as initialize,g as process};
