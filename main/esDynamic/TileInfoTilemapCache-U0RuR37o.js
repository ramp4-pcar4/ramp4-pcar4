import{a2 as n,s as h,R as r}from"./main-CnDVnExo.js";class c{constructor(t,e=0,i=t.lods[t.lods.length-1].level){this.tileInfo=t,this.minLOD=e,this.maxLOD=i,t.lodAt(e)||(this.minLOD=t.lods[0].level),t.lodAt(i)||(this.maxLOD=t.lods[t.lods.length-1].level)}get effectiveMinLOD(){return this.minLOD??this.tileInfo.lods[0].level}get effectiveMaxLOD(){return this.maxLOD??this.tileInfo.lods[this.tileInfo.lods.length-1].level}getAvailability(t,e,i){const l=this.tileInfo?.lodAt(t);return!l||t<this.minLOD||t>this.maxLOD?"unavailable":l.cols&&l.rows?i>=l.cols[0]&&i<=l.cols[1]&&e>=l.rows[0]&&e<=l.rows[1]?"unknown":"unavailable":"unknown"}async fetchAvailability(t,e,i,l){await n(l);const a=this.getAvailability(t,e,i);if(a==="unavailable")throw new h("tile-map:tile-unavailable","Tile is not available",{level:t,row:e,col:i});return a}async fetchAvailabilityUpsample(t,e,i,l,a){await n(a),l.level=t,l.row=e,l.col=i;const o=this.tileInfo;return o.updateTileInfo(l),this.fetchAvailability(t,e,i,a).catch(s=>{if(r(s))throw s;if(o.upsampleTile(l))return this.fetchAvailabilityUpsample(l.level,l.row,l.col,l,a);throw s})}}export{c as e};
