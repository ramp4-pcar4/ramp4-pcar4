import{i as k,cU as A}from"./main-CnDVnExo.js";const C=()=>k.getLogger("esri.views.3d.support.buffer.math");function D(r,f,t){if(r.count!==f.count)return;const e=r.count,c=t[0],i=t[1],s=t[2],n=t[3],u=t[4],o=t[5],d=t[6],a=t[7],y=t[8],b=t[9],B=t[10],h=t[11],m=t[12],z=t[13],v=t[14],V=t[15],l=r.typedBuffer,j=r.typedBufferStride,p=f.typedBuffer,T=f.typedBufferStride;for(let _=0;_<e;_++){const S=_*j,g=_*T,M=p[g],w=p[g+1],G=p[g+2],O=p[g+3];l[S]=c*M+u*w+y*G+m*O,l[S+1]=i*M+o*w+b*G+z*O,l[S+2]=s*M+d*w+B*G+v*O,l[S+3]=n*M+a*w+h*G+V*O}}function E(r,f,t,e=4,c=e){if(r.length/e!==f.length/c)return void C().error("source and destination buffers need to have the same number of elements");const i=r.length/e,s=t[0],n=t[1],u=t[2],o=t[3],d=t[4],a=t[5],y=t[6],b=t[7],B=t[8],h=t[9],m=t[10],z=t[11],v=t[12],V=t[13],l=t[14],j=t[15];let p=0,T=0;for(let _=0;_<i;_++){const S=f[p],g=f[p+1],M=f[p+2],w=f[p+3];r[T]=s*S+d*g+B*M+v*w,r[T+1]=n*S+a*g+h*M+V*w,r[T+2]=u*S+y*g+m*M+l*w,r[T+3]=o*S+b*g+z*M+j*w,p+=c,T+=e}}function x(r,f,t){R(r.typedBuffer,f.typedBuffer,t,r.typedBufferStride,f.typedBufferStride)}function R(r,f,t,e=4,c=e){if(r.length/e!==f.length/c)return;const i=r.length/e,s=t[0],n=t[1],u=t[2],o=t[3],d=t[4],a=t[5],y=t[6],b=t[7],B=t[8];let h=0,m=0;for(let z=0;z<i;z++){const v=f[h],V=f[h+1],l=f[h+2],j=f[h+3];r[m]=s*v+o*V+y*l,r[m+1]=n*v+d*V+b*l,r[m+2]=u*v+a*V+B*l,r[m+3]=j,h+=c,m+=e}}function L(r,f){const t=Math.min(r.count,f.count),e=r.typedBuffer,c=r.typedBufferStride,i=f.typedBuffer,s=f.typedBufferStride;for(let n=0;n<t;n++){const u=n*c,o=n*s,d=i[o],a=i[o+1],y=i[o+2],b=d*d+a*a+y*y;if(b>0){const B=1/Math.sqrt(b);e[u]=B*d,e[u+1]=B*a,e[u+2]=B*y}}}function $(r,f,t){P(r.typedBuffer,f,t,r.typedBufferStride)}function P(r,f,t,e=4){const c=Math.min(r.length/e,f.count),i=f.typedBuffer,s=f.typedBufferStride;let n=0,u=0;for(let o=0;o<c;o++)r[u]=t*i[n],r[u+1]=t*i[n+1],r[u+2]=t*i[n+2],r[u+3]=t*i[n+3],n+=s,u+=e}function U(r,f,t,e){q(r.typedBuffer,f,t,e,r.typedBufferStride)}function q(r,f,t,e,c=4){const i=Math.min(r.length/c,f.count),s=f.typedBuffer,n=f.typedBufferStride;let u=0,o=0;const d=1/A;for(let a=0;a<i;a++)r[o]=e*(t*s[u])**d,r[o+1]=e*(t*s[u+1])**d,r[o+2]=e*(t*s[u+2])**d,r[o+3]=e*t*s[u+3],u+=n,o+=c}Object.freeze(Object.defineProperty({__proto__:null,linearToSRGB:q,linearToSRGBView:U,normalize:L,scale:P,scaleView:$,transformMat3:R,transformMat3View:x,transformMat4:E,transformMat4View:D},Symbol.toStringTag,{value:"Module"}));export{U as c,q as d,x as n,R as o,L as u};
