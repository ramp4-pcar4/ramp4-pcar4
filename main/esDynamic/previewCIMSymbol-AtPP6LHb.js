import{bS as g,bT as m}from"./main-CnDVnExo.js";import{t as S}from"./CIMSymbolHelper-1qtHKtJm.js";import{CIMSymbolRasterizer as j}from"./CIMSymbolRasterizer-DMnP1LGk.js";import{OverrideHelper as T}from"./OverrideHelper-jqCCk2sK.js";import{z as x}from"./utils-BfXZnjCE.js";import{l as q,t as M}from"./symbolUtils-GPZ1zOMO.js";const u=new j(null),d=m(M.size),C=m(M.maxSize),v=m(M.lineWidth),D=1;async function E(o,e,n){const a=e?.size;let t=a!=null&&typeof a=="object"&&"width"in a?a.width:a,l=a!=null&&typeof a=="object"&&"height"in a?a.height:a;if(!t||!l)if(n==="esriGeometryPolygon")t=l=e.maxSize?Math.min(e.maxSize,d):d;else{const s=await I(o,e,n);s&&(t=s.width,l=s.height),n==="esriGeometryPolyline"&&(t=e.maxSize?Math.min(e.maxSize,v):v),t=t!=null&&isFinite(t)?Math.min(t,C):d,l=l!=null&&isFinite(l)?Math.max(Math.min(l,C),D):d}return e.style==="legend"&&n==="esriGeometryPolyline"&&(t=v),{width:t,height:l}}async function I(o,e={},n){const a=e.cimOptions||e;n??=a.geometryType||x(o?.data?.symbol);const{feature:t,fieldMap:l,viewParams:s}=a,r=await T.resolveSymbolOverrides(o.data,t,null,l,n,null,s);if(!r)return null;(o=o.clone()).data={type:"CIMSymbolReference",symbol:r},o.data.primitiveOverrides=void 0;const i=[];return S.fetchResources(r,u.resourceManager,i),S.fetchFonts(r,u.resourceManager,i),i.length>0&&await Promise.all(i),S.getEnvelope(r,null,u.resourceManager)}async function U(o,e={}){const{node:n,opacity:a,symbolConfig:t}=e,l=t!=null&&typeof t=="object"&&"isSquareFill"in t&&t.isSquareFill,s=e.cimOptions||e,r=s.geometryType||x(o?.data?.symbol),i=await E(o,e,r),{feature:G,fieldMap:O}=s,F=e?.geometry||l||r!=="esriGeometryPolygon"?"preview":"legend";let z=i;const P=i;if(e?.geometry&&(r==="esriGeometryPolygon"||r==="esriGeometryPolyline")&&(g(i.width)<200||g(i.height)<200)){const b=i.width>i.height?m(200)*i.height/i.width:m(200);z={width:i.width>i.height?m(200):m(200)*i.width/i.height,height:b}}const f=await u.rasterizeCIMSymbolAsync(o,G,z,F,O,r,null,s.viewParams,s.allowScalingUp,e?.geometry?.toJSON());if(!f)return null;const{width:L,height:R}=f,c=document.createElement("canvas");c.width=L,c.height=R,c.getContext("2d").putImageData(f,0,0);const p=g(P.width),w=g(P.height),h=new Image(p,w);h.src=c.toDataURL(),h.ariaLabel=e.ariaLabel??null,h.alt=e.ariaLabel??"",a!=null&&(h.style.opacity=`${a}`);let y=h;if(e.effectView!=null){const b={shape:{type:"image",x:0,y:0,width:p,height:w,src:h.src},fill:null,stroke:null,offset:[0,0]};y=q([[b]],[p,w],e)}return n&&y&&n.appendChild(y),y}export{I as getCIMSymbolPreviewSize,U as previewCIMSymbol};
