{"version":3,"file":"draw-store-CEU7JfFg.js","sources":["../../src/fixtures/draw/store/draw-store.ts"],"sourcesContent":["import { defineStore } from 'pinia';\nimport type { DrawTypeConfig } from '../api/drawApi';\nimport { reactive, ref } from 'vue';\n\n// DrawTypeConfig is a type that defines the configuration for each draw type\n\nexport type ActiveToolList = 'circle' | 'point' | 'polygon' | 'polyline' | 'rectangle' | 'edit' | null;\n\nexport const useDrawStore = defineStore('draw', () => {\n    const supportedTypes = ref<DrawTypeConfig[]>([]);\n    const activeTool = ref<ActiveToolList>(null);\n    const graphics = reactive<any[]>([]);\n    const selectedGraphicId = ref<string | null>(null);\n\n    function setSupportedTypes(types: DrawTypeConfig[]) {\n        supportedTypes.value.splice(0, supportedTypes.value.length, ...types);\n    }\n\n    function setActiveTool(tool: ActiveToolList) {\n        activeTool.value = tool;\n    }\n\n    function addGraphic(graphic: any) {\n        const id = `graphic-${Date.now()}`;\n        graphics.push({\n            id,\n            ...graphic\n        });\n        return id;\n    }\n\n    function removeGraphic(id: string) {\n        const index = graphics.findIndex(g => g.id === id);\n        if (index !== -1) {\n            graphics.splice(index, 1);\n\n            // Clear selection if the removed graphic was selected\n            if (selectedGraphicId.value === id) {\n                selectedGraphicId.value = null;\n            }\n        }\n    }\n\n    function selectGraphic(id: string) {\n        selectedGraphicId.value = id;\n    }\n\n    function clearSelection() {\n        selectedGraphicId.value = null;\n    }\n\n    function getSelectedGraphic() {\n        if (!selectedGraphicId.value) return null;\n        return graphics.find(g => g.id === selectedGraphicId.value);\n    }\n\n    function updateGraphicGeometry(id: string, geometry: any) {\n        const graphic = graphics.find(g => g.id === id);\n        if (graphic) {\n            graphic.geometry = geometry;\n        }\n    }\n\n    return {\n        supportedTypes,\n        activeTool,\n        graphics,\n        selectedGraphicId,\n        setSupportedTypes,\n        setActiveTool,\n        addGraphic,\n        removeGraphic,\n        selectGraphic,\n        clearSelection,\n        getSelectedGraphic,\n        updateGraphicGeometry\n    };\n});\n"],"names":["useDrawStore","defineStore","supportedTypes","ref","activeTool","graphics","reactive","selectedGraphicId","setSupportedTypes","types","setActiveTool","tool","addGraphic","graphic","id","removeGraphic","index","g","selectGraphic","clearSelection","getSelectedGraphic","updateGraphicGeometry","geometry"],"mappings":";AAQO,MAAMA,IAAeC,EAAY,QAAQ,MAAM;AAClD,QAAMC,IAAiBC,EAAsB,EAAE,GACzCC,IAAaD,EAAoB,IAAI,GACrCE,IAAWC,EAAgB,EAAE,GAC7BC,IAAoBJ,EAAmB,IAAI;AAEjD,WAASK,EAAkBC,GAAyB;AAChD,IAAAP,EAAe,MAAM,OAAO,GAAGA,EAAe,MAAM,QAAQ,GAAGO,CAAK;AAAA,EACxE;AAEA,WAASC,EAAcC,GAAsB;AACzC,IAAAP,EAAW,QAAQO;AAAA,EACvB;AAEA,WAASC,EAAWC,GAAc;AAC9B,UAAMC,IAAK,WAAW,KAAK,IAAA,CAAK;AAChC,WAAAT,EAAS,KAAK;AAAA,MACV,IAAAS;AAAA,MACA,GAAGD;AAAA,IAAA,CACN,GACMC;AAAA,EACX;AAEA,WAASC,EAAcD,GAAY;AAC/B,UAAME,IAAQX,EAAS,UAAU,CAAAY,MAAKA,EAAE,OAAOH,CAAE;AACjD,IAAIE,MAAU,OACVX,EAAS,OAAOW,GAAO,CAAC,GAGpBT,EAAkB,UAAUO,MAC5BP,EAAkB,QAAQ;AAAA,EAGtC;AAEA,WAASW,EAAcJ,GAAY;AAC/B,IAAAP,EAAkB,QAAQO;AAAA,EAC9B;AAEA,WAASK,IAAiB;AACtB,IAAAZ,EAAkB,QAAQ;AAAA,EAC9B;AAEA,WAASa,IAAqB;AAC1B,WAAKb,EAAkB,QAChBF,EAAS,KAAK,CAAAY,MAAKA,EAAE,OAAOV,EAAkB,KAAK,IADrB;AAAA,EAEzC;AAEA,WAASc,EAAsBP,GAAYQ,GAAe;AACtD,UAAMT,IAAUR,EAAS,KAAK,CAAAY,MAAKA,EAAE,OAAOH,CAAE;AAC9C,IAAID,MACAA,EAAQ,WAAWS;AAAA,EAE3B;AAEA,SAAO;AAAA,IACH,gBAAApB;AAAA,IACA,YAAAE;AAAA,IACA,UAAAC;AAAA,IACA,mBAAAE;AAAA,IACA,mBAAAC;AAAA,IACA,eAAAE;AAAA,IACA,YAAAE;AAAA,IACA,eAAAG;AAAA,IACA,eAAAG;AAAA,IACA,gBAAAC;AAAA,IACA,oBAAAC;AAAA,IACA,uBAAAC;AAAA,EAAA;AAER,CAAC;"}