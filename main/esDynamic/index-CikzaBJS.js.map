{"version":3,"file":"index-CikzaBJS.js","sources":["../../src/fixtures/wizard/api/wizard.ts","../../src/fixtures/wizard/store/layer-source.ts","../../src/fixtures/wizard/lang/lang.csv?raw","../../src/fixtures/wizard/index.ts"],"sourcesContent":["import { FixtureInstance } from '@/api';\n\nexport class WizardAPI extends FixtureInstance {\n    /**\n     * Opens or closes the wizard fixture panel\n     *\n     * @memberof WizardAPI\n     * @param open force panel open or closed\n     */\n    toggleWizard(open?: boolean): void {\n        const panel = this.$iApi.panel.get('wizard');\n        this.$iApi.panel.toggle(panel, open);\n    }\n}\n","import { LayerType } from '@/geo/api';\nimport type { FieldDefinition, RampLayerConfig } from '@/geo/api';\nimport { APIScope, InstanceAPI } from '@/api/internal';\nimport { UrlWrapper } from '@/geo/api';\nimport axios from 'redaxios';\n\nexport interface LayerInfo {\n    config: RampLayerConfig; // the layer's config\n    configOptions: Array<string>; // the layer's config options that will be taken from user input in the UI\n    fields?: Array<FieldDefinition>; // the fields for the layer\n    latLonFields?: { lat: Array<string>; lon: Array<string> }; // lat and lon are a list of field names that can be possible lat/lon fields\n    layers?: Array<SublayerInfo>; // a nested list of info for the parent layer, sublayer groups, and sublayers. Only defined for MIL/WMS\n    layersRaw?: [];\n}\n\nexport interface SublayerInfo {\n    id: number | string;\n    label: string;\n    children: Array<number | string> | undefined;\n}\n\nexport class LayerSource extends APIScope {\n    layerCount = 0;\n    sublayerCount = 0;\n\n    constructor($iApi: InstanceAPI) {\n        super($iApi);\n    }\n\n    /**\n     * Get layer info from a file url or data\n     *\n     * @param {string} url a service url to load, name of file if file data is provided\n     * @param {string} fileType format of the file (layer type)\n     * @param {ArrayBuffer} [fileData] raw file data buffer\n     * @returns {Promise<LayerInfo | undefined>} LayerInfo object\n     */\n    async fetchFileInfo(url: string, fileType: LayerType, fileData?: ArrayBuffer): Promise<LayerInfo | undefined> {\n        if (!fileData) {\n            // if given a url, load data so we can get fields\n            fileData = await this.$iApi.geo.layer.files.fetchFileData(url, fileType);\n        }\n\n        switch (fileType) {\n            case LayerType.GEOJSON:\n                return this.getGeojsonInfo(url, fileData!);\n            case LayerType.SHAPEFILE:\n                return this.getShapfileInfo(url, fileData!);\n            case LayerType.CSV:\n                return this.getCsvInfo(url, fileData!);\n            default:\n                console.error(`Unsupported file type passed to fetchFileInfo - '${fileType}'`);\n        }\n    }\n\n    async getGeojsonInfo(url: string, fileData: ArrayBuffer | object): Promise<LayerInfo> {\n        if (fileData instanceof ArrayBuffer) {\n            fileData = JSON.parse(new TextDecoder('utf-8').decode(new Uint8Array(fileData)));\n        }\n\n        const config = {\n            id: `geojson#${++this.layerCount}`,\n            layerType: LayerType.GEOJSON,\n            url,\n            name: url.substring(url.lastIndexOf('/') + 1),\n            state: { opacity: 1, visibility: true },\n            rawData: fileData\n        };\n\n        return {\n            config,\n            fields: [{ name: 'OBJECTID', type: 'oid' }].concat(\n                this.$iApi.geo.layer.files.extractGeoJsonFields(fileData)\n            ),\n            configOptions: ['name', 'nameField', 'tooltipField', 'colour']\n        };\n    }\n\n    async getCsvInfo(url: string, fileData: ArrayBuffer | string): Promise<LayerInfo> {\n        if (fileData instanceof ArrayBuffer) {\n            fileData = new TextDecoder('utf-8').decode(new Uint8Array(fileData));\n        }\n        const config = {\n            id: `csv#${++this.layerCount}`,\n            layerType: LayerType.CSV,\n            url,\n            name: url.substring(url.lastIndexOf('/') + 1),\n            state: { opacity: 1, visibility: true },\n            rawData: fileData\n        };\n\n        return {\n            config,\n            fields: [{ name: 'OBJECTID', type: 'oid' }].concat(this.$iApi.geo.layer.files.extractCsvFields(fileData)),\n            latLonFields: this.$iApi.geo.layer.files.filterCsvLatLonFields(fileData),\n            configOptions: ['name', 'nameField', 'tooltipField', 'latField', 'longField', 'colour']\n        };\n    }\n\n    async getShapfileInfo(url: string, fileData: ArrayBuffer): Promise<LayerInfo> {\n        const jsonData = await this.$iApi.geo.layer.files.shapefileToGeoJson(fileData);\n\n        return this.getGeojsonInfo(url, jsonData);\n    }\n\n    /**\n     * Get layer info from a service url\n     *\n     * @param {string} url a service url to load\n     * @param {string} serviceType type of layer\n     * @returns {Promise<LayerInfo | undefined>} LayerInfo object\n     */\n    async fetchServiceInfo(url: string, serviceType: string, nested: boolean): Promise<LayerInfo | undefined> {\n        switch (serviceType) {\n            case LayerType.FEATURE:\n                return this.getFeatureInfo(url);\n            case LayerType.MAPIMAGE:\n                return this.getMapImageInfo(url, nested);\n            case LayerType.TILE:\n                return this.getTileInfo(url);\n            case LayerType.IMAGERY:\n                return this.getImageryInfo(url);\n            case LayerType.WFS:\n                return this.getWfsInfo(url);\n            case LayerType.WMS:\n                return this.getWmsInfo(url, nested);\n        }\n    }\n\n    async getFeatureInfo(url: string): Promise<LayerInfo> {\n        const response = await axios.get(url, { params: { f: 'json' } });\n\n        const config = {\n            id: `${LayerType.FEATURE}#${++this.layerCount}`,\n            url: url,\n            layerType: LayerType.FEATURE,\n            name: response.data.name,\n            nameField: response.data.displayField,\n            tooltipField: response.data.displayField,\n            state: { opacity: 1, visibility: true }\n        };\n\n        return {\n            config,\n            fields: response.data.fields,\n            configOptions: ['name', 'nameField', 'tooltipField']\n        };\n    }\n\n    /**\n     * Gets MIL data from source, formats it as a tree, and returns a promise of the data with configuration\n     *\n     * @param {string} url\n     * @returns {Promise<LayerInfo>} data configuration\n     */\n    async getMapImageInfo(url: string, nested: boolean): Promise<LayerInfo> {\n        const response = await axios.get(url, { params: { f: 'json' } });\n        const config = {\n            id: `${LayerType.MAPIMAGE}#${++this.layerCount}`,\n            url: url,\n            layerType: LayerType.MAPIMAGE,\n            name: response.data.mapName,\n            sublayers: [],\n            state: { opacity: 1, visibility: true }\n        };\n\n        return {\n            config,\n            layers: this.createLayerHierarchy(response.data.layers, nested),\n            configOptions: ['name', 'sublayers'],\n            layersRaw: response.data.layers\n        };\n    }\n\n    createLayerHierarchy(layers: any[], nested: boolean) {\n        // avoid case of disordered layers from endpoint\n        layers.sort((l1: any, l2: any) => l1.id - l2.id);\n\n        // traverses the layer tree to insert child layers\n        const findParent = (id: number, sublayers: Array<any>): any => {\n            if (sublayers === undefined) {\n                return false;\n            }\n            let parent;\n            if (sublayers.find(sl => sl.id === id)) {\n                return sublayers.find(sl => sl.id === id);\n            } else {\n                for (const sublayer of sublayers) {\n                    parent = findParent(id, sublayer.children);\n                    if (parent !== false) {\n                        return parent;\n                    }\n                }\n                return false;\n            }\n        };\n\n        const opts: Array<SublayerInfo> = [];\n\n        const parentIds = new Set(\n            layers.filter(layer => layer.subLayerIds && layer.subLayerIds.length > 0).map(layer => layer.id)\n        );\n\n        for (const layer of layers) {\n            if (nested && layer.parentLayerId === -1) {\n                opts.push({\n                    id: layer.id,\n                    label: layer.name,\n                    children: layer.subLayerIds ? [] : undefined\n                });\n            } else if (nested) {\n                const parentLayer = findParent(layer.parentLayerId, opts);\n                parentLayer.children = [\n                    ...parentLayer.children,\n                    {\n                        id: layer.id,\n                        label: layer.name,\n                        children: layer.subLayerIds ? [] : undefined\n                    }\n                ];\n            } else if (!parentIds.has(layer.id)) {\n                opts.push({\n                    id: layer.id,\n                    label: layer.name,\n                    children: undefined\n                });\n            }\n        }\n\n        return opts;\n    }\n\n    async getTileInfo(url: string): Promise<LayerInfo> {\n        const response = await axios.get(url, { params: { f: 'json' } });\n\n        const config = {\n            id: `${LayerType.TILE}#${++this.layerCount}`,\n            url: url,\n            layerType: LayerType.TILE,\n            name: response.data.mapName,\n            state: { opacity: 1, visibility: true }\n        };\n\n        return {\n            config,\n            configOptions: ['name']\n        };\n    }\n\n    async getImageryInfo(url: string): Promise<LayerInfo> {\n        const response = await axios.get(url, { params: { f: 'json' } });\n\n        const config = {\n            id: `${LayerType.IMAGERY}#${++this.layerCount}`,\n            url: url,\n            layerType: LayerType.IMAGERY,\n            name: response.data.name,\n            state: { opacity: 1, visibility: true }\n        };\n\n        return {\n            config,\n            configOptions: ['name']\n        };\n    }\n\n    async getWfsInfo(url: string): Promise<LayerInfo> {\n        // get wfs data here then load as geojson layer so we can get fields\n        const wrapper = new UrlWrapper(url);\n        const { offset, limit } = wrapper.queryMap;\n        const wfsJson = await this.$iApi.geo.layer.ogc.loadWfsData(\n            url,\n            -1,\n            parseInt(offset) || 0,\n            parseInt(limit) || 1000\n        );\n\n        return this.getGeojsonInfo(url.match(/\\/([^/]+)\\/items/)?.[1] || 'Layer', wfsJson);\n    }\n\n    /**\n     * Gets WMS data from source, formats it, and returns a promise of the data with configuration\n     *\n     * @param {string} url\n     * @returns {Promise<LayerInfo>} data configuration\n     */\n    async getWmsInfo(url: string, nested: boolean): Promise<LayerInfo> {\n        const capabilities = await this.$iApi.geo.layer.ogc.parseCapabilities(url);\n\n        const config = {\n            id: `${LayerType.WMS}#${++this.layerCount}`,\n            url: url,\n            layerType: LayerType.WMS,\n            name: url,\n            featureInfoMimeType: capabilities.queryTypes[0],\n            state: { opacity: 1, visibility: true }\n        };\n\n        return {\n            config,\n            layers: this.mapWmsLayerList(capabilities.layers, nested),\n            configOptions: ['name', 'sublayers'],\n            layersRaw: capabilities.layers\n        };\n    }\n\n    mapWmsLayerList(layers: any, nested: boolean) {\n        // filter out items with non-existent id\n        let modLayers: any = [];\n        layers.forEach((layer: any) => {\n            if (layer.name === null && layer.layers) {\n                modLayers = [...modLayers, ...layer.layers];\n            } else {\n                modLayers.push(layer);\n            }\n        });\n\n        if (nested) {\n            return modLayers.flatMap((layer: any) => {\n                return {\n                    id: `${layer.name}#${++this.sublayerCount}`,\n                    label: layer.title,\n                    children: layer.layers.length > 0 ? this.mapWmsLayerList(layer.layers, nested) : undefined\n                };\n            });\n        } else {\n            return modLayers.flatMap((layer: any) =>\n                layer.layers && layer.layers.length > 0\n                    ? this.mapWmsLayerList(layer.layers, nested)\n                    : {\n                          id: `${layer.name}#${++this.sublayerCount}`,\n                          label: layer.title\n                      }\n            );\n        }\n    }\n\n    /**\n     * Guesses type of file or service given a URL\n     *\n     * @param {string} url\n     * @returns {string} file or layer type\n     */\n    guessFormatFromURL(url: string): string {\n        // check if file url\n        switch (url.match(/\\.(zip|csv|geojson|json)$/)?.[1]) {\n            case 'zip':\n                return LayerType.SHAPEFILE;\n            case 'csv':\n                return LayerType.CSV;\n            case 'geojson':\n            case 'json':\n                return LayerType.GEOJSON;\n        }\n\n        // probably an image layer if ends with ImageServer\n        if (url.match(/\\/ImageServer\\/?$/gi)) {\n            return LayerType.IMAGERY;\n        }\n\n        // probably a wfs layer if contains /collections/\n        if (url.match(/\\/collections\\//gi)) {\n            return LayerType.WFS;\n        }\n\n        // probably esri layer if contains /arcgis/rest/services/\n        if (url.match(/arcgis\\/rest\\/services\\//gi)) {\n            // probably a feature layer if ends with a number\n            if (url.match(/\\/\\d+\\/?$/g)) {\n                return LayerType.FEATURE;\n            }\n\n            return LayerType.MAPIMAGE;\n        }\n\n        // probably wms layer if contains service= or verison= or /wms\n        if (url.match(/service=|version=|\\/wms/gi)) {\n            return LayerType.WMS;\n        }\n\n        return '';\n    }\n}\n","export default \"key,enValue,enValid,frValue,frValid\\nwizard.title,Import Layer,1,Importer un fichier,1\\nwizard.upload.title,Upload data,1,Charger des données,1\\nwizard.upload.or,or,1,ou,1\\nwizard.upload.file.label,Upload a file,1,Télécharger un fichier,1\\nwizard.upload.file.help,Drop or select a file to upload,1,Déposer ou sélectionner un fichier à télécharger,1\\nwizard.upload.file.error.failed,File upload failed,1,Le téléchargement du fichier a échoué,1\\nwizard.upload.url.label,URL to file or service,1,URL vers fichier ou service,1\\nwizard.upload.url.error.required,URL is required,1,L'URL est requise,1\\nwizard.upload.url.error.url,Please enter a valid URL,1,Veuillez saisir une adresse URL valide,1\\nwizard.format.title,Select format,1,Choisir un format,1\\nwizard.format.type.service,Service type,1,Type de service,1\\nwizard.format.type.file,File format,1,Format du fichier,1\\nwizard.format.type.error.required,Service or file type is required,1,Le service ou le type de fichier est requis,1\\nwizard.format.type.error.invalid,Invalid file or service type,1,Type de fichier ou de service non valide,1\\nwizard.format.type.error.failure,Failed to load data from file/service,1,Échec du chargement des données à partir du fichier/service,1\\nwizard.format.info.cors,Service needs to be CORS enabled,1,Le service doit être compatible CORS.,1\\nwizard.format.warn.cors,Service may not support CORS,1,Le service ne pend peut-être pas en charge CORS.,1\\nwizard.format.warn.vpn,Service may require a VPN connection,1,Le service peut nécessiter une connexion RPV,1\\nwizard.fileType.csv,CSV,1,CSV,1\\nwizard.fileType.shapefile,zipped Shapefile,1,Shapefile zippé,1\\nwizard.fileType.geojson,GeoJSON,1,GeoJSON,1\\nwizard.layerType.esriFeature,ESRI Feature Layer,1,Couche d'éléments d'ESRI,1\\nwizard.layerType.esriMapImage,ESRI Map Image Layer,1,Couche d'image de la carte ESRI,1\\nwizard.layerType.esriImagery,ESRI Imagery Layer,1,Couche d'imagerie d'ESRI,1\\nwizard.layerType.esriTile,ESRI Tile Layer,1,Couche de tuiles d'ESRI,1\\nwizard.layerType.ogcWms,OGC Web Map Service,1,Couche WMS de l'OGC,1\\nwizard.layerType.ogcWfs,OGC Web Feature Service,1,Service d'entités Web OGC,1\\nwizard.configure.title,Configure layer,1,Configurer la couche,1\\nwizard.configure.name.error.required,Name is required,1,Le champ Nom est obligatoire,1\\nwizard.configure.name.label,Layer Name,1,Nom de la couche,1\\nwizard.configure.nameField.label,Primary Field,1,Champ clé,1\\nwizard.configure.tooltipField.label,Tooltip Field,1,Champ infobulle,1\\nwizard.configure.latField.label,Latitude Field,1,Champ latitude,1\\nwizard.configure.longField.label,Longitude Field,1,Champ longitude,1\\nwizard.configure.sublayers.error.required,Sublayers are required,1,Des sous-couches sont requises,1\\nwizard.configure.sublayers.label,Layers,1,Couches,1\\nwizard.configure.sublayers.results,No results,1,Aucun résultat,1\\nwizard.configure.sublayers.search,Search layers,1,Rechercher des couches,1\\nwizard.configure.sublayers.select,Select layer(s),1,Sélectionner les couches,1\\nwizard.configure.sublayers.clearAll,Clear all,1,Effacer tout,1\\nwizard.configure.sublayers.nested,Nested,1,Imbriquées,1\\nwizard.configure.colour.label,Colour,1,Couleur,1\\nwizard.configure.colour.hue,Hue,1,Teinte,1\\nwizard.configure.colour.copy,Copy colour,1,Copier la couleur,1\\nwizard.configure.colour.hex,Hex,1,Hex,1\\nwizard.step.cancel,Cancel,1,Annuler,1\\nwizard.step.continue,Continue,1,Continuer,1\\nwizard.upload.success,has been uploaded successfully.,1,a été téléversé avec succès.,1\\nwizard.upload.fail,failed to upload.,1,n'a pas pu être téléversé.,1\"","import { markRaw } from 'vue';\nimport { WizardAPI } from './api/wizard';\nimport { LayerSource } from './store/layer-source';\nimport messages from './lang/lang.csv?raw';\nimport { useWizardStore } from './store';\n\nclass WizardFixture extends WizardAPI {\n    added() {\n        // console.log(`[fixture] ${this.id} added`);\n\n        this.$iApi.panel.register(\n            {\n                wizard: {\n                    screens: {\n                        'wizard-screen': () => markRaw(import('./screen.vue'))\n                    },\n                    button: {\n                        tooltip: 'wizard.title',\n                        icon: '<svg class=\"fill-current\" viewBox=\"0 0 23 21\"><path d=\"M19 13h-6v6h-2v-6H5v-2h6V5h2v6h6v2z\"></path></svg>'\n                    },\n                    style: {\n                        width: '350px'\n                    },\n                    alertName: 'wizard.title'\n                }\n            },\n            {\n                i18n: { messages }\n            }\n        );\n\n        this.handlePanelTeleports(['wizard']);\n\n        let layerSource: LayerSource | undefined = new LayerSource(this.$iApi);\n\n        const wizardStore = useWizardStore(this.$vApp.$pinia);\n        //@ts-expect-error TODO: explain why this is needed or remove\n        wizardStore.layerSource = layerSource;\n\n        // override the removed method here to get access to scope\n        this.removed = () => {\n            // console.log(`[fixture] ${this.id} removed`);\n            this.$iApi.panel.remove('wizard');\n            layerSource = undefined; // will be cleaned up by JS garbage collector\n            wizardStore.$reset();\n        };\n    }\n}\n\nexport default WizardFixture;\n"],"names":["WizardAPI","FixtureInstance","open","panel","LayerSource","APIScope","$iApi","url","fileType","fileData","LayerType","jsonData","serviceType","nested","response","axios","layers","l1","l2","findParent","id","sublayers","parent","sl","sublayer","opts","parentIds","layer","parentLayer","wrapper","UrlWrapper","offset","limit","wfsJson","capabilities","modLayers","messages","WizardFixture","markRaw","layerSource","wizardStore","useWizardStore"],"mappings":"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"}