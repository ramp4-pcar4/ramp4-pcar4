import{L as o,b0 as d,u as p,aS as f}from"./main-CnDVnExo.js";import{QueueProcessor as b}from"./QueueProcessor-CdvWemgp.js";function m(a,t,e,s){return new g(a,t,e,s)}class w{constructor(t,e,s){this._executor=t,this._data=e,this._impl=s,this._closed=!1,this._resolver=o(),this._impl.open(this)}assertOpen(){if(this._closed)throw new Error("Batch closed.")}get data(){return this.assertOpen(),this._data}get results(){return this._resolver.promise}send(){try{this.assertOpen(),this._closed=!0,this._executor.resume(this),this._impl.close(this),d(this._resolver,this._impl.execute(this._data))}catch(t){this._resolver.reject(t)}}}class g{constructor(t,e,s,r){if(this._runJob=e,this._maxRunning=s,this._abortSignal=r,this._jobIdSeq=0,this._running=new Set,this._blocked=new Set,this._openBatches=new Map,this._state="ready",this._runResolver=null,s<1)throw new Error(`_maxRunning=${s} but cannot be < 1`);this._todo=t[Symbol.iterator](),this._queue=new b({concurrency:1,process:async i=>{if(i.type==="start"){const{id:n,args:_}=i,h=o(),u=o(),l={id:n,interrupt:h,finished:u.promise};return d(u,this._runJob(_,{id:n,yieldFor:c=>this.yieldFor(l,c)}).then(()=>{this._blocked.has(n)&&this._fail(new Error(`job ${n} completed before resuming`)),this._running.delete(n)||this._fail(new Error(`job ${n} not running?`))})),await Promise.race([h.promise,l.finished]),void this._tryQueue()}if(i.type==="continue")return i.job.interrupt=o(),i.data.status==="fulfilled"?i.continuation.resolve(i.data.value):i.continuation.reject(i.data.reason),await Promise.race([i.job.interrupt.promise,i.job.finished]),void this._tryQueue()}})}openBatch(t,e){return new w(this,t,e)}_fail(t,e=!1){if(this._runResolver?.reject(t),this._state="stopped",!e)throw t}_schedule(t){this._queue.push(t).catch(e=>this._fail(e,!0))}_tryQueue(){if(this._state==="running")if(this._abortSignal?.aborted)this._fail(p(),!0);else{if(this._running.size<this._maxRunning){const t=this._todo.next();if(!t.done){const e=this._jobIdSeq++;return this._running.add(e),void this._schedule({type:"start",id:e,args:t.value})}}if(this._running.size===0)return this._runResolver?.resolve(),this._runResolver=null,void(this._state="stopped");if(this._blocked.size===this._running.size){let t=null,e=-1/0;for(const[s,r]of this._openBatches)r.size>e&&(t=s,e=r.size);return t==null&&this._fail(new Error("deadlock")),void t.send()}}}resume(t){const e=this._openBatches.get(t);if(this._openBatches.delete(t),e!=null)for(const s of e)this._blocked.delete(s)||this._fail(new Error(`job ${s} not suspended`))}async yieldFor(t,e){e.assertOpen(),this._running.has(t.id)||this._fail(new Error(`job ${t.id} not running`)),this._blocked.has(t.id)&&this._fail(new Error(`job ${t.id} already suspended`)),this._blocked.add(t.id),f(this._openBatches,e,()=>new Set).add(t.id),t.interrupt==null&&this._fail(new Error(`job ${t.id} hasn't resumed yet`)),t.interrupt.resolve(),t.interrupt=null;const s=o();let r;try{r={status:"fulfilled",value:await e.results}}catch(i){r={status:"rejected",reason:i}}return this._schedule({type:"continue",continuation:s,data:r,job:t}),s.promise}run(){this._state!=="ready"&&this._fail(new Error(`executor not ready to start. state=${this._state}`));const t=o();return this._state="running",this._runResolver=t,this._tryQueue(),t.promise}}export{m as createBatchExecutor};
