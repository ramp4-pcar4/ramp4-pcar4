import{e as P}from"./TechniqueType-CMl1wqtX.js";import{bS as M,iV as Ie,gL as k,bp as R,h as Le,i as ze,s as Ae}from"./main-CnDVnExo.js";import{b as B,l as G,c as j}from"./CIMSymbolHelper-1qtHKtJm.js";import{r as re}from"./rasterizingUtils-CWvuSRoD.js";import{o as Z,w as De,G as Se}from"./enums-a_LDTPYU.js";import{o as ie,N as Ee,x as q,d as $,O as ke,f as X,F as Y,y as N,m as Q,l as ae,s as Re,a as H,b as Be,t as Te,p as ne,u as Ce,T as Fe,k as Oe,S as oe,c as We,g as Ve,h as Ge,i as je,r as Ze,j as qe,A as ce,n as $e,P as D,q as Xe,v as Ye,w as Ne,z as Qe,B as He,C as Je,D as Ke,E as Ue,G as et,H as tt,I as st,J as rt,K as it,L as at,M as nt,Q as ot,R as ct,U as lt,V as ht,W as mt,X as ut,Y as dt,Z as pt}from"./PieChartMeshWriter-BCtiVBIC.js";import{t as T,a as C,s as le}from"./definitions-MCCItX4r.js";import{c as ft}from"./constants-oLcGh8d3.js";import{c as _t}from"./libtess-CWYz0o6V.js";import{M as J,i as he}from"./mat2d-BQA-1WB-.js";import{n as S}from"./mat2df32-fg3OHsAI.js";import{S as me,o as w,B as ue,v as K,u as gt,l as de}from"./vec2-BnynUbeJ.js";import{r as F}from"./vec2f32-hTAvipMV.js";import{n as L}from"./vec2f64-CkowXrDb.js";import{d as yt,l as pe}from"./featureConversionUtils-DJPd03TP.js";import{e as U}from"./OptimizedGeometry-BBZXbf77.js";import{i as fe}from"./BoundingBox-DlCd_wcU.js";import{a as _e,r as xt}from"./Utils-ME_vekrG.js";import{d as Pt}from"./ArcadeExpression-Daidjqw4.js";import{s as vt}from"./AttributeStore-BlJ_Om5V.js";function ee(l){let{pixelDimensions:e,texelDimensions:s,baseSize:a,referenceSize:r,strokeWidth:t,sizeRatio:i}=l;if(e||(e=l.sprite.sdf?[0,0]:[l.sprite.width,l.sprite.height]),s||(s=l.sprite.sdf?[0,0]:e),l.patternHeight!=null){const n=l.patternHeight/e[1];e[1]*=n,e[0]*=n}a===-1&&(a=e[1]),a=M(a),r=M(r),t=M(t);const o=(l.sprite.sdfDecodeCoeff??1)*i;return{...l,pixelDimensions:e,texelDimensions:s,baseSize:a,referenceSize:r,strokeWidth:t,sdfDecodeCoeff:o}}const te=64,Mt=64,wt=2;let ge=class extends ie{get vertexSpec(){return{createComputedParams:ee,optionalAttributes:{zoomRange:H,value1Position2Value2:Re,lineLength:ae},attributes:{id:Q,bitset:N,pos:Y,offset:X.marker,uv:ke.marker,animationPointerAndBaseSizeAndReferenceSize:$,sizing:q,angle:Ee}}}_write(l,e){const s=this.evaluatedMeshParams.sprite,{textureBinding:a}=s;l.recordStart(this.instanceId,this.attributeLayout,a);const r=e.getDisplayId();if(this.shift&&e.geometryType==="esriGeometryPolyline")this._writeParticles(l,e);else if(this.evaluatedMeshParams.placement!=null)this._writePlacedMarkers(l,e);else if(e.geometryType==="esriGeometryPolygon"){const t=e.readCentroidForDisplay();if(!t)return;const[i,o]=t.coords;this._writeQuad(l,r,i,o)}else if(e.geometryType==="esriGeometryPoint"){const t=e.readXForDisplay(),i=e.readYForDisplay();this._writeQuad(l,r,t,i)}else{const t=e.readGeometryForDisplay();t&&t.forEachVertex((i,o)=>{this._writeQuad(l,r,i,o)})}l.recordEnd()}_writePlacedMarkers(l,e){const s=B.fromFeatureSetReaderCIM(e)?.clone();if(!s)return;const a=-1,r=Be.getPlacement(s,a,this.evaluatedMeshParams.placement,M(1),l.id,Te());if(!r)return;const t=e.getDisplayId();let i=r.next(),o=null;for(;i!=null;){const n=i.tx,c=-i.ty;if(Math.abs(n)>re||Math.abs(c)>re){i=r.next();continue}const h=-i.getAngle();l.recordBounds(n,c,te,Mt),this.shift?o&&this._writeQuad(l,t,o[0],o[1],void 0,h):this._writeQuad(l,t,n,c,void 0,h),o=[n,c],i=r.next()}}_writeParticles(l,e){const s=e.getDisplayId(),a=e.readGeometryForDisplay();if(!a)return;const r=[];a.forEachVertex((c,h)=>{r.push([c,h])});const t=bt(r);let i=0;for(let c=1;c<r.length;c++){const h=r[c][0]-r[c-1][0],f=r[c][1]-r[c-1][1],m=Math.sqrt(h*h+f*f);i+=m}const o=c=>{for(const h of t){const{a:f,b:m}=h;this._writeQuad(l,s,f.position[0],f.position[1],[f.distance-c,m.position[0],m.position[1],m.distance-c],this.evaluatedMeshParams.angleToLine?Math.atan2(f.direction[1],f.direction[0]):0,i,!0)}},{placement:n}=this.evaluatedMeshParams;if(!n||"placementTemplate"in n||n.type==="CIMMarkerPlacementOnVertices"){let c;if(n&&n.type!=="CIMMarkerPlacementOnVertices")c=n.placementTemplate;else{c=[0];for(const f of t){const{a:m,b:u}=f,p=m.position[0]-u.position[0],d=m.position[1]-u.position[1],_=Math.sqrt(p*p+d*d);c.push(_)}}let h=-1*i;for(;h<(1+wt/2)*i;)for(const f of c)h+=f,o(h)}else n.type==="CIMMarkerPlacementAtExtremities"?n.extremityPlacement===Z.JustBegin?o(1):n.extremityPlacement===Z.JustEnd?(o(i-1),o(-1)):n.extremityPlacement===Z.Both&&(o(1),o(i-1)):n.type==="CIMMarkerPlacementOnLine"&&o(i/2)}_writeQuad(l,e,s,a,r,t=0,i=0,o=!1){const n=this.evaluatedMeshParams.sprite,{rect:c}=n,h=c.x+T,f=c.y+T,m=c.x+c.width-T,u=c.y+c.height-T,p=l.vertexCount();o||l.recordBounds(s,a,te,te);const d={texXmin:h,texYmin:f,texXmax:m,texYmax:u,value1Position2Value2:r,angle:t/ft,lineLength:i};for(let _=0;_<4;_++)this._writeVertex(l,e,s,a,d);l.indexEnsureSize(6),l.indexWrite(p),l.indexWrite(p+1),l.indexWrite(p+2),l.indexWrite(p+1),l.indexWrite(p+3),l.indexWrite(p+2)}};function bt(l){const e=[];let s=0;for(let a=1;a<l.length;a++){const r=l[a-1],t=l[a],i=t[0]-r[0],o=t[1]-r[1],n=Math.sqrt(i*i+o*o),c=i/n,h=o/n;e.push({a:{position:r,distance:s,direction:[c,h]},b:{position:t,distance:s+n,direction:[c,h]}}),s+=n}return e}let It=class extends ge{constructor(){super(...arguments),this.shift=!1}},Lt=class extends ge{constructor(){super(...arguments),this.shift=!0}},ye=class extends ie{_write(l,e,s){const a=s??B.fromFeatureSetReaderCIM(e);if(!a)return;const r=this.evaluatedMeshParams.sprite,{textureBinding:t}=r;l.recordStart(this.instanceId,this.attributeLayout,t);const i=e.getDisplayId();this._writePoly(l,i,a.asOptimized()),l.recordEnd()}},zt=class extends ye{constructor(){super(...arguments),this.vertexSpec={createComputedParams:ee,attributes:{id:Q,bitset:N,pos:Y,offset:X.fill,tlbr:oe,animationPointerAndBaseSizeAndReferenceSize:$,sizing:q},optionalAttributes:{zoomRange:H,value1Position2Value2:ne,lineLength:Ze}}}_writePoly(l,e,s){const a=[];if(!qe(a,s))return;const r=l.vertexCount();s.forEachVertex((t,i)=>{this._writeVertex(l,e,t,i)}),l.indexEnsureSize(a.length);for(const t of a)l.indexWrite(r+t)}},At=class{constructor(){this.id=0,this.bitset=0,this.indexCount=0,this.vertexCount=0,this.vertexFrom=0,this.vertexBounds=0,this.pathLength=0}};const xe=65535;class Dt extends ye{constructor(){super(...arguments),this.vertexSpec={createComputedParams:ee,attributes:{id:Q,bitset:N,pos:Y,offset:X.line,tlbr:oe,animationPointerAndBaseSizeAndReferenceSize:$,sizing:q,accumulatedDistance:Oe,normal:Fe,segmentDirection:Ce},optionalAttributes:{zoomRange:H,value1Position2Value2:ne,lineLength:ae}},this._tessParams=new We,this._currentWrite=new At,this._tessellationOptions={halfWidth:0,pixelCoordRatio:1,offset:0,wrapDistance:xe,textured:!1},this._lineLength=0,this._lineTessellator=new _t((e,s,a,r,t,i,o,n,c,h,f)=>this._writeTesselatedVertex(e,s,a,r,t,i,o,n,c,h,f,this._lineLength),this._writeTriangle.bind(this),!1)}_writePoly(e,s,a){const r=Ve(B.fromOptimized(a,"esriGeometryPolyline"),64);if(r==null)return;const{_currentWrite:t,_tessellationOptions:i}=this,{baseSize:o,capType:n,joinType:c,miterLimit:h}=this.evaluatedMeshParams,f=M(.5*o);i.halfWidth=f,i.capType=Ge(n||De.Round),i.joinType=je(c||Se.Round),i.miterLimit=h||2,t.out=e,t.id=s,t.vertexCount=0,t.indexCount=0,t.vertexFrom=e.vertexCount(),t.vertexBounds=1;for(const{line:m,start:u,pathLength:p}of r){i.initialDistance=u%xe,t.pathLength=p,this._lineLength=0;for(let d=1;d<m.length;d++){const _=m[d].x-m[d-1].x,g=m[d].y-m[d-1].y;this._lineLength+=Math.sqrt(_*_+g*g)}this._lineTessellator.tessellate(m,i,!1)}}_writeTesselatedVertex(e,s,a,r,t,i,o,n,c,h,f,m){const{out:u,id:p,vertexBounds:d,pathLength:_}=this._currentWrite;return this.hasEffects&&u.recordBounds(e,s,d,d),this._tessParams.extrusionOffsetX=o,this._tessParams.extrusionOffsetY=n,this._tessParams.normalX=c,this._tessParams.normalY=h,this._tessParams.directionX=t,this._tessParams.directionY=i,this._tessParams.distance=f,this._tessParams.pathLength=_,this._tessParams.lineLength=m,this._writeVertex(u,p,e,s,this._tessParams),this._currentWrite.vertexFrom+this._currentWrite.vertexCount++}_writeTriangle(e,s,a){const{out:r}=this._currentWrite;r.indexEnsureSize(3),r.indexWrite(e),r.indexWrite(s),r.indexWrite(a),this._currentWrite.indexCount+=3}}const O=1,z=0,St=128;function Et(l,e){return k(`${l}${e}`)}function kt(l,e,s){return k(`${l}${e}${s}`)}function Rt(l,e,s,a){return k(`${l}${e}${s*2**(D-a)}`)}function Bt(l,e,s,a,r){return k(`${l}${r}${e}${s*2**(D-a)}`)}const Tt=Ie(l=>{let e=0;if(l===0)return 1/0;for(;!(l%2);)e++,l/=2;return e});class Ct extends ce{constructor(){super(...arguments),this._zoomLevel=0}_write(e,s,a,r){if(this._zoomLevel=r||0,a!=null)throw new Error("InternalError: EffectGeometry not support for LabelMeshWriter");switch(s.geometryType){case"esriGeometryPoint":{const t=s.readXForDisplay(),i=s.readYForDisplay();this._writePoint(e,t,i,0,s);break}case"esriGeometryEnvelope":case"esriGeometryPolygon":{const t=s.readCentroidForDisplay();if(!t)return;const[i,o]=t.coords;this._writePoint(e,i,o,0,s);break}case"esriGeometryMultipoint":{let t=0;const i=B.fromFeatureSetReader(s);if(i?.nextPath())for(;i.nextPoint();)this._writePoint(e,i.x,i.y,t++,s);break}case"esriGeometryPolyline":this._writeLines(e,s)}}_getMetricDir(){const{horizontalAlignment:e,verticalAlignment:s}=this.evaluatedMeshParams;return[e==="center"?0:e==="right"?-1:1,s==="middle"?0:s==="bottom"?-1:1]}_createLineLabelMetric(e,s,a,r,t,i){const[o,n]=this._getMetricDir(),c=this.evaluatedMeshParams.scaleInfo?.maxScale??0,h=this.evaluatedMeshParams.scaleInfo?.minScale??0,f=this.evaluatedMeshParams.labelClassId;return new _e(e,f,s,a,r,t,o,n,c,h,i)}_writePoint(e,s,a,r,t){if(s<0||s>C||a<0||a>C)return;const i=this._getShaping();if(!i)return;const o=t.getDisplayId(),n=this.evaluatedMeshParams.labelClassId,c=Et(t.getObjectId(),r),h=kt(t.getObjectId(),n,r),[f,m]=this._getMetricDir(),u=this.evaluatedMeshParams.scaleInfo?.maxScale??0,p=this.evaluatedMeshParams.scaleInfo?.minScale??0,d=this._getPointReferenceBounds()||{offsetX:0,offsetY:0,size:0};e.metricStart(new _e(o,n,c,h,s,a,f,m,u,p,d)),this._writeGlyphs(e,o,s,a,i,0,d,void 0,!1),e.metricBoxWrite(i.boundsT),e.metricEnd()}_getPointReferenceBounds(){if(!this._references)return null;for(const e of this._references){const s=e.getBoundsInfo();if(s)return s}return null}_writeLines(e,s){const{scaleInfo:a,verticalAlignment:r}=this.evaluatedMeshParams,t=this.evaluatedMeshParams.repeatLabelDistance||128,i=this._getShaping("middle");if(!i)return;const o=(c,h,f,m)=>this._placeSubdivGlyphs(c,h,f,m),n=(i.bounds.width+t)/(1<<O);this._current={out:e,id:s.getDisplayId(),objId:s.getObjectId(),shaping:i,zoomRange:$e(a,this.getTileInfo()),referenceBounds:this._getPointReferenceBounds()||{offsetX:0,offsetY:0,size:0},offsetDirection:null,pathIndex:0},this._verticalPlacement=r==="bottom"?"above":r==="top"?"below":null,this._verticalPlacement?this._writeAboveAndBelowAlong(s,o,n):this._writeCenterAlong(s,o,n)}_writeAboveAndBelowAlong(e,s,a){const{repeatLabel:r}=this.evaluatedMeshParams,{shaping:t}=this._current,i=t.bounds.halfHeight,o=e.readGeometryForDisplay();if(!o)return;const n=new U;yt(n,o,!1,!1,"esriGeometryPolyline",1);const c=Pe(new U,n,i),h=Pe(new U,n,-i),f=pe(h,"esriGeometryPolyline",!1,!1),m=pe(c,"esriGeometryPolyline",!1,!1),u=G(m.paths,t.bounds.width),p=G(f.paths,t.bounds.width);this._current.offsetDirection="above";for(let d=0;d<u.length;d++)this._current.pathIndex=d,j(u[d],a,s,!!r);this._current.offsetDirection="below";for(let d=0;d<p.length;d++)this._current.pathIndex=d,j(p[d],a,s,!!r)}_writeCenterAlong(e,s,a){const{repeatLabel:r}=this.evaluatedMeshParams,{shaping:t}=this._current,i=G(e.readLegacyGeometryForDisplay().paths,t.bounds.width);for(let o=0;o<i.length;o++)this._current.pathIndex=o,j(i[o],a,s,!!r)}_placeSubdivGlyphs(e,s,a,r){const{allowOverrun:t,labelPosition:i,repeatLabelDistance:o}=this.evaluatedMeshParams,n=this._current.zoomRange[0],c=Tt(s),h=this._current.shaping.bounds.width/(1<<O),f=Math.sqrt(o||St)/(1<<O),m=Math.min(a,r-a),u=this._current.shaping.isMultiline?D:Math.log2(m/(f+h/2)),p=s===0?u:Math.min(c,u),d=Math.max(n,this._zoomLevel+O-p),_=this._zoomLevel-d,g=this._current.shaping.bounds.width/2*2**_,y=Rt(this._current.objId,this._current.pathIndex,s,this._zoomLevel),v=Bt(this._current.objId,this._current.pathIndex,s,this._zoomLevel,this.evaluatedMeshParams.labelClassId);this._current.shaping.isMultiline?s===0&&this._placeStraight(e,d,y,v):t&&_<0?this._placeStraightAlong(e,n,y,v):i==="parallel"?this._placeStraightAlong(e,d,y,v):i==="curved"&&this._placeCurved(e,d,g,y,v)}_placeStraight(e,s,a,r){const{out:t,id:i,shaping:o,referenceBounds:n}=this._current,{x:c,y:h}=e;t.metricStart(this._createLineLabelMetric(i,a,r,c,h)),t.metricBoxWrite(o.boundsT);const f=e.angle*(180/Math.PI)%360,m=(e.angle*(180/Math.PI)+180)%360,u={clipAngle:f,mapAligned:!0,isLineLabel:!0,minZoom:s};this._writeGlyphs(t,i,c,h,o,0,n,u,!1);const p={clipAngle:m,mapAligned:!0,isLineLabel:!0,minZoom:s};this._writeGlyphs(t,i,c,h,o,0,n,p,!1),t.metricEnd()}_placeCurved(e,s,a,r,t){const{out:i,id:o}=this._current;i.metricStart(this._createLineLabelMetric(o,r,t,e.x,e.y));const n=e.clone(),c=e.angle*(180/Math.PI)%360,h=(e.angle*(180/Math.PI)+180)%360;this._verticalPlacement&&this._verticalPlacement!==this._current.offsetDirection||(this._placeFirst(n,s,1,c),this._placeBack(e,n,s,a,1,c),this._placeForward(e,n,s,a,1,c)),this._verticalPlacement&&this._verticalPlacement===this._current.offsetDirection||(this._placeFirst(n,s,0,h),this._placeBack(e,n,s,a,0,h),this._placeForward(e,n,s,a,0,h)),i.metricEnd()}_placeStraightAlong(e,s,a,r){const{out:t,id:i,shaping:o,zoomRange:n,referenceBounds:c}=this._current,{boxBorderLineColor:h,boxBackgroundColor:f}=this.evaluatedMeshParams,m=e.clone(),u=e.angle*(180/Math.PI)%360,p=(e.angle*(180/Math.PI)+180)%360,d=o.glyphs.length>0&&!(!h&&!f);if(t.metricStart(this._createLineLabelMetric(i,a,r,e.x,e.y)),d){const _=Math.max(s,n[0],0),g=Math.min(D,n[1]),y=J(S(),-e.angle),v={minZoom:_,maxZoom:g,clipAngle:u,mapAligned:!0,isLineLabel:!0},x=M(this.evaluatedMeshParams.offsetX),I=M(this.evaluatedMeshParams.offsetY);if(!this._verticalPlacement||this._verticalPlacement===this._current.offsetDirection){const b=F(x,-1*I),[E,A]=o.shapeBackground(he(S(),y,b));t.recordStart(this.instanceId,this.attributeLayout,o.glyphs[0].textureBinding),this._writeTextBox(t,i,e.x,e.y,A,c,v),t.recordEnd()}if(!this._verticalPlacement||this._verticalPlacement!==this._current.offsetDirection){const b=F(x,I),[E,A]=o.shapeBackground(he(S(),y,b));v.clipAngle=p,t.recordStart(this.instanceId,this.attributeLayout,o.glyphs[0].textureBinding),this._writeTextBox(t,i,e.x,e.y,A,c,v),t.recordEnd()}}this._verticalPlacement&&this._verticalPlacement!==this._current.offsetDirection||this._placeFirst(m,s,1,u,!0),this._verticalPlacement&&this._verticalPlacement===this._current.offsetDirection||this._placeFirst(m,s,0,p,!0),t.metricEnd()}_placeBack(e,s,a,r,t,i){const o=e.clone();let n=e.backwardLength+z;for(;o.prev()&&!(n>=r);)this._placeOnSegment(o,s,n,a,-1,t,i),n+=o.length+z}_placeForward(e,s,a,r,t,i){const o=e.clone();let n=e.remainingLength+z;for(;o.next()&&!(n>=r);)this._placeOnSegment(o,s,n,a,1,t,i),n+=o.length+z}_placeFirst(e,s,a,r,t=!1){const{out:i,id:o,shaping:n,zoomRange:c,referenceBounds:h}=this._current,f=n.glyphs,m=M(this.evaluatedMeshParams.offsetX),u=M(this.evaluatedMeshParams.offsetY),p=F(m,u),d=J(S(),-e.angle);me(p,p,d);for(const _ of f){const g=_.x>n.bounds.x?a:1-a,y=g*e.remainingLength+(1-g)*e.backwardLength,v=Math.abs(_.x+_.width/2-n.bounds.x),x=Math.max(0,this._zoomLevel+Math.log2(v/(y+z))),I=Math.max(s,t?0:x);if(_.maxZoom=Math.min(c[1],D),_.angle=e.angle+(1-a)*Math.PI,_.minZoom=Math.max(c[0],I),this._writeLineGlyph(i,o,e.x,e.y,_,r,h,!0),(a||this._current.offsetDirection)&&this._isVisible(_.minZoom,_.maxZoom)){const b=new fe(_.bounds.x+p[0],_.bounds.y+p[1],_.bounds.width,_.bounds.height);i.metricBoxWrite(b)}}}_placeOnSegment(e,s,a,r,t,i,o){const{out:n,id:c,shaping:h,referenceBounds:f}=this._current,m=h.glyphs,u=e.dx/e.length,p=e.dy/e.length,d={x:e.x+a*-t*u,y:e.y+a*-t*p},_=M(this.evaluatedMeshParams.offsetX),g=M(this.evaluatedMeshParams.offsetY),y=F(_,g),v=J(S(),-e.angle);me(y,y,v);for(const x of m){const I=x.x>h.bounds.x?i:1-i;if(!(I&&t===1||!I&&t===-1))continue;const b=Math.abs(x.x+x.width/2-h.bounds.x),E=Math.max(0,this._zoomLevel+Math.log2(b/a)-.1),A=Math.max(r,this._zoomLevel+Math.log2(b/(a+e.length+z)));if(E!==0&&(x.angle=e.angle+(1-i)*Math.PI,x.minZoom=A,x.maxZoom=E,this._writeLineGlyph(n,c,d.x,d.y,x,o,f,!0),(i||this._current.offsetDirection)&&this._isVisible(x.minZoom,x.maxZoom))){const be=new fe(x.bounds.x+y[0],x.bounds.y+y[1],x.bounds.width,x.bounds.height);n.metricBoxWrite(be)}}}_writeLineGlyph(e,s,a,r,t,i,o,n){if(a<0||a>C||r<0||r>C)return;e.recordStart(this.instanceId,this.attributeLayout,t.textureBinding);const{texcoords:c,offsets:h}=t,{fontSize:f,haloSize:m,outlineSize:u}=this._textMeshTransformProps;this._writeQuad(e,s,a,r,{texcoords:c,offsets:h,fontSize:f,haloSize:m,outlineSize:u,color:Xe(this.evaluatedMeshParams.color),isBackground:!1,referenceBounds:o,minZoom:Math.max(this._current.zoomRange[0],t.minZoom),maxZoom:Math.min(this._current.zoomRange[1],t.maxZoom),clipAngle:i,mapAligned:n,isLineLabel:!0}),e.recordEnd()}_packedZoom(e){return Math.floor(e*le)/le}_isVisible(e,s){let a=Math.max(this._current.zoomRange[0],e),r=Math.min(this._current.zoomRange[1],s);a=this._packedZoom(a),r=this._packedZoom(r);const t=this._packedZoom(this._zoomLevel);return a<=t&&t<=r}}function Pe(l,e,s){const{coords:a,lengths:r}=e,t=L(),i=L(),o=L(),n=L(),c=L(),h=L(),f=2;let m=0;for(let u=0;u<r.length;u++){const p=r[u];for(let d=0;d<p;d++){const _=f*(d+m-1),g=f*(d+m),y=f*(d+m+1);d>0?w(t,a[_],a[_+1]):w(t,0,0),w(i,a[g],a[g+1]),d<p-1?w(o,a[y],a[y+1]):w(o,0,0),d===0?w(n,0,0):(ue(n,i,t),K(n,n),w(n,n[1],-n[0])),d===p-1?w(c,0,0):(ue(c,o,i),K(c,c),w(c,c[1],-c[0])),gt(h,n,c),K(h,h);const v=h[0]*c[0]+h[1]*c[1];v!==0&&de(h,h,v),de(h,h,s),l.coords.push(i[0]+h[0],i[1]+h[1])}l.lengths.push(p),m+=p}return l}class ve extends vt{constructor(e){super(),this._value=e}resize(e){}read(e,s){return this._value}readWithDefault(e,s,a){return this._value}hasArcadeDependency(e){return!1}}const Ft=()=>ze.getLogger("esri.views.2d.engine.webgl.shaderGraph.techniques.mesh.MeshWriterInputEvaluator");async function W(l,e,s,a){const{defaultValue:r,valueExpressionInfo:t,value:i}=e;if(t){if(t.type==="dictionary-template")return{...e,computed:l.createDictionaryTemplateField(t,s),defaultValue:r};const{expression:o}=t,n=await l.createComputedField({expression:o},a);return n?{...e,computed:n,defaultValue:r}:null}return{...e,computed:new ve(i),defaultValue:r}}async function Me(l,e,s){const{valueExpressionInfo:a}=e,r=a.type==="dictionary-template"?l.createDictionaryTemplateField(a,s):await l.createComputedField({expression:a.expression});return r?{...e,computed:r}:null}function we(l){return typeof l=="object"&&l!=null&&(!(!("valueExpressionInfo"in l)||!l.valueExpressionInfo)||"type"in l&&l.type==="Process"&&"op"in l&&l.op==="Random")}function V(l){if(Array.isArray(l)){for(const e of l)if(V(e))return!0}if(typeof l=="object"){if(we(l))return!0;for(const e in l)if(V(l[e]))return!0}return!1}class se{static async create(e,s,a,r){const t={},i=new Map,o=new Map,n=new Map,c=new Map,h=new Map,f=new Map;for(const m in a){const u=a[m];if(u!=null&&typeof u=="object")if(Array.isArray(u)){if(typeof u[0]=="object")throw new Error(`InternalError: Cannot handle ${m}. Nested array params are not supported`);t[m]=u}else if("valueExpressionInfo"in u){if(u.value){t[m]=u.value;continue}const p=await Me(e,u,r);if(!p){t[m]=u.defaultValue;continue}i.set(m,p),t[m]=null}else switch(u.type){case"cim-effect-infos":if(u.effectInfos.some(p=>p.overrides.length)){o.set(m,{effects:await Promise.all(u.effectInfos.map(async p=>{const d=p.overrides.map(_=>W(e,_,r,!1));return{effect:p.effect,compiledOverrides:(await Promise.all(d)).filter(R)}}))});break}t[m]=u.effectInfos.map(p=>p.effect);break;case"cim-marker-placement-param":u.overrides.length&&n.set(m,{placementInfo:u,compiledOverrides:(await Promise.all(u.overrides.map(p=>W(e,p,r,!1)))).filter(R)}),t[m]=u.placement;break;case"text-rasterization-param":{if(u.overrides.length){const d=u.overrides.map(_=>W(e,_,r,u.useLegacyLabelEvaluationRules??!1));c.set(m,{compiledOverrides:(await Promise.all(d)).filter(R),rasterizationParam:u,objectIdToResourceId:new Map});continue}const p={type:"cim-rasterization-info",resource:u.resource};t[m]=await s.fetchResourceImmediate(p)??null;break}case"sprite-rasterization-param":{if(u.overrides.length){const d=u.overrides.map(_=>W(e,_,r,!1));c.set(m,{compiledOverrides:(await Promise.all(d)).filter(R),rasterizationParam:u,objectIdToResourceId:new Map});continue}if(u.resource.type==="animated"){c.set(m,{compiledOverrides:[],rasterizationParam:u,objectIdToResourceId:new Map});continue}const p={type:"cim-rasterization-info",resource:u.resource};t[m]=await s.fetchResourceImmediate(p)??null;break}case"cim-marker-transform-param":{const{params:p}=u;if(V(p)){const d={compiledMarkerInfos:[]};await Promise.all(p.map(async _=>{const g={props:{}};for(const y in _)if(we(_[y])){const v=await Me(e,_[y],r);g.compiledExpressionMap||(g.compiledExpressionMap=new Map);const x=g.compiledExpressionMap;v&&x.set(y,v)}else g.props[y]=_[y];d.compiledMarkerInfos.push(g)})),h.set(m,d)}else t[m]={type:"cim-marker-transform-info",infos:p};break}case"animation-params":{const{params:p}=u,d=Ye(p);if(V(d)){const _=await Promise.all(d.map(g=>Ne(g,e)));f.set(m,{params:_,propertyIdToResourceId:new Map,key:m})}else{const _=Qe(d),g=await s.fetchResourceImmediate({type:"animation-info",resource:_});g!=null&&g.type==="sprite"&&(t[m]={dataRow:g.rect.y,dataColumn:g.rect.x})}break}default:t[m]=u}else t[m]=u}return new se(a,t,i,o,n,c,h,f)}constructor(e,s,a,r,t,i,o,n){this.inputMeshParams=e,this._resolvedMeshParams=s,this._dynamicProperties=a,this._dynamicEffectProperties=r,this._dynamicPlacementProperties=t,this._dynamicAsyncProperties=i,this._dynamicTransformProperties=o,this._dynamicAsyncAnimations=n,this.evaluator=c=>c,this._arcadeDependencies=new Set;for(const c of this._expressions())Pt(this._arcadeDependencies,c)}get hasDynamicProperties(){return!!(this._dynamicProperties.size||this._dynamicAsyncProperties.size||this._dynamicEffectProperties.size||this._dynamicTransformProperties.size||this._dynamicPlacementProperties.size||this._dynamicAsyncAnimations.size)}get evaluatedMeshParams(){return this._evaluatedMeshParams||(this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams)),this._evaluatedMeshParams}enqueueRequest(e,s,a){for(const r of this._dynamicAsyncProperties.values()){const t=Le(r.rasterizationParam.resource);r.rasterizationParam.resource.type==="animated"&&r.rasterizationParam.resource.randomizeStartTime&&(t.primitiveName="__RESERVED__PRIMITIVE__NAME__",t.startGroup=He(s.getObjectId()||0));for(const{primitiveName:o,propertyName:n,computed:c,defaultValue:h,valueExpressionInfo:f}of r.compiledOverrides)try{const m=r.rasterizationParam.resource.type==="animated"?t.primitiveName:o;xt(t,m,n,c,s,a,h)}catch(m){Ft().errorOnce(new Ae("invalid-arcade-expression","Encountered an error when evaluating the arcade expression",{error:m,valueExpressionInfo:f}))}const i=e.enqueueRequest({type:"cim-rasterization-info",resource:t});r.objectIdToResourceId.set(s.getObjectId(),i)}for(const r of this._dynamicAsyncAnimations.values()){const t=r.params.map(n=>Je(n,s,a)).map(Ke).map(n=>n.simplify()),i=Ue(t),o=e.enqueueRequest({type:"animation-info",resource:i});r.propertyIdToResourceId.set(s.getObjectId()+"."+r.key,o)}}evaluateMeshParams(e,s,a){for(const[r,t]of this._dynamicProperties.entries())this._resolvedMeshParams[r]=t.computed.readWithDefault(s,a,t.defaultValue);for(const[r,t]of this._dynamicPlacementProperties.entries())for(const{computed:i,defaultValue:o,propertyName:n}of t.compiledOverrides){const c=i.readWithDefault(s,a,o);t.placementInfo.placement[n]=c,this._resolvedMeshParams[r]=t.placementInfo.placement}for(const[r,t]of this._dynamicEffectProperties.entries())for(const i of t.effects){for(const{computed:o,defaultValue:n,propertyName:c}of i.compiledOverrides){const h=o.readWithDefault(s,a,n);i.effect[c]=h}this._resolvedMeshParams[r]=t.effects.map(o=>o.effect)}for(const[r,t]of this._dynamicTransformProperties.entries()){const i={type:"cim-marker-transform-info",infos:[]};for(const o of t.compiledMarkerInfos){const n={...o.props};if(o.compiledExpressionMap)for(const[c,h]of o.compiledExpressionMap){const f=h.computed.readWithDefault(s,a,h.defaultValue);n[c]=typeof f=="number"||typeof f=="boolean"?f:h.defaultValue}i.infos.push(n)}this._resolvedMeshParams[r]=i}for(const[r,t]of this._dynamicAsyncProperties.entries()){const i=t.objectIdToResourceId.get(s.getObjectId());if(i==null)continue;const o=e.getResource(i);this._resolvedMeshParams[r]=o}for(const[r,t]of this._dynamicAsyncAnimations.entries()){const i=t.propertyIdToResourceId.get(s.getObjectId()+"."+r);if(i==null)continue;const o=e.getResource(i);this._resolvedMeshParams[r]={dataRow:o.rect.y,dataColumn:o.rect.x}}return this._evaluatedMeshParams=this.evaluator(this._resolvedMeshParams),this.evaluatedMeshParams}hasArcadeDependency(e){return this._arcadeDependencies.has(e)}*_expressions(){for(const e of this._dynamicProperties.values())yield e.computed;for(const e of this._dynamicEffectProperties.values())for(const s of e.effects)for(const a of s.compiledOverrides)yield a.computed;for(const e of this._dynamicPlacementProperties.values())for(const s of e.compiledOverrides)yield s.computed;for(const e of this._dynamicAsyncProperties.values())for(const s of e.compiledOverrides)yield s.computed;for(const e of this._dynamicTransformProperties.values())for(const s of e.compiledMarkerInfos)if(s.compiledExpressionMap!=null)for(const a of s.compiledExpressionMap.values())yield a.computed;for(const e of this._dynamicAsyncAnimations.values())for(const s of e.params)yield*et(s)}}class Ot{async createMeshWriter(e,s,a,r,t){const i=this._getMeshWriter(r.techniqueType),o=await se.create(e,s,r.inputParams,t),n=new i(r.id,o,r.optionalAttributes,a);return await n.loadDependencies(),n}_getMeshWriter(e){switch(e){case P.Fill:return pt;case P.DotDensity:return dt;case P.ComplexFill:return ut;case P.PatternFill:return mt;case P.GradientFill:return ht;case P.OutlineFill:return lt;case P.PatternOutlineFill:return ct;case P.ComplexOutlineFill:return ot;case P.Marker:return nt;case P.PieChart:return at;case P.Text:return ce;case P.Line:return it;case P.TexturedLine:return rt;case P.GradientStroke:return st;case P.Heatmap:return tt;case P.Label:return Ct;case P.AnimatedMarker:return It;case P.AnimatedMarkerShift:return Lt;case P.AnimatedFill:return zt;case P.AnimatedLine:return Dt;default:throw new Error("Internal Error: Mesh writer not in the registry")}}}export{ve as r,Ot as y};
