import{c4 as w,q as O,b7 as v,c5 as g,c6 as E,a0 as f,bY as T,s as b,R as P,v as s,x as n,I as A,H as _,z as L,bV as F}from"./main-CnDVnExo.js";import{t as M}from"./loadAll-DgTTxJ9L.js";import{S as R}from"./MultiOriginJSONSupport-Ruo0_g0o.js";import{i as j}from"./scaleUtils-vWhSfrfy.js";import{h as V}from"./Layer-CmkLQVqW.js";import{i as N}from"./APIKeyMixin-CKoruZnp.js";import{m as q,f as J,a as U}from"./SublayersOwner-BbcfTyKD.js";import{l as k}from"./ArcGISService-BvcoE3ho.js";import{p as z}from"./BlendLayer-BDk2CQB5.js";import{e as W}from"./CustomParametersMixin-DgLbjG-n.js";import{b as H,y as Z}from"./OperationalLayer-A4hDIwth.js";import{j as $}from"./PortalLayer-BPuUTCDW.js";import{f as B}from"./RefreshableLayer-D50o-qLz.js";import{t as C}from"./ScaleRangeLayer-C11AuBvk.js";import{c as D}from"./TemporalLayer-CJyRpOty.js";import{y as G}from"./ExportImageParameters-BBXZqyLf.js";import{t as K}from"./imageBitmapUtils-C06nxLeY.js";import{e as S}from"./sublayerUtils-DYdOZR7k.js";import{t as Y}from"./versionUtils-CX8WFswe.js";import{c as Q}from"./ElevationInfo-CUSBHOB_.js";import{u as X}from"./TimeExtent-CrpfETyH.js";import{a as x}from"./timeZoneUtils-D6KRGgVc.js";import{A as y}from"./interfaces-Cwm0pihk.js";let r=class extends z(D(C(q(J(k(H($(R(B(N(W(V)))))))))))){constructor(...e){super(...e),this._exportImageParameters=new G({layer:this}),this.dateFieldsTimeZone=null,this.datesInUnknownTimezone=!1,this.dpi=96,this.elevationInfo=new Q({mode:"on-the-ground"}),this.gdbVersion=null,this.imageFormat="png24",this.imageMaxHeight=2048,this.imageMaxWidth=2048,this.imageTransparency=!0,this.isReference=null,this.labelsVisible=!1,this.operationalLayerType="ArcGISMapServiceLayer",this.preferredTimeZone=null,this.sourceJSON=null,this.sublayers=null,this.type="map-image",this.url=null,this._debouncedSaveOperations=w(async(t,p,a)=>{const{save:l,saveAs:o}=await import("./mapImageLayerUtils-CDLQ1Cy8.js");switch(t){case y.SAVE:return l(this,p);case y.SAVE_AS:return o(this,a,p)}})}normalizeCtorArgs(e,t){return typeof e=="string"?{url:e,...t}:e}load(e){const t=e!=null?e.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Map Service"]},e).catch(O).then(()=>this._fetchService(t))),Promise.resolve(this)}destroy(){this._exportImageParameters.destroy()}readImageFormat(e,t){const p=t.supportedImageFormatTypes;return p&&p.includes("PNG32")?"png32":"png24"}writeSublayers(e,t,p,a){if(!this.loaded||!e)return;const l=e.slice().reverse().flatten(({sublayers:i})=>i&&i.toArray().reverse()).toArray();let o=!1;const m=v(a.origin);let h;if(this.capabilities?.operations.supportsExportMap&&this.capabilities?.exportMap?.supportsDynamicLayers){if(m===g.PORTAL_ITEM){const i=this.createSublayersForOrigin("service").sublayers;o=S(l,i,g.SERVICE)}else if(m>g.PORTAL_ITEM){const i=this.createSublayersForOrigin("portal-item");o=S(l,i.sublayers,v(i.origin)),h=i.originWithPartialOverrides}}const d=[],u={writeSublayerStructure:o,...a,minimumWritableOrigin:h};let c=o||this.hasVisibleLayersForOrigin(m);l.forEach(i=>{const I=i.write({},u);d.push(I),c=c||i.originOf("visible")==="user"}),d.some(i=>Object.keys(i).length>1)&&(t.layers=d),c&&(t.visibleLayers=l.filter(i=>i.visible).map(i=>i.id))}createExportImageParameters(e,t,p,a){const l=a?.pixelRatio||1;e&&this.version>=10&&(e=e.clone().shiftCentralMeridian()),this._exportImageParameters.floors=a?.floors??null,this._exportImageParameters.scale=j({extent:e,width:t})*l;const o=this._exportImageParameters.toJSON(),m=!a?.rotation||this.version<10.3?{}:{rotation:-a.rotation},h=e?.spatialReference,d=E(h);o.dpi*=l;const u={};if(a?.timeExtent){const{start:c,end:i}=a.timeExtent.toJSON();u.time=c&&i&&c===i?""+c:`${c??"null"},${i??"null"}`}else this.timeInfo&&!this.timeInfo.hasLiveData&&(u.time="null,null");return{bbox:e?e.xmin+","+e.ymin+","+e.xmax+","+e.ymax:void 0,bboxSR:d,imageSR:d,size:t+","+p,...o,...m,...u}}async fetchImage(e,t,p,a){const{data:l}=await this._fetchImage("image",e,t,p,a);return l}async fetchImageBitmap(e,t,p,a){const{data:l,url:o}=await this._fetchImage("blob",e,t,p,a);return K(l,o,a?.signal)}async fetchRecomputedExtents(e={}){const t={...e,query:{returnUpdates:!0,f:"json",...this.customParameters,token:this.apiKey}},{data:p}=await f(this.url,t),{extent:a,fullExtent:l,timeExtent:o}=p,m=a||l;return{fullExtent:m&&T.fromJSON(m),timeExtent:o&&X.fromJSON({start:o[0],end:o[1]})}}loadAll(){return M(this,e=>{e(this.allSublayers),e(this.subtables)})}async save(e){return this._debouncedSaveOperations(y.SAVE,e)}async saveAs(e,t){return this._debouncedSaveOperations(y.SAVE_AS,t,e)}serviceSupportsSpatialReference(e){return Y(this,e)}async _fetchImage(e,t,p,a,l){const o={responseType:e,signal:l?.signal??null,query:{...this.parsedUrl.query,...this.createExportImageParameters(t,p,a,l),f:"image",...this.refreshParameters,...this.customParameters,token:this.apiKey}},m=this.parsedUrl.path+"/export";if(o.query?.dynamicLayers!=null&&!this.capabilities?.exportMap?.supportsDynamicLayers)throw new b("mapimagelayer:dynamiclayer-not-supported",`service ${this.url} doesn't support dynamic layers, which is required to be able to change the sublayer's order, rendering, labeling or source.`,{query:o.query});try{const{data:h}=await f(m,o);return{data:h,url:m}}catch(h){throw P(h)?h:new b("mapimagelayer:image-fetch-error",`Unable to load image: ${m}`,{error:h})}}async _fetchService(e){if(this.sourceJSON)return void this.read(this.sourceJSON,{origin:"service",url:this.parsedUrl});const{data:t,ssl:p}=await f(this.parsedUrl.path,{query:{f:"json",...this.parsedUrl.query,...this.customParameters,token:this.apiKey},signal:e});p&&(this.url=this.url.replace(/^http:/i,"https:")),this.sourceJSON=t,this.read(t,{origin:"service",url:this.parsedUrl})}hasVisibleLayersForOrigin(e){return!(e==null||!this.sublayersSourceJSON[e]?.visibleLayers)}};s([n(x("dateFieldsTimeReference"))],r.prototype,"dateFieldsTimeZone",void 0),s([n({type:Boolean})],r.prototype,"datesInUnknownTimezone",void 0),s([n()],r.prototype,"dpi",void 0),s([n()],r.prototype,"elevationInfo",void 0),s([n()],r.prototype,"gdbVersion",void 0),s([n()],r.prototype,"imageFormat",void 0),s([A("imageFormat",["supportedImageFormatTypes"])],r.prototype,"readImageFormat",null),s([n({json:{origins:{service:{read:{source:"maxImageHeight"}}}}})],r.prototype,"imageMaxHeight",void 0),s([n({json:{origins:{service:{read:{source:"maxImageWidth"}}}}})],r.prototype,"imageMaxWidth",void 0),s([n()],r.prototype,"imageTransparency",void 0),s([n({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],r.prototype,"isReference",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"labelsVisible",void 0),s([n({type:["ArcGISMapServiceLayer"]})],r.prototype,"operationalLayerType",void 0),s([n({json:{read:!1,write:!1}})],r.prototype,"popupEnabled",void 0),s([n(x("preferredTimeReference"))],r.prototype,"preferredTimeZone",void 0),s([n()],r.prototype,"sourceJSON",void 0),s([n({json:{write:{ignoreOrigin:!0}}})],r.prototype,"sublayers",void 0),s([_("sublayers",{layers:{type:[U]},visibleLayers:{type:[F]}})],r.prototype,"writeSublayers",null),s([n({type:["show","hide","hide-children"],json:{origins:{"portal-item":{read:!1,write:!1}}}})],r.prototype,"listMode",void 0),s([n({json:{read:!1},readOnly:!0,value:"map-image"})],r.prototype,"type",void 0),s([n(Z)],r.prototype,"url",void 0),r=s([L("esri.layers.MapImageLayer")],r);const ee=r;export{ee as default};
