import{fg as g}from"./main-CnDVnExo.js";import{_ as E}from"./TextureFormat-Cl0ugX3E.js";import{l as m}from"./enums-wEDHPbCF.js";function X(){return _??=(async()=>{const e=await import("./basis_encoder-DZxp6hVo.js"),t=await e.default({locateFile:n=>g(`esri/libs/basisu/${n}`)});return t.initializeBasis(),t})(),_}let _;function B(){return S??=(async()=>await(await import("./dxt_encoder-P9_YitA5.js")).default({locateFile:e=>g(`esri/libs/dxtEncoder/${e}`)}))(),S}let S,x,F,c=null,p=null;class w{constructor(t,n){this.internalFormat=t,this.compressedTexture=n}}async function M(e){let t;if(t=e.data instanceof ImageBitmap?U(e.data):G(e.data,e.width,e.height,e.components,e.needsFlip),e.hasS3TC){p||await T();const n=new Uint8Array(t.length);if(p?.encode(t,e.width,e.height,e.preMultiplyAlpha,n)){const a=q(n,!0),o=[n.buffer];return{result:new w(a?.internalFormat??null,a?.textureData??null),transferList:o}}return{result:new w(null,null)}}if(e.hasETC){if(c||await D(),e.preMultiplyAlpha&&!p&&await T(),e.preMultiplyAlpha){const i=new Uint8ClampedArray(t.length);p?.premultiply(new Uint8Array(t),e.width,e.height,i),t=i}const n=await b(t,e.width,e.height,e.hasMipmap),a=n?await R(n):null,o=a?.compressedTexture?.levels.map(i=>i.buffer)||[];return{result:new w(a?.internalFormat??null,a?.compressedTexture??null),transferList:o}}return{result:new w(null,null)}}async function D(){c||(c=await(x??=X()))}async function T(){p||(p=await(F??=B()))}async function b(e,t,n,a,o=255,i=0,s=!1,l=!1){if(!c)return null;const r=new c.BasisEncoder;r.setPerceptual(!l),r.setCheckForAlpha(!0),r.setForceAlpha(!1),r.setRenormalize(l),r.setMipGen(a),r.setMipSRGB(!l),r.setCreateKTX2File(!0),r.setKTX2SRGBTransferFunc(!l),r.setQualityLevel(o),r.setCompressionLevel(i);const u=new Uint8Array(e.byteLength);r.setSliceSourceImage(0,new Uint8Array(e),t,n,s);const f=r.encode(u),h=new Uint8Array(u.buffer,0,f),d=new c.KTX2File(new Uint8Array(h));return d.isValid()?(r.delete(),h):(d.close(),d.delete(),r.delete(),null)}async function R(e){if(!c)return new w(null,null);const t=new c.KTX2File(new Uint8Array(e));t.startTranscoding();const[n,a]=t.getHasAlpha()?[E.ETC2_RGBA,m.COMPRESSED_RGBA8_ETC2_EAC]:[E.ETC1_RGB,m.COMPRESSED_RGB8_ETC2],o=t.getLevels(),i=[];for(let s=0;s<o;s++)i.push(new Uint8Array(t.getImageTranscodedSizeInBytes(s,0,0,n))),t.transcodeImage(i[s],s,0,0,n,0,-1,-1);return t.close(),t.delete(),{internalFormat:a,compressedTexture:{type:"compressed",levels:i}}}function U(e){const t=new OffscreenCanvas(e.width,e.height),n=t.getContext("2d");return n.drawImage(e,0,0),n.getImageData(0,0,t.width,t.height).data}function G(e,t,n,a,o){const i=new Uint8ClampedArray(e).subarray(0,t*n*a);if(!o)return i;const s=new Uint8ClampedArray(i.length),l=t*a;for(let r=0;r<n;r++){const u=r*l,f=(n-r-1)*l;s.set(i.subarray(u,u+l),f)}return s}const O=31,I=1,v=2,K=3,L=4,P=7,k=21,z=131072;function y(e){return e.charCodeAt(0)+(e.charCodeAt(1)<<8)+(e.charCodeAt(2)<<16)+(e.charCodeAt(3)<<24)}const $=y("DXT1"),H=y("DXT3"),Q=y("DXT5");function q(e,t){const n=new Int32Array(e.buffer,e.byteOffset,O);let a,o;switch(n[k]){case $:a=8,o=m.COMPRESSED_RGB_S3TC_DXT1_EXT;break;case H:a=16,o=m.COMPRESSED_RGBA_S3TC_DXT3_EXT;break;case Q:a=16,o=m.COMPRESSED_RGBA_S3TC_DXT5_EXT;break;default:return null}let i=1,s=n[L],l=n[K];(3&s||3&l)&&(s=s+3&-4,l=l+3&-4);const r=s,u=l;let f,h;n[v]&z&&t!==!1&&(i=Math.max(1,n[P]));let d=e.byteOffset+n[I]+4;const A=[];for(let C=0;C<i;++C)h=(s+3>>2)*(l+3>>2)*a,f=new Uint8Array(e.buffer,d,h),A.push(f),d+=h,s=Math.max(1,s>>1),l=Math.max(1,l>>1);return{textureData:{type:"compressed",levels:A},internalFormat:o,width:r,height:u}}export{w as TextureCompressionWorkerOutput,M as compress,b as compressRGBADataToKTX2,R as createTextureDataKTX2,D as initializeBasisEncoder,T as initializeDXTEncoder};
