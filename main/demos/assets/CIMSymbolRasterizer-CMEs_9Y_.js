import{aF as k,aE as O}from"./main-Crkq4LWq.js";import{i as T}from"./CIMResourceManager-rvAZ2gjC.js";import{t as G,h as $,u as j}from"./CIMSymbolHelper-nIE1FQPf.js";import{OverrideHelper as q}from"./OverrideHelper-CgrdFD66.js";import{T as S,R as z}from"./rasterizingUtils-eA7dkndo.js";import{z as D}from"./utils-jjGHTGcN.js";import"./preload-helper-DMGCcr4D.js";import"./fontUtils-CcDLQxe3.js";import"./imageUtils-rE9d6Mzq.js";import"./BidiEngine-QXap_35O.js";import"./OptimizedGeometry-DmzaLtTI.js";import"./memoryEstimations-DknB37rc.js";import"./GeometryUtils-BGe_5xyi.js";import"./enums-_AFKM9Yk.js";import"./defaultCIMValues-CQAn2izL.js";import"./definitions-CASyCajO.js";import"./mat2d-D9DBP-jx.js";import"./common-DQOJ18NT.js";import"./mat2df32-Dpt2CT5P.js";import"./vec2-ChnYg_BJ.js";import"./vec2f32-CaVKkSa6.js";import"./Rect-CUzevAry.js";import"./BoundingBox-BSOANoLO.js";import"./colorUtils-DXf65Ue7.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./FieldsIndex-Cwq_t80R.js";import"./UnknownTimeZone-CGGNrDrV.js";import"./timeZoneUtils-BHCW7jir.js";import"./ArcadeExpression-ON2N40QW.js";import"./TimeOnly-BjqJuv0j.js";import"./enum-DXEdVlyM.js";import"./callExpressionWithFeature-CtoHHKBd.js";import"./quantizationUtils-kCN6oAvL.js";import"./floatRGBA-DqTSKoin.js";const A=96/72;class vt{constructor(a){this._spatialReference=a,this._imageDataCanvas=null,this._cimResourceManager=new T}get _canvas(){return this._imageDataCanvas||(this._imageDataCanvas=document.createElement("canvas")),this._imageDataCanvas}get resourceManager(){return this._cimResourceManager}async rasterizeCIMSymbolAsync(a,s,m,R,I,o,c,l,g,x){if(!a)return null;const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d;o||(o=D(C));const n=await q.resolveSymbolOverrides(d,s,this._spatialReference,I,o,c,l),w=this._cimResourceManager,b=[];G.fetchResources(n,w,b),G.fetchFonts(n,w,b),b.length>0&&await Promise.all(b);const{width:e,height:r}=m;let y=E(o,e,r,R,x);const t=G.getEnvelope(n,y,w);if(!t)return null;t.x===1/0&&(t.x=e+2),t.y===1/0&&(t.y=-r/2),t.width===-1/0&&(t.width=e),t.height===-1/0&&(t.height=r);let p=1,_=0,v=0;switch(C.type){case"CIMPointSymbol":case"CIMTextSymbol":{let i=1;t.width>e&&(i=e/t.width);let h=1;t.height>r&&(h=r/t.height),R==="preview"&&(t.width<e&&(i=e/t.width),t.height<r&&(h=r/t.height)),p=Math.min(i,h),_=t.x+t.width/2,v=t.y+t.height/2}break;case"CIMLineSymbol":if(x){v=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:S(y.paths,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{(g||t.height>r)&&(p=r/t.height),v=t.y+t.height/2;const i=t.x*p+e/2,h=(t.x+t.width)*p+e/2,M=k(y)?y.paths:O(y)?y.rings:null;if(M===null)throw new Error("Bad geometry, can't rasterise symbol!");M[0][0][0]-=i/p,M[0][2][0]-=(h-e)/p}break;case"CIMPolygonSymbol":if(x){v=t.y+t.height/2,_=t.x+t.width/2;const i=t.width-e,h=t.height-r;y={paths:S(y.rings,{xmin:-1*t.width/2+i,xmax:t.width/2-i,ymin:-1*t.height/2+h,ymax:t.height/2-h,width:t.width-2*i,height:t.height-2*h})}}else{_=t.x+t.width/2,v=t.y+t.height/2;const i=t.x*p+e/2,h=(t.x+t.width)*p+e/2,M=t.y*p+r/2,P=(t.y+t.height)*p+r/2,{rings:u}=y;i<0&&(u[0][0][0]-=i,u[0][3][0]-=i,u[0][4][0]-=i),M<0&&(u[0][0][1]+=M,u[0][1][1]+=M,u[0][4][1]+=M),h>e&&(u[0][1][0]-=h-e,u[0][2][0]-=h-e),P>r&&(u[0][2][1]+=P-r,u[0][3][1]+=P-r)}}const F={type:"cim",data:{type:"CIMSymbolReference",symbol:n}};return this.rasterize(F,e,r,_,v,p,o,1,y)}rasterize(a,s,m,R,I,o,c,l=0,g=null,x=window.devicePixelRatio||1){const{data:d}=a;if(!d||d.type!=="CIMSymbolReference"||!d.symbol)return null;const{symbol:C}=d,n=this._canvas,w=x*A;n.width=s*w,n.height=m*w,c||(c=D(C)),g||(g=E(c,s,m,"legend")),n.width+=2*l,n.height+=2*l;const b=n.getContext("2d",{willReadFrequently:!0}),e=$.createIdentity();return e.translate(-R,-I),e.scale(o*w,-o*w),e.translate(s*w/2+l,m*w/2+l),b.clearRect(0,0,n.width,n.height),new j(b,this._cimResourceManager,e,!0).drawSymbol(C,g),b.getImageData(0,0,n.width,n.height)}}function B(f,a,s,m){return a==="esriGeometryPolygon"?{rings:z(S(f.rings,{xmin:0,ymin:0,width:s,height:m}),-1*s/2,-1*m/2)}:a==="esriGeometryPolyline"?{paths:z(S(f.paths,{xmin:0,ymin:0,width:s,height:m}),-1*s/2,-1*m/2)}:null}function E(f,a,s,m,R){const o=-a/2+1,c=a/2-1,l=s/2-1,g=-s/2+1;if(R&&(f==="esriGeometryPolygon"||f==="esriGeometryPolyline")){const x=B(R,f,a,s);if(x)return x}switch(f){case"esriGeometryPoint":return{x:0,y:0};case"esriGeometryPolyline":return{paths:[[[o,0],[0,0],[c,0]]]};default:return m==="legend"?{rings:[[[o,l],[c,0],[c,g],[o,g],[o,l]]]}:{rings:[[[o,l],[c,l],[c,g],[o,g],[o,l]]]}}}export{vt as CIMSymbolRasterizer};
