import{V as y,ad as T,ag as D,o as _,s as p,c7 as l,eq as S,i as m,aU as c,ep as L,b8 as v,b6 as M,b9 as A,be as k,q as r,v as n,H as N,G as I,x as C}from"./main-Crkq4LWq.js";import{I as u,i as g,E,m as G,h as $}from"./KnowledgeGraphSublayer-f_jBSbph.js";import{S as R}from"./MultiOriginJSONSupport-CMemxIrm.js";import{n as x}from"./uuid-Cl5lrJ4c.js";import{h as O}from"./Layer-DyCDZpQP.js";import{l as U}from"./ArcGISService-h-eGmjxq.js";import{p as K}from"./BlendLayer-Bfjdkd1n.js";import{e as F}from"./CustomParametersMixin-G4VLrCqq.js";import{b as j,y as z}from"./OperationalLayer-C2tThDwf.js";import{j as P}from"./PortalLayer-fZB0dEvA.js";import{f as H}from"./RefreshableLayer-CceKtwDJ.js";import{t as q}from"./ScaleRangeLayer-BXnA5dV_.js";import{u as V}from"./knowledgeGraphService-D3wvqNs7.js";import"./preload-helper-DMGCcr4D.js";import"./OptimizedGeometry-DmzaLtTI.js";import"./memoryEstimations-DknB37rc.js";import"./projectionUtils-CE8Ogge1.js";import"./constants-B4mRqufT.js";import"./featureConversionUtils-vqNz0xi_.js";import"./OptimizedFeature--b1MQl_i.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./GraphicsLayer-tdnGrVvL.js";import"./GraphicsCollection-BLVS1AvI.js";import"./ElevationInfo-Dpz_kzPY.js";import"./lengthUtils-l5Hl4s3A.js";import"./TimeExtent-R7s_TuxB.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-BKompkv5.js";import"./parser-B_oj8OEu.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-DgBklfbN.js";import"./common-DQOJ18NT.js";import"./Relationship-4HazavSl.js";import"./Query-D4pOe5d7.js";import"./Field-CfEWUurB.js";import"./fieldType-DTrwgDiS.js";import"./workers-cjuoJTHE.js";import"./Queue-DQom_e3o.js";import"./intl-BbkIuURR.js";import"./FeatureStore-fLIUJYIs.js";import"./BoundsStore-BGok9q87.js";import"./PooledRBush-D8lUsltd.js";import"./quickselect-QQC62dOK.js";import"./timeSupport-BSHfEr7S.js";import"./queryUtils-ClMG3bzJ.js";import"./normalizeUtils-Dg7DX0Kf.js";import"./normalizeUtilsCommon-KviMv5LJ.js";import"./utils-BdBs5klf.js";import"./utils-Courd1_m.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-Dy9yIpsm.js";import"./QueryEngine-t7pzjvRH.js";import"./WhereClauseCache-q1gNE3HZ.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./WhereClause-DGJjnXi9.js";import"./TimeOnly-BjqJuv0j.js";import"./enum-DXEdVlyM.js";import"./UnknownTimeZone-CGGNrDrV.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-kCN6oAvL.js";import"./utils-D1vkF8Cj.js";import"./heatmapUtils-BtFqvjWS.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./utils-ajTtzHMq.js";import"./timeZoneUtils-BHCW7jir.js";import"./utils-B1_wQfon.js";import"./ClassBreaksDefinition-nVrx5_mK.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-BJH-N2QN.js";import"./NormalizationBinParametersMixin-Cb9-c5re.js";import"./FieldsIndex-Cwq_t80R.js";import"./Scheduler-Pc61bPwM.js";import"./debugFlags-cjveQ8k-.js";import"./clientSideDefaults-BLprEVnH.js";import"./fieldProperties-BopWeUa5.js";import"./labelingInfo-DLuYGuzY.js";import"./asyncUtils-DfTs-X0F.js";import"./SimpleRenderer-Dbpl5h1j.js";import"./commonProperties-CYfuZJGd.js";import"./colorRamps-Bjywyw2D.js";import"./ColorStop-9dWa0RDE.js";import"./visualVariableUtils-BpBEckvt.js";import"./UniqueValueRenderer-BU4f67En.js";import"./diffUtils-COJ4IIqY.js";import"./RendererLegendOptions-CyIaj9P3.js";import"./styleUtils-DFM-g8fO.js";import"./RelationshipQuery-396yLOvg.js";import"./labelUtils-JQEemrpf.js";import"./DisplayFilteredLayer-Cikx86pz.js";import"./scaleUtils-CAiB8S_A.js";import"./displayFilterUtils-6TZ25n4b.js";import"./FeatureEffectLayer-CGe5chWa.js";import"./FeatureEffect-D63P5ELz.js";import"./FeatureFilter-DTtfJS5F.js";import"./FeatureReductionLayer-CVj6Qkhl.js";import"./FeatureReductionSelection-CbJd8GIU.js";import"./jsonUtils-CAbJUe8w.js";import"./typeUtils-CnKFz_x7.js";import"./ClassBreaksRenderer-CV4bp_5g.js";import"./DictionaryScriptEvaluator-BzcupkpP.js";import"./Version-Dg6OjmkZ.js";import"./ArcadeExpression-ON2N40QW.js";import"./utils-jjGHTGcN.js";import"./defaultCIMValues-CQAn2izL.js";import"./enums-_AFKM9Yk.js";import"./MD5-MtSiOt06.js";import"./OrderedLayer-CMieJIzt.js";import"./OrderByInfo-DvPX_B27.js";import"./TemporalLayer-DRVw0m8A.js";import"./TimeInfo-DCxRju0T.js";import"./FeatureSet-DRSRw7Pj.js";import"./popupUtils-BVHgSwa7.js";import"./utils-BV55yp3A.js";import"./cimSymbolUtils-TrTP_j9U.js";import"./PortalItem-DoXbvgWk.js";import"./portalItemUtils-DhVXTK5J.js";import"./networkEnums-DgBPWv46.js";import"./GPMessage-DwTGhfqg.js";let o=class extends K(q(H(U(j(P(R(F(O)))))))){constructor(e){super(e),this._graphTypeLookup=new Map,this._namedTypesModified=!1,this.dataManager=null,this.definitionSetMap=null,this.knowledgeGraph=null,this.layers=new(y.ofType(u)),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="KnowledgeGraphLayer",this.sublayerIdsCache=new Map,this.tables=new(y.ofType(u)),this.type="knowledge-graph",this.url=null,this.addHandles(T(()=>this.layers.concat(this.tables),(i,t)=>this._handleSublayersChange(i,t),D))}load(e){return this.addResolvingPromise(this._doLoad(e)),Promise.resolve(this)}async _doLoad(e){try{await this.loadFromPortal({supportedTypes:["Knowledge Graph Layer"]},e)}catch(i){_(i)}await this._fetchMetadata(),await this._initializeLayerProperties(),this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await g(this)}async _fetchMetadata(){if(!this.url)throw new p("knowledge-graph:missing-url","KnowledgeGraphLayer must be created with a url");const e=await V(this.url);this.knowledgeGraph=e,this._forEachGraphType(i=>{i.name&&this._graphTypeLookup.set(i.name,i)})}async _initializeLayerProperties(){this.originIdOf("inclusionModeDefinition")===l.USER?this._validateInclusionModeDefinition():await this._initializeInclusionModeDefinition(),this._setMemberTypes(),this.dataManager=new E({knowledgeGraph:this.knowledgeGraph,inclusionModeDefinition:this.inclusionModeDefinition})}async _initializeInclusionModeDefinition(){const e=this.definitionSetMap?await G(this.definitionSetMap,!0):{generateAllSublayers:!0,namedTypeDefinitions:new Map};[...this.layers.toArray(),...this.tables.toArray()].forEach(i=>{const t=this._graphTypeLookup.get(i.graphTypeName);t&&!e.namedTypeDefinitions.has(t.name)&&e.namedTypeDefinitions.set(t.name,{useAllData:!0})}),this.setAtOrigin("inclusionModeDefinition",e,S(this.originIdOf("definitionSetMap")))}_validateInclusionModeDefinition(){const{inclusionModeDefinition:e}=this;if(!e)return;const{namedTypeDefinitions:i}=e;if(i?.size>0)i.forEach((t,a)=>{const s=this._graphTypeLookup.get(a);if(!s)return m.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't in the data model and will be removed`),void i.delete(a);s.type!=="relationship"&&s.type!=="entity"&&(m.getLogger(this).warn(`A named type, ${a}, was in the inclusion list that wasn't properly modeled and will be removed`),i.delete(a))});else if(!e.generateAllSublayers)throw new p("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined")}_setMemberTypes(){let e=[],i=[];const{inclusionModeDefinition:t}=this,a=t?.namedTypeDefinitions;!t||t.generateAllSublayers?(e=this.knowledgeGraph.dataModel?.entityTypes??[],i=this.knowledgeGraph.dataModel?.relationshipTypes??[]):a&&a.size>0&&a.forEach((s,d)=>{const h=this._graphTypeLookup.get(d);switch(h?.type){case"relationship":i.push(h);break;case"entity":e.push(h)}}),this.memberEntityTypes=e,this.memberRelationshipTypes=i}_forEachGraphType(e){[...this.knowledgeGraph.dataModel?.entityTypes??[],...this.knowledgeGraph.dataModel?.relationshipTypes??[]].forEach(i=>{e(i)})}_refreshNamedTypes(){this._namedTypesModified=!0;for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}async _handleNewRecords(e){const i=new Set,t=[];for(const a of e)this._graphTypeLookup.has(a.typeName)&&(this.layers.concat(this.tables).some(s=>s.objectType.name===a.typeName)===!1&&(this.dataManager.sublayerCaches.set(a.typeName,new Map),i.add(a.typeName)),c(this.sublayerIdsCache,a.typeName,()=>new Set).add(a.id),t.push(a));this.dataManager.addToLayer(t);for(const a of i){const s=this._graphTypeLookup.get(a);s&&(this._addSublayer(s),s.type==="entity"?this.dataManager.entityTypeNames.add(a):this.dataManager.relationshipTypeNames.add(a))}await g(this,Array.from(i)),this._refreshNamedTypes()}_createSublayers(e,i,t){e.forEach(a=>{const s=this._createSublayer(a);t(s)&&i.push(s),this._updateSublayerCaches(a)})}_addSublayer(e){const i=this._createSublayer(e);return i.geometryType?this.layers.push(i):this.tables.push(i),i}_createSublayer(e){return new u({objectType:e,parentCompositeLayer:this,graphType:e.type})}_updateSublayers(e,i){i.forEach(t=>{t.parentCompositeLayer=this;const a=e.find(s=>s.type===t.graphType&&s.name===t.graphTypeName);a&&(t.objectType=a,this._updateSublayerCaches(a))})}_updateSublayerCaches({name:e}){if(!e)return;const i=this.dataManager.sublayerCaches;i.has(e)||i.set(e,new Map)}_saveUrlAsNewResource(e,i,t,a){e[i]="<pending>",t.pendingOperations.push(B(this.inclusionModeDefinition).then(s=>{const d=Y(a);e[i]=d.itemRelativeUrl,t.toAdd.push({resource:d,content:{type:"blob",blob:s},compress:!1,finish:h=>{this.definitionSetMap=h.url}})}))}_displaysAllRecords(e){for(const[,{useAllData:i}]of e.namedTypeDefinitions)if(!i)return!1;return!0}_handleSublayersChange(e,i){i&&(i.forEach(t=>{t.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(t=>{t.parent=this}),this.addHandles([e.on("after-add",({item:t})=>{t.parent=this}),e.on("after-remove",({item:t})=>{t.parent=null})],"sublayers-owner"))}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=l.PORTAL_ITEM&&e<l.USER}readDefinitionSetMap(e,i,t){return L(e,t)}writeDefinitionSetMap(e,i,t,a){const s=a?.portalItem,d=a?.resources,h=v(a?.origin);if(!s||!d||h==null)return void(e&&(i[t]=M(e,a)));const{inclusionModeDefinition:w}=this;if(!w||this._displaysAllRecords(w))return void(this.definitionSetMap=null);const f=this.originIdOf("inclusionModeDefinition");if(f===l.USER||this._namedTypesModified||h<f)this._saveUrlAsNewResource(i,t,d,s);else if(h===f&&e){const b=M(e,a);A(b)?this._saveUrlAsNewResource(i,t,d,s):i[t]=b}}set inclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("inclusionModeDefinition",e):m.getLogger(this).error("#inclusionModeDefinition","inclusionModeDefinition cannot be changed after the layer is loaded.")}loadLayerAssumingLocalCache(){const e=[...this.memberEntityTypes,...this.memberRelationshipTypes];this.layers.length||this.originIdOf("tables")===l.DEFAULTS?this.originIdOf("layers")===l.DEFAULTS?this._createSublayers(e,this.layers,i=>!!i.geometryType):this._updateSublayers(e,this.layers):this.layers=new y,this.tables.length||this.originIdOf("layers")===l.DEFAULTS?this.originIdOf("tables")===l.DEFAULTS?this._createSublayers(e,this.tables,i=>!i.geometryType):this._updateSublayers(e,this.tables):this.tables=new y,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((i,t)=>{const a=c(this.sublayerIdsCache,t,()=>new Set);i.members?.forEach(s=>{a.add(s.id)})})}async addRecords(e){await this.load(),await this._handleNewRecords(e)}async createSublayerForNamedType(e){await this.load();const i=this._graphTypeLookup.get(e);if(!i)throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),c(this.sublayerIdsCache,e,()=>new Set);const t=this._addSublayer(i);return i.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),await g(this,[e]),this._refreshNamedTypes(),t}convertSublayerToDynamicData(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e)?.useAllData?m.getLogger(this).warn("This Knowledge Graph Layer already uses dynamic membership for the sublayer - no conversion was made"):(this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!0}),this.sublayerIdsCache.delete(e),this._refreshNamedTypes())}convertSublayerToExplicitMembership(e){if(!this.dataManager.inclusionModeDefinition)throw new p("knowledge-graph:fully-dynamic-membership","This Knowledge Graph Layer already uses fully dynamic membership, individual sublayers cannot be converted");if(!this._graphTypeLookup.get(e))throw new p("knowledge-graph:missing-type","The specified type does not exist in the layer's graph data model.");const i=this.dataManager.inclusionModeDefinition.namedTypeDefinitions.get(e);if(!i||i.useAllData){if(!this.dataManager.sublayerCaches.has(e))throw new p("knowledge-graph:duplicate-type","The specified type does not exist as a sublayer.");this.sublayerIdsCache.set(e,new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map}),this._refreshNamedTypes()}else m.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership for the sublayer - no conversion was made")}convertToFullyDynamicData(){this.dataManager.inclusionModeDefinition||m.getLogger(this).warn("This Knowledge Graph Layer already uses fully dynamic membership - no conversion was made"),this.sublayerIdsCache.clear(),this.dataManager.inclusionModeDefinition=null,this._refreshNamedTypes()}convertToExplicitMembership(){this.dataManager.inclusionModeDefinition&&this.dataManager.inclusionModeDefinition.namedTypeDefinitions.size>0&&m.getLogger(this).warn("This Knowledge Graph Layer already uses explicit membership - no conversion was made"),this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map};for(const e of this.dataManager.sublayerCaches.keys())c(this.sublayerIdsCache,e,()=>new Set),this.dataManager.inclusionModeDefinition.namedTypeDefinitions.set(e,{useAllData:!1,members:new Map});this._refreshNamedTypes()}async removeRecords(e){await this.load();const i=[];for(const t of e)this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(t.typeName)?.members?.has(t.id)&&i.push(t);this.dataManager.removeFromLayer(i);for(const t of i)this.sublayerIdsCache.get(t.typeName)?.delete(t.id);return this._refreshNamedTypes(),i}};r([n()],o.prototype,"dataManager",void 0),r([n({json:{write:{ignoreOrigin:!0,writerEnsuresNonNull:!0}}})],o.prototype,"definitionSetMap",void 0),r([N("definitionSetMap")],o.prototype,"readDefinitionSetMap",null),r([I("definitionSetMap")],o.prototype,"writeDefinitionSetMap",null),r([n()],o.prototype,"inclusionModeDefinition",null),r([n()],o.prototype,"knowledgeGraph",void 0),r([n({type:y.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"layers",void 0),r([n()],o.prototype,"memberEntityTypes",void 0),r([n()],o.prototype,"memberRelationshipTypes",void 0),r([n({type:["KnowledgeGraphLayer"]})],o.prototype,"operationalLayerType",void 0),r([n()],o.prototype,"sublayerIdsCache",void 0),r([n({type:y.ofType(u),json:{write:{ignoreOrigin:!0}}})],o.prototype,"tables",void 0),r([n({json:{read:!1}})],o.prototype,"type",void 0),r([n(z)],o.prototype,"url",void 0),o=r([C("esri.layers.KnowledgeGraphLayer")],o);const nt=o;async function B(e){const i=await $(e);return new Blob([i],{type:"application/x-protobuf"})}function Y(e){const i=`definitionSetMap-${x()}.dat`,t=k("knowledgeGraphLayer",i);return e.resourceFromPath(t)}export{nt as default};
