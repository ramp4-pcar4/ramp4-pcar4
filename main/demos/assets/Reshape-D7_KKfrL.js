import{j as tt,hP as A,aU as et,a3 as P,i as B,g0 as H,ge as R,N as it,ad as x,hQ as st,hR as ot,q as h,v as c,x as F,eb as rt,ag as X,g3 as nt,b$ as S,cJ as at,V as O,dw as b,hS as ht,ae as pt,e4 as ct,M as E,hT as lt,an as dt,aH as U,n as z,bx as C,hU as mt,dy as V,s as vt}from"./main-Crkq4LWq.js";import{d as Y}from"./asyncUtils-DfTs-X0F.js";import L from"./GraphicsLayer-tdnGrVvL.js";import{l as ut}from"./ViewingMode-Chk7YAAL.js";import{d as yt}from"./SnappingVisualizer2D-xAy-1B17.js";import{h as gt}from"./UpdatingHandles-eO6gDPm8.js";import{x as _t}from"./symbolUtils-CEQ-GrIm.js";import{e as J,p as ft,i as xt}from"./SelectedVertexTooltipInfo-DS-45wiM.js";import{i as Gt}from"./drawUtils-CTtwUuox.js";import{l as Mt,j as wt}from"./GraphicMover-DjwQ8Cjr.js";import{R as bt,l as K,t as Vt,A as St}from"./SketchViewModel-Cxe7wh4H.js";import{h as $}from"./quantityUtils-DTW_4BVX.js";import{r as It,C as Et,F as Tt,R as Ot,H as kt}from"./SketchTooltipInfo-DP18t8jJ.js";import{i as Rt}from"./TranslateTooltipInfo-C1Xa7Yjq.js";import{h as Ct}from"./settings-Ds-BgN6L.js";import{_ as Lt,a as $t}from"./utils-5b6BMTlC.js";import{P as Ht,E as Ft,e as At}from"./SnappingContext-vedw1Tuu.js";import"./preload-helper-DMGCcr4D.js";import"./GraphicsCollection-BLVS1AvI.js";import"./Layer-DyCDZpQP.js";import"./TimeExtent-R7s_TuxB.js";import"./BlendLayer-Bfjdkd1n.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-BKompkv5.js";import"./parser-B_oj8OEu.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-DgBklfbN.js";import"./common-DQOJ18NT.js";import"./ScaleRangeLayer-BXnA5dV_.js";import"./ElevationInfo-Dpz_kzPY.js";import"./lengthUtils-l5Hl4s3A.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./enums-_AFKM9Yk.js";import"./TooltipInfoWithCoordinates-CTUSP-a3.js";import"./PointSnappingHint-B1PXgiFi.js";import"./vec32-StvNi8k0.js";import"./uuid-Cl5lrJ4c.js";import"./utils-BV55yp3A.js";import"./cimSymbolUtils-TrTP_j9U.js";import"./utils-jjGHTGcN.js";import"./defaultCIMValues-CQAn2izL.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./colorUtils-DXf65Ue7.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./jsxFactory-Bp35jaL4.js";import"./intl-BbkIuURR.js";import"./sanitizerUtils-CJlLEeXg.js";import"./mat2df32-Dpt2CT5P.js";import"./mat2d-D9DBP-jx.js";import"./webStyleSymbolUtils-C5uFZbeR.js";import"./devEnvironmentUtils-8WtPGj6h.js";import"./styleUtils-DFM-g8fO.js";import"./layerViewUtils-Brvm02SE.js";import"./GraphicManipulator-CWe70bmu.js";import"./projectionUtils-CE8Ogge1.js";import"./projectPointToVector-B_RLdrnF.js";import"./elevationInfoUtils-C-eITEDo.js";import"./drapedUtils-EBbyXDAJ.js";import"./editableLayers-DsLdzz8Q.js";import"./Cyclical-CYdxR5S5.js";import"./projectVectorToVector-CXK6AJBx.js";import"./geodesicUtils-qV27ZpRT.js";import"./Query-D4pOe5d7.js";import"./Field-CfEWUurB.js";import"./fieldType-DTrwgDiS.js";import"./plane-7bhr6keP.js";import"./vectorStacks-Cd8-MasH.js";import"./mat3f64-B5o_lm6j.js";import"./mat4f64-q_b6UJoq.js";import"./quatf64-aQ5IuZRd.js";import"./sphere-DgnHRQ8H.js";import"./mat3-CruJiiUv.js";import"./geodeticLengthOperator-D2uEr3jt.js";import"./geodeticCurveType-CirnHLSB.js";import"./earcut-D9gy186-.js";import"./triangle-BLCwu4RR.js";import"./lineSegment-CXgzQlZ9.js";import"./spatialReferenceEllipsoidUtils-BmAdRYxg.js";import"./MeshTransform-Bo1nfSr1.js";import"./quat-BdX_xxEX.js";import"./axisAngleDegrees-CkINwHEZ.js";import"./meshVertexSpaceUtils-CDAP084L.js";import"./MeshLocalVertexSpace-B6u0QgA8.js";import"./modeUtils-1fSvrGRf.js";import"./a11yUtils-lesmaVf1.js";import"./memoize-DmxaQ-k8.js";import"./unitFormatUtils-C43eQkjK.js";import"./ByteSizeUnit-BsxeN7wM.js";import"./index-DVM1Yu78.js";import"./dynamic-import-helper-BheWnx7M.js";import"./draw-store-uzT-ER2v.js";import"./utils-BQBvadb7.js";import"./widget-flha4rft.js";import"./substitute-BkMjPE4b.js";import"./Queue-DQom_e3o.js";import"./Version-Dg6OjmkZ.js";var T;(function(t){t[t.FeatureMove=0]="FeatureMove",t[t.VertexMove=1]="VertexMove"})(T||(T={}));const Pt=()=>B.getLogger("esri.views.draw.support.ConnectedReshapeManager"),Ut=Symbol();let w=class extends tt{constructor(t){super(t),this.activeOperationType=null,this.providerFactories=[],this.view=null,this._activeProviders=new Set,this._graphics=new Map,this._modifiedFeatures=new Map,this._modifiedGraphicsLayer=new L({listMode:"hide",internal:!0,title:"Connected Reshape Modified Graphics (Internal)"}),this._pendingGraphicsLayer=new L({listMode:"hide",internal:!0,title:"Connected Reshape Pending Graphics (Internal)"}),this._pendingFeatures=new Map,this._updatingHandles=new gt}initialize(){this.view.map.addMany([this._modifiedGraphicsLayer,this._pendingGraphicsLayer])}destroy(){this.view.destroyed||this.view.map.removeMany([this._modifiedGraphicsLayer,this._pendingGraphicsLayer]),this._modifiedGraphicsLayer.destroy(),this._pendingGraphicsLayer.destroy(),this._updatingHandles.destroy()}get updating(){return this._updatingHandles.updating||Array.from(this._activeProviders).some(t=>t.updating)}startFeatureMove(t){this.activeOperationType=T.FeatureMove,this._activeProviders.clear();for(const e of this.providerFactories)A(this._activeProviders,e.getFeatureReshapeProvider(t))}startVertexMove(t,e){this.activeOperationType=T.VertexMove,this._activeProviders.clear();for(const i of this.providerFactories)A(this._activeProviders,i.getVertexReshapeProvider(t,e))}finish(){this.activeOperationType=null,this._activeProviders.clear();for(const[t,e]of this._pendingFeatures){this._pendingFeatures.delete(t),this._modifiedFeatures.set(t,e);const i=this._graphics.get(t);i&&(this._modifiedGraphicsLayer.add(i),this._pendingGraphicsLayer.remove(i))}}translate(t,e,i=0){if(this.activeOperationType===null)return;const s=k(t),r=k(e),o=k(i);for(const n of this._activeProviders){const a=n.translate(s,r,o);this._update(a)}}async _initializeGraphic(t,e){t.symbol??=await this._updatingHandles.addPromise(_t(t,{scale:this.view.scale,useSourceLayer:!0})),this._pendingFeatures.has(e.uniqueId)?this._pendingGraphicsLayer.add(t):this._modifiedFeatures.has(e.uniqueId)&&this._modifiedGraphicsLayer.add(t),this.addHandles(await zt(e.originalGraphic,t,this.view),Ut)}_update(t){for(const e of t){const i=this._modifiedFeatures.delete(e.uniqueId);this._pendingFeatures.set(e.uniqueId,e);const s=et(this._graphics,e.uniqueId,()=>{const r=e.graphic.cloneShallow();return this._initializeGraphic(r,e),r});s.geometry=e.graphic.geometry,i&&(this._modifiedGraphicsLayer.remove(s),this._pendingGraphicsLayer.add(s))}}get test(){return{activeProviders:this._activeProviders,modifiedFeatures:this._modifiedFeatures,modifiedGraphicsLayer:this._modifiedGraphicsLayer,pendingFeatures:this._pendingFeatures,pendingGraphicsLayer:this._pendingGraphicsLayer}}};async function zt(t,e,i){const s=t.sourceLayer,r=t.getObjectId();if(r==null)return Pt().error("editing:cannot-hide-graphic","Unable to hide original graphic because it has no objectId."),P();let o=null;function n(a){o?.abort(),o=Y(async p=>{const l=await D(i,s);it(p),l&&l.setVisibility?.(r,a)})}return await jt(i,e),n(!1),H([Dt(i,e,a=>n(!a)),P(async()=>{n(!0);const a=await D(i,s);await R(()=>!a?.updating)})])}function Dt(t,e,i){if(t.type==="3d"){const s=new J({graphic:e});return H([t.trackGraphicState(s),x(()=>s.displaying,i)])}return x(()=>e.visible,i)}async function jt(t,e){if(t.type==="3d"){const i=new J({graphic:e}),s=t.trackGraphicState(i);await R(()=>i.displaying||i.error),s.remove()}else await R(()=>e.visible)}async function D(t,e){const i=st(e)||ot(e)?e.parent:e;return i?t.whenLayerView(i):null}function k(t){return isNaN(t)?0:t}h([c()],w.prototype,"activeOperationType",void 0),h([c()],w.prototype,"providerFactories",void 0),h([c()],w.prototype,"updating",null),h([c({constructOnly:!0})],w.prototype,"view",void 0),w=h([F("esri.views.draw.support.ConnectedReshapeManager")],w);let G=class extends It{constructor(t){super(t),this.type="translate-vertex",this.distance=$,this.elevation=null,this.area=null,this.totalLength=null}clear(){this.distance=$,this.elevation=null,this.area=null,this.totalLength=null}};h([c()],G.prototype,"type",void 0),h([c()],G.prototype,"distance",void 0),h([c()],G.prototype,"elevation",void 0),h([c()],G.prototype,"area",void 0),h([c()],G.prototype,"totalLength",void 0),G=h([F("esri.views.interactive.tooltip.infos.TranslateVertexTooltipInfo")],G);function Nt(t){const e={sketchOptions:t,viewType:"2d"};return{movePoint:new xt(e),selectedVertex:new ft(e),translateGraphic:new Rt(e),translateVertices:new G(e)}}function qt(t,e){function i(){const o=e(),n=o.sketchOptions.tooltips.effectiveEnabled?o.activeTooltipInfo:null;return{...o,activeTooltipInfo:n}}let s=!1;function r(o){s||(s=!0,o(),s=!1)}return H([x(()=>{const o=i();return{context:o,geometry:o.graphic?.geometry,vertexGeometry:o.selectedVertex?.geometry}},({context:o})=>{r(()=>{Zt(o),t.info=o.activeTooltipInfo})},rt),x(()=>{const o=i(),{activeTooltipInfo:n}=o;if(n&&"key"in n)return{context:o,key:n.key}},(o,n)=>{o&&n&&o.key!==n.key&&r(()=>j(o.context))},X),Et(t,{onBeforePaste:()=>{s=!0},onAfterPaste:()=>{j(i()),s=!1}})])}function Zt(t){const e=t.activeTooltipInfo;if(e){switch(e?.type){case"move-point":return Bt(e,t);case"selected-vertex":return Xt(e,t)}e.sketchOptions=t.sketchOptions}}function Bt(t,{graphic:e}){Q(t,e,e?.geometry)}function Xt(t,{graphic:e,selectedVertex:i,automaticAreaMeasurementUtils:s,automaticLengthMeasurementUtils:r}){Q(t,e,i?.geometry);const o=e?.geometry;switch(o?.type){case"polygon":t.geometryType="polygon",t.totalLength.visible=!1,t.area.actual=s.autoArea2D(o);break;case"polyline":t.geometryType="polyline",t.totalLength.actual=r.autoLength2D(o),t.area.visible=!1}}function Q(t,e,i){e&&i?.type==="point"&&(t.setLocationFromPoint(i),t.elevation.actual=bt(i),t.elevation.visible=!!e.geometry?.hasZ,t.elevation.readOnly=!1,t.elevation.showAsZ=!0)}function j(t){function e(o,n){const a=n?.geometry;if(!a||a.type!=="point")return;const{dx:p,dy:l,dz:d}=Tt(o,a);if(p===0&&l===0&&d===0)return;const{x:v,y:u,z:g,m:f,spatialReference:y}=a,M=new S({x:v+p,y:u+l,z:g!=null?g+d:void 0,m:f,spatialReference:y});t.updateGeometry(n,M,a,p,l)}const{activeTooltipInfo:i,graphic:s,selectedVertex:r}=t;switch(i?.type){case"move-point":return e(i,s);case"selected-vertex":return e(i,r)}}function Yt(t,e,i,s){t.clear(),W(t,e,s,i)}function Jt(t,e,i,s,r){t.clear();const{automaticAreaMeasurementUtils:o,automaticLengthMeasurementUtils:n}=s;i?.type==="polygon"?t.area=o.autoArea2D(i):i?.type==="polyline"&&(t.totalLength=n.autoLength2D(i)),W(t,e,r,s)}function W(t,e,i,{automaticLengthMeasurementUtils:s}){if(!i)return;const{x:r,y:o}=i.origin,n=e.toMap(i),a=e.toMap(nt(r,o)),p=s.autoDistanceBetweenPoints2D(a,n);t.distance=p??$}class Kt{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape-start"}}class Qt{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape"}}class Wt{constructor(e,i,s){this.graphic=e,this.mover=i,this.selected=s,this.type="reshape-stop"}}class te{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move-start"}}class ee{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move"}}class ie{constructor(e,i,s){this.mover=e,this.dx=i,this.dy=s,this.type="move-stop"}}class se{constructor(e){this.added=e,this.type="vertex-select"}}class oe{constructor(e){this.removed=e,this.type="vertex-deselect"}}class re{constructor(e,i,s,r){this.added=e,this.graphic=i,this.oldGraphic=s,this.vertices=r,this.type="vertex-add"}}class ne{constructor(e,i,s,r){this.removed=e,this.graphic=i,this.oldGraphic=s,this.vertices=r,this.type="vertex-remove"}}const _=Ct.reshapeGraphics,ae={vertices:{default:new b({style:"circle",size:_.vertex.size,color:_.vertex.color,outline:{color:_.vertex.outlineColor,width:1}}),hover:new b({style:"circle",size:_.vertex.hoverSize,color:_.vertex.hoverColor,outline:{color:_.vertex.hoverOutlineColor,width:1}}),selected:new b({style:"circle",size:_.selected.size,color:_.selected.color,outline:{color:_.selected.outlineColor,width:1}})},midpoints:{default:new b({style:"circle",size:_.midpoint.size,color:_.midpoint.color,outline:{color:_.midpoint.outlineColor,width:1}}),hover:new b({style:"circle",size:_.midpoint.size,color:_.midpoint.color,outline:{color:_.midpoint.outlineColor,width:1}})}};let m=class extends at.EventedAccessor{constructor(t){super(t),this._updateHandlesOnExternalGeometryChange=null,this._activeOperationInfo=null,this._connectedReshapeManager=null,this._editGeometryOperations=null,this._graphicAttributes={esriSketchTool:"box"},this._mover=null,this._snappingContext=null,this._snappingGraphicsLayer=null,this._hoverGraphic=null,this._snappingTask=null,this._stagedVertex=null,this.tooltip=null,this.activeTooltipInfo=null,this.callbacks={onReshapeStart(){},onReshape(){},onReshapeStop(){},onMoveStart(){},onMove(){},onMoveStop(){},onGraphicClick(){}},this.connectedReshapeProviders=null,this.enableMidpoints=!0,this.enableMovement=!0,this.enableVertices=!0,this.graphic=null,this.highlightName=null,this.highlightsEnabled=!0,this.layer=null,this.midpointGraphics=new O,this.midpointSymbol=new b({style:"circle",size:6,color:[200,200,200],outline:{color:[100,100,100],width:1}}),this.selectedVertices=new O,this.snappingManager=null,this.symbols=ae,this.sketchOptions=new K,this.type="reshape",this.vertexGraphics=new O,this.view=null}initialize(){const t=this.view;this._highlightHelper=new Mt({view:t}),this._setup(),this._updateHandlesOnExternalGeometryChange=ht(()=>this.graphic?.geometry,e=>{if(!e)return;const i=new Set(this.selectedVertices.map(l=>l.attributes?.pointIndex));this._highlightHelper.removeAll(),this._setUpHighlights(),this._setupGraphics(),this._clearSelection(),this.vertexGraphics.filter(l=>i.has(l.attributes.pointIndex)).forEach(l=>this._addToSelection(l));const{enableMovement:s,_mover:r,graphic:o,midpointGraphics:n,vertexGraphics:a}=this,p=a.concat(n).items;s&&p.push(o),r?.set("graphics",p)},X),this.tooltip=Ot(()=>({view:t,options:this.sketchOptions.tooltips})),this.tooltipInfos=Nt(this.sketchOptions),this.addHandles([pt(()=>t?.ready,()=>{const{layer:e,view:i}=this;Vt(i,e),this.addHandles(i.on("key-down",s=>this._keyDownHandler(s),Lt.TOOL))},{once:!0,initial:!0}),x(()=>this.graphic,()=>this.refresh()),x(()=>this.layer,(e,i)=>{i&&(this._clearSelection(),this._resetGraphics(i)),this.refresh()}),x(()=>[this.highlightsEnabled,this.highlightName],()=>{this._highlightHelper?.removeAll(),this._setUpHighlights()}),x(()=>this.enableMidpoints,()=>this.refresh()),qt(this.tooltip,()=>this._tooltipsContext),x(()=>this.view.effectiveTheme.accentColor,()=>this._updateSymbolsForTheme(),ct),this._updateHandlesOnExternalGeometryChange]),this._updateTooltip()}destroy(){this._reset(),this._mover?.destroy(),this._mover=null,this._connectedReshapeManager=E(this._connectedReshapeManager),this.tooltip=E(this.tooltip)}get _coordinateHelper(){return this._editGeometryOperations?.data.coordinateHelper??Ht(!!this.graphic.geometry?.hasZ,!!this.graphic.geometry?.hasM,this.view.spatialReference)}get _selectedVertex(){return this.selectedVertices.length===1?this.selectedVertices.at(0):void 0}get _tooltipsContext(){const{automaticAreaMeasurementUtils:t,automaticLengthMeasurementUtils:e,sketchOptions:i,activeTooltipInfo:s,graphic:r}=this;return{sketchOptions:i,activeTooltipInfo:s,graphic:r,selectedVertex:this._selectedVertex,automaticAreaMeasurementUtils:t,automaticLengthMeasurementUtils:e,updateGeometry:(o,n,a,p,l)=>{this._setUpGeometryHelper();const d=o===this.graphic;if(d?this._emitMoveStartEvent(0,0):this._emitReshapeStartEvent(o),this._syncGeometryAfterVertexMove(o,n,p,l,!0),d){const{view:u}=this,g=u.toScreen(a),f=u.toScreen(n),y=(f?.x??0)-(g?.x??0),M=(f?.y??0)-(g?.y??0);this._emitMoveEvent(y,M),this._emitMoveStopEvent(y,M)}else this._emitReshapeEvent(o),this._emitReshapeStopEvent(o);this._editGeometryOperations=E(this._editGeometryOperations)}}}get state(){const t=this.view.ready,e=!(!this.graphic||!this.layer);return t&&e?"active":t?"ready":"disabled"}isUIGraphic(t){const e=[];return this.graphic&&e.push(this.graphic),e.concat(this.vertexGraphics.items,this.midpointGraphics.items),e.length>0&&e.includes(t)}refresh(){this._reset(),this._setup()}reset(){this.graphic=null}clearSelection(){this._clearSelection()}removeSelectedVertices(){const{selectedVertices:t}=this;t.length&&this._removeVertices(t)}_setup(){const{graphic:t,layer:e}=this;if(!e||t?.geometry==null)return;const i=t.geometry;i.type!=="mesh"&&i.type!=="extent"?(i.type==="polygon"&&lt(i),this._setUpHighlights(),this._setupGraphics(),this._setupMover(),this._setupConnectedReshapeManager()):this._logGeometryTypeError()}_setUpHighlights(){this.highlightsEnabled&&this.graphic&&this._highlightHelper?.add(this.graphic,this.highlightName)}_setUpGeometryHelper(){const t=this.graphic.geometry;if(t==null||t.type==="mesh"||t.type==="extent")return void this._logGeometryTypeError();const e=t.type==="multipoint"?new dt({paths:[t.points],spatialReference:t.spatialReference}):t;this._editGeometryOperations=Ft.fromGeometry(e,ut.Local)}_saveSnappingContextForHandle(t,e){this._snappingGraphicsLayer=new L({listMode:"hide",internal:!0,title:"Reshape snapping layer"}),this.view.map.layers.add(this._snappingGraphicsLayer);const i=this._editGeometryOperations;U(i),this._snappingContext=new At({editGeometryOperations:i,elevationInfo:{mode:"on-the-ground",offset:0},pointer:e.viewEvent?.pointerType||"mouse",excludeFeature:this.graphic,feature:this.graphic,visualizer:new yt(this._snappingGraphicsLayer),vertexHandle:this._getVertexFromEditGeometry(t)})}_reset(){this._clearSelection(),this._highlightHelper?.removeAll(),this._updateTooltip(),this._resetGraphics(),this._resetSnappingStateVars(),this._activeOperationInfo=null,this._mover&&this._mover.destroy(),this._mover=null,this.view.cursor="default"}_resetSnappingStateVars(){this.snappingManager!=null&&this.snappingManager.doneSnapping(),this._snappingGraphicsLayer!=null&&(this.view?.map&&this.view.map.layers.remove(this._snappingGraphicsLayer),this._snappingGraphicsLayer.destroy()),this._editGeometryOperations=E(this._editGeometryOperations),this._snappingTask=z(this._snappingTask),this._snappingTask=null,this._snappingContext=null,this._stagedVertex=null}_resetGraphics(t){this._removeMidpointGraphics(t),this._removeVertexGraphics(t),this.selectedVertices.removeAll(),this._updateTooltip()}_removeMidpointGraphics(t){const e=t||this.layer;e&&e.removeMany(this.midpointGraphics.items),this.midpointGraphics.items.forEach(i=>i.destroy()),this.midpointGraphics.removeAll()}_removeVertexGraphics(t){const e=t||this.layer;e&&e.removeMany(this.vertexGraphics.items),this.vertexGraphics.items.forEach(i=>i.destroy()),this.vertexGraphics.removeAll()}_setupGraphics(){const t=this.graphic.geometry;if(t!=null&&(t.type==="polyline"||t.type==="polygon")){const e=N(t);this.enableMidpoints&&this._setUpMidpointGraphics(e),this.enableVertices&&this._setUpVertexGraphics(e)}}_setUpMidpointGraphics(t){this._removeMidpointGraphics();const e=this._createMidpointGraphics(t);this.midpointGraphics.addMany(e),this.layer.addMany(e)}_setUpVertexGraphics(t){this._removeVertexGraphics();const e=this._createVertexGraphics(t);this.vertexGraphics.addMany(e),this._storeRelatedVertexIndices(),this.layer.addMany(e)}_createVertexGraphics(t){const{_graphicAttributes:e,symbols:i}=this,s=[];return t?.forEach((r,o)=>{r.forEach((n,a)=>{s.push(new C({geometry:this._coordinateHelper.arrayToPoint(n),symbol:i?.vertices?.default,attributes:{...e,pathIndex:o,pointIndex:a}}))})}),s}_createMidpointGraphics(t){const{_graphicAttributes:e,symbols:i}=this,s=[];for(let r=0;r<t.length;r++){const o=t[r];for(let n=0;n<o.length;n++){const a=(n+1)%o.length;if(this.graphic.geometry?.type==="polyline"&&a===0)continue;const p=o[n],l=o[a],d=this._getMidpoint(p,l);s.push(new C({geometry:d,symbol:i.midpoints.default,attributes:{...e,pathIndex:r,pointIndexStart:n,pointIndexEnd:a}}))}}return s}_updateSymbolsForTheme(){const t=this.view.effectiveTheme.accentColor;this.symbols={vertices:{...this.symbols.vertices,default:this.symbols.vertices.default.clone().set("color",t),hover:this.symbols.vertices.hover?.clone().set("color",t)},midpoints:{...this.symbols.midpoints}};for(const e of this.vertexGraphics)this._isSelected(e)?e.symbol=this.symbols.vertices.selected:this._hoverGraphic===e?e.symbol=this.symbols.vertices.hover:e.symbol=this.symbols.vertices.default}_storeRelatedVertexIndices(){const t=this.vertexGraphics.items;if(!t)return;const e=t.map(({geometry:i})=>({x:i.x,y:i.y}));for(let i=0;i<e.length;i++){const s=[];for(let r=0;r<e.length;r++){if(i===r)continue;const o=e[i],n=e[r];o.x===n.x&&o.y===n.y&&s.push(r)}t[i].attributes.relatedGraphicIndices=s}}_setupMover(){const{enableMovement:t,graphic:e,midpointGraphics:i,vertexGraphics:s,view:r}=this,o=s.concat(i).items;t&&o.push(e),this._mover=new wt({enableMoveAllGraphics:!1,highlightsEnabled:!1,indicatorsEnabled:!1,graphics:o,view:r,callbacks:{onGraphicClick:n=>this._onGraphicClickCallback(n),onGraphicMoveStart:n=>this._onGraphicMoveStartCallback(n),onGraphicMove:n=>this._onGraphicMoveCallback(n),onGraphicMoveStop:n=>this._onGraphicMoveStopCallback(n),onGraphicPointerOver:n=>this._onGraphicPointerOverCallback(n),onGraphicPointerOut:n=>this._onGraphicPointerOutCallback(n)}})}_setupConnectedReshapeManager(){const{connectedReshapeProviders:t}=this;t!=null&&t.length!==0&&(this._connectedReshapeManager=new w({providerFactories:t,view:this.view}))}_onGraphicClickCallback(t){t.viewEvent.stopPropagation();const e=t.graphic;if(e===this.graphic)this.clearSelection(),this.emit("graphic-click",t),this.callbacks.onGraphicClick?.(t);else if(this._isMidpoint(e)){if(t.viewEvent.button===2)return;const i=this.graphic.clone(),s=this._createVertexFromMidpoint(e);this.refresh(),this._emitVertexAddEvent([e],i,s)}else this._isVertex(e)&&(t.viewEvent.stopPropagation(),t.viewEvent.button===2?this._removeVertices(e):(t.viewEvent.native.shiftKey||this._clearSelection(),this.selectedVertices.includes(e)?this._removeFromSelection(e,!0):this._addToSelection(e)))}_setUpOperation(t){const{graphic:e,dx:i,dy:s}=t,r=e===this.graphic;this._resetSnappingStateVars(),this._setUpGeometryHelper(),this._saveSnappingContextForHandle(e,t),this._activeOperationInfo={target:this.graphic,mover:e,operationType:r?"move":"reshape",totalDx:i,totalDy:s}}_onGraphicMoveStartCallback(t){const{dx:e,dy:i,graphic:s}=t,r=this._connectedReshapeManager,o=r?he(this.graphic):null;if(s===this.graphic){const{geometry:a}=s;return this._setUpOperation(t),this._emitMoveStartEvent(e,i),o&&r?.startFeatureMove([o]),void(a!=null&&a.type==="point"&&this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(e,i)}))}const{selectedVertices:n}=this;if(!n.includes(s)){if(this._clearSelection(),this._isMidpoint(s)){const a=this.graphic.clone(),p=this._createVertexFromMidpoint(s);this._emitVertexAddEvent([s],a,p)}this._addToSelection(s)}this._setUpOperation(t),o&&r?.startVertexMove(o,pe(n)),this._emitReshapeStartEvent(s),this._onHandleMove(s,e,i,t,()=>{this._updateTooltip(s,t.viewEvent),this._emitReshapeEvent(s)})}_onGraphicMoveCallback(t){const e=this._activeOperationInfo;if(!e)return;const{dx:i,dy:s,graphic:r}=t;e.totalDx+=i,e.totalDy+=s;const{operationType:o}=e,{geometry:n}=r;if(n!=null){if(o!=="move")this._onHandleMove(r,i,s,t,()=>{this._updateTooltip(r,t.viewEvent),this._emitReshapeEvent(r)});else if(n.type==="point")this._onHandleMove(r,i,s,t,()=>{this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(i,s)});else if(n.type==="polyline"||n.type==="polygon"){const a=N(n);this._updateVertexGraphicLocations(a);const{dxMap:p,dyMap:l}=ce(i,s,this.view);this._connectedReshapeManager?.translate(p,l,0),this._updateTooltip(this.graphic,t.viewEvent),this._emitMoveEvent(i,s)}}}_onGraphicMoveStopCallback(t){const e=this._activeOperationInfo;if(!e)return;const{dx:i,dy:s,graphic:r}=t,{operationType:o}=e;e.totalDx+=i,e.totalDy+=s,this._onHandleMove(r,i,s,t,()=>o==="move"?this._emitMoveStopEvent():this._emitReshapeStopEvent(r)),this._isMidpoint(r)?this.refresh():(this._updateTooltip(this._isVertex(r)?r:null),this._resetSnappingStateVars(),this._connectedReshapeManager?.finish(),this._activeOperationInfo=null)}_updateVertexGraphicLocations(t){const{_coordinateHelper:e}=this;for(const i of this.vertexGraphics){const{pathIndex:s,pointIndex:r}=i.attributes;i.geometry=e.arrayToPoint(t[s][r])}this._updateMidpointGraphicLocations(t)}_updateMidpointGraphicLocations(t){for(const e of this.midpointGraphics){const{pathIndex:i,pointIndexStart:s,pointIndexEnd:r}=e.attributes,o=t[i];e.geometry=this._getMidpoint(o[s],o[r])}}_getMidpoint(t,e){const{_coordinateHelper:i}=this,s=i.arrayToVector(t),r=i.arrayToVector(e),o=i.toXYZ(s),n=i.toXYZ(r),[a,p,l]=mt(o,n),d=i.hasM()?0:void 0;return new S({x:a,y:p,z:l,m:d,spatialReference:i.spatialReference})}_getVertexFromEditGeometry(t){U(this._editGeometryOperations);const[e,i]=q(t);return this._editGeometryOperations.data.components[e].vertices[i]}_onHandleMove(t,e,i,s,r){z(this._snappingTask);const o=this._snappingContext;if(!o)return;const n=t.geometry,a=s.type==="graphic-move-stop";if(this.snappingManager!=null&&this.selectedVertices.length<2&&!a){const p=this.snappingManager;this._stagedVertex=p.update({point:n,context:o}),this._syncGeometryAfterVertexMove(t,new S(this._stagedVertex),e,i,a),r(),this._snappingTask=Y(async l=>{const d=await p.snap({point:n,context:o,signal:l});d.valid&&(this._stagedVertex=d.apply(),this._syncGeometryAfterVertexMove(t,new S(this._stagedVertex),e,i,a),r())})}else{const p=this._stagedVertex!=null?new S(this._stagedVertex):n;this._syncGeometryAfterVertexMove(t,p,e,i,a),r()}}_syncGeometryAfterVertexMove(t,e,i,s,r=!1){const o=this._editGeometryOperations?.data.geometry;if(!o)return;const{_coordinateHelper:n}=this,a=n.pointToVector(e),p=this._getVertexFromEditGeometry(t),l=n.getZ(a),d=a[0]-p.pos[0],v=a[1]-p.pos[1],u=l!=null?l-p.pos[2]:0;if(this._editGeometryOperations?.moveVertices([p],d,v,u),this._connectedReshapeManager?.translate(d,v,u),o.type==="point")t.geometry=e;else if(o.type==="mesh")t.geometry=o.centerAt(e);else{const[g,f]=q(t);let y=V(o);const M=y[g].length-1,I=n.pointToArray(e);y[g][f]=I,o.type==="polygon"&&(f===0?y[g][M]=I:f===M&&(y[g][0]=I)),this._isVertex(t)&&(y=this._moveRelatedCoordinates(y,t,I),y=this._moveSelectedHandleCoordinates(y,t,i,s,o.type==="polygon"),this._updateMidpointGraphicLocations(y)),this._updateGraphicGeometry(o.clone()),r&&(this._mover?this._mover.updateGeometry(this._mover.graphics.indexOf(t),e):t.geometry=e)}}_moveRelatedCoordinates(t,e,i){const{relatedGraphicIndices:s}=e.attributes;for(const r of s){const o=this.vertexGraphics.at(r),{pathIndex:n,pointIndex:a}=o.attributes;t[n][a]=i,o.geometry=e.geometry}return t}_moveSelectedHandleCoordinates(t,e,i,s,r){for(const o of this.selectedVertices)if(o!==e){const{pathIndex:n,pointIndex:a,relatedGraphicIndices:p}=o.attributes,l=Gt(o.geometry,i,s,this.view),d=V(l),v=t[n].length-1;t[n][a]=d,o.geometry=l,r&&(a===0?t[n][v]=d:a===v&&(t[n][0]=d));for(const u of p){const g=this.vertexGraphics.at(u),{pathIndex:f,pointIndex:y}=g.attributes;t[f][y]=d,g.geometry=l}}return t}_onGraphicPointerOverCallback(t){const e=t.graphic;this._hoverGraphic=e;const i=this._isVertex(e);i&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.hover),this._updateTooltip(i?e:null),this._updateHoverCursor(e)}_onGraphicPointerOutCallback(t){const e=t.graphic;this._hoverGraphic=null,this._isVertex(e)&&!this._isSelected(e)&&(e.symbol=this.symbols.vertices.default),this.view.cursor="default",this._updateTooltip()}_createVertexFromMidpoint(t){const{_graphicAttributes:e,graphic:i}=this,s=i.geometry;if(s==null||s.type!=="polygon"&&s.type!=="polyline")return[];const r=s.clone(),o=[],{pathIndex:n,pointIndexStart:a,pointIndexEnd:p}=t.attributes,l=V(t.geometry),d=p===0?a+1:p,v=V(r);return v[n].splice(d,0,l),t.attributes={...e,pathIndex:n,pointIndex:d,relatedGraphicIndices:[]},o.push({coordinates:v[n][d],componentIndex:n,vertexIndex:d}),this._updateGraphicGeometry(r),o}_addToSelection(t){const e=Z(t);for(const i of e)i.symbol=this.symbols.vertices.selected,this.selectedVertices.add(i),this._updateTooltip(i);this._emitSelectEvent(e)}_removeFromSelection(t,e){const{vertices:i}=this.symbols,s=e?i.hover:i.default;this.selectedVertices.remove(t),t.symbol=s,this._emitDeselectEvent([t]),this._updateTooltip()}_clearSelection(){const t=this.selectedVertices.toArray();if(t.length>0){for(const e of t)e.set("symbol",this.symbols.vertices.default);this.selectedVertices.removeAll(),this._emitDeselectEvent(t),this._updateTooltip()}}_keyDownHandler(t){this._activeOperationInfo==null&&kt(t,this.tooltip)||$t.delete.includes(t.key)&&!t.repeat&&this.selectedVertices.length&&this._removeVertices(this.selectedVertices)}_removeVertices(t){const e=this.graphic.geometry;if(e==null||e.type!=="polygon"&&e.type!=="polyline"||e.type==="polygon"&&this.vertexGraphics.length<4||this.vertexGraphics.length<3)return;const i=this.graphic.clone(),s=e.clone();let r=V(s);const o=[],n=Z(t);for(const a of n){const{x:p,y:l}=a.geometry;for(let d=0;d<r.length;d++){const v=r[d];for(let u=0;u<v.length;u++){const[g,f]=v[u];p===g&&l===f&&(o.push({coordinates:r[d][u],componentIndex:d,vertexIndex:u}),r[d].splice(Number(u),1))}}}if(s.type==="polygon")r=r.filter(a=>{if(a.length<2)return!1;const[p,l]=a[0],[d,v]=a[a.length-1];return(a.length!==2||p!==d||l!==v)&&(p===d&&l===v||a.push(a[0]),!0)}),s.rings=r;else{for(const a of r)a.length===1&&r.splice(r.indexOf(a),1);s.paths=r}this._updateGraphicGeometry(s),this.refresh(),this._emitVertexRemoveEvent(n,i,o)}_isVertex(t){return this.vertexGraphics.includes(t)}_isSelected(t){return this._isVertex(t)&&this.selectedVertices.includes(t)}_isMidpoint(t){return this.midpointGraphics.includes(t)}_updateHoverCursor(t){this.view.cursor=this._isMidpoint(t)?"copy":"move"}_updateTooltip(t,e){let i=null;const{graphic:s,view:r,tooltipInfos:o}=this,n=s?.geometry;n?.type==="point"?i=o.movePoint:this._selectedVertex?i=o.selectedVertex:t===this.graphic?(i=o.translateGraphic,Yt(i,r,this._tooltipsContext,e)):t&&this.selectedVertices.length>1&&(i=o.translateVertices,Jt(i,r,n,this._tooltipsContext,e)),this.activeTooltipInfo=i}_updateGraphicGeometry(t){this._updateHandlesOnExternalGeometryChange?.pause(),this.graphic.geometry=t,this._updateHandlesOnExternalGeometryChange?.resume()}_emitMoveStartEvent(t,e){const i=new te(this.graphic,t,e);this.emit("move-start",i),this.callbacks.onMoveStart?.(i)}_emitMoveEvent(t,e){const i=new ee(this.graphic,t,e);this.emit("move",i),this.callbacks.onMove?.(i)}_emitMoveStopEvent(t,e){if(t==null||e==null){const s=this._activeOperationInfo;if(!s)return;t=s.totalDx,e=s.totalDy}const i=new ie(this.graphic,t,e);this.emit("move-stop",i),this.callbacks.onMoveStop?.(i)}_emitReshapeStartEvent(t){const e=new Kt(this.graphic,t,this.selectedVertices.toArray());this.emit("reshape-start",e),this.callbacks.onReshapeStart?.(e)}_emitReshapeEvent(t){const e=new Qt(this.graphic,t,this.selectedVertices.toArray());this.emit("reshape",e),this.callbacks.onReshape?.(e)}_emitReshapeStopEvent(t){const e=new Wt(this.graphic,t,this.selectedVertices.toArray());this.emit("reshape-stop",e),this.callbacks.onReshapeStop?.(e)}_emitSelectEvent(t){const e=new se(t);this.emit("select",e),this.callbacks.onVertexSelect?.(e)}_emitDeselectEvent(t){const e=new oe(t);this.emit("deselect",e),this.callbacks.onVertexDeselect?.(e)}_emitVertexAddEvent(t,e,i){const s=new re(t,this.graphic,e,i);this.emit("vertex-add",s),this.callbacks.onVertexAdd?.(s)}_emitVertexRemoveEvent(t,e,i){const s=new ne(t,this.graphic,e,i);this.emit("vertex-remove",s),this.callbacks.onVertexRemove?.(s)}_logGeometryTypeError(){B.getLogger(this).error(new vt("reshape:invalid-geometry","Reshape operation not supported for the provided graphic. The geometry type is not supported."))}};function N(t){const e=V(t.clone());if(t.type==="polygon")for(const i of e){const s=i[i.length-1];i[0][0]===s[0]&&i[0][1]===s[1]&&i.length>2&&i.pop()}return e}function q({attributes:t}){return[t?.pathIndex||0,t?.pointIndex||0]}function Z(t){return t instanceof C?[t]:[...t]}function he(t){const e=t.sourceLayer??t.layer;return St(e)?{graphic:t,layer:e}:null}function pe(t){return t.toArray().map(e=>({pathIndex:e.attributes.pathIndex,vertexIndex:e.attributes.pointIndex}))}function ce(t,e,i){const s=i.state.inverseTransform;return{dxMap:s[0]*t+s[2]*e,dyMap:s[1]*t+s[3]*e}}h([c()],m.prototype,"_activeOperationInfo",void 0),h([c()],m.prototype,"_connectedReshapeManager",void 0),h([c()],m.prototype,"_coordinateHelper",null),h([c()],m.prototype,"_editGeometryOperations",void 0),h([c()],m.prototype,"tooltip",void 0),h([c()],m.prototype,"tooltipInfos",void 0),h([c()],m.prototype,"activeTooltipInfo",void 0),h([c({constructOnly:!0})],m.prototype,"automaticAreaMeasurementUtils",void 0),h([c({constructOnly:!0})],m.prototype,"automaticLengthMeasurementUtils",void 0),h([c()],m.prototype,"_selectedVertex",null),h([c()],m.prototype,"_tooltipsContext",null),h([c()],m.prototype,"callbacks",void 0),h([c()],m.prototype,"connectedReshapeProviders",void 0),h([c()],m.prototype,"enableMidpoints",void 0),h([c()],m.prototype,"enableMovement",void 0),h([c()],m.prototype,"enableVertices",void 0),h([c()],m.prototype,"graphic",void 0),h([c()],m.prototype,"highlightName",void 0),h([c()],m.prototype,"highlightsEnabled",void 0),h([c()],m.prototype,"layer",void 0),h([c({readOnly:!0})],m.prototype,"midpointGraphics",void 0),h([c()],m.prototype,"midpointSymbol",void 0),h([c({readOnly:!0})],m.prototype,"selectedVertices",void 0),h([c()],m.prototype,"snappingManager",void 0),h([c({readOnly:!0})],m.prototype,"state",null),h([c()],m.prototype,"symbols",void 0),h([c({type:K})],m.prototype,"sketchOptions",void 0),h([c({readOnly:!0})],m.prototype,"type",void 0),h([c({readOnly:!0})],m.prototype,"vertexGraphics",void 0),h([c()],m.prototype,"view",void 0),m=h([F("esri.views.draw.support.Reshape")],m);const is=m;export{is as default};
