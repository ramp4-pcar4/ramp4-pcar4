import{aj as w,dF as G,lW as p}from"./main-Crkq4LWq.js";import{m as L,f as T,g as B,h as E,i as b,C as M,s as j}from"./dehydratedFeatureUtils-uj9TnoYP.js";import{i as P,y as U}from"./memoryEstimations-DknB37rc.js";import{E as h,i as I}from"./IntersectorType-gQim6TH1.js";import{n as R}from"./mat4-DgBklfbN.js";import{e as V,r as C}from"./mat4f64-q_b6UJoq.js";import{r as A,g as _,u as D,A as W,s as d}from"./vec32-StvNi8k0.js";import{z}from"./vec42-CKs01hkn.js";import{n as N}from"./vec4f64-DPb6J-GU.js";import{b as J,v as O}from"./sphere-DgnHRQ8H.js";import{e as F}from"./VertexAttribute-BfkzOMLV.js";import"./glsl-Cj7KC756.js";import"./vec2-ChnYg_BJ.js";import"./vec2f64-Cgb6qxNH.js";import"./BindType-BBwFZqyN.js";import"./ShaderBuilder-BLr00_qu.js";import{i as K,m as k,v as q,K as H,R as Q}from"./DefaultMaterial-BtgM30iI.js";import"./ShaderOutput-Bdd80V3g.js";import"./mat3f64-B5o_lm6j.js";import"./OutputColorHighlightOID.glsl-BcPn3dm7.js";import"./mat3-CruJiiUv.js";import"./NormalAttribute.glsl-CpWteubB.js";import"./boundedPlane-DF2XjHKz.js";import"./ViewingMode-Chk7YAAL.js";import"./basicInterfaces-CZwQPxTp.js";class X{get ray(){return this._ray}get distanceInRenderSpace(){return this.distance==null?null:(_(f,this.ray.direction,this.distance),A(f))}withinDistance(e){return!!v(this)&&this.distanceInRenderSpace<=e}getIntersectionPoint(e){return!!v(this)&&(_(f,this.ray.direction,this.distance),D(e,this.ray.origin,f),!0)}getTransformedNormal(e){return d(l,this.normal),l[3]=0,z(l,l,this.transformation),d(e,l),W(e,e)}constructor(e){this.intersector=h.OBJECT,this.normal=w(),this.transformation=V(),this._ray=J(),this.init(e)}init(e){this.distance=this.target=this.drapedLayerOrder=this.renderPriority=null,this.intersector=h.OBJECT,O(e,this._ray)}set(e,r,t,n,s,a,o){this.intersector=e,this.distance=t,d(this.normal,n??G),R(this.transformation,s??C),this.target=r,this.drapedLayerOrder=a,this.renderPriority=o}copy(e){O(e.ray,this._ray),this.intersector=e.intersector,this.distance=e.distance,this.target=e.target,this.drapedLayerOrder=e.drapedLayerOrder,this.renderPriority=e.renderPriority,d(this.normal,e.normal),R(this.transformation,e.transformation)}}function v(i){return i?.distance!=null}const f=w(),l=N();let Y=class{constructor(e){this.layerViewUid=e}};class Z extends Y{constructor(e,r){super(e),this.graphicUid=r}}class ee extends Z{constructor(e,r,t,n,s){super(e,r),this.layerViewUid=e,this.graphicUid=r,this.triangleNr=t,this.baseBoundingSphere=n,this.numLodLevels=s}}let te=class{constructor(e,r,t,n){this.material=e,this.bufferWriter=e.createBufferWriter(),this.vertexBufferLayout=this.bufferWriter.vertexBufferLayout,this.buffer=r,this.elementCount=t,this.boundingInfo=n}get numTriangles(){return this.elementCount/3}get numVertices(){return this.elementCount}computeUsedMemory(){return this.buffer.byteLength+U}getRenderGeometry(){return this}intersect(e,r,t,n,s,a,o,c){const u=this.bufferWriter,m=this.buffer;u.intersect(m,this.material.parameters,null,e,t,n,(g,y,x)=>$(g,y,x,e,r,a,o,s,c))}};class re{constructor(e){this.engineGeometry=e}get material(){return this.engineGeometry.material}get numVertices(){return this.engineGeometry.attributes.get(F.POSITION).indices.length}get numTriangles(){return this.engineGeometry.indexCount/3}get boundingInfo(){return this.engineGeometry.boundingInfo}computeUsedMemory(){return Array.from(this.engineGeometry.attributes.values()).reduce((e,r)=>e+P(r.data,r.indices),0)}getRenderGeometry(){const e=this.material,r=this.engineGeometry,t=r.attributes,n=r.boundingInfo,s=e.createBufferWriter(),a=s.vertexBufferLayout,o=s.elementCount(t),c=a.createBuffer(o);return s.write(null,null,t,null,c,0),new te(e,c.buffer,o,n)}intersect(e,r,t,n,s,a,o,c){const u=this.engineGeometry;this.material.intersect(u,e.transform.transform,e,t,n,(m,g,y)=>$(m,g,y,e,r,a,o,s,c))}}function $(i,e,r,t,n,s,a,o,c){if(i<0||n&&!n(t.rayBegin,t.rayEnd,i))return;const u=new ee(s.layerViewUid,s.graphicUid(o),r,a,c);if((t.results.min.distance==null||i<t.results.min.distance)&&t.results.min.set(h.LOD,u,i,e,t.transform.transform),(t.results.max.distance==null||i>t.results.max.distance)&&t.results.max.set(h.LOD,u,i,e,t.transform.transform),t.options.store===I.ALL){const m=new X(t.results.min.ray);m.set(h.LOD,u,i,e,t.transform.transform),t.results.all.push(m)}}let se=class{constructor(e,r=null){this.geometry=e,this.textures=r}get material(){return this.geometry.material}get numTriangles(){return this.geometry.numTriangles}};class ie{constructor(e,r,t){this.components=e,this.minScreenSpaceRadius=r,this.pivotOffset=t;const n=p(this.components.map(s=>s.geometry));this.numVertices=n.reduce((s,a)=>s+a.numVertices,0)}}class ne{constructor(e){this.levels=e,this.levels.sort((r,t)=>r.minScreenSpaceRadius===t.minScreenSpaceRadius?r.numVertices-t.numVertices:r.minScreenSpaceRadius-t.minScreenSpaceRadius)}getMaterials(){const e=[];return this.levels.forEach(r=>r.components.forEach(t=>e.push(t.geometry.material))),p(e)}getTextures(){const e=new Array;return this.levels.forEach(r=>r.components.forEach(t=>{t.textures!=null&&e.push(...t.textures)})),p(e)}getGeometries(){const e=new Array;return this.levels.forEach(r=>r.components.forEach(t=>{e.push(t.geometry)})),p(e)}getEngineGeometries(){return this.getGeometries().map(e=>e.engineGeometry).filter(e=>e!=null)}computeUsedMemory(){const e=this.getGeometries(),r=this.getTextures(),t=e.reduce((n,s)=>n+s.computeUsedMemory(),0);return r.reduce((n,s)=>n+s.usedMemory,0)+t}}function Pe(i){switch(i){case"sphere":case"cube":case"diamond":case"cylinder":case"cone":case"inverted-cone":case"tetrahedron":return!0}return!1}function Ue(i,e){const r=(t,n,s=!1)=>new ne(t.map(a=>{const o=n(a.tesselation);return s&&L(o),new ie([new se(new re(o))],a.minScreenSpaceRadius)}));switch(i){case"sphere":return r([{tesselation:0,minScreenSpaceRadius:0},{tesselation:1,minScreenSpaceRadius:8},{tesselation:2,minScreenSpaceRadius:16},{tesselation:3,minScreenSpaceRadius:50},{tesselation:4,minScreenSpaceRadius:250}],t=>j(e,.5,t));case"cube":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>M(e,1));case"cone":return r(S,t=>b(e,1,.5,t,!1),!0);case"inverted-cone":return r(S,t=>b(e,1,.5,t,!0),!0);case"cylinder":return r(S,t=>E(e,1,.5,t,[0,0,1],[0,0,.5]));case"tetrahedron":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>B(e,1),!0);case"diamond":return r([{tesselation:0,minScreenSpaceRadius:0}],()=>T(e,1),!0);default:return}}const S=[{tesselation:6,minScreenSpaceRadius:0},{tesselation:18,minScreenSpaceRadius:7},{tesselation:64,minScreenSpaceRadius:65}],Ie=Object.freeze(Object.defineProperty({__proto__:null,build:K},Symbol.toStringTag,{value:"Module"})),Ve=Object.freeze(Object.defineProperty({__proto__:null,build:k,getRadius:q},Symbol.toStringTag,{value:"Module"})),Ce=Object.freeze(Object.defineProperty({__proto__:null,build:H},Symbol.toStringTag,{value:"Module"})),Ae=Object.freeze(Object.defineProperty({__proto__:null,build:Q},Symbol.toStringTag,{value:"Module"}));export{Ce as D,Ae as R,Pe as S,se as a,re as b,Ie as c,Ve as d,ie as f,ne as h,Ue as l,X as p};
