import{z as h,c8 as n,bn as f,q as s,v as i,I as d,x as g,cg as S,$ as y}from"./main-Crkq4LWq.js";import{f as R,s as w}from"./utils-BdBs5klf.js";import{o as v}from"./utils-Courd1_m.js";let o=class extends h{constructor(e){super(e),this.geometries=[],this.outSpatialReference=null,this.transformation=null,this.transformForward=null}toJSON(){const e=this.geometries.map(a=>a.toJSON()),t=this.geometries[0],r={};return r.outSR=n(this.outSpatialReference),r.inSR=n(t.spatialReference),r.geometries=JSON.stringify({geometryType:f(t),geometries:e}),this.transformation&&(r.transformation=this.transformation.wkid||JSON.stringify(this.transformation)),this.transformForward!=null&&(r.transformForward=this.transformForward),r}};s([i()],o.prototype,"geometries",void 0),s([i({type:d,json:{read:{source:"outSR"}}})],o.prototype,"outSpatialReference",void 0),s([i()],o.prototype,"transformation",void 0),s([i()],o.prototype,"transformForward",void 0),o=s([g("esri.rest.support.ProjectParameters")],o);const j=S(o);async function O(e,t,r){t=j(t);const a=R(e),p={...a.query,f:"json",...t.toJSON()},m=t.outSpatialReference,c=f(t.geometries[0]),u=w(p,r);return y(a.path+"/project",u).then(({data:{geometries:l}})=>v(l,c,m))}export{O as n,o as p};
