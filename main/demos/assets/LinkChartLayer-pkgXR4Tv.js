import{V as j,b_ as we,s as Q,ad as Ie,ag as Ee,i as E,c7 as B,aU as G,N as V,O as he,u as _e,b$ as pe,an as Me,eq as Se,q as w,v as M,x as Ae}from"./main-Crkq4LWq.js";import{I as K,E as Re,D as $e,C as ze,o as Fe,g as Ge,i as de,a as Pe,b as Oe,c as Ue,_ as Be,P as je,A as qe,v as Qe,d as $,e as We,f as ee,u as ke}from"./KnowledgeGraphSublayer-f_jBSbph.js";import{S as He}from"./MultiOriginJSONSupport-CMemxIrm.js";import{h as Ve}from"./Layer-DyCDZpQP.js";import{u as J}from"./featureConversionUtils-vqNz0xi_.js";import{_ as C,I as te,t as ie,S as A,o as Je}from"./constants-B4mRqufT.js";import{p as Ke}from"./BlendLayer-Bfjdkd1n.js";import{b as Xe,y as Ye}from"./OperationalLayer-C2tThDwf.js";import{t as Ze}from"./ScaleRangeLayer-BXnA5dV_.js";import{u as et}from"./knowledgeGraphService-D3wvqNs7.js";import"./preload-helper-DMGCcr4D.js";import"./OptimizedGeometry-DmzaLtTI.js";import"./memoryEstimations-DknB37rc.js";import"./projectionUtils-CE8Ogge1.js";import"./OptimizedFeature--b1MQl_i.js";import"./GraphicsLayer-tdnGrVvL.js";import"./GraphicsCollection-BLVS1AvI.js";import"./ElevationInfo-Dpz_kzPY.js";import"./lengthUtils-l5Hl4s3A.js";import"./TimeExtent-R7s_TuxB.js";import"./layerContainerType-C5CzMsLd.js";import"./jsonUtils-BKompkv5.js";import"./parser-B_oj8OEu.js";import"./mat4f32-Djp3mnm5.js";import"./mat4-DgBklfbN.js";import"./common-DQOJ18NT.js";import"./Relationship-4HazavSl.js";import"./Query-D4pOe5d7.js";import"./Field-CfEWUurB.js";import"./fieldType-DTrwgDiS.js";import"./workers-cjuoJTHE.js";import"./Queue-DQom_e3o.js";import"./intl-BbkIuURR.js";import"./FeatureStore-fLIUJYIs.js";import"./BoundsStore-BGok9q87.js";import"./PooledRBush-D8lUsltd.js";import"./quickselect-QQC62dOK.js";import"./timeSupport-BSHfEr7S.js";import"./queryUtils-ClMG3bzJ.js";import"./normalizeUtils-Dg7DX0Kf.js";import"./normalizeUtilsCommon-KviMv5LJ.js";import"./utils-BdBs5klf.js";import"./utils-Courd1_m.js";import"./json-Wa8cmqdu.js";import"./optimizedFeatureQueryEngineAdapter-Dy9yIpsm.js";import"./QueryEngine-t7pzjvRH.js";import"./WhereClauseCache-q1gNE3HZ.js";import"./LRUCache-BB1cebTv.js";import"./MemCache-BSBM3Sy1.js";import"./WhereClause-DGJjnXi9.js";import"./TimeOnly-BjqJuv0j.js";import"./enum-DXEdVlyM.js";import"./UnknownTimeZone-CGGNrDrV.js";import"./QueryEngineCapabilities-CsRUnGk7.js";import"./quantizationUtils-kCN6oAvL.js";import"./utils-D1vkF8Cj.js";import"./heatmapUtils-BtFqvjWS.js";import"./vec42-CKs01hkn.js";import"./vec4f64-DPb6J-GU.js";import"./utils-ajTtzHMq.js";import"./timeZoneUtils-BHCW7jir.js";import"./utils-B1_wQfon.js";import"./ClassBreaksDefinition-nVrx5_mK.js";import"./SnappingCandidate-DGkpYqI6.js";import"./FixedIntervalBinParameters-BJH-N2QN.js";import"./NormalizationBinParametersMixin-Cb9-c5re.js";import"./FieldsIndex-Cwq_t80R.js";import"./Scheduler-Pc61bPwM.js";import"./debugFlags-cjveQ8k-.js";import"./clientSideDefaults-BLprEVnH.js";import"./fieldProperties-BopWeUa5.js";import"./labelingInfo-DLuYGuzY.js";import"./asyncUtils-DfTs-X0F.js";import"./uuid-Cl5lrJ4c.js";import"./SimpleRenderer-Dbpl5h1j.js";import"./commonProperties-CYfuZJGd.js";import"./colorRamps-Bjywyw2D.js";import"./ColorStop-9dWa0RDE.js";import"./visualVariableUtils-BpBEckvt.js";import"./UniqueValueRenderer-BU4f67En.js";import"./diffUtils-COJ4IIqY.js";import"./RendererLegendOptions-CyIaj9P3.js";import"./styleUtils-DFM-g8fO.js";import"./RelationshipQuery-396yLOvg.js";import"./labelUtils-JQEemrpf.js";import"./DisplayFilteredLayer-Cikx86pz.js";import"./scaleUtils-CAiB8S_A.js";import"./displayFilterUtils-6TZ25n4b.js";import"./FeatureEffectLayer-CGe5chWa.js";import"./FeatureEffect-D63P5ELz.js";import"./FeatureFilter-DTtfJS5F.js";import"./FeatureReductionLayer-CVj6Qkhl.js";import"./FeatureReductionSelection-CbJd8GIU.js";import"./jsonUtils-CAbJUe8w.js";import"./typeUtils-CnKFz_x7.js";import"./ClassBreaksRenderer-CV4bp_5g.js";import"./DictionaryScriptEvaluator-BzcupkpP.js";import"./Version-Dg6OjmkZ.js";import"./ArcadeExpression-ON2N40QW.js";import"./utils-jjGHTGcN.js";import"./defaultCIMValues-CQAn2izL.js";import"./enums-_AFKM9Yk.js";import"./MD5-MtSiOt06.js";import"./OrderedLayer-CMieJIzt.js";import"./OrderByInfo-DvPX_B27.js";import"./RefreshableLayer-CceKtwDJ.js";import"./TemporalLayer-DRVw0m8A.js";import"./TimeInfo-DCxRju0T.js";import"./FeatureSet-DRSRw7Pj.js";import"./popupUtils-BVHgSwa7.js";import"./utils-BV55yp3A.js";import"./cimSymbolUtils-TrTP_j9U.js";import"./OptimizedFeatureSet-BR8EEvDc.js";import"./networkEnums-DgBPWv46.js";import"./GPMessage-DwTGhfqg.js";var X;(function(e){e.MULTIPLIER="multiplier",e.ABSOLUTE="absolute-value"})(X||(X={}));let b=class extends Xe(Ke(Ze(He(Ve)))){constructor(e){if(super(e),this.url=null,this.dataPreloadedInLocalCache=!1,this.initializationLinkChartConfig=null,this.membershipModified=!0,this._currentLinkChartConfig={layoutMode:"organic-standard"},this._graphTypeLookup=new Map,this.dataManager=null,this.knowledgeGraph=null,this.layers=new(j.ofType(K)),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map,this.linkChartExtent=new we({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7}),this.memberEntityTypes=null,this.memberRelationshipTypes=null,this.operationalLayerType="LinkChartLayer",this.sublayerIdsCache=new Map,this.tables=new(j.ofType(K)),this.type="link-chart",this.chronologicalAuxiliaryGraphics=null,this._originalInclusionList=e?.initializationInclusionModeDefinition,e?.dataPreloadedInLocalCache&&!e?.initializationInclusionModeDefinition)throw new Q("knowledge-graph:linkchart-layer-constructor","If creating a link chart composite layer and configured that data is already loaded in the cache, you must specify an inclusion list so the Composite Layer knows what records belong to it");this.addHandles(Ie(()=>this.layers.concat(this.tables),(t,i)=>this._handleSublayersChange(t,i),Ee))}normalizeCtorArgs(e){if(!e)return{};const{url:t,title:i,dataPreloadedInLocalCache:n,initializationLinkChartConfig:a}=e;return{url:t,title:i,dataPreloadedInLocalCache:n,initializationLinkChartConfig:a}}_initializeLayerProperties(e){if(!this.title&&this.url){const o=this.url.split("/");this.title=o[o.length-2]}const t=new Set;let i=[],n=[];if(e.inclusionModeDefinition&&(!e.inclusionModeDefinition.namedTypeDefinitions||e.inclusionModeDefinition.namedTypeDefinitions.size<1))throw new Q("knowledge-graph:composite-layer-constructor","If an explicit inclusion definition is defined, at least one namedTypeDefinition must also be defined");e.inclusionModeDefinition?.generateAllSublayers?(i=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]):e.inclusionModeDefinition?.namedTypeDefinitions&&e.inclusionModeDefinition?.namedTypeDefinitions.size>0?e.inclusionModeDefinition?.namedTypeDefinitions.forEach((o,s)=>{const h=this._graphTypeLookup.get(s);if(!h)return E.getLogger(this).warn(`A named type, ${s}, was in the inclusion list that wasn't in the data model and will be removed`),void e.inclusionModeDefinition?.namedTypeDefinitions.delete(s);h.type==="relationship"?t.has(s)||(t.add(s),n.push(h)):h.type==="entity"?t.has(s)||(t.add(s),i.push(h)):(E.getLogger(this).warn(`A named type, ${s}, was in the inclusion list that wasn't properly modeled and will be removed`),e.inclusionModeDefinition?.namedTypeDefinitions.delete(s))}):(i=e.knowledgeGraph.dataModel.entityTypes??[],n=e.knowledgeGraph.dataModel.relationshipTypes??[]);const a=new Re({knowledgeGraph:e.knowledgeGraph,inclusionModeDefinition:e.inclusionModeDefinition});this.knowledgeGraph=e.knowledgeGraph,this.memberEntityTypes=i,this.memberRelationshipTypes=n,this.dataManager=a}load(e){const t=async()=>{const i=[],n=[];this.loadLayerAssumingLocalCache(),this._layersLoadedFromAuthoritativeItem()||await de(this),this.dataManager.inclusionModeDefinition&&(this.dataManager.inclusionModeDefinition.generateAllSublayers=!1),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.forEach(a=>{a.useAllData=!1}),await this._initializeDiagram(),this.layers.forEach(a=>{n.push(a.refreshCachedQueryEngine()),i.push(new Promise(o=>{a.on("layerview-create",()=>{o(null)})}))}),this.tables.forEach(a=>{n.push(a.refreshCachedQueryEngine())}),await Promise.all(n)};return this.addResolvingPromise(new Promise(i=>{et(this.url).then(async n=>{n.dataModel.entityTypes?.forEach(o=>{o.name&&this._graphTypeLookup.set(o.name,o)}),n.dataModel.relationshipTypes?.forEach(o=>{o.name&&this._graphTypeLookup.set(o.name,o)});const a=this.linkChart?.linkChartProperties;if(a?.originIdOf("entitiesUrl")===B.LINK_CHART&&(this.membershipModified=!1,this._originalInclusionList=await $e.fetchAndConvertSerializedLinkChart({entitiesUrl:a?.entitiesUrl,relationshipsUrl:a?.relationshipsUrl}),this._alignLayersDataModelAndInclusionDefinition(n.dataModel),this.initializationLinkChartConfig={layoutSettings:a?.layoutSettings??void 0,layoutMode:ze(a.layoutType)}),this._initializeLayerProperties({knowledgeGraph:n,inclusionModeDefinition:this._originalInclusionList}),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.size||(this.dataManager.inclusionModeDefinition={generateAllSublayers:!1,namedTypeDefinitions:new Map},this.dataManager.knowledgeGraph.dataModel.entityTypes?.forEach(o=>{o.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(o.name,{useAllData:!0})}),this.dataManager.knowledgeGraph.dataModel.relationshipTypes?.forEach(o=>{o.name&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.set(o.name,{useAllData:!0})})),this.dataPreloadedInLocalCache){const o=Fe.getInstance();for(const[s,h]of this.dataManager.inclusionModeDefinition?.namedTypeDefinitions??[])for(const u of h.members?.values()??[]){const m=o.readFromStoreById(`${s}__${u.id}`);m&&G(this.dataManager.sublayerCaches,s,()=>new Map).set(u.id,m)}await t()}else{const o=this.initializationLinkChartConfig?.layoutMode==="geographic-organic-standard";this.addResolvingPromise(this.dataManager.refreshCacheContent(void 0,!1,o,!0).then(async()=>{V(e),await t()}))}i(null)})})),Promise.resolve(this)}set initializationInclusionModeDefinition(e){this.loadStatus!=="loaded"&&this.loadStatus!=="failed"?this._set("initializationInclusionModeDefinition",e):E.getLogger(this).error("#initializationInclusionModeDefinition","initializationInclusionModeDefinition cannot be changed after the layer is loaded.")}get linkChart(){return this.parent}async addRecords(e,t){let i=[];t?.cascadeAddRelationshipEndNodes&&this.dataManager.knowledgeGraph.dataModel&&(i=await Ge(e,this.dataManager.knowledgeGraph));const n=e.concat(i).filter(a=>!this.sublayerIdsCache.get(a.typeName)?.has(a.id));n.length>0&&(this.membershipModified=!0),await this._handleNewRecords(n,t)}async createSublayerForNamedType(e){await this.load();const t=this._graphTypeLookup.get(e);if(!t)throw new Q("knowledge-graph:missing-type","The specified type does not exist in the knowledge graph.");if(this.dataManager.sublayerCaches.has(e))throw new Q("knowledge-graph:duplicate-type","The specified type already exists as a sublayer.");this.dataManager.sublayerCaches.set(e,new Map),G(this.sublayerIdsCache,e,()=>new Set);const i=this._createSublayer(t);return t.type==="entity"?this.dataManager.entityTypeNames.add(e):this.dataManager.relationshipTypeNames.add(e),this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.set(e,{useAllData:!1,members:new Map}),i.geometryType?this.layers.push(i):this.tables.push(i),await de(this,[e]),this._refreshNamedTypes(),i}async removeRecords(e,{cascadeRemoveRelationships:t=!0,recalculateLayout:i=!1,overrideMembershipCheck:n=!1}={cascadeRemoveRelationships:!0,recalculateLayout:!1,overrideMembershipCheck:!1}){let a=[];for(const h of e)(n||this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(h.typeName)?.useAllData===!1&&this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.get(h.typeName)?.members?.has(h.id))&&a.push(h);if(t){const h=new Set,u=[];for(const m of a)if(this.dataManager.nodeConnectionsLookup.has(m.id))for(const y of this.dataManager.nodeConnectionsLookup.get(m.id))h.add(y);for(const m of h)if(this.dataManager.memberIdTypeLookup.has(m))for(const y of this.dataManager.memberIdTypeLookup.get(m))this.dataManager.relationshipTypeNames.has(y)&&u.push({id:m,typeName:y});a=a.concat(u)}this.dataManager.removeFromLayer(a);for(const h of a)this.sublayerIdsCache.get(h.typeName)?.delete(h.id),this.dataManager.relationshipTypeNames.has(h.typeName)?this.relationshipLinkChartDiagramLookup.delete(h.id):this.entityLinkChartDiagramLookup.delete(h.id);const o=i?void 0:this.getCurrentNodeLocations();await this._calculateLayoutWithSublayerTimeInfo(this._currentLinkChartConfig.layoutMode,{layoutSettings:this._currentLinkChartConfig.layoutSettings,lockedNodeLocations:o}),a.length>0&&(this.membershipModified=!0);const s=[];return this.layers.forEach(h=>{s.push(h.refreshCachedQueryEngine())}),await Promise.all(s),this._refreshNamedTypes(),a}async expand(e,t){let i=[];try{const n=await this.dataManager.getConnectedRecordIds(e,t?.relationshipTypeNames,t);i=n.filter(a=>!this.sublayerIdsCache.get(a.typeName)?.has(a.id)),await this._handleNewRecords(i,t),n.length>0&&(this.membershipModified=!0),V(t?.signal)}catch(n){throw he(n)&&i.length>0&&await this.removeRecords(i,{overrideMembershipCheck:!0}),n}return{records:i}}loadLayerAssumingLocalCache(){const e=[...this.memberRelationshipTypes,...this.memberEntityTypes];this.layers.length||this.originIdOf("tables")===B.DEFAULTS?this.originIdOf("layers")===B.DEFAULTS?this._createSublayers(e,this.layers,t=>!!t.geometryType):this._updateSublayers(e,this.layers):this.layers=new j,this.tables.length||this.originIdOf("layers")===B.DEFAULTS?this.originIdOf("tables")===B.DEFAULTS?this._createSublayers(e,this.tables,t=>!t.geometryType):this._updateSublayers(e,this.tables):this.tables=new j,this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((t,i)=>{const n=G(this.sublayerIdsCache,i,()=>new Set);t.members?.forEach(({id:a,linkChartLocation:o})=>{if(n.add(a),o){const s="coords"in o&&"lengths"in o?o:J(o);this.dataManager.relationshipTypeNames.has(i)?this.relationshipLinkChartDiagramLookup.set(a,s):this.entityLinkChartDiagramLookup.set(a,s)}})})}async calculateLinkChartLayout(e="organic-standard",t){const i=[],n=[],a=[];this.dataManager.sublayerCaches.forEach((r,p)=>{this.dataManager.entityTypeNames.has(p)?r.forEach(l=>{i.push({typeName:p,feature:l})}):this.dataManager.relationshipTypeNames.has(p)&&r.forEach(l=>{n.push({typeName:p,feature:l})})}),this.entityLinkChartDiagramLookup=new Map,this.relationshipLinkChartDiagramLookup=new Map;const o=new Map,s=new Map,h=new Map,u=new Map,m=new Uint8Array(i.length),y=new Float64Array(i.length),L=new Float64Array(i.length),q=new Float64Array(i.length),S=new Float64Array(i.length),T=new Uint32Array(n.length),ae=new Uint32Array(n.length),ue=new Float64Array(n.length),ce=new Float64Array(n.length),g=[],Ce="organic-standard";let me=!1;const N=new we({xmin:-1e-7,ymin:-1e-7,xmax:1e-7,ymax:1e-7});let P,ye="organic-standard",c=0,v=0;const Te=Pe.apply;switch(ye=e==="geographic-organic-standard"?Ce:e,ye){case"organic-standard":P=Qe.apply;break;case"organic-community":P=qe.apply;break;case"hierarchical-bottom-to-top":P=je.apply;break;case"radial-root-centric":P=Be.apply;break;case"tree-left-to-right":P=Ue.apply;break;default:P=Oe.apply}let ne=!1;i.forEach(({typeName:r,feature:p})=>{if(e!=="chronological-mono-timeline"&&e!=="chronological-multi-timeline"&&t?.lockedNodeLocations?.has(p.attributes[C])){e==="geographic-organic-standard"&&this.dataManager.geographicLookup.has(r)?m[c]=$.IsGeographic:m[c]=$.None;const l=t.lockedNodeLocations.get(p.attributes[C]);y[c]=l.x,L[c]=l.y}else if(e==="geographic-organic-standard"&&this.dataManager.geographicLookup.has(r)){m[c]=$.IsGeographic;let l=null;const k=p.attributes[this.dataManager.geographicLookup.get(r).name];switch(this.dataManager.geographicLookup.get(r)?.geometryType){case"esriGeometryPoint":y[c]=k?.x,L[c]=k?.y;break;case"esriGeometryPolygon":l=k?.centroid,l?.x!=null&&l?.y!=null?(y[c]=l.x,L[c]=l.y):m[c]=$.IsMovable;break;case"esriGeometryPolyline":case"esriGeometryMultipoint":l=k?.extent?.center,l?.x!=null&&l?.y!=null?(y[c]=l.x,L[c]=l.y):m[c]=$.IsMovable;break;default:m[c]=$.IsMovable}(y[c]==null||L[c]==null||Number.isNaN(y[c])||Number.isNaN(L[c]))&&(m[c]=$.IsMovable,y[c]=0,L[c]=0)}else if(e==="chronological-mono-timeline"||e==="chronological-multi-timeline"){!ne&&t?.lockedNodeLocations?.has(p.attributes[C])&&(ne=!0);const l=t?.timeInfoByTypeName?.get(r),k=l?.startField,D=k&&l?.startField?p.attributes[k]:null;q[c]=D?new Date(D).getTime():NaN;const f=l?.endField,I=f&&l?.endField?p.attributes[f]:null;S[c]=I?new Date(I).getTime():NaN,y[c]=0,L[c]=0,m[c]=$.IsMovable}else m[c]=$.IsMovable,y[c]=0,L[c]=0;u.set(p.attributes[C],c),g[c]={feature:p,typeName:r},c++}),ne&&E.getLogger(this).warn("Locked node locations are not supported for chronological layout at this time.  Requested node locations were ignored");let ge=!1;const oe=new Map;n.forEach(r=>{const p=r.feature.attributes[te],l=r.feature.attributes[ie],k=u.get(p),D=u.get(l),f=t?.timeInfoByTypeName?.get(r.typeName),I=t?.timeInfoByTypeName?f?.startField:null,R=I?r.feature.attributes[I]:null,Z=f?.endField,O=Z?r.feature.attributes[Z]:null;if(k!==void 0&&D!==void 0){let z=p+"-"+l;e!=="chronological-mono-timeline"&&e!=="chronological-multi-timeline"||(z=z+"-"+R+"-"+O);const H=oe.get(z);H?.has(r.typeName)||(T[v]=k,ae[v]=D,e!=="chronological-mono-timeline"&&e!=="chronological-multi-timeline"||(ue[v]=R?new Date(R).getTime():NaN,ce[v]=O?new Date(O).getTime():NaN),H===void 0?oe.set(z,new Map([[r.typeName,v]])):H.set(r.typeName,v),v++),a.push(r)}else ge=!0,this.relationshipLinkChartDiagramLookup.set(p,null)}),ge&&E.getLogger(this).warn("A relationship is a member of this layer that has either origin or destination entity nodes that are not members. The diagram geometry will be set to null");const Ne=this._validateOrganicLayoutSettings(e,t?.layoutSettings?.organicLayoutSettings),re=this._convertValidatedOrganicSettingsToCalculationSettings(Ne);await We();let W=ee.Error,x=null;if(e==="chronological-mono-timeline"||e==="chronological-multi-timeline"){let r;({status:W,links:x,graphics:r}=Te(()=>t?.signal?.aborted??!1,m,y,L,q,S,T.subarray(0,v),ae.subarray(0,v),ue.subarray(0,v),ce.subarray(0,v),e==="chronological-multi-timeline",t?.layoutSettings?.chronologicalLayoutSettings)),W===ee.Success&&(this.chronologicalAuxiliaryGraphics=r)}else({status:W,links:x}=P(()=>t?.signal?.aborted??!1,m,y,L,T.subarray(0,v),ae.subarray(0,v),re.computationBudgetTime,re.idealEdgeLengthMultiplier,re.repulsionRadiusMultiplier));if(V(t?.signal),W===ee.Error)throw new Q("knowledge-graph:layout-failed","Attempting to arrange the records in the specified layout failed");if(W===ee.Canceled)throw _e();for(let r=0;r<g.length;r++){if(L[r]>84.9999?L[r]=84.9999:L[r]<-84.9999&&(L[r]=-84.9999),y[r]>179.9999?y[r]=179.9999:y[r]<-179.9999&&(y[r]=-179.9999),g[r].feature.attributes[A]=new pe(y[r],L[r]),o.has(g[r].typeName))o.get(g[r].typeName)?.set(g[r].feature.attributes[C],g[r].feature);else{const f=new Map;f.set(g[r].feature.attributes[C],g[r].feature),o.set(g[r].typeName,f)}h.set(g[r].feature.attributes[C],g[r].feature);const p=J(g[r].feature.attributes[A]);this.entityLinkChartDiagramLookup.set(g[r].feature.attributes[C],g[r].feature.attributes[A]?p:null);const l=G(this.dataManager.inclusionModeDefinition.namedTypeDefinitions,g[r].typeName,()=>({useAllData:!1,members:new Map}));G(l.members,g[r].feature.attributes[C],()=>({id:g[r].feature.attributes[C],linkChartLocation:void 0})).linkChartLocation=g[r].feature.attributes[A];const{x:k,y:D}=g[r].feature.attributes[A];me?(N.xmin=Math.min(N.xmin,k),N.xmax=Math.max(N.xmax,k),N.ymin=Math.min(N.ymin,D),N.ymax=Math.max(N.ymax,D)):(N.xmin=k-1e-7,N.xmax=k+1e-7,N.ymin=D-1e-7,N.ymax=D+1e-7,me=!0)}if(this.linkChartExtent.xmin=N.xmin,this.linkChartExtent.xmax=N.xmax,this.linkChartExtent.ymin=N.ymin,this.linkChartExtent.ymax=N.ymax,!x)throw new Q("knowledge-graph:layout-failed","Attempting to retrieve link geometry from diagram engine failed");const Y=new Map,se=new Map,le=new Map,fe=new Set;for(let r=0;r<a.length;r++){const p=[],l=a[r],k=l.feature.attributes[te],D=l.feature.attributes[ie];let f=k+"-"+D;if(e==="chronological-mono-timeline"||e==="chronological-multi-timeline"){const d=t?.timeInfoByTypeName?.get(l.typeName),_=t?.timeInfoByTypeName?d?.startField:null,F=_?l.feature.attributes[_]:null,U=d?.endField;f+="-"+F+"-"+(U?l.feature.attributes[U]:null)}const I=oe.get(f).get(l.typeName),R=I===0?0:x?.vertexEndIndex[I-1];if(!fe.has(I)){if(fe.add(I),x.types[I]===ke.Recursive){const d=[x.vertices[2*R],x.vertices[2*R+1]],_=[x.vertices[2*(R+1)],x.vertices[2*(R+1)+1]],F=[.5*(d[0]+_[0]),.5*(d[1]+_[1])],U=[F[0]-d[0],F[1]-d[1]],ve=[F[0]+U[1],F[1]-U[0]],xe=[F[0]-U[1],F[1]+U[0]];p.push(d),p.push(ve),p.push(_),p.push(xe),p.push(d)}else{if(x.types[I]!==ke.Regular){E.getLogger(this).warn("A relationship generated an unsupported link geometry type.  It will not be rendered");continue}for(let d=R;d<x.vertexEndIndex[I];d++)p.push([x.vertices[2*d],x.vertices[2*d+1]])}if(e!=="chronological-mono-timeline"&&e!=="chronological-multi-timeline"){const d=g[u.get(k)]?.feature.attributes[A],_=g[u.get(D)]?.feature.attributes[A];p[0][0]===d.x&&p[0][1]===d.y||(p[0]=[d.x,d.y]),p[p.length-1][0]===_.x&&p[p.length-1][1]===_.y||(p[p.length-1]=[_.x,_.y])}for(let d=1;d<p.length-1;d++)p[d][1]>85.5?p[d][1]=85.5:p[d][1]<-85.5&&(p[d][1]=-85.5),p[d][0]>179.9999?p[d][0]=179.9999:p[d][0]<-179.9999&&(p[d][0]=-179.9999);Y.has(f)?Y.get(f).push(p):Y.set(f,[p])}const Z=Y.get(f);se.has(f)||(se.set(f,new Map),le.set(f,new Map));const O=se.get(f),z=le.get(f);O.has(l.typeName)||(O.set(l.typeName,Z.shift()),z.set(l.typeName,0));const H=O.get(l.typeName);z.set(l.typeName,z.get(l.typeName)+1);const be=new Me({paths:[H]});if(l.feature.attributes[A]=be,s.has(l.typeName))s.get(l.typeName)?.set(l.feature.attributes[C],l.feature);else{const d=new Map;d.set(l.feature.attributes[C],l.feature),s.set(l.typeName,d)}h.set(l.feature.attributes[C],l.feature);const Le=J(l.feature.attributes[A]);this.relationshipLinkChartDiagramLookup.set(l.feature.attributes[C],l.feature.attributes[A]?Le:null);const De=G(this.dataManager.inclusionModeDefinition.namedTypeDefinitions,l.typeName,()=>({useAllData:!1,members:new Map}));G(De.members,l.feature.attributes[C],()=>({id:l.feature.attributes[C],linkChartLocation:void 0})).linkChartLocation=Le}for(const r of a)r.feature.attributes[Je]=le.get(r.feature.attributes[te]+"-"+r.feature.attributes[ie])?.get(r.typeName)??null;return this._currentLinkChartConfig={layoutMode:e,layoutSettings:t?.layoutSettings?.clone()},{nodes:o,links:s,idMap:h}}async applyNewLinkChartLayout(e="organic-standard",t){const i=[];await this._calculateLayoutWithSublayerTimeInfo(e,t),this.layers.forEach(n=>{i.push(n.refreshCachedQueryEngine())}),this.membershipModified=!0,await Promise.all(i),this._refreshNamedTypes()}getCurrentNodeLocations(){const e=new Map;for(const[t,i]of this.dataManager.inclusionModeDefinition?.namedTypeDefinitions.entries()??[])this.dataManager.relationshipTypeNames.has(t)||i?.members?.forEach(n=>{const a=n.linkChartLocation;let o;const s=n.id;a&&(o="x"in a?{x:a.x,y:a.y}:{x:a.coords[0],y:a.coords[1]},e.set(s,new pe({x:o.x,y:o.y})))});return e}async refreshLinkChartCache(e){await this.dataManager.refreshCacheContent(e);const t=[];this.layers.forEach(i=>{t.push(i.refreshCachedQueryEngine())}),await Promise.all(t),this._refreshNamedTypes()}async connectBetweenEntities(e,t){if(!e.length)return{records:[]};let i=[];try{let n=[];for(const a of this.dataManager.relationshipTypeNames){const o=this.sublayerIdsCache.get(a);o&&(n=n.concat(Array.from(o.keys())))}i=await this.dataManager.getRelationshipsBetweenNodes(e,n,t),await this._handleNewRecords(i,t),V(t)}catch(n){throw he(n)&&this.removeRecords(i),n}return{records:i}}async connectFromEntities(e,t){if(!e.length)return{records:[]};let i=[];try{let n=[];for(const o of this.dataManager.relationshipTypeNames){const s=this.sublayerIdsCache.get(o);s&&(n=n.concat(Array.from(s.keys())))}let a=[];for(const o of this.dataManager.entityTypeNames){const s=this.sublayerIdsCache.get(o);s&&(a=a.concat(Array.from(s)))}i=await this.dataManager.getRelationshipsFromNodes(e,a,n,t),await this._handleNewRecords(i,t),i.length>0&&(this.membershipModified=!0),V(t)}catch(n){throw he(n)&&this.removeRecords(i),n}return{records:i}}getCurrentLayout(){return this._currentLinkChartConfig.layoutMode}async _calculateLayoutWithSublayerTimeInfo(e="organic-standard",t){const i=new Map;this.layers.forEach(n=>{i.set(n.objectType.name,n.timeInfo)}),await this.calculateLinkChartLayout(e,{timeInfoByTypeName:i,...t}),this.linkChart?.handleChronologicalOverlay()}async _handleNewRecords(e,t){const i=new Set,n=[],a=this.layers.concat(this.tables);for(const s of e)this._graphTypeLookup.has(s.typeName)&&(a.some(h=>h.objectType.name===s.typeName)===!1&&(this.dataManager.sublayerCaches.set(s.typeName,new Map),i.add(s.typeName)),G(this.sublayerIdsCache,s.typeName,()=>new Set).add(s.id),n.push(s));this.dataManager.addToLayer(n);for(const s of i){const h=this._graphTypeLookup.get(s);if(h){const u=this._createSublayer(h);h.type==="entity"?this.dataManager.entityTypeNames.add(s):this.dataManager.relationshipTypeNames.add(s),u.geometryType?this.layers.push(u):this.tables.push(u)}}await de(this,Array.from(i),t),await this.dataManager.refreshCacheContent(e.map(s=>s.id),void 0,void 0,void 0,t);const o={layoutSettings:this._currentLinkChartConfig.layoutSettings,lockedNodeLocations:new Map};for(const[s,h]of this.entityLinkChartDiagramLookup.entries())h&&o.lockedNodeLocations.set(s,new pe(h.coords[0],h.coords[1]));await this.applyNewLinkChartLayout(this._currentLinkChartConfig.layoutMode,o)}_createSublayers(e,t,i){e.forEach(n=>{const a=this._createSublayer(n);i(a)&&t.push(a),this._updateSublayerCaches(n)})}_updateSublayers(e,t){t.forEach(i=>{i.parentCompositeLayer=this;const n=e.find(a=>a.type===i.graphType&&a.name===i.graphTypeName);n&&(i.objectType=n,i.read({title:n.name},{origin:"service"}),this._updateSublayerCaches(n))})}_updateSublayerCaches({name:e}){if(!e)return;const t=this.dataManager.sublayerCaches;t.has(e)||t.set(e,new Map)}_layersLoadedFromAuthoritativeItem(){const e=this.originIdOf("layers");return e>=B.PORTAL_ITEM&&e<B.USER}async _initializeDiagram(){this.initializationLinkChartConfig?this.initializationLinkChartConfig.doNotRecalculateLayout?(this.dataManager.inclusionModeDefinition?.namedTypeDefinitions?.forEach((e,t)=>{e?.members?.forEach(i=>{const n=i.linkChartLocation;let a;const o=i.id;if(!n)return;a="x"in n?{x:n.x,y:n.y}:{x:n.coords[0],y:n.coords[1]};const s=J(a);this.dataManager.relationshipTypeNames.has(t)?this.relationshipLinkChartDiagramLookup.set(o,s):this.entityLinkChartDiagramLookup.set(o,s),this.linkChartExtent.xmin>a.x&&(this.linkChartExtent.xmin=a.x),this.linkChartExtent.xmax<a.x&&(this.linkChartExtent.xmax=a.x),this.linkChartExtent.ymin>a.y&&(this.linkChartExtent.ymin=a.y),this.linkChartExtent.ymax<a.y&&(this.linkChartExtent.ymax=a.y)})}),this.memberRelationshipTypes.forEach(e=>{e.name&&this.dataManager.sublayerCaches.get(e.name)?.forEach(t=>{const i=this.relationshipLinkChartDiagramLookup.get(t.attributes[te]),n=this.relationshipLinkChartDiagramLookup.get(t.attributes[ie]);if(i&&n){const a=J(new Me({paths:[[[i.coords[0],i.coords[1]],[n.coords[0],n.coords[1]]]]}));this.relationshipLinkChartDiagramLookup.set(t.attributes[C],a)}else this.relationshipLinkChartDiagramLookup.set(t.attributes[C],null)})})):await this._calculateLayoutWithSublayerTimeInfo(this.initializationLinkChartConfig.layoutMode,{lockedNodeLocations:this.getCurrentNodeLocations(),...this.initializationLinkChartConfig||{}}):await this._calculateLayoutWithSublayerTimeInfo("organic-standard",{lockedNodeLocations:this.getCurrentNodeLocations()})}_refreshNamedTypes(){for(const e of this.layers)e.emit("refresh",{dataChanged:!0});for(const e of this.tables)e.emit("refresh",{dataChanged:!0})}_validateOrganicLayoutSettings(e,t){const i=T=>typeof T=="number"&&!isNaN(T),n=T=>i(T)&&T>=1,a=T=>i(T)&&T>=1,o=T=>Object.values(X).includes(T),s=T=>i(T)&&T>=0,h={};if(!new Set(["organic-standard","organic-community","geographic-organic-standard","chronological-multi-timeline","chronological-mono-timeline"]).has(e)||!t)return h;const{computationBudgetTime:u,autoRepulsionRadius:m,repulsionRadiusMultiplier:y,absoluteIdealEdgeLength:L,multiplicativeIdealEdgeLength:q,idealEdgeLengthType:S}=t;return a(u)?h.computationBudgetTime=u:u&&E.getLogger(this).warn("Invalid layout computationBudgetTime setting, will revert to default setting"),h.autoRepulsionRadius=m,!m&&n(y)?h.repulsionRadiusMultiplier=y:m||(h.autoRepulsionRadius=!0,E.getLogger(this).warn("Invalid layout repulsionRadiusMultiplier setting, will revert to default setting")),e==="geographic-organic-standard"&&(o(S)?h.idealEdgeLengthType=S:S!==void 0&&E.getLogger(this).warn('Invalid layout idealEdgeLengthType setting, will revert to "multiplier" setting'),S==="absolute-value"&&s(L)?h.absoluteIdealEdgeLength=L:S==="absolute-value"&&L!==void 0?E.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting"):S==="multiplier"&&s(q)?h.multiplicativeIdealEdgeLength=q:S==="multiplier"&&q!==void 0&&E.getLogger(this).warn("Invalid layout idealEdgeLength setting, will revert to default setting")),h}_convertValidatedOrganicSettingsToCalculationSettings(e){let t=e.idealEdgeLengthType===X.ABSOLUTE?e.absoluteIdealEdgeLength:e.multiplicativeIdealEdgeLength;return e.idealEdgeLengthType===X.ABSOLUTE&&(t===void 0?t=-1:t*=-1),{computationBudgetTime:e.computationBudgetTime??void 0,repulsionRadiusMultiplier:e.repulsionRadiusMultiplier&&!e.autoRepulsionRadius?e.repulsionRadiusMultiplier:void 0,idealEdgeLengthMultiplier:t}}_createSublayer(e){return new K({objectType:e,parentCompositeLayer:this,graphType:e.type})}_handleSublayersChange(e,t){t&&(t.forEach(i=>{i.parent=null}),this.removeHandles("sublayers-owner")),e&&(e.forEach(i=>{i.parent=this}),this.addHandles([e.on("after-add",({item:i})=>{i.parent=this}),e.on("after-remove",({item:i})=>{i.parent=null})],"sublayers-owner"))}_alignLayersDataModelAndInclusionDefinition(e){const t=new Set((e.entityTypes??[]).map(a=>a.name).concat((e.relationshipTypes??[]).map(a=>a.name))),i=new Set((e.entityTypes??[]).map(a=>a.name)),n=new Set((e.relationshipTypes??[]).map(a=>a.name));if(this.layers){for(const o of this.layers)!o.graphType&&t.has(o.graphTypeName)&&(o.graphType=i.has(o.graphTypeName)?"entity":"relationship");const a=this.layers.filter(o=>t.has(o.graphTypeName)&&(o.graphType==="entity"?i.has(o.graphTypeName):n.has(o.graphTypeName)));this.setAtOrigin("layers",a,Se(this.originIdOf("layers")))}else this.layers=new j;if(this.layers&&this._originalInclusionList){const a=new Set(this._originalInclusionList.namedTypeDefinitions.keys()),o=this.tables?.map(u=>u.graphTypeName)??[],s=this.layers.map(u=>u.graphTypeName).concat(o);for(const u of s)a.has(u)||this._originalInclusionList.namedTypeDefinitions.set(u,{useAllData:!1,members:new Map});const h=[];for(const u of this._originalInclusionList.namedTypeDefinitions.keys())s.includes(u)||(E.getLogger(this).warn(`A named type, ${u}, was in the serialized feature collection but did not have a sublayer config in the item, so will be removed`),h.push(u));for(const u of h)this._originalInclusionList.namedTypeDefinitions.delete(u)}}};w([M(Ye)],b.prototype,"url",void 0),w([M()],b.prototype,"dataPreloadedInLocalCache",void 0),w([M()],b.prototype,"initializationLinkChartConfig",void 0),w([M()],b.prototype,"membershipModified",void 0),w([M()],b.prototype,"dataManager",void 0),w([M()],b.prototype,"initializationInclusionModeDefinition",null),w([M()],b.prototype,"knowledgeGraph",void 0),w([M({type:j.ofType(K),json:{write:{ignoreOrigin:!0}}})],b.prototype,"layers",void 0),w([M({readOnly:!0})],b.prototype,"linkChart",null),w([M()],b.prototype,"entityLinkChartDiagramLookup",void 0),w([M()],b.prototype,"relationshipLinkChartDiagramLookup",void 0),w([M()],b.prototype,"linkChartExtent",void 0),w([M()],b.prototype,"memberEntityTypes",void 0),w([M()],b.prototype,"memberRelationshipTypes",void 0),w([M({type:["LinkChartLayer"]})],b.prototype,"operationalLayerType",void 0),w([M()],b.prototype,"sublayerIdsCache",void 0),w([M({type:j.ofType(K),json:{write:{ignoreOrigin:!0}}})],b.prototype,"tables",void 0),w([M({json:{read:!1}})],b.prototype,"type",void 0),w([M({json:{read:!1}})],b.prototype,"chronologicalAuxiliaryGraphics",void 0),b=w([Ae("esri.layers.LinkChartLayer")],b);const la=b;export{la as default};
