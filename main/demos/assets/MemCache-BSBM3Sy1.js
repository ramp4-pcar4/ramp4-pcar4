const m=-3;var o;(function(c){c[c.ALL=0]="ALL",c[c.SOME=1]="SOME"})(o||(o={}));class b{get size(){return this._size}constructor(e=10485760){this._maxSize=e,this._db=new Map,this._size=0,this._hit=0,this._miss=0,this._users=new Map,this._sizeLimits=new Map}destroy(){this.clearAll(),this._sizeLimits.clear(),this._users.clear()}register(e){this._users.set(e.id.slice(0,-1),e)}deregister(e){this.clear(e),this._sizeLimits.delete(e),this._users.delete(e.id.slice(0,-1))}get maxSize(){return this._maxSize}set maxSize(e){this._maxSize=Math.max(e,-1),this._checkSize()}getSize(e,s){return this._db.get(e.id+s)?.size??0}put(e,s,i,h,n){s=e.id+s;const t=this._db.get(s);if(t&&(this._size-=t.size,e.size-=t.size,this._db.delete(s),t.entry!==i&&this._notifyRemove(s,t.entry,t.size,o.ALL)),h>this._maxSize)return void this._notifyRemove(s,i,h,o.ALL);if(i===void 0)return void console.warn("Refusing to cache undefined entry ");if(!h||h<0)return console.warn(`Refusing to cache entry with size ${h} for key ${s}`),void this._notifyRemove(s,i,0,o.ALL);const r=1+Math.max(n,-4)- -3;this._db.set(s,new u(i,h,r)),this._size+=h,e.size+=h,this._checkSize()}updateSize(e,s,i,h){s=e.id+s;const n=this._db.get(s);if(n&&n.entry===i){for(this._size-=n.size,e.size-=n.size;h>this._maxSize;){const t=this._notifyRemove(s,i,h,o.SOME);if(!(t!=null&&t>0))return void this._db.delete(s);h=t}n.size=h,this._size+=h,e.size+=h,this._checkSize()}}pop(e,s){s=e.id+s;const i=this._db.get(s);if(i)return this._size-=i.size,e.size-=i.size,this._db.delete(s),++this._hit,i.entry;++this._miss}get(e,s){s=e.id+s;const i=this._db.get(s);if(i!==void 0)return this._db.delete(s),i.lives=i.lifetime,this._db.set(s,i),++this._hit,i.entry;++this._miss}peek(e,s){const i=this._db.get(e.id+s);return i?++this._hit:++this._miss,i?.entry}get performanceInfo(){const e={Size:Math.round(this._size/1048576)+"/"+Math.round(this._maxSize/1048576)+"MB","Hit rate":Math.round(100*this._getHitRate())+"%",Entries:this._db.size.toString()},s={},i=new Array;this._db.forEach((t,r)=>{const _=t.lifetime;i[_]=(i[_]||0)+t.size,this._users.forEach(d=>{const{id:f,name:a}=d;if(r.startsWith(f)){const l=s[a]||0;s[a]=l+t.size}})});const h={};this._users.forEach(t=>{const r=t.name;if("hitRate"in t&&typeof t.hitRate=="number"&&!isNaN(t.hitRate)&&t.hitRate>0){const _=s[r]||0;s[r]=_,h[r]=Math.round(100*t.hitRate)+"%"}else h[r]="0%"});const n=Object.keys(s);n.sort((t,r)=>s[r]-s[t]),n.forEach(t=>e[t]=Math.round(s[t]/2**20)+"MB / "+h[t]);for(let t=i.length-1;t>=0;--t){const r=i[t];r&&(e["Priority "+(t+-3-1)]=Math.round(r/this._size*100)+"%")}return e}resetStats(){this._hit=this._miss=0,this._users.forEach(e=>e.resetHitRate())}clear(e){const s=e.id;this._db.forEach((i,h)=>{h.startsWith(s)&&(this._size-=i.size,this._db.delete(h),this._notifyRemove(h,i.entry,i.size,o.ALL))}),e.size=0}clearAll(){this._db.forEach((e,s)=>this._notifyRemove(s,e.entry,e.size,o.ALL)),this._users.forEach(e=>e.size=0),this._size=0,this._db.clear()}*values(e){for(const[s,i]of this._db)s.startsWith(e.id)&&(yield i.entry)}_getHitRate(){return this._hit/(this._hit+this._miss)}_notifyRemove(e,s,i,h){const n=this._users.get(e.split(z)[0])?.removeFunc,t=n?.(s,h,i);return typeof t=="number"?t:null}_checkSize(){this._sizeLimits.forEach((e,s)=>this._checkSizeLimits(e,s)),this._checkSizeLimits(this.maxSize)}setMaxSize(e,s){s==null||s<=0?this._sizeLimits.delete(e):this._sizeLimits.set(e,s)}_checkSizeLimits(e,s){const i=s??this;if(i.size<=e)return;const h=s?.id;let n=!0;for(;n;){n=!1;for(const[t,r]of this._db)if(r.lifetime===0&&(!h||t.startsWith(h))){const _=s??this._users.get(t.split(z)[0]);if(this._purgeItem(t,r,_),i.size<=.9*e)return;n||=this._db.has(t)}}for(const[t,r]of this._db)if(!h||t.startsWith(h)){const _=s??this._users.get(t.split(z)[0]);if(this._purgeItem(t,r,_),i.size<=.9*e)return}}_purgeItem(e,s,i){if(this._db.delete(e),s.lives<=1){this._size-=s.size,i&&(i.size-=s.size);const h=this._notifyRemove(e,s.entry,s.size,o.SOME);h!=null&&h>0&&(this._size+=h,i&&(i.size+=h),s.lives=s.lifetime,s.size=h,this._db.set(e,s))}else--s.lives,this._db.set(e,s)}}class u{constructor(e,s,i){this.entry=e,this.size=s,this.lifetime=i,this.lives=i}}const z=":";export{b as h,m as t};
