{"version":3,"file":"index-DnSitIYP.js","sources":["../../src/fixtures/gazebo/appbar-button.vue","../../src/fixtures/gazebo/p2-screen-2.vue","../../src/fixtures/gazebo/p2-screen-3.vue","../../src/fixtures/gazebo/lang/lang.csv?raw","../../src/fixtures/gazebo/index.ts"],"sourcesContent":["<template>\n    <appbar-button :onClickFunction=\"onClick\" tooltip=\"Gazebo\">\n        <span :style=\"{ color: options?.colour ?? '#BDBDBD' }\">G </span>\n    </appbar-button>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject } from 'vue';\nimport type { PropType } from 'vue';\nimport type { InstanceAPI } from '@/api';\n\ndefineProps({\n    options: {\n        type: Object as PropType<{ colour: string }>\n    }\n});\n\nconst iApi = inject<InstanceAPI>('iApi')!;\n\nconst onClick = () => {\n    iApi.panel.toggle({ id: 'p2', screen: 'p-2-screen-2' });\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n    <panel-screen :panel=\"panel\">\n        <template #header> Gazebo/Panel 2/Screen B </template>\n\n        <template #content>\n            {{ t('gz.hello2') }}\n\n            <div class=\"flex flex-row justify-center items-center mt-16\">\n                <!-- ✔ this is the correct way to switch between screens in the same panel 👇 -->\n                <button\n                    type=\"button\"\n                    @click=\"\n                        panel.show({\n                            screen: 'p-2-screen-1',\n                            props: { greeting: 'Greeting from Screen B' }\n                        })\n                    \"\n                    class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-8 px-16\"\n                >\n                    Switch to Screen A\n                </button>\n\n                <button\n                    type=\"button\"\n                    @click=\"enhancedCatActivities()\"\n                    class=\"bg-blue-500 hover:bg-blue-700 text-white font-bold py-8 px-16 m-2\"\n                >\n                    See a cat\n                </button>\n            </div>\n\n            <p class=\"mt-16\">{{ greeting }}</p>\n        </template>\n    </panel-screen>\n</template>\n\n<script setup lang=\"ts\">\nimport { inject } from 'vue';\nimport type { PropType } from 'vue';\nimport type { InstanceAPI, PanelInstance } from '@/api';\nimport { useI18n } from 'vue-i18n';\n\nconst props = defineProps({\n    panel: { type: Object as PropType<PanelInstance>, required: true },\n    greeting: { type: String }\n});\n\nconst { t } = useI18n();\nconst iApi = inject<InstanceAPI>('iApi')!;\n\nconst enhancedCatActivities = () => {\n    // shows a cat, also does an event API flex\n    props.panel.show('p-2-screen-3');\n    iApi.event.emit('gazebo/beholdMyText', 'I am a cat');\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n    <panel-screen :panel=\"panel\">\n        <template #header> Gazebo/Panel 2/Screen C </template>\n\n        <template #content>\n            <div class=\"flex flex-col items-center mt-16\">\n                <!-- ✔ this is the correct way to switch between screens in the same panel 👇 -->\n                <button\n                    type=\"button\"\n                    @click=\"\n                        panel.show({\n                            screen: 'p-2-screen-1',\n                            props: { greeting: 'Greeting from Screen C' }\n                        })\n                    \"\n                    class=\"bg-green-500 hover:bg-green-700 text-white font-bold py-8 px-16\"\n                >\n                    Switch to Screen A\n                </button>\n\n                <img class=\"my-16\" src=\"https://media.giphy.com/media/iWkHDNtcHpB5e/giphy.gif\" alt=\"\" srcset=\"\" />\n\n                <p>Locale merging:</p>\n                <dl>\n                    <dt>global locale:</dt>\n                    <dd class=\"ml-32 font-bold\">{{ t('lang_native') }}</dd>\n                    <dt>fixture locale:</dt>\n                    <dd class=\"ml-32 font-bold\">{{ t('gz.hello') }}</dd>\n                    <dt>common panels locale:</dt>\n                    <dd class=\"ml-32 font-bold\">{{ t('who') }}</dd>\n                </dl>\n            </div>\n        </template>\n    </panel-screen>\n</template>\n\n<script setup lang=\"ts\">\nimport type { PropType } from 'vue';\nimport type { PanelInstance } from '@/api';\nimport { useI18n } from 'vue-i18n';\n\ndefineProps({\n    panel: { type: Object as PropType<PanelInstance>, required: true }\n});\n\nconst { t } = useI18n({\n    messages: {\n        en: {\n            lang_native: 'En',\n            who: '[me cat]'\n        },\n        fr: {\n            lang_native: 'Fr',\n            who: '[moi chat]'\n        }\n    }\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","export default \"key,enValue,enValid,frValue,frValid\\ngz.hello,I'm a simple panel - but from a locale file,1,Bonjour. Je suis un panel\\\",0\\ngz.hello2,I'm a simple panel,1,Bonjour. Je suis un panel\\\",0\\ngz.alert1,Gazebo,1,Gazebo,0\\ngz.alert2,Gazebo two,1,Gazebo deux,0\"","import { markRaw } from 'vue';\nimport { FixtureInstance } from '@/api';\nimport type { AsyncComponentEh } from '@/stores/panel';\n\nimport GazeboAppbarButtonV from './appbar-button.vue';\n\nimport GazeboP1Screen1V from './p1-screen-1.vue';\nimport GazeboP1Screen2V from './p1-screen-2.vue';\n\nimport GazeboP2Screen2V from './p2-screen-2.vue';\nimport GazeboP2Screen3V from './p2-screen-3.vue';\n\nimport messages from './lang/lang.csv?raw';\n\nconst BEHOLD_TEXT_EVENT = 'gazebo/beholdMyText';\n\nclass GazeboFixture extends FixtureInstance {\n    added(): void {\n        // console.log(`[fixture] ${this.id} added`);\n\n        this.$iApi.event.registerEventName(BEHOLD_TEXT_EVENT);\n\n        this.$iApi.component('gazebo-appbar-button', GazeboAppbarButtonV);\n\n        /**\n         * -- Vue3 Migration --\n         * All screen loading methods have been replaced with direct component loading.\n         * That is, each screen component is directly loaded by importing it above\n         *\n         * // TODO: Migrate different loading techniques from Vue2 to Vue3. Refer to the TODOs below for examples\n         */\n\n        this.$iApi.panel.register(\n            {\n                // panel-1 has examples of how not to bind things and interact with stuff; bad panel ❌\n                // it generally avoids using API and goes straight to the store; fixtures/panels/screens should not do that;\n                id: 'p1',\n                config: {\n                    screens: {\n                        'p-1-screen-1': markRaw(GazeboP1Screen1V),\n                        'p-1-screen-2': markRaw(GazeboP1Screen2V)\n                    },\n                    style: {\n                        'flex-grow': '1',\n                        'max-width': '500px'\n                    },\n                    alertName: 'gz.alert1'\n                }\n            },\n            { i18n: { messages } }\n        );\n\n        this.$iApi.panel.register(\n            {\n                // panel-2 has examples of how properly bind things and interact with stuff; good panel ✔\n                // use API functions; underlying store structure might change and all the code accessing the store directly will break\n                id: 'p2',\n                config: {\n                    screens: {\n                        /**\n                         * // This should work:\n                         * manually lazy-loading a screen component\n                         */\n                        //'p-2-screen-1': () => import(/* webpackChunkName: \"p-2-screen-1\" */ `./p2-screen-1.vue`),\n\n                        /**\n                         * // This should work:\n                         * for the demo purposes, delay resolution of a component by 2 seconds\n                         */\n                        'p-2-screen-1': () => {\n                            return new Promise<AsyncComponentEh>(resolve =>\n                                setTimeout(\n                                    () =>\n                                        import(`./p2-screen-1.vue`).then(data => {\n                                            resolve(data);\n                                        }),\n                                    2000\n                                )\n                            );\n                        },\n\n                        /**\n                         * // This should work:\n                         * letting the core to lazy-load a screen component; need to provide a path relative to the fixtures home folder\n                         */\n                        'p-2-screen-2': markRaw(GazeboP2Screen2V),\n\n                        /**\n                         * // This should work:\n                         * returning a `VueConstructor` in a promise\n                         */\n                        'p-2-screen-3': () => {\n                            return new Promise<AsyncComponentEh>(resolve => resolve(markRaw(GazeboP2Screen3V)));\n                        }\n                    },\n                    style: {\n                        'flex-grow': '1',\n                        'max-width': '500px'\n                    },\n                    alertName: 'gz.alert2'\n                }\n            },\n            { i18n: { messages } }\n        );\n\n        this.handlePanelTeleports(['p1', 'p2']);\n    }\n}\n\nexport default GazeboFixture;\n"],"names":["iApi","inject","onClick","props","__props","t","useI18n","enhancedCatActivities","messages","BEHOLD_TEXT_EVENT","GazeboFixture","FixtureInstance","GazeboAppbarButtonV","markRaw","GazeboP1Screen1V","GazeboP1Screen2V","resolve","data","GazeboP2Screen2V","GazeboP2Screen3V"],"mappings":";;;;;;;;;AAiBM,UAAAA,IAAOC,EAAoB,MAAM,GAEjCC,IAAU,MAAM;AAClB,MAAAF,EAAK,MAAM,OAAO,EAAE,IAAI,MAAM,QAAQ,gBAAgB;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACsB1D,UAAMG,IAAQC,GAKR,EAAE,GAAAC,MAAMC,KACRN,IAAOC,EAAoB,MAAM,GAEjCM,IAAwB,MAAM;AAE1B,MAAAJ,EAAA,MAAM,KAAK,cAAc,GAC1BH,EAAA,MAAM,KAAK,uBAAuB,YAAY;AAAA,IAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACRjD,UAAA,EAAE,GAAAK,EAAE,IAAIC,EAAQ;AAAA,MAClB,UAAU;AAAA,QACN,IAAI;AAAA,UACA,aAAa;AAAA,UACb,KAAK;AAAA,QACT;AAAA,QACA,IAAI;AAAA,UACA,aAAa;AAAA,UACb,KAAK;AAAA,QACT;AAAA,MACJ;AAAA,IAAA,CACH;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ICxDDE,IAAe,EAAC,IAAK,EAAC,YAAW,+CAA8C,aAAY,sBAAqB,aAAY,UAAS,aAAY,aAAY,GAAE,IAAK,EAAC,YAAW,8BAA8B,aAAY,8BAA8B,aAAY,UAAS,aAAY,cAAa,EAAC,GCcjSC,IAAoB;AAE1B,MAAMC,UAAsBC,EAAgB;AAAA,EACxC,QAAc;AAGL,SAAA,MAAM,MAAM,kBAAkBF,CAAiB,GAE/C,KAAA,MAAM,UAAU,wBAAwBG,CAAmB,GAUhE,KAAK,MAAM,MAAM;AAAA,MACb;AAAA;AAAA;AAAA,QAGI,IAAI;AAAA,QACJ,QAAQ;AAAA,UACJ,SAAS;AAAA,YACL,gBAAgBC,EAAQC,CAAgB;AAAA,YACxC,gBAAgBD,EAAQE,CAAgB;AAAA,UAC5C;AAAA,UACA,OAAO;AAAA,YACH,aAAa;AAAA,YACb,aAAa;AAAA,UACjB;AAAA,UACA,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,MACA,EAAE,MAAM,EAAE,UAAAP,IAAW;AAAA,IAAA,GAGzB,KAAK,MAAM,MAAM;AAAA,MACb;AAAA;AAAA;AAAA,QAGI,IAAI;AAAA,QACJ,QAAQ;AAAA,UACJ,SAAS;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAWL,gBAAgB,MACL,IAAI;AAAA,cAA0B,CACjCQ,MAAA;AAAA,gBACI,MACI,OAAO,2BAAmB,EAAE,KAAK,CAAQC,MAAA;AACrC,kBAAAD,EAAQC,CAAI;AAAA,gBAAA,CACf;AAAA,gBACL;AAAA,cACJ;AAAA,YAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAQR,gBAAgBJ,EAAQK,CAAgB;AAAA;AAAA;AAAA;AAAA;AAAA,YAMxC,gBAAgB,MACL,IAAI,QAA0B,CAAAF,MAAWA,EAAQH,EAAQM,CAAgB,CAAC,CAAC;AAAA,UAE1F;AAAA,UACA,OAAO;AAAA,YACH,aAAa;AAAA,YACb,aAAa;AAAA,UACjB;AAAA,UACA,WAAW;AAAA,QACf;AAAA,MACJ;AAAA,MACA,EAAE,MAAM,EAAE,UAAAX,IAAW;AAAA,IAAA,GAGzB,KAAK,qBAAqB,CAAC,MAAM,IAAI,CAAC;AAAA,EAC1C;AACJ;"}