import{bt as w,bu as b,ej as Ve,bv as $,bw as xt,oO as wt,gJ as Z,oP as $e,G as se,aZ as Te,D as A,oQ as Ye,bn as W,iP as _e,s as C,iK as It,U as Xe,oR as Ke,he as bt,oS as de,aY as H,iQ as Qe,iR as Rt,iS as St,l9 as vt,oT as Tt,oU as _t,oV as Ft,oW as kt,oX as Fe,bx as ke,a$ as Ct,hO as Ot,e3 as Pt,oY as Mt,oZ as Nt,o_ as Ce,o$ as Dt,p0 as Jt,eg as Bt,p1 as Et,p2 as At,iI as Ht,p3 as Lt,iJ as Oe,iT as zt,p4 as Ze,p5 as Wt,p6 as et,p7 as tt,p8 as st,b3 as Gt,p9 as qt,pa as jt,pb as Ut,pc as Vt,pd as $t,pe as it,iL as Yt,pf as Xt,iH as me,h2 as Kt,pg as Qt,ph as Zt,iO as es,pi as ye,iN as ts,iM as ss,e6 as rt,pj as is,ci as Pe,pk as Me,pl as rs,Q as ns,pm as as,pn as os,po as ls,jS as cs,I as us,nQ as hs,pp as fs,pq as ps,pr as nt,ps as ds,pt as ms,pu as ys,pv as ge,pw as gs,px as xs,py as ws,pz as Is,ea as bs,ee as Rs,ec as Ss,ed as vs,pA as Ts,er as _s,hj as Fs,eq as ks,eb as Cs,ef as Os,cQ as Ps,f8 as Ms,B as Ns,bl as oe,hm as Ds,hE as xe,cc as Js,ei as Bs,ce as Es,ep as As}from"./main-DCIX61zy.js";import{i as at,m as ot,x as lt,h as Hs,s as Ls}from"./RawBlockCache-DasbueeU.js";import{V as we,v as Ne,I as ct,l as ut,a as zs,e as De,K as Ie,i as Ws,t as Gs,C as qs,D as Je}from"./rasterProjectionHelper-CgVEist9.js";import{h as Be,l as js,T as ht,y as Ee,c as Us,w as Vs}from"./PolynomialTransform-C_RaF2be.js";const ft=8,$s=256;let Ys=0,B=class extends xt{constructor(){super(...arguments),this._tileFetchQueue=new wt({concurrency:32,process:(t,e)=>this._fetchRawTile(t.pyramidLevel,t.row,t.col,{...t.options,signal:e})}),this.datasetName=null,this.datasetFormat=null,this.hasUniqueSourceStorageInfo=!0,this.rasterInfo=null,this.ioConfig={sampling:"closest"}}normalizeCtorArgs(t){return t?.ioConfig&&(t={...t,ioConfig:{resolution:null,bandIds:null,sampling:"closest",tileInfo:Z.create(),...t.ioConfig}}),t}get _isGlobalWrappableSource(){const{rasterInfo:t}=this,e=we(t.spatialReference);return e!=null&&t.extent.width>=e/2}get _hasNoneOrGCSShiftTransform(){const{transform:t}=this.rasterInfo;return t==null||t.type==="gcs-shift"}set rasterJobHandler(t){this._set("rasterJobHandler",t),this.datasetFormat==="Function"&&this.primaryRasters?.rasters?.forEach(e=>e.rasterJobHandler=t)}get rasterId(){return this.url||"rasterId-"+Ys++}set url(t){this._set("url",$e(t,se.getLogger(this)))}async open(t){return this._openPromise??=Ne().then(()=>this._open(t)),this._openPromise}async fetchTile(t,e,r,s={}){const i=s.tileInfo||this.rasterInfo.storageInfo.tileInfo,a=this.getTileExtentFromTileInfo(t,e,r,i);return s={noClip:!0,...s},this.fetchPixels(a,i.size[0],i.size[1],s)}async identify(t,e={}){t=Te(A,t).clone().normalize();const{multidimensionalDefinition:r,timeExtent:s}=e,{rasterInfo:i}=this,{hasMultidimensionalTranspose:a,multidimensionalInfo:n}=i;let{transposedVariableName:l}=e;const o=n!=null&&a&&(s!=null||Ye(r));o&&!l&&(l=r!=null&&r.length>0?r[0].variableName??void 0:n.variables[0].name,e={...e,transposedVariableName:l}),e=this._getRequestOptionsWithSliceId(e);const{spatialReference:c,extent:u}=i,{datumTransformation:p}=e;let h=ct(t,c,p);if(!u.intersects(h))return{location:h,value:null};if(i.transform!=null){const F=i.transform.inverseTransform(h);if(!i.nativeExtent.intersects(F))return{location:F,value:null};h=F}let f=0;const y=l!=null&&n!=null&&i.hasMultidimensionalTranspose;if(this.datasetFormat==="Function"){const F=this.primaryRasters.rasters[0];if(y)return F.identify(h,e);const{pixelSize:M}=i,O=3,N=M.x*O/2,D=M.y*O/2,E=new W({xmin:h.x-N,xmax:h.x+N,ymin:h.y-D,ymax:h.y+D,spatialReference:c}),z={interpolation:"nearest",multidimensionalDefinition:r,sliceId:e.sliceId},{pixelBlock:V}=await F.fetchPixels(E,O,O,z),{pixelBlock:G}=await this.fetchPixels(E,O,O,z);if(V==null)return{location:h,value:null};const q=Math.floor(O*O*.5),K=!V.mask||V.mask[q]?V.pixels.map(U=>U[q]):null;let te;return G!=null&&(te=!G.mask||G.mask[q]?G.pixels.map(U=>U[q]):void 0),{location:h,value:K,processedValue:te,pyramidLevel:0}}if(!y){if(e.srcResolution)f=ut(e.srcResolution,i,this.ioConfig.sampling).pyramidLevel;else if(f=await this.computeBestPyramidLevelForLocation(t,e),f==null)return{location:h,value:null}}const g=this.identifyPixelLocation(h,f,null,y);if(g===null)return{location:h,value:null};const{row:d,col:m,rowOffset:x,colOffset:I,blockWidth:R}=g,v=l??e.sliceId,T=at(this.rasterId,v),S=`${f}/${d}/${m}`;let k=ot(T,null,S);k==null&&(k=this.fetchRawTile(f,d,m,e),lt(T,null,S,k));const _=await k;if(!_?.pixels?.length)return{location:h,value:null};const P=x*R+I;return this._processIdentifyResult(_,{srcLocation:h,position:P,pyramidLevel:f,useTransposedTile:!!y,requestSomeSlices:o,identifyOptions:e})}async fetchPixels(t,e,r,s={}){t=zs(t),s=this._getRequestOptionsWithSliceId(s);const{_hasNoneOrGCSShiftTransform:i}=this;if(s.requestRawData&&i)return this._fetchPixels(t,e,r,s);const a=we(t.spatialReference),n=De(t);if(a==null||n===0||n===1&&this._isGlobalWrappableSource&&i)return this._fetchPixels(t,e,r,s);if(n>=3)return{extent:t,pixelBlock:null};const l=[],{xmin:o,xmax:c}=t,u=Math.round(a/(c-o)*e),p=u-Math.round((a/2-o)/(c-o)*e);let h=0;const f=[];for(let m=0;m<=n;m++){const x=new W({xmin:m===0?o:-a/2,xmax:m===n?c-a*m:a/2,ymin:t.ymin,ymax:t.ymax,spatialReference:t.spatialReference}),I=m===0?u-p:m===n?e-h:u;h+=I,f.push(I);const R=s.disableWrapAround&&m>0?null:this._fetchPixels(x,I,r,s);l.push(R)}const y=(await Promise.all(l)).map(m=>m?.pixelBlock);let g=null;const d={width:e,height:r};return this.rasterJobHandler?g=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:y,srcMosaicSize:d,destDimension:null,coefs:null,sampleSpacing:null,interpolation:"nearest",alignmentInfo:null,blockWidths:f},s)).pixelBlock:g=_e(y,d,{blockWidths:f}),{extent:t,srcExtent:Ie(t,this.rasterInfo.spatialReference,s.datumTransformation),pixelBlock:g}}async fetchRawPixels(t,e,r,s={}){e={x:Math.floor(e.x),y:Math.floor(e.y)};const i=await this._fetchRawTiles(t,e,r,s),{nativeExtent:a,nativePixelSize:n,storageInfo:l}=this.rasterInfo,o=2**t,c=n.x*o,u=n.y*o,p=new W({xmin:a.xmin+c*e.x,xmax:a.xmin+c*(e.x+r.width-1),ymin:a.ymax-u*(e.y+r.height-1),ymax:a.ymax-u*e.y,spatialReference:a.spatialReference});if(!i)return{extent:p,srcExtent:p,pixelBlock:null};const{pixelBlocks:h,mosaicSize:f}=i;if(h.length===1&&h[0]!=null&&h[0].width===r.width&&h[0].height===r.height)return{extent:p,srcExtent:p,pixelBlock:i.pixelBlocks[0]};const y=t>0?l.pyramidBlockWidth:l.blockWidth,g=t>0?l.pyramidBlockHeight:l.blockHeight,d={x:e.x%y,y:e.y%g};let m;return this.rasterJobHandler?m=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:h,srcMosaicSize:f,destDimension:r,clipOffset:d,clipSize:r,coefs:null,sampleSpacing:null,interpolation:s.interpolation,alignmentInfo:null,blockWidths:null},s)).pixelBlock:m=_e(h,f,{clipOffset:d,clipSize:r}),{extent:p,srcExtent:p,pixelBlock:m}}fetchRawTile(t,e,r,s){throw new C("BaseRaster:read-not-implemented","fetchRawTile() is not implemented")}computeExtent(t){return Ie(this.rasterInfo.extent,t)}decodePixelBlock(t,e){return!this.rasterJobHandler||e.useCanvas?It(t,e):this.rasterJobHandler.decode({data:t,options:e})}async request(t,e,r=0){const{customFetchParameters:s}=this.ioConfig,{range:i,query:a,headers:n}=e;r=r??e.retryCount??this.ioConfig.retryCount;const l=i?{Range:`bytes=${i.from}-${i.to}`}:null;try{return await Xe(t,{...e,query:{...a,...s},headers:{...n,...l}})}catch(o){if(r>0)return r--,this.request(t,e,r);throw o}}getSliceIndex(t){const{multidimensionalInfo:e}=this.rasterInfo;return e==null||t==null||t.length===0?null:Ke(t,e)}getTileExtentFromTileInfo(t,e,r,s){const i=s.lodAt(t);return this.getTileExtent({x:i.resolution,y:i.resolution},e,r,s.origin,s.spatialReference,s.size)}updateTileInfo(){const{storageInfo:t,spatialReference:e,extent:r,pixelSize:s}=this.rasterInfo,{pyramidResolutions:i}=t;if(!t.tileInfo){const a=[],n=t.maximumPyramidLevel||0;let l=(s.x+s.y)/2,o=1/.0254*96*l;for(let u=0;u<=n&&(a.unshift(new bt({level:n-u,resolution:l,scale:o})),u!==n);u++)if(i){const p=(i[u].x+i[u].y)/2;o*=p/l,l=p}else l*=2,o*=2;const c=new A({x:r.xmin,y:r.ymax,spatialReference:e});t.tileInfo=new Z({origin:c,size:[t.blockWidth,t.blockHeight],spatialReference:e,lods:a}),t.isVirtualTileInfo=!0}}createRemoteDatasetStorageInfo(t,e=512,r=512,s){const{width:i,height:a,nativeExtent:n,pixelSize:l,spatialReference:o}=t,c=new A({x:n.xmin,y:n.ymax,spatialReference:o});s==null&&(s=Math.max(0,Math.round(Math.log(Math.max(i,a))/Math.LN2-8)));const u=this.computeBlockBoundary(n,512,512,{x:n.xmin,y:n.ymax},[l],s);t.storageInfo=new de({blockWidth:e,blockHeight:r,pyramidBlockWidth:e,pyramidBlockHeight:r,origin:c,firstPyramidLevel:1,maximumPyramidLevel:s,blockBoundary:u})}async computeBestPyramidLevelForLocation(t,e={}){return 0}computeBlockBoundary(t,e,r,s,i,a=0,n=2){if(i.length===1&&a>0){i=[...i];let{x:u,y:p}=i[0];for(let h=0;h<a;h++)u*=n,p*=n,i.push({x:u,y:p})}const l=[],{x:o,y:c}=s;for(let u=0;u<i.length;u++){const{x:p,y:h}=i[u];l.push({minCol:Math.floor((t.xmin-o+.1*p)/e/p),maxCol:Math.floor((t.xmax-o-.1*p)/e/p),minRow:Math.floor((c-t.ymax+.1*h)/r/h),maxRow:Math.floor((c-t.ymin-.1*h)/r/h)})}return l}getPyramidPixelSize(t){const{nativePixelSize:e}=this.rasterInfo,{pyramidResolutions:r,pyramidScalingFactor:s}=this.rasterInfo.storageInfo;if(t===0)return e;if(r!=null&&r.length)return r[t-1];const i=s**t;return{x:e.x*i,y:e.y*i}}identifyPixelLocation(t,e,r,s){const{spatialReference:i,nativeExtent:a,storageInfo:n}=this.rasterInfo,{maximumPyramidLevel:l,origin:o,transposeInfo:c}=n,u=s&&c!=null?c.tileSize[0]:n.blockWidth,p=s&&c!=null?c.tileSize[1]:n.blockHeight,h=ct(t,i,r);if(!a.intersects(h)||e<0||e>l)return null;const f=this.getPyramidPixelSize(e),{x:y,y:g}=f,d=(o.y-h.y)/g/p,m=(h.x-o.x)/y/u,x=Math.min(p-1,Math.floor((d-Math.floor(d))*p)),I=Math.min(u-1,Math.floor((m-Math.floor(m))*u));return{pyramidLevel:e,row:Math.floor(d),col:Math.floor(m),rowOffset:x,colOffset:I,blockWidth:u,srcLocation:h}}getTileExtent(t,e,r,s,i,a){const[n,l]=a,o=s.x+r*n*t.x,c=o+n*t.x,u=s.y-e*l*t.y,p=u-l*t.y;return new W({xmin:o,xmax:c,ymin:p,ymax:u,spatialReference:i})}getBlockWidthHeight(t){return{blockWidth:t>0?this.rasterInfo.storageInfo.pyramidBlockWidth:this.rasterInfo.storageInfo.blockWidth,blockHeight:t>0?this.rasterInfo.storageInfo.pyramidBlockHeight:this.rasterInfo.storageInfo.blockHeight}}isBlockOutside(t,e,r){const s=this.rasterInfo.storageInfo.blockBoundary[t];return!s||s.maxRow<e||s.maxCol<r||s.minRow>e||s.minCol>r}updateImageSpaceRasterInfo(t){const{pixelSize:e}=t,{width:r,height:s}=t,i=H.WebMercator;t.spatialReference=i,t.extent=t.nativeExtent=new W({xmin:-.5,ymax:.5,xmax:r-.5,ymin:.5-s,spatialReference:i}),t.isPseudoSpatialReference=!0,t.transform=null,t.pixelSize=new A({x:1,y:1,spatialReference:i});const{extent:a,storageInfo:n}=t;if(n){n.origin=new A({x:a.xmin,y:a.ymax,spatialReference:i});const{pyramidResolutions:l,tileInfo:o}=n;if(l&&l.forEach(c=>{c.x/=e.x,c.y/=e.y}),o){o.origin=n.origin;const c=(t.nativePixelSize.x+t.nativePixelSize.y)/2;o.lods.forEach((u,p)=>{u.resolution=c*2**p,u.scale=96*u.resolution/.0254})}}}async _fetchPixels(t,e,r,s={}){let i=De(t);if(i>=2)return{extent:t,pixelBlock:null};const a=this._getSourceDataInfo(t,e,r,s),{pyramidLevel:n,srcResolution:l,srcExtent:o,srcWidth:c,srcHeight:u,ul:p}=a;if(c===0||u===0)return{extent:t,srcExtent:o,pixelBlock:null};const{rasterInfo:h}=this,f=h.transform,y=f?.type==="gcs-shift",g=we(t.spatialReference)!=null;!y&&g||(i=De(a.srcExtent,y));const d=await this._fetchRawTiles(n,p,{width:c,height:u,wrapCount:i},s);if(!d)return{extent:t,srcExtent:o,pixelBlock:null};const m=h.storageInfo,x=n>0?m.pyramidBlockWidth:m.blockWidth,I=n>0?m.pyramidBlockHeight:m.blockHeight;let{x:R,y:v}=h.pixelSize;if(n>0){const{pyramidResolutions:Q,pyramidScalingFactor:gt}=m;if(Q!=null&&Q[n-1])({x:R,y:v}=Q[n-1]);else{const Ue=gt**n;R*=Ue,v*=Ue}}const T=h.spatialReference,S=new A({x:R,y:v,spatialReference:T}),k=x===c&&I===u&&p.x%x==0&&p.y%I==0,_=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/r,spatialReference:t.spatialReference}),P=!t.spatialReference.equals(T),F=T.isGeographic?1e-9:1e-4,{datumTransformation:M}=s;if(!P&&k&&d.pixelBlocks.length===1&&x===e&&I===r&&Xs(l,_,F))return{extent:t,srcExtent:o,srcTilePixelSize:S,pixelBlock:d.pixelBlocks[0]};const O=g&&we(o.spatialReference)!=null&&this._hasNoneOrGCSShiftTransform,N=s.requestProjectedLocalDirections&&this.rasterInfo.dataType.startsWith("vector");N&&!this.rasterJobHandler&&await Ne();const D=this.rasterJobHandler?await this.rasterJobHandler.getProjectionOffsetGrid({projectedExtent:t,srcBufferExtent:d.extent,pixelSize:_.toJSON(),datumTransformation:M,rasterTransform:f,hasWrapAround:i>0||O,isAdaptive:this.ioConfig.optimizeProjectionAccuracy!==!1,includeGCSGrid:N},s):Ws({projectedExtent:t,srcBufferExtent:d.extent,pixelSize:_,datumTransformation:M,rasterTransform:f,hasWrapAround:i>0||O,isAdaptive:!1,includeGCSGrid:N});let E;const z=!s.requestRawData,V={rows:D.spacing[0],cols:D.spacing[1]},G=this._hasNoneOrGCSShiftTransform?this._getRasterTileAlignmentInfo(n,d.extent.xmin):void 0,{pixelBlocks:q,mosaicSize:K,isPartiallyFilled:te}=d;let U=null;if(this.rasterJobHandler)({pixelBlock:E,localNorthDirections:U}=await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:q,srcMosaicSize:K,destDimension:z?{width:e,height:r}:null,coefs:z?D.coefficients:null,sampleSpacing:z?V:null,projectDirections:N,gcsGrid:N?D.gcsGrid:null,isUV:this.rasterInfo.dataType==="vector-uv",interpolation:s.interpolation,alignmentInfo:G,blockWidths:null},s));else{const Q=_e(q,K,{alignmentInfo:G});E=z?Qe(Q,{width:e,height:r},D.coefficients,V,s.interpolation):Q,N&&D.gcsGrid&&(U=Rt({width:e,height:r},D.gcsGrid),E=St(E,this.rasterInfo.dataType,U))}return s.requestRawData||N?{extent:t,srcExtent:o,srcTilePixelSize:S,pixelBlock:E,transformGrid:D,localNorthDirections:U,isPartiallyFilled:te}:{extent:t,srcExtent:o,srcTilePixelSize:S,pixelBlock:E}}async _fetchRawTiles(t,e,r,s){const{origin:i,blockBoundary:a}=this.rasterInfo.storageInfo,{blockWidth:n,blockHeight:l}=this.getBlockWidthHeight(t);let{x:o,y:c}=e,{width:u,height:p,wrapCount:h}=r;const f=this._getRasterTileAlignmentInfo(t,0);s.buffer&&(o-=s.buffer.cols,c-=s.buffer.rows,u+=2*s.buffer.cols,p+=2*s.buffer.rows);let y=0,g=0,d=0;h&&f!=null&&({worldColumnCountFromOrigin:g,originColumnOffset:d,rightPadding:y}=f,g*f.blockWidth-y>=o+u&&(y=0));const m=Math.floor(o/n),x=Math.floor(c/l),I=Math.floor((o+u+y-1)/n),R=Math.floor((c+p+y-1)/l),v=a[t];if(!v)return null;const{minRow:T,minCol:S,maxCol:k,maxRow:_}=v;if(h===0&&(R<T||I<S||x>_||m>k))return null;const P=new Array;let F=!1;const M=this.ioConfig.allowPartialFill==null?s.allowPartialFill:this.ioConfig.allowPartialFill;for(let G=x;G<=R;G++)for(let q=m;q<=I;q++){let K=q;if(!s.disableWrapAround&&h&&f!=null&&g<=q&&(K=q-g-d),G>=T&&K>=S&&_>=G&&k>=K){const te=this._tileFetchQueue.push({pyramidLevel:t,row:G,col:K,options:s},{signal:s.signal});M?P.push(new Promise(U=>{te.then(Q=>U(Q)).catch(()=>{F=!0,U(null)})})):P.push(te)}else P.push(Promise.resolve(null))}if(P.length===0)return null;const O=await Promise.all(P),N={height:(R-x+1)*l,width:(I-m+1)*n},{spatialReference:D}=this.rasterInfo,E=this.getPyramidPixelSize(t),{x:z,y:V}=E;return{extent:new W({xmin:i.x+m*n*z,xmax:i.x+(I+1)*n*z,ymin:i.y-(R+1)*l*V,ymax:i.y-x*l*V,spatialReference:D}),pixelBlocks:O,mosaicSize:N,isPartiallyFilled:F}}_fetchRawTile(t,e,r,s){const i=this.rasterInfo.storageInfo.blockBoundary[t];if(!i)return Promise.resolve(null);const{minRow:a,minCol:n,maxCol:l,maxRow:o}=i;if(e<a||r<n||e>o||r>l)return Promise.resolve(null);const c=at(this.rasterId,s.sliceId),u=`${t}/${e}/${r}`;let p=ot(c,s.registryId,u);if(p==null){const h=new AbortController;p=this.fetchRawTile(t,e,r,{...s,signal:h.signal}),lt(c,s.registryId,u,p,h),p.catch(()=>Hs(c,s.registryId,u))}return s.signal&&vt(s,()=>{Ls(c,s.registryId,u)}),p}_computeMagDirValues(t){const{bandCount:e,dataType:r}=this.rasterInfo;if(!(e===2&&r==="vector-magdir"||r==="vector-uv")||t?.length!==2||!t[0]?.length)return null;const s=t[0].length;if(r==="vector-magdir"){const o=t[1].map(c=>(c+360)%360);return[t[0],o]}const[i,a]=t,n=[],l=[];for(let o=0;o<s;o++){const[c,u]=Tt([i[o],a[o]]);n.push(c),l.push(u)}return[n,l]}_getRasterTileAlignmentInfo(t,e){return this._rasterTileAlignmentInfo==null&&(this._rasterTileAlignmentInfo=Gs(this.rasterInfo)),this._rasterTileAlignmentInfo.pyramidsInfo==null?null:{startX:e,halfWorldWidth:this._rasterTileAlignmentInfo.halfWorldWidth,hasGCSSShiftTransform:this._rasterTileAlignmentInfo.hasGCSSShiftTransform,...this._rasterTileAlignmentInfo.pyramidsInfo[t]}}_getSourceDataInfo(t,e,r,s={}){const i={datumTransformation:s.datumTransformation,pyramidLevel:0,pyramidResolution:null,srcExtent:null,srcHeight:0,srcResolution:null,srcWidth:0,ul:{x:0,y:0}};s.srcResolution&&(i.srcResolution=s.srcResolution,this._updateSourceDataInfo(t,i));const a=this.rasterInfo.storageInfo.maximumPyramidLevel||0,{srcWidth:n,srcHeight:l,pyramidLevel:o}=i,c=n/e,u=l/r,p=o<a&&c*u>=16,h=o===a&&this._requireTooManySrcTiles(n,l,e,r);if(p||h||n===0||l===0){const f=new A({x:(t.xmax-t.xmin)/e,y:(t.ymax-t.ymin)/r,spatialReference:t.spatialReference});let y=qs(f,this.rasterInfo.spatialReference,t,i.datumTransformation);const g=!y||s.srcResolution&&y.x+y.y<s.srcResolution.x+s.srcResolution.y;if(p&&s.srcResolution&&g){const d=Math.round(Math.log(Math.max(c,u))/Math.LN2)-1;if(a-o+3>=d){const m=2**d;y={x:s.srcResolution.x*m,y:s.srcResolution.y*m}}}y&&(i.srcResolution=y,this._updateSourceDataInfo(t,i))}return this._requireTooManySrcTiles(i.srcWidth,i.srcHeight,e,r)&&(i.srcWidth=0,i.srcHeight=0),i}_requireTooManySrcTiles(t,e,r,s){const{tileInfo:i}=this.rasterInfo.storageInfo,a=Math.ceil(t/i.size[0])*Math.ceil(e/i.size[1]),n=t/r,l=e/s,o=Math.max(1,(r+s)/1024);return a>=$s*o||n>ft||l>ft}_updateSourceDataInfo(t,e){e.srcWidth=0,e.srcHeight=0;const{rasterInfo:r}=this,s=r.spatialReference,{srcResolution:i,datumTransformation:a}=e,{pyramidLevel:n,pyramidResolution:l,excessiveReading:o}=ut(i,r,this.ioConfig.sampling);if(o)return;let c=e.srcExtent||Ie(t,s,a);if(c==null)return;const u=r.transform;u&&(c=u.inverseTransform(c)),e.srcExtent=c;const{x:p,y:h}=r.storageInfo.origin,f=Math.floor((c.xmin-p)/l.x+.1),y=Math.floor((h-c.ymax)/l.y+.1),g=Math.floor((c.xmax-p)/l.x-.1),d=Math.floor((h-c.ymin)/l.y-.1),m=c.width<.1*l.x?0:g-f+1,x=c.height<.1*l.y?0:d-y+1;e.pyramidLevel=n,e.pyramidResolution=l,e.srcWidth=m,e.srcHeight=x,e.ul={x:f,y}}_getRequestOptionsWithSliceId(t){return this.rasterInfo.multidimensionalInfo!=null&&t.sliceId==null&&(t={...t,sliceId:this.getSliceIndex(t.multidimensionalDefinition)}),t}_processIdentifyResult(t,e){const{srcLocation:r,position:s,pyramidLevel:i,useTransposedTile:a}=e,n=t.pixels[0].length/t.width/t.height;if(!(!t.mask||t.mask[s]))return{location:r,value:null};const{multidimensionalInfo:l}=this.rasterInfo;if(l==null||!a){const d=t.pixels.map(I=>I[s]),m={location:r,value:d,pyramidLevel:i},x=this._computeMagDirValues(d.map(I=>[I]));return x?.length&&(m.magdirValue=x.map(I=>I[0])),m}let o=t.pixels.map(d=>d.slice(s*n,s*n+n)),c=this._computeMagDirValues(o);const{requestSomeSlices:u,identifyOptions:p}=e;let h=_t(l,p.transposedVariableName);if(u){const d=Ft(h,p.multidimensionalDefinition,p.timeExtent);o=o.map(m=>d.map(x=>m[x])),c=c?.map(m=>d.map(x=>m[x])),h=d.map(m=>h[m])}const f=t.noDataValues||this.rasterInfo.noDataValue,y={pixels:o,pixelType:t.pixelType};let g;return f!=null&&(kt(y,f),g=y.mask),{location:r,value:null,dataSeries:h.map((d,m)=>{const x={value:g?.[m]===0?null:o.map(I=>I[m]),multidimensionalDefinition:d.multidimensionalDefinition.map(I=>new Fe({...I,isSlice:!0}))};return c?.length&&(x.magdirValue=[c[0][m],c[1][m]]),x}),pyramidLevel:i}}};function Xs(t,e,r){return Math.abs(t.x-e.x)<r&&Math.abs(t.y-e.y)<r}w([b()],B.prototype,"_rasterTileAlignmentInfo",void 0),w([b()],B.prototype,"_tileFetchQueue",void 0),w([b({readOnly:!0})],B.prototype,"_isGlobalWrappableSource",null),w([b({readOnly:!0})],B.prototype,"_hasNoneOrGCSShiftTransform",null),w([b()],B.prototype,"_openPromise",void 0),w([b()],B.prototype,"rasterJobHandler",null),w([b({readOnly:!0})],B.prototype,"rasterId",null),w([b(Ve)],B.prototype,"url",null),w([b({type:String,json:{write:!0}})],B.prototype,"datasetName",void 0),w([b({type:String,json:{write:!0}})],B.prototype,"datasetFormat",void 0),w([b()],B.prototype,"hasUniqueSourceStorageInfo",void 0),w([b()],B.prototype,"rasterInfo",void 0),w([b()],B.prototype,"ioConfig",void 0),w([b()],B.prototype,"sourceJSON",void 0),B=w([$("esri.layers.support.rasterDatasets.BaseRaster")],B);const ie=B,Ks=40;let re=class extends ie{constructor(){super(...arguments),this.datasetFormat="Function",this.tileType="Raster",this.rasterFunction=null,this._clippingGeometry=new Map}async fetchPixels(t,e,r,s={}){const{rasters:i,rasterIds:a}=this.primaryRasters;let n=!1;const{interpolation:l}=s,o=this.rasterFunction.flatWebGLFunctionChain?.hasFocalFunction;!s.requestRawData&&o&&(n=i.length===1&&!s.skipRasterFunction,s={...s,interpolation:"bilinear",requestRawData:n});const c=i.map(I=>I.fetchPixels(t,e,r,s)),u=await Promise.all(c),p=u.map(I=>I.pixelBlock),h=n||s.requestRawData?u.map(I=>I.srcTilePixelSize):null;if(s.skipRasterFunction||p.every(I=>I==null))return u[0];const f=u.find(I=>I.pixelBlock!=null)?.extent??t;let y=this.rasterJobHandler?await this.rasterJobHandler.process({extent:f,primaryPixelBlocks:p,primaryPixelSizes:h,primaryRasterIds:a}):this.rasterFunction.process({extent:f,primaryPixelBlocks:p,primaryPixelSizes:h,primaryRasterIds:a});const{transformGrid:g}=u[0];if(!n||y==null||g==null){const I=s.noClip?null:this.getClippingGeometry(f.spatialReference);return s.noClip||s.requestRawData||y==null||!I||(y=await Be(y,f,I)),{...u[0],pixelBlock:y}}const d={rows:g.spacing[0],cols:g.spacing[1]};let m;this.rasterJobHandler?m=(await this.rasterJobHandler.mosaicAndTransform({srcPixelBlocks:[y],srcMosaicSize:{width:y.width,height:y.height},destDimension:{width:e,height:r},coefs:g.coefficients,sampleSpacing:d,projectDirections:!1,gcsGrid:null,isUV:!1,interpolation:l,alignmentInfo:void 0,blockWidths:null},s)).pixelBlock:m=Qe(y,{width:e,height:r},g.coefficients,d,l);const x=s.noClip?null:this.getClippingGeometry(t.spatialReference);return s.noClip||s.requestRawData||m==null||x==null||(m=await Be(m,t,x)),{extent:t,srcExtent:u[0].srcExtent,pixelBlock:m}}getClippingGeometry(t){const e=this._clippingGeometry.get("0");if(!t||!e)return e;const r=Zs(t);let s=this._clippingGeometry.get(r);return s!=null||(s=t.equals(e.spatialReference)?e:Je(e,t),this._clippingGeometry.set(r,s)),s}async _open(t){const{rasterFunction:e}=this;this.primaryRasters?.rasters?.length?e.sourceRasters=this.primaryRasters.rasters:(this.primaryRasters=e.getPrimaryRasters(),this.rasterJobHandler&&this.primaryRasters.rasters?.forEach(c=>c.rasterJobHandler=this.rasterJobHandler));const{rasters:r,rasterIds:s}=this.primaryRasters,i=r.map(c=>c.rasterInfo?void 0:c.open(t));await Promise.all(i);const a=r.map(({rasterInfo:c})=>c),n=e.bind({rasterInfos:a,rasterIds:s});if(e.rawSourceRasterInfos=a,!n.success||a.length===0)throw new C("raster-function:open",`cannot bind the function: ${n.error??""}`);const l=e.functionName==="Table"?e:e.functionArguments?.raster;l?.functionName==="Table"&&(e.rasterInfo.attributeTable=ke.fromJSON(l.functionArguments.attributeTableAsRecordSet)),await this.syncJobHandler();const o=a[0];this.hasUniqueSourceStorageInfo=a.length===1||a.slice(1).every(c=>Qs(c,o)),this.set("sourceJSON",r[0].sourceJSON),this.set("rasterInfo",e.rasterInfo),await this._updateClipGeometry()}async syncJobHandler(){return this.rasterJobHandler?.updateRasterFunction(this.rasterFunction)}async _updateClipGeometry(){const t=this.rasterFunction.getClippingGeometries()[0];let e=t?.clippingGeometry;if(e&&t.clippingType==="inside"){const{extent:r}=this.rasterInfo,{difference:s,densify:i}=await import("./geometryEngine-CJdyFUF6.js");let a=i(Ct.fromExtent(r),2*(r.width+r.height)/Ks);a=Je(a,e.spatialReference),e=s(a,e)}this._clippingGeometry.clear(),e&&this._clippingGeometry.set("0",e)}};w([b({type:String,json:{write:!0}})],re.prototype,"datasetFormat",void 0),w([b()],re.prototype,"tileType",void 0),w([b()],re.prototype,"rasterFunction",void 0),w([b()],re.prototype,"primaryRasters",void 0),re=w([$("esri.layers.support.rasterDatasets.FunctionRaster")],re);const pt=re;function Qs(t,e){const{storageInfo:r,pixelSize:s,spatialReference:i,extent:a}=t,{storageInfo:n,pixelSize:l,spatialReference:o,extent:c}=e;return s.x===l.x&&s.y===l.y&&i.equals(o)&&a.equals(c)&&r.blockHeight===n.blockHeight&&r.blockWidth===n.blockWidth&&r.maximumPyramidLevel===n.maximumPyramidLevel}function Zs(t){return String(t.wkid??t.wkt??t.wkt2)}const ei=t=>{let e=class extends t{constructor(...s){super(...s),this._isConstructedFromFunctionRaster=!1,this._rasterJobHandler={instance:null,refCount:0,connectionPromise:null},this.bandIds=null,this.copyright=null,this.interpolation=null,this.multidimensionalSubset=null,this.raster=null,this.serviceRasterInfo=null,this.sourceJSON=null,this.spatialReference=null,this.symbolizer=null,this._isConstructedFromFunctionRaster=s[0]?.raster?.datasetFormat==="Function"}get fullExtent(){return this.serviceRasterInfo?.extent}set multidimensionalDefinition(s){this._set("multidimensionalDefinition",s),this.updateRenderer()}set rasterFunction(s){s?.functionName?.toLowerCase()==="none"&&(s=void 0),this._set("rasterFunction",s),this.updateRasterFunction()}get rasterInfo(){return Et(se.getLogger(this),"rasterInfo",{replacement:"serviceRasterInfo",version:"4.29",warnOnce:!0}),this._get("serviceRasterInfo")}set url(s){this._set("url",$e(s,se.getLogger(this)))}get renderer(){if(this.type!=="imagery-tile")return this.internalRenderer;const{activePresetRendererName:s,presetRenderers:i}=this;return s?i?.find(({name:a})=>a===s)?.renderer.clone():this.internalRenderer}set renderer(s){this.type==="imagery-tile"&&(this.activePresetRendererName=null),this.internalRenderer=s}set internalRenderer(s){s==null&&this.rasterFunction==null?this._configDefaultRenderer("override"):(this._set("internalRenderer",s),this.updateRenderer())}readRenderer(s,i,a){const n=i?.layerDefinition?.drawingInfo?.renderer;return At(n,a)||void 0}async convertVectorFieldData(s,i){const{serviceRasterInfo:a}=this;if(s==null||!a)return null;const n=this._rasterJobHandler.instance,l=a.dataType;return n?n.convertVectorFieldData({pixelBlock:s,dataType:l},i):Ht(s,l)}async computeStatisticsHistograms(s,i){await this.load(i),s=Te(Lt,s).clone();const{serviceRasterInfo:a}=this;if(a==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","serviceRasterInfo must be specified");const{geometry:n}=s;if(n==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","geometry must be specified");let l=n;const{spatialReference:o}=a;n.spatialReference.equals(o)||(await Ne(),l=n.type==="extent"?Ie(n,o):Je(n,o));const c=s.pixelSize??new A({x:a.pixelSize.x,y:a.pixelSize.y,spatialReference:o}),{extent:u,width:p,height:h}=js(a,l,c),f=await this.fetchPixels(u,p,h,{...i,interpolation:"nearest"});if(f.pixelBlock==null)throw new C("imagery-tile-mixin:compute-statistics-histograms","failed to fetch pixels");const y=await Be(f.pixelBlock,u,l),g=this._rasterJobHandler.instance;return g?g.computeStatisticsHistograms({pixelBlock:y},i):Oe(y)}async createFlowMesh(s,i){const a=this._rasterJobHandler.instance;return a?a.createFlowMesh(s,i):zt(s.meshType,s.simulationSettings,s.flowData,i.signal!=null?i.signal:new AbortController().signal)}normalizeRasterFetchOptions(s){const{multidimensionalInfo:i}=this.serviceRasterInfo??{};if(i==null)return s;let a=s.multidimensionalDefinition||this.multidimensionalDefinition;a?.length||(a=Ze(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset}));const n=s.timeExtent||this.timeExtent;if(a!=null&&n!=null&&(n.start!=null||n.end!=null)){a=a.map(g=>g.clone());const l=i.variables.find(({name:g})=>g===a[0].variableName)?.dimensions?.find(({name:g})=>g==="StdTime"),o=a.find(({dimensionName:g})=>g==="StdTime");if(!l||!o)return{...s,multidimensionalDefinition:null};const{start:c,end:u}=n,p=c==null?null:c.getTime(),h=u==null?null:u.getTime(),f=p??h,y=h??p;if(l.values!=null){const g=l.values.filter(d=>{if(Array.isArray(d)){if(f===y)return d[0]<=f&&d[1]>=f;const m=d[0]<=f&&d[1]>f||d[0]<y&&d[1]>=y,x=d[0]>=f&&d[1]<=y||d[0]<f&&d[1]>y;return m||x}return f===y?d===f:d>=f&&d<=y});if(g.length){const d=g.sort((m,x)=>{const I=Array.isArray(m)?m[0]:m,R=Array.isArray(m)?m[1]:m,v=Array.isArray(x)?x[0]:x,T=Array.isArray(x)?x[1]:x;return f===y?I-v:Math.abs(R-y)-Math.abs(T-y)})[0];o.values=[d]}else a=null}else if(l.hasRegularIntervals&&l.extent){const[g,d]=l.extent;f>d||y<g?a=null:o.values=f===y?[f]:[Math.max(g,f),Math.min(d,y)]}}return a!=null&&Wt(a,this.multidimensionalSubset)?{...s,multidimensionalDefinition:null}:{...s,multidimensionalDefinition:a}}async updateRasterFunction(){if(!this.loaded||this.type!=="imagery-tile"||!this.rasterFunction&&!this._cachedRasterFunctionJson||JSON.stringify(this.rasterFunction)===JSON.stringify(this._cachedRasterFunctionJson))return;if(this._isConstructedFromFunctionRaster&&this.raster.datasetFormat==="Function"){const u=this.raster.rasterFunction.toJSON();return!this.rasterFunction&&u&&this._set("rasterFunction",Ce.fromJSON(u)),void(this._cachedRasterFunctionJson=this.rasterFunction?.toJSON())}let s,i=this.raster,a=!1;i.datasetFormat==="Function"?(s=i.primaryRasters.rasters,i=s[0],a=!0):s=[i];const{rasterFunction:n}=this;if(n){const u={raster:i};s.length>1&&s.forEach(f=>u[f.url]=f);const p=ht(n.functionDefinition?.toJSON()??n.toJSON(),u),h=new pt({rasterFunction:p});h.rasterJobHandler=this._rasterJobHandler.instance,await h.open(),this._cachedRasterFunctionJson=this.rasterFunction?.toJSON(),this.raster=h}else this.raster=i,this._cachedRasterFunctionJson=null,await i.open();if(this._cachedRendererJson=null,!a&&!n)return;const{bandIds:l}=this,{bandCount:o}=this.raster.rasterInfo,c=l?.length?l.some(u=>u>=o):o>=3;l&&(c||this.renderer&&this.renderer.type!=="raster-stretch")&&this._set("bandIds",null),this._configDefaultRenderer("auto")}async updateRenderer(){const{loaded:s,symbolizer:i}=this;if(!s||!i||!this.renderer)return;const{rasterInfo:a}=this.raster,n=et(a,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),l=n?.name,o=tt({...this.renderer.toJSON(),variableName:l});if(JSON.stringify(this._cachedRendererJson)===JSON.stringify(o))return;const c=this._rasterJobHandler.instance;c&&(i.rasterInfo=st(a,l),i.rendererJSON=o,i.bind(),await c.updateSymbolizer(i),this._cachedRendererJson=o)}async applyRenderer(s,i){const a=s?.pixelBlock;if(!(a!=null&&a.pixels&&a.pixels.length>0))return null;let n;await this.updateRenderer();const l=this._rasterJobHandler.instance,o=this.bandIds??[];return n=l?await l.symbolize({...s,simpleStretchParams:i,bandIds:o}):this.symbolizer.symbolize({...s,simpleStretchParams:i,bandIds:o}),n}getTileUrl(s,i,a){return this.raster.datasetFormat==="RasterTileServer"?`${this.url}/tile/${s}/${i}/${a}`:""}getCompatibleTileInfo(s,i,a=!1){if(!this.loaded||i==null)return null;if(a&&s.equals(this.spatialReference))return this.tileInfo;const n=Gt(s);return Z.create({size:256,spatialReference:s,origin:n?{x:n.origin[0],y:n.origin[1]}:{x:i.xmin,y:i.ymax}})}getCompatibleFullExtent(s){return this.loaded?(this._compatibleFullExtent?.spatialReference.equals(s)||(this._compatibleFullExtent=this.raster.computeExtent(s)),this._compatibleFullExtent):null}async fetchTile(s,i,a,n={}){if(r(this),n.requestAsImageElement){const o=this.getTileUrl(s,i,a);return Xe(o,{responseType:"image",query:{...this.refreshParameters,...this.raster.ioConfig.customFetchParameters},signal:n.signal}).then(c=>c.data)}const{serviceRasterInfo:l}=this;if(l.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null){const o=n.tileInfo||l.storageInfo.tileInfo;return{extent:this.raster.getTileExtentFromTileInfo(s,i,a,o),pixelBlock:null}}return await this._initJobHandler(),await this.updateRasterFunction(),this.renderer?.type==="raster-shaded-relief"&&(n={...n,buffer:{cols:1,rows:1}}),this.raster.fetchTile(s,i,a,n)}async fetchPixels(s,i,a,n={}){return this.serviceRasterInfo.multidimensionalInfo!=null&&(n=this.normalizeRasterFetchOptions(n)).multidimensionalDefinition==null?{extent:s,pixelBlock:null}:(await this._initJobHandler(),await this.updateRasterFunction(),i=Math.round(i),a=Math.round(a),this.raster.fetchPixels(s,i,a,n))}async identify(s,i={}){await this.load();const{raster:a,serviceRasterInfo:n}=this;if(n?.multidimensionalInfo!=null&&!(n.hasMultidimensionalTranspose&&(Ye(i.multidimensionalDefinition)||i.transposedVariableName||i.timeExtent))&&(i=this.normalizeRasterFetchOptions(i)).multidimensionalDefinition==null)return{location:s,value:null};const l=this.multidimensionalSubset?.areaOfInterest;if(l&&!l.contains(s))throw new C("imagery-tile-mixin:identify","the request cannot be fulfilled when falling outside of the multidimensional subset");return a.identify(s,i)}increaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount++}decreaseRasterJobHandlerUsage(){this._rasterJobHandler.refCount--,this._rasterJobHandler.refCount<=0&&this._shutdownJobHandler()}hasStandardTime(){const s=this.serviceRasterInfo?.multidimensionalInfo;if(s==null||this.serviceRasterInfo?.dataType!=="standard-time")return!1;const i=this.multidimensionalDefinition,a=i?.[0]?.variableName;return s.variables.some(n=>n.name===a&&(!i?.[0].dimensionName||n.dimensions.some(l=>l.name==="StdTime")))}getStandardTimeValue(s){return new Date(24*(s-25569)*3600*1e3).toString()}getMultidimensionalSubsetVariables(s){const i=s??this.serviceRasterInfo?.multidimensionalInfo;return qt(this.multidimensionalSubset,i)}_configDefaultSettings(){this._configDefaultInterpolation(),this.multidimensionalDefinition||(this.multidimensionalDefinition=Ze(this.raster.rasterInfo,{multidimensionalSubset:this.multidimensionalSubset})),this.rasterFunction&&this.raster.datasetFormat==="Function"&&(this._cachedRasterFunctionJson=this.rasterFunction.toJSON()),this._configDefaultRenderer()}_initJobHandler(){if(this._rasterJobHandler.connectionPromise!=null)return this._rasterJobHandler.connectionPromise;const s=new Xt;return this._rasterJobHandler.connectionPromise=s.initialize().then(async()=>{r(this),this._rasterJobHandler.instance=s,this.raster.rasterJobHandler=s,this.raster.datasetFormat==="Function"&&this.raster.syncJobHandler(),this.rasterFunction&&await this.updateRasterFunction().catch(()=>{}),this.renderer&&this.updateRenderer()}).catch(()=>{}),this._rasterJobHandler.connectionPromise}_shutdownJobHandler(){this._rasterJobHandler.instance&&this._rasterJobHandler.instance.destroy(),this._rasterJobHandler.instance=null,this._rasterJobHandler.connectionPromise=null,this._rasterJobHandler.refCount=0,this._cachedRendererJson=null,this.raster&&(this.raster.rasterJobHandler=null)}_configDefaultInterpolation(){if(this.interpolation==null){r(this);const{raster:s}=this,i=jt(s.rasterInfo,s.tileType,this.sourceJSON?.defaultResamplingMethod);this._set("interpolation",i)}}_configDefaultRenderer(s="no"){r(this);const{rasterInfo:i}=this.raster,a=et(i,{multidimensionalDefinition:this.multidimensionalDefinition,multidimensionalSubset:this.multidimensionalSubset}),n=a?.name,l=Ut({variableName:n,rasterFunctionName:this.rasterFunction?.functionName,presetRenderers:this.presetRenderers});if(!this.bandIds&&i.bandCount>1&&(this.bandIds=l?.bandIds??Vt(i)),!this.renderer||s==="override"){const p=$t(this.raster),h=l?.renderer??it(i,{bandIds:this.bandIds,variableName:n,rasterFunctionColorRamp:p}),f=i.statistics,y=f&&f.length>0?f[0]:null,g=y?.max??0,d=y?.min??0;this.raster.datasetFormat==="WCSServer"&&h.type==="raster-stretch"&&(g>1e24||d<-1e24)&&(h.dynamicRangeAdjustment=!0,h.customStatistics=null,h.stretchType==="none"&&(h.stretchType="min-max")),this.renderer=h}const o=tt({...this.renderer.toJSON(),variableName:n}),c=st(i,n);this.symbolizer?(this.symbolizer.rendererJSON=o,this.symbolizer.rasterInfo=c):this.symbolizer=new Yt({rendererJSON:o,rasterInfo:c});const u=this.symbolizer.bind();if(u.success){if(s==="auto"){const{colormap:p}=this.raster.rasterInfo,h=this.renderer;if(p!=null&&h.type==="raster-colormap"){const f=it(this.raster.rasterInfo);JSON.stringify(f)!==JSON.stringify(h)&&this._configDefaultRenderer("override")}else if(h.type==="raster-stretch"){const f=this.bandIds?.length,y=h.customStatistics?.length;!h.dynamicRangeAdjustment&&y&&f&&y!==f&&this._configDefaultRenderer("override")}}}else se.getLogger(this).warn("imagery-tile-mixin",u.error||"The given renderer is not supported by the layer."),s==="auto"&&this._configDefaultRenderer("override")}};function r(s){if(!s.raster||!s.serviceRasterInfo)throw new C("imagery-tile","no raster")}return w([b({clonable:!1})],e.prototype,"_cachedRendererJson",void 0),w([b({clonable:!1})],e.prototype,"_cachedRasterFunctionJson",void 0),w([b({clonable:!1})],e.prototype,"_compatibleFullExtent",void 0),w([b({clonable:!1})],e.prototype,"_isConstructedFromFunctionRaster",void 0),w([b({clonable:!1})],e.prototype,"_rasterJobHandler",void 0),w([b({type:[Ot],json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.bandIds?.join(",")!=="0,1,2"}}}}})],e.prototype,"bandIds",void 0),w([b({json:{origins:{service:{read:{source:"copyrightText"}}}}})],e.prototype,"copyright",void 0),w([b({json:{read:!1}})],e.prototype,"fullExtent",null),w([b({json:{write:{overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"||this.interpolation!=="bilinear"}}}}}),Pt(Mt)],e.prototype,"interpolation",void 0),w([b()],e.prototype,"ioConfig",void 0),w([b({type:[Fe],json:{write:!0}})],e.prototype,"multidimensionalDefinition",null),w([b({type:Nt,json:{write:!0}})],e.prototype,"multidimensionalSubset",void 0),w([b()],e.prototype,"raster",void 0),w([b({type:Ce,json:{name:"renderingRule",write:!0}})],e.prototype,"rasterFunction",null),w([b({readOnly:!0})],e.prototype,"rasterInfo",null),w([b()],e.prototype,"serviceRasterInfo",void 0),w([b()],e.prototype,"sourceJSON",void 0),w([b({readOnly:!0,type:H,json:{read:!1}})],e.prototype,"spatialReference",void 0),w([b({type:Z})],e.prototype,"tileInfo",void 0),w([b(Ve)],e.prototype,"url",null),w([b()],e.prototype,"renderer",null),w([b({types:Dt,json:{name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy(){const s=this.renderer?.type==="raster-stretch"&&this.renderer.stretchType==="none"&&!this.renderer.useGamma;return{enabled:!this.loaded||this.raster.tileType==="Raster"||!s}}},origins:{"web-scene":{types:Jt,name:"layerDefinition.drawingInfo.renderer",write:{overridePolicy:s=>({enabled:s&&s.type!=="vector-field"&&s.type!=="flow"})}}}}})],e.prototype,"internalRenderer",null),w([Bt("internalRenderer")],e.prototype,"readRenderer",null),w([b({clonable:!1})],e.prototype,"symbolizer",void 0),e=w([$("esri.layers.mixins.ImageryTileMixin")],e),e};function dt(t){return["x","e","east","long","longitude"].includes(t.toLowerCase())}function mt(t){return["y","n","west","lat","latitude"].includes(t.toLowerCase())}function ti(t){const{axes:e}=t.domain,r=Object.keys(e),s=[],i=[];let a=-1,n=-1,l=[];for(let x=0;x<r.length;x++){const I=r[x];dt(I)?a=x:mt(I)&&(n=x);const R=e[I],v=[];if("values"in R){R.values.forEach(S=>v.push(typeof S=="string"?new Date(S).getTime():S));const T=v[1]-v[0];s.push([v[0]-.5*T,v[v.length-1]+.5*T]),i.push(T)}else{const{start:T,stop:S,num:k}=R,_=(S-T)/(k-1);s.push([T-.5*_,S+.5*_]),i.push(_);for(let P=0;P<k;P++)v.push(T+_*P)}l.push({name:I,values:v,extent:[v[0],v[v.length-1]]})}a>-1&&n===-1?n=a===0?1:0:n>-1&&a===-1?a=n===0?1:0:n===-1&&a===-1&&(a=0,n=1),l=l.filter((x,I)=>!(I===a||I===n));const{referencing:o}=t.domain,c=o.find(x=>x.coordinates.includes(r[a])).system.id,u=c?.slice(c.lastIndexOf("/")+1),p=u==null||u==="CRS84"?4326:Number(u),h=new H({wkid:p}),[f,y]=s[a],[g,d]=s[n],m=new W({xmin:f,xmax:y,ymin:g,ymax:d,spatialReference:h});return{width:Math.round(m.width/i[a]),height:Math.round(m.height/i[n]),extent:m,dimensions:l}}function Ae(t){const e=Zt();return e?t[e]??Object.values(t)[0]:Object.values(t)[0]}function He(){return Math.round(255*Math.random())}function si(t){const e={},{parameters:r}=t;if(!r)return e;for(const[s,i]of Object.entries(r)){const{type:a,description:n,unit:l,categoryEncoding:o,observedProperty:c}=i;if(a==="Parameter"&&(e[s]={},n&&(e[s].description=Ae(n)),l&&(e[s].unit=l.label?Ae(l.label):null,e[s].symbol=l.symbol?.value),o)){const u=Object.entries(o).map((f,y)=>({OID:y,Value:Number(f[1]),ClassName:f[0].slice(f[0].lastIndexOf("/")+1),Count:1}));let p=!1;c?.categories?.length&&(c.categories.forEach(f=>{if(!f.id)return;const y=f.id.slice(f.id.lastIndexOf("/")+1),g=u.find(m=>m.ClassName===y);if(!g)return;const d=f.label?Ae(f.label):null;if(g.Label=d,f.preferredColor){const m=Kt.fromHex(f.preferredColor);m&&(p=!0,g.Red=m.r,g.Green=m.g,g.Blue=m.b)}}),p&&u.forEach(f=>{f.Red==null&&(f.Red=He(),f.Green=He(),f.Blue=He())}));const h={objectIdFieldName:"",fields:[{name:"OID",type:"esriFieldTypeOID",alias:"OID",domain:null},{name:"Value",type:"esriFieldTypeInteger",alias:"Value",domain:null},{name:"Count",type:"esriFieldTypeDouble",alias:"Count",domain:null},{name:"ClassName",type:"esriFieldTypeString",alias:"ClassName",domain:null,length:50},{name:"Label",type:"esriFieldTypeString",alias:"Label",domain:null,length:50}],features:u.map(f=>({attributes:f}))};p&&h.fields.push({name:"Red",type:"esriFieldTypeInteger",alias:"Red",domain:null},{name:"Green",type:"esriFieldTypeInteger",alias:"Green",domain:null},{name:"Blue",type:"esriFieldTypeInteger",alias:"Blue",domain:null}),e[s].attributeTable=h}}return e}function ii(t){let e=Number.MAX_VALUE,r=-Number.MAX_VALUE;for(let s=0;s<t.length;s++){const i=t[s];i!=null&&(i<e&&(e=i),i>r&&(r=i))}return Qt(e,r)}function ri(t,e,r){const s=t.map((o,c)=>({name:o,count:e[c]})).sort((o,c)=>o.name>c.name?-1:1),i=(a=1,o=>a*=o.count);var a;const n=[...s.slice(1),{name:"",count:1}].reverse().map(i).reverse();let l=0;for(let o=t.length-1;o>=0;o--)l+=n[s.findIndex(({name:c})=>c===t[o])]*(r%e[o]),r=Math.floor(r/e[o]);return l}function ni(t){const{width:e,height:r,extent:s,dimensions:i}=ti(t),{ranges:a}=t,n=Object.keys(a).sort((h,f)=>h<f?-1:1),l=[];for(let h=0;h<n.length;h++){const f=n[h];i?.length&&l.push({name:f,dimensions:i})}const o=si(t);l.forEach(h=>o[h.name]&&Object.assign(h,o[h.name]));const c=l.length?{variables:l}:void 0,u=[];for(let h=0;h<n.length;h++){const f=n[h],{values:y,dataType:g,axisNames:d,shape:m}=a[f],x=m.length>2?h*m.slice(0,-2).reduce((k,_)=>k*_):0,I=d.slice(0,-2),R=m.slice(0,-2),v=g==="float"?"f32":ii(y),T=e*r,S=y.length/T;for(let k=0;k<S;k++){const _=me.createEmptyBand(v,T),P=new Uint8Array(T).fill(255);let F=!1;const M=k*T;for(let O=0;O<T;O++){const N=y[M+O];N==null?(P[O]=0,F=!0):_[O]=N}if(h===0||i?.length){const O=new me({width:e,height:r,mask:F?P:null,pixels:[_],pixelType:v});O.updateStatistics(),i?.length?u[ri(I,R,k)+x]=O:u.push(O)}else{const O=u[k];O.pixels.push(_),F?O.mask&&(O.mask=me.combineBandMasks([O.mask,P])):O.mask=F?P:null}}}const p=Object.values(o).find(h=>h.attributeTable)?.attributeTable;return{extent:s,pixelBlocks:u,multidimensionalInfo:c,attributeTable:p,bandNames:c?void 0:n}}let le=class extends ie{constructor(){super(...arguments),this.datasetFormat="MEMORY",this.source=null}get url(){return""}fetchRawTile(t,e,r,s={}){if(!this._pixelBlockTiles){const{rasterInfo:a}=this,[n,l]=a.storageInfo.tileInfo.size,{sliceId:o}=s,{pixelBlocks:c}=this.source,u={pixelBlock:o==null?c[0]:c[o],useBilinear:a.dataType!=="thematic",tileSize:{width:n,height:l},level:t,row:e,col:r},p=this.rasterJobHandler?this.rasterJobHandler.clipTile(u,s):es(u);return Promise.resolve(p)}const i=this._pixelBlockTiles.get(`${t}/${e}/${r}`);return Promise.resolve(i)}async _open(t){const e=this.source,{pixelBlocks:r,attributeTable:s,statistics:i,histograms:a,name:n,nativeExtent:l,transform:o}=e,c=r[0],{width:u,height:p,pixelType:h}=c,f=e.extent??new W({xmin:-.5,ymin:.5,xmax:u-.5,ymax:p-.5,spatialReference:new H({wkid:3857})}),y=e.isPseudoSpatialReference??!e.extent,g={x:f.width/u,y:f.height/p},d={...e.keyProperties};s&&(d.DataType="Thematic");const m=new ye({width:u,height:p,pixelType:h,extent:f,nativeExtent:l,attributeTable:s,transform:o,pixelSize:g,spatialReference:f.spatialReference,bandCount:c.pixels.length,keyProperties:d,multidimensionalInfo:e.multidimensionalInfo,statistics:i,isPseudoSpatialReference:y,histograms:a});this.ioConfig.skipMapInfo&&this.updateImageSpaceRasterInfo(m),this.createRemoteDatasetStorageInfo(m,512,512),this._set("rasterInfo",m),this.updateTileInfo(),m.multidimensionalInfo?await this._buildMDimStats(e.pixelBlocks,m.multidimensionalInfo):await this._buildInMemoryRaster(c,{width:512,height:512},t),m.multidimensionalInfo||(this.source=null),this.datasetName=n}async _buildInMemoryRaster(t,e,r){const{rasterInfo:s}=this,i=s.storageInfo.maximumPyramidLevel??0,a=s.dataType!=="thematic",n=this.rasterJobHandler?this.rasterJobHandler.split({pixelBlock:t,tileSize:e,maximumPyramidLevel:i,useBilinear:a},r):Promise.resolve(ts(t,e,i,a)),l=s.statistics!=null,o=s.histograms!=null,c=this.ioConfig.skipStatistics||l?Promise.resolve({statistics:null,histograms:null}):this.rasterJobHandler?this.rasterJobHandler.estimateStatisticsHistograms({pixelBlock:t},r):Promise.resolve(ss(t)),u=await rt([n,c]);if(!u[0].value&&u[1].value)throw new C("inmemory-raster:open","failed to build in memory raster");this._pixelBlockTiles=u[0].value,l||(s.statistics=u[1].value?.statistics),o||(s.histograms=u[1].value?.histograms)}async _buildMDimStats(t,e,r){for(let s=0;s<e.variables.length;s++){const i=e.variables[s];if(i.statistics)continue;const a=i.dimensions.map(c=>new Fe({variableName:i.name,dimensionName:c.name,values:[c.values?.[0]??c.extent?.[0]],isSlice:!0})),n=Ke(a,e),l=n==null?null:t[n];if(l==null)continue;const o=this.rasterJobHandler?await this.rasterJobHandler.computeStatisticsHistograms({pixelBlock:l},r):Oe(l);i.statistics=o.statistics,i.histograms||(i.histograms=o.histograms)}}};w([b({type:String,json:{write:!0}})],le.prototype,"datasetFormat",void 0),w([b()],le.prototype,"source",void 0),w([b()],le.prototype,"url",null),le=w([$("esri.layers.support.rasterDatasets.InMemoryRaster")],le);const Le=le;let he=class extends ie{constructor(){super(...arguments),this.datasetFormat="CovJSON"}fetchRawTile(t,e,r,s={}){return this._inMemoryRaster.fetchRawTile(t,e,r,s)}async _open(t){const{extent:e,pixelBlocks:r,multidimensionalInfo:s,attributeTable:i,bandNames:a}=await this._fetchData(t),{statistics:n,histograms:l}=Oe(r[0]),o=a?.map(h=>({BandName:h})),c={DataType:i?"Thematic":s?"Scientific":"Generic",BandProperties:o},u=new Le({source:{extent:e,pixelBlocks:r,attributeTable:i?ke.fromJSON(i):null,multidimensionalInfo:s,statistics:n,histograms:l,keyProperties:c,isPseudoSpatialReference:!1}});await u.open(),this._inMemoryRaster=u;const p=this.source?"":this.url.slice(this.url.lastIndexOf("/")+1);this._set("datasetName",p.slice(0,p.indexOf("."))),this._set("rasterInfo",u.rasterInfo)}async _fetchData(t){const e=this.source??(await this.request(this.url,{signal:t?.signal})).data,r="imagery-tile-layer:open-coverage-json";if(e.type?.toLowerCase()!=="coverage"||e.domain?.domainType?.toLowerCase()!=="grid")throw new C(r,"Only coverage with Grid domain type is supported");if(!e.ranges)throw new C(r,"Missing ranges in the grid coverage data");if(!e.domain.referencing?.length)throw new C(r,"Missing domain referencing in the grid coverage data");const s=Object.values(e.ranges);for(let i=0;i<s.length;i++){const{axisNames:a,shape:n,type:l,values:o}=s[i];if(!(l.toLowerCase()==="ndarray"&&o?.length&&a?.length&&n?.length))throw new C(r,"Only ranges with valid NdArray, axisNames, shape, and inline values are supported");if(!(dt(a[a.length-1])&&mt(a[a.length-2])))throw new C(r,"Only row-major ordered pixel values are supported. X axis must be the last axis.")}return ni(e)}};w([b({type:String,json:{write:!0}})],he.prototype,"datasetFormat",void 0),w([b({constructOnly:!0})],he.prototype,"source",void 0),he=w([$("esri.layers.support.rasterDatasets.CovJSONRaster")],he);const ai=he;function ce(t,e){if(!t||!e)return[];let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=[];if(e){const a=ce(t,r);for(let n=0;n<a.length;n++)ce(a[n],e).forEach(l=>s.push(l));return s}const i=t.getElementsByTagNameNS("*",r);if(!i||i.length===0)return[];for(let a=0;a<i.length;a++)s.push(i[a]||i.item(a));return s}function j(t,e){if(!t||!e)return null;let r=e;e.includes("/")?(r=e.slice(0,e.indexOf("/")),e=e.slice(e.indexOf("/")+1)):e="";const s=ce(t,r);return s.length>0?e?j(s[0],e):s[0]:null}function Y(t,e=null){const r=e?j(t,e):t;let s;return r?(s=r.textContent||r.nodeValue,s?s.trim():null):null}function oi(t,e){const r=ce(t,e),s=[];let i;for(let a=0;a<r.length;a++)i=r[a].textContent||r[a].nodeValue,i&&(i=i.trim(),i!==""&&s.push(i));return s}function be(t,e){return oi(t,e).map(r=>Number(r))}function ne(t,e){const r=Y(t,e);return Number(r)}function ze(t,e){const r=t?.nodeName?.toLowerCase(),s=e.toLowerCase();return r.slice(r.lastIndexOf(":")+1)===s}function yt(t,e){if(!t||!e)return null;const r=[];for(let s=0;s<t.length;s++)r.push(t[s]),r.push(e[s]);return r}function li(t){const e=j(t,"GeodataXform"),r=Re(ne(e,"SpatialReference/WKID")||Y(e,"SpatialReference/WKT"));if(e.getAttribute("xsi:type")!=="typens:PolynomialXform")return{spatialReference:r,transform:null};const s=ne(e,"PolynomialOrder")??1,i=be(e,"CoeffX/Double"),a=be(e,"CoeffY/Double"),n=be(e,"InverseCoeffX/Double"),l=be(e,"InverseCoeffY/Double"),o=yt(i,a),c=yt(n,l);return{spatialReference:r,transform:o&&c&&o.length&&c.length?new Ee({spatialReference:r,polynomialOrder:s,forwardCoefficients:o,inverseCoefficients:c}):null}}function ci(t){const e=ne(t,"NoDataValue"),r=j(t,"Histograms/HistItem"),s=ne(r,"HistMin"),i=ne(r,"HistMax"),a=ne(r,"BucketCount"),n=Y(r,"HistCounts")?.split("|").map(h=>Number(h));let l,o,c,u;ce(t,"Metadata/MDI").forEach(h=>{const f=Number(h.textContent??h.nodeValue);switch(h.getAttribute("key").toUpperCase()){case"STATISTICS_MINIMUM":l=f;break;case"STATISTICS_MAXIMUM":o=f;break;case"STATISTICS_MEAN":c=f;break;case"STATISTICS_STDDEV":u=f}});const p=ne(t,"Metadata/SourceBandIndex");return{noDataValue:e,histogram:n?.length&&s!=null&&i!=null?{min:s,max:i,size:a||n.length,counts:n}:null,sourceBandIndex:p,statistics:l!=null&&o!=null?{min:l,max:o,avg:c,stddev:u}:null}}function Re(t){if(!t)return null;let e=Number(t);if(!isNaN(e)&&e!==0)return new H({wkid:e});if(t=String(t).trim(),is(t))return new H({wkt2:t});const r=t.toUpperCase();if(r.startsWith("COMPD_CS")){if(!r.includes("VERTCS")||!r.includes("GEOGCS")&&!r.startsWith("PROJCS"))return null;const s=r.indexOf("VERTCS"),i=r.indexOf("PROJCS"),a=i>-1?i:r.indexOf("GEOGCS");if(a===-1)return null;const n=t.slice(a,t.lastIndexOf("]",s)+1).trim(),l=t.slice(s,t.lastIndexOf("]")).trim();e=We(n);const o=new H(e?{wkid:e}:{wkt:n}),c=We(l);return c&&(o.vcsWkid=c),o}return r.startsWith("GEOGCS")||r.startsWith("PROJCS")?(e=We(t),new H(e!==0?{wkid:e}:{wkt:t})):null}function We(t){const e=t.replaceAll("]","[").replaceAll('"',"").split("[").map(i=>i.trim()).filter(i=>i!==""),r=e[e.length-1].split(","),s=r[0]?.toLowerCase();if((s==="epsg"||s==="esri")&&t.endsWith('"]]')){const i=Number(r[1]);if(!isNaN(i)&&i!==0)return i}return 0}function Ge(t){if(t?.documentElement.tagName?.toLowerCase()!=="pamdataset")return{};const e={spatialReference:null,transform:null,metadata:{},rasterBands:[],statistics:null,histograms:null};t.documentElement.childNodes.forEach(s=>{if(s.nodeType===1){if(ze(s,"SRS")){if(!e.spatialReference){const i=Y(s);e.spatialReference=Re(i)}}else if(ze(s,"Metadata"))if(s.getAttribute("domain")==="xml:ESRI"){const{spatialReference:i,transform:a}=li(s);e.transform=a,e.spatialReference||(e.spatialReference=i)}else ce(s,"MDI").forEach(i=>e.metadata[i.getAttribute("key")]=Y(i));else if(ze(s,"PAMRasterBand")){const i=ci(s);i.sourceBandIndex!=null&&e.rasterBands[i.sourceBandIndex]==null?e.rasterBands[i.sourceBandIndex]=i:e.rasterBands.push(i)}}});const r=e.rasterBands;if(r.length){const s=!!r[0].statistics;e.statistics=s?r.map(a=>a.statistics).filter(Pe):null;const i=!!r[0].histogram;e.histograms=i?r.map(a=>a.histogram).filter(Pe):null}return e}let Se=class extends ie{fetchRawTile(t,e,r,s={}){return this._inMemoryRaster.fetchRawTile(t,e,r,s)}async _open(t){const e=await this._fetchData(t);let{spatialReference:r,statistics:s,histograms:i,transform:a}=await this._fetchAuxiliaryData(t);const n=!r;n&&(r=new H({wkid:3857})),i?.length&&s==null&&(s=Me(i));const{width:l,height:o}=e;let c=new W({xmin:-.5,ymin:.5-o,xmax:l-.5,ymax:.5,spatialReference:r});const u=a?a.forwardTransform(c):c;let p=!0;if(a){const f=a.forwardCoefficients;p=f&&f[1]===0&&f[2]===0,p&&(a=null,c=u)}const h=new Le({source:{extent:u,nativeExtent:c,transform:a,pixelBlocks:[e],statistics:s,histograms:i,keyProperties:{DateType:"Processed"},isPseudoSpatialReference:n},ioConfig:{sampling:"closest",skipStatistics:!0}});this.ioConfig.skipMapInfo&&(h.ioConfig.skipMapInfo=!0),await h.open(),h.source=null,this._set("rasterInfo",h.rasterInfo),this._inMemoryRaster=h}async _fetchData(t){const{data:e}=await this.request(this.url,{responseType:"array-buffer",signal:t?.signal}),r=rs(e).toUpperCase();if(r!=="JPG"&&r!=="PNG"&&r!=="GIF"&&r!=="BMP")throw new C("image-aux-raster:open","the data is not a supported format");this._set("datasetFormat",r);const s=r.toLowerCase(),i=s==="gif"||s==="bmp"||!ns("ios"),a=await this.decodePixelBlock(e,{format:s,useCanvas:i,hasNoZlibMask:!0});if(a==null)throw new C("image-aux-raster:open","the data cannot be decoded");return a}async _fetchAuxiliaryData(t){const e=t?.signal,{skipExtensions:r=[],skipMapInfo:s}=this.ioConfig,i=s||r.includes("aux.xml")?null:this.request(this.url+".aux.xml",{responseType:"xml",signal:e}),a=this.datasetFormat,n=a==="JPG"?"jgw":a==="PNG"?"pgw":a==="BMP"?"bpw":null,l=n&&r.includes(n)?null:this.request(this.url.slice(0,this.url.lastIndexOf("."))+"."+n,{responseType:"text",signal:e}),o=await rt([i,l]);if(e?.aborted)throw as();const c=Ge(o[0].value?.data);if(!c.transform){const u=o[1].value?o[1].value.data.split(`
`).slice(0,6).map(p=>Number(p)):null;c.transform=u?.length===6?new Ee({forwardCoefficients:[u[4],u[5],u[0],-u[1],u[2],-u[3]]}):null}return c}};w([b({type:String,json:{write:!0}})],Se.prototype,"datasetFormat",void 0),Se=w([$("esri.layers.support.rasterDatasets.ImageAuxRaster")],Se);const ve=Se;let fe=class extends ie{constructor(){super(...arguments),this._levelOffset=0,this._tilemapCache=null,this._slices=null,this.datasetFormat="RasterTileServer",this.tileType=null}async fetchRawTile(t,e,r,s={}){const{storageInfo:i,extent:a}=this.rasterInfo,{transposeInfo:n}=i,l=n!=null&&!!s.transposedVariableName;if(this._slices&&!l&&s.sliceId==null)return null;const o=l?0:i.maximumPyramidLevel-t+this._levelOffset,c=`${this.url}/tile/${o}/${e}/${r}`,u=this._slices?l?{variable:s.transposedVariableName}:{sliceId:s.sliceId||0}:null,{data:p}=await this.request(c,{query:u,responseType:"array-buffer",signal:s.signal});if(!p)return null;const h=l?n.tileSize:i.tileInfo.size,f=await this.decodePixelBlock(p,{width:h[0],height:h[1],planes:null,pixelType:null,isPoint:this.tileType==="Elevation",returnInterleaved:l,noDataValue:this.rasterInfo.noDataValue});if(f==null)return null;const y=i.blockBoundary[t];if(i.compression!=="jpg"||r>y.minCol&&r<y.maxCol&&e>y.minRow&&e<y.maxRow)return f;const{origin:g,blockWidth:d,blockHeight:m}=i,{x,y:I}=this.getPyramidPixelSize(t),R=Math.round((a.xmin-g.x)/x)%d,v=Math.round((a.xmax-g.x)/x)%d||d,T=Math.round((g.y-a.ymax)/I)%m,S=Math.round((g.y-a.ymin)/I)%m||m,k=r===y.minCol?R:0,_=e===y.minRow?T:0,P=r===y.maxCol?v:d,F=e===y.maxRow?S:m;return os(f,{x:k,y:_},{width:P-k,height:F-_}),f}getSliceIndex(t){if(!this._slices||t==null||t.length===0)return null;const e=t;for(let r=0;r<this._slices.length;r++){const s=this._slices[r].multidimensionalDefinition;if(s.length===e.length&&!s.some(i=>{const a=e.find(n=>i.variableName===n.variableName&&n.dimensionName===i.dimensionName);return a?(Array.isArray(i.values[0])?`${i.values[0][0]}-${i.values[0][1]}`:i.values[0])!==(Array.isArray(a.values[0])?`${a.values[0][0]}-${a.values[0][1]}`:a.values[0]):!0}))return r}return null}async fetchVariableStatisticsHistograms(t,e){const r=this.request(this.url+"/statistics",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.statistics),s=this.request(this.url+"/histograms",{query:{variable:t,f:"json"},signal:e}).then(a=>a.data?.histograms),i=await Promise.all([r,s]);return i[0]&&i[0].forEach(a=>{a.avg=a.mean,a.stddev=a.standardDeviation}),i[1]?.[0]?.counts?.length||(i[1]=null),{statistics:i[0]||null,histograms:i[1]||null}}async computeBestPyramidLevelForLocation(t,e={}){if(!this._tilemapCache)return 0;let r=this.identifyPixelLocation(t,0,e.datumTransformation);if(r===null)return null;let s=0;const{maximumPyramidLevel:i}=this.rasterInfo.storageInfo;let a=i-s+this._levelOffset;const n=r.srcLocation;for(;a>=0;){try{if(await this._tilemapCache.fetchAvailability(a,r.row,r.col,e)==="available")break}catch{}if(a--,s++,r=this.identifyPixelLocation(n,s,e.datumTransformation),r===null)return null}return a===-1||r==null?null:s}async _open(t){const e=t?.signal,r=this.sourceJSON?{data:this.sourceJSON}:await this.request(this.url,{query:{f:"json"},signal:e});r.ssl&&(this.url=this.url.replace(/^http:/i,"https:"));const s=r.data;if(this.sourceJSON=s,!s)throw new C("imageserverraster:open","cannot initialize tiled image service, missing service info");if(!s.tileInfo)throw new C("imageserverraster:open","use ImageryLayer to open non-tiled image services");this._fixScaleInServiceInfo();const i=["jpg","jpeg","png","png8","png24","png32","mixed"];this.tileType=s.cacheType,this.tileType==null&&(i.includes(s.tileInfo.format.toLowerCase())?this.tileType="Map":s.tileInfo.format.toLowerCase()==="lerc"?this.tileType="Elevation":this.tileType="Raster"),this.datasetName=s.name?.slice(s.name.indexOf("/")+1)??"";const a=await this._fetchRasterInfo({signal:e});if(a==null)throw new C("image-server-raster:open","cannot initialize image service");ls(a,s);const n=this.tileType==="Map"?ui(s.tileInfo,s):Z.fromJSON(s.tileInfo);cs(n);const[l,o]=this._computeMinMaxLOD(a,n),{extent:c,pixelSize:u}=a,p=.5/a.width*u.x,h=Math.max(u.x,u.y),{lods:f}=n;(this.tileType!=="Map"&&s.maxScale!==0||Math.abs(u.x-u.y)>p||!f.some(S=>Math.abs(S.resolution-h)<p))&&(u.x=u.y=l.resolution,a.width=Math.ceil((c.xmax-c.xmin)/u.x-.1),a.height=Math.ceil((c.ymax-c.ymin)/u.y-.1));const y=l.level-o.level,[g,d]=n.size,m=[],x=[];f.forEach((S,k)=>{S.level>=o.level&&S.level<=l.level&&m.push({x:S.resolution,y:S.resolution}),k<f.length-1&&x.push(Math.round(10*S.resolution/f[k+1].resolution)/10)}),m.sort((S,k)=>S.x-k.x);const I=this.computeBlockBoundary(c,g,d,n.origin,m,y),R=m.length>1?m.slice(1):null;let v;s.transposeInfo&&(v={tileSize:[s.transposeInfo.rows,s.transposeInfo.cols],packetSize:a.keyProperties?._yxs.PacketSize??0});const T=x.length<=1||x.length>=3&&x.slice(0,-1).every(S=>S===x[0])?x[0]??2:Math.round(10/(o.resolution/l.resolution)**(-1/y))/10;if(a.storageInfo=new de({blockWidth:n.size[0],blockHeight:n.size[1],pyramidBlockWidth:n.size[0],pyramidBlockHeight:n.size[1],pyramidResolutions:R,pyramidScalingFactor:T,compression:n.format,origin:n.origin,firstPyramidLevel:1,maximumPyramidLevel:y,tileInfo:n,transposeInfo:v,blockBoundary:I}),hi(a),this._set("rasterInfo",a),s.capabilities.toLowerCase().includes("tilemap")){const S={tileInfo:a.storageInfo.tileInfo,parsedUrl:us(this.url),url:this.url,tileServers:[]};this._tilemapCache=new hs({layer:S})}}async _fetchRasterInfo(t){const e=this.sourceJSON;if(this.tileType==="Map"){const n=e.fullExtent||e.extent,l=Math.ceil((n.xmax-n.xmin)/e.pixelSizeX-.1),o=Math.ceil((n.ymax-n.ymin)/e.pixelSizeY-.1),c=H.fromJSON(e.spatialReference||n.spatialReference),u=new A({x:e.pixelSizeX,y:e.pixelSizeY,spatialReference:c});return new ye({width:l,height:o,bandCount:3,extent:W.fromJSON(n),spatialReference:c,pixelSize:u,pixelType:"u8",statistics:null,keyProperties:{DataType:"processed"}})}const{signal:r}=t,s=fs(this.url,this.sourceJSON,{signal:r,query:this.ioConfig.customFetchParameters}),i=e.hasMultidimensions?this.request(`${this.url}/slices`,{query:{f:"json"},signal:r}).then(n=>n.data?.slices).catch(()=>null):null,a=await Promise.all([s,i]);return this._slices=a[1],a[0]}_fixScaleInServiceInfo(){const{sourceJSON:t}=this;t.minScale&&t.minScale<0&&(t.minScale=0),t.maxScale&&t.maxScale<0&&(t.maxScale=0)}_computeMinMaxLOD(t,e){const{pixelSize:r}=t,s=.5/t.width*r.x,{lods:i}=e,a=e.lodAt(Math.max.apply(null,i.map(h=>h.level))),n=e.lodAt(Math.min.apply(null,i.map(h=>h.level))),{tileType:l}=this;if(l==="Map")return this._levelOffset=i[0].level,[a,n];if(l==="Raster")return[i.find(h=>h.resolution===r.x)??a,n];const{minScale:o,maxScale:c}=this.sourceJSON;let u=a;c>0&&(u=i.find(h=>Math.abs(h.scale-c)<s),u||(u=i.filter(h=>h.scale>c).sort((h,f)=>h.scale>f.scale?1:-1)[0]??a));let p=n;return o>0&&(p=i.find(h=>Math.abs(h.scale-o)<s)??n,this._levelOffset=p.level-n.level),[u,p]}};function ui(t,e){if(!t)return null;const{minScale:r,maxScale:s,minLOD:i,maxLOD:a}=e;if(i!=null&&a!=null)return Z.fromJSON({...t,lods:t.lods.filter(({level:n})=>n!=null&&n>=i&&n<=a)});if(r!==0&&s!==0){const n=c=>Math.round(1e4*c)/1e4,l=r?n(r):1/0,o=s?n(s):-1/0;return Z.fromJSON({...t,lods:t.lods.filter(c=>{const u=n(c.scale);return u<=l&&u>=o})})}return Z.fromJSON(t)}function hi(t){const{extent:e,spatialReference:r}=t;e.xmin>-1&&e.xmax>181&&r?.wkid&&r.isGeographic&&(t.nativeExtent=t.extent,t.transform=new Us,t.extent=t.transform.forwardTransform(e))}w([b({type:String,json:{write:!0}})],fe.prototype,"datasetFormat",void 0),w([b()],fe.prototype,"tileType",void 0),fe=w([$("esri.layers.support.rasterDatasets.ImageServerRaster")],fe);const fi=fe,X=new Map;X.set("Int8","s8"),X.set("UInt8","u8"),X.set("Int16","s16"),X.set("UInt16","u16"),X.set("Int32","s32"),X.set("UInt32","u32"),X.set("Float32","f32"),X.set("Float64","f32"),X.set("Double64","f32");const ee=new Map;ee.set("none",{blobExtension:".til",isOneSegment:!0,decoderFormat:"bip"}),ee.set("lerc",{blobExtension:".lrc",isOneSegment:!1,decoderFormat:"lerc"}),ee.set("deflate",{blobExtension:".pzp",isOneSegment:!0,decoderFormat:"deflate"}),ee.set("jpeg",{blobExtension:".pjg",isOneSegment:!0,decoderFormat:"jpg"});let ue=class extends ie{constructor(){super(...arguments),this._files=null,this._storageIndex=null,this.datasetFormat="MRF"}async fetchRawTile(t,e,r,s={}){const{blockWidth:i,blockHeight:a,blockBoundary:n}=this.rasterInfo.storageInfo,l=n[t];if(!l||l.maxRow<e||l.maxCol<r||l.minRow>e||l.minCol>r)return null;const{bandCount:o,pixelType:c}=this.rasterInfo,{ranges:u,actualTileWidth:p,actualTileHeight:h}=this._getTileLocation(t,e,r);if(!u||u.length===0)return null;if(u[0].from===0&&u[0].to===0){const F=new Uint8Array(i*a);return new me({width:i,height:a,pixels:void 0,mask:F,validPixelCount:0})}const{bandIds:f}=this.ioConfig,y=this._getBandSegmentCount(),g=[];let d=0;for(d=0;d<y;d++)f&&!f.includes(d)||g.push(this.request(this._files.data,{range:{from:u[d].from,to:u[d].to},responseType:"array-buffer",signal:s.signal}));const m=await Promise.all(g),x=m.map(F=>F.data.byteLength).reduce((F,M)=>F+M),I=new Uint8Array(x),R=[];let v=0;for(d=0;d<y;d++)R.push(v),I.set(new Uint8Array(m[d].data),v),v+=m[d].data.byteLength;const T=ee.get(this.rasterInfo.storageInfo.compression).decoderFormat,S=await this.decodePixelBlock(I.buffer,{width:i,height:a,format:T,planes:f?.length||o,offsets:R,pixelType:c});if(S==null)return null;let{noDataValue:k}=this.rasterInfo;if(k!=null&&T!=="lerc"&&!S.mask&&(k=k[0],k!=null)){const F=S.width*S.height,M=new Uint8Array(F);if(Math.abs(k)>1e24)for(d=0;d<F;d++)Math.abs((S.pixels[0][d]-k)/k)>1e-6&&(M[d]=1);else for(d=0;d<F;d++)S.pixels[0][d]!==k&&(M[d]=1);S.mask=M}let _=0,P=0;if(p!==i||h!==a){let F=S.mask;if(F)for(d=0;d<a;d++)if(P=d*i,d<h)for(_=p;_<i;_++)F[P+_]=0;else for(_=0;_<i;_++)F[P+_]=0;else for(F=new Uint8Array(i*a),S.mask=F,d=0;d<h;d++)for(P=d*i,_=0;_<p;_++)F[P+_]=1}return S}async _open(t){this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1);const e=t?t.signal:null,r=await this.request(this.url,{responseType:"xml",signal:e}),{rasterInfo:s,files:i}=this._parseHeader(r.data),{skipMapInfo:a,skipExtensions:n=[]}=this.ioConfig;if(!n.includes("aux.xml")&&!a){const m=await this._fetchAuxiliaryData(t);m!=null&&(s.statistics=m.statistics??s.statistics,s.histograms=m.histograms,m.histograms&&s.statistics==null&&(s.statistics=Me(m.histograms)))}a&&this.updateImageSpaceRasterInfo(s),this._set("rasterInfo",s),this._files=i;const l=await this.request(i.index,{responseType:"array-buffer",signal:e});this._storageIndex=pi(l.data);const{blockWidth:o,blockHeight:c}=this.rasterInfo.storageInfo,u=this.rasterInfo.storageInfo.pyramidScalingFactor,{width:p,height:h}=this.rasterInfo,f=[],y=this._getBandSegmentCount();let g=0,d=-1;for(;g<this._storageIndex.length;){d++;const m=Math.ceil(p/o/u**d)-1,x=Math.ceil(h/c/u**d)-1;g+=(m+1)*(x+1)*y*4,f.push({maxRow:x,maxCol:m,minCol:0,minRow:0})}this.rasterInfo.storageInfo.blockBoundary=f,d>0&&(this.rasterInfo.storageInfo.firstPyramidLevel=1,this.rasterInfo.storageInfo.maximumPyramidLevel=d),this.updateTileInfo()}_getBandSegmentCount(){return ee.get(this.rasterInfo.storageInfo.compression).isOneSegment?1:this.rasterInfo.bandCount}_getTileLocation(t,e,r){const{blockWidth:s,blockHeight:i,pyramidScalingFactor:a}=this.rasterInfo.storageInfo,{width:n,height:l}=this.rasterInfo,o=this._getBandSegmentCount();let c,u,p,h=0,f=0;for(p=0;p<t;p++)f=a**p,c=Math.ceil(n/s/f),u=Math.ceil(l/i/f),h+=c*u;f=a**t,c=Math.ceil(n/s/f),u=Math.ceil(l/i/f),h+=e*c+r,h*=4*o;const y=this._storageIndex.subarray(h,h+4*o);let g=0,d=0;const m=[];for(let x=0;x<o;x++)g=y[4*x]*2**32+y[4*x+1],d=g+y[4*x+2]*2**32+y[4*x+3],m.push({from:g,to:d});return{ranges:m,actualTileWidth:r<c-1?s:Math.ceil(n/f)-s*(c-1),actualTileHeight:e<u-1?i:Math.ceil(l/f)-i*(u-1)}}_parseHeader(t){const e=j(t,"MRF_META/Raster");if(!e)throw new C("mrf:open","not a valid MRF format");const r=j(e,"Size"),s=parseInt(r.getAttribute("x"),10),i=parseInt(r.getAttribute("y"),10),a=parseInt(r.getAttribute("c"),10),n=(Y(e,"Compression")||"none").toLowerCase();if(!ee.has(n))throw new C("mrf:open","currently does not support compression "+n);const l=Y(e,"DataType")||"UInt8",o=X.get(l);if(o==null)throw new C("mrf:open","currently does not support pixel type "+l);const c=j(e,"PageSize"),u=parseInt(c.getAttribute("x"),10),p=parseInt(c.getAttribute("y"),10),h=j(e,"DataValues");let f,y;if(h&&(y=h.getAttribute("NoData"),y!=null&&(f=y.trim().split(" ").map(F=>parseFloat(F)))),j(t,"MRF_META/CachedSource"))throw new C("mrf:open","currently does not support MRF referencing other data files");const g=j(t,"MRF_META/GeoTags"),d=j(g,"BoundingBox");let m,x=!1;if(d!=null){const F=parseFloat(d.getAttribute("minx")),M=parseFloat(d.getAttribute("miny")),O=parseFloat(d.getAttribute("maxx")),N=parseFloat(d.getAttribute("maxy")),D=Y(g,"Projection")||"";let E=H.WGS84;if(D!=="LOCAL_CS[]")if(D.toLowerCase().startsWith("epsg:")){const z=Number(D.slice(5));isNaN(z)||z===0||(E=new H({wkid:z}))}else E=Re(D)??H.WGS84;else x=!0,E=new H({wkid:3857});m=new W(F,M,O,N),m.spatialReference=E}else x=!0,m=new W({xmin:-.5,ymin:.5-i,xmax:s-.5,ymax:.5,spatialReference:new H({wkid:3857})});const I=j(t,"MRF_META/Rsets"),R=parseInt(I?.getAttribute("scale")||"2",10),v=m.spatialReference,T=new de({origin:new A({x:m.xmin,y:m.ymax,spatialReference:v}),blockWidth:u,blockHeight:p,pyramidBlockWidth:u,pyramidBlockHeight:p,compression:n,pyramidScalingFactor:R}),S=new A({x:m.width/s,y:m.height/i,spatialReference:v}),k=new ye({width:s,height:i,extent:m,isPseudoSpatialReference:x,spatialReference:v,bandCount:a,pixelType:o,pixelSize:S,noDataValue:f,storageInfo:T}),_=Y(t,"datafile"),P=Y(t,"IndexFile");return{rasterInfo:k,files:{mrf:this.url,index:P||this.url.replace(".mrf",".idx"),data:_||this.url.replace(".mrf",ee.get(n).blobExtension)}}}async _fetchAuxiliaryData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ge(e)}catch{return null}}};function pi(t){if(t.byteLength%16>0)throw new Error("invalid array buffer must be multiples of 16");let e,r,s,i,a,n;if(ps){for(r=new Uint8Array(t),i=new ArrayBuffer(t.byteLength),s=new Uint8Array(i),a=0;a<t.byteLength/4;a++)for(n=0;n<4;n++)s[4*a+n]=r[4*a+3-n];e=new Uint32Array(i)}else e=new Uint32Array(t);return e}w([b()],ue.prototype,"_files",void 0),w([b()],ue.prototype,"_storageIndex",void 0),w([b({type:String,json:{write:!0}})],ue.prototype,"datasetFormat",void 0),ue=w([$("esri.layers.support.rasterDatasets.MRFRaster")],ue);const di=ue;function mi(t){const e=t.fields,r=t.records,s=e.some(c=>c.name.toLowerCase()==="oid")?"OBJECTID":"OID",i=[{name:s,type:"esriFieldTypeOID",alias:"OID"}].concat(e.map(c=>({name:c.name,type:"esriFieldType"+c.typeName,alias:c.name}))),a=i.map(c=>c.name),n=[];let l=0,o=0;return r.forEach(c=>{const u={};for(u[s]=l++,o=1;o<a.length;o++)u[a[o]]=c[o-1];n.push({attributes:u})}),{displayFieldName:"",fields:i,features:n}}class yi{static get supportedVersions(){return[5]}static parse(e){const r=new DataView(e),s=3&r.getUint8(0);if(s!==3)return{header:{version:s},recordSet:null};const i=r.getUint32(4,!0),a=r.getUint16(8,!0),n=r.getUint16(10,!0),l={version:s,recordCount:i,headerByteCount:a,recordByteCount:n};let o=32;const c=[],u=[];let p;if(s===3){for(;r.getUint8(o)!==13;)p=String.fromCharCode(r.getUint8(o+11)).trim(),c.push({name:nt(new Uint8Array(e,o,11)),type:p,typeName:["String","Date","Double","Boolean","String","Integer"][["C","D","F","L","M","N"].indexOf(p)],length:r.getUint8(o+16)}),o+=32;if(o+=1,c.length>0)for(;u.length<i&&e.byteLength-o>n;){const h=[];r.getUint8(o)===32?(o+=1,c.forEach(f=>{if(f.type==="C")h.push(nt(new Uint8Array(e,o,f.length)).trim());else if(f.type==="N")h.push(parseInt(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim(),10));else if(f.type==="F")h.push(parseFloat(String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim()));else if(f.type==="D"){const y=String.fromCharCode.apply(null,new Uint8Array(e,o,f.length)).trim();h.push(new Date(parseInt(y.slice(0,4),10),parseInt(y.slice(4,6),10)-1,parseInt(y.slice(6,8),10)))}o+=f.length}),u.push(h)):o+=n}}return{header:l,fields:c,records:u,recordSet:mi({fields:c,records:u})}}}const qe=(t,e)=>t.get(e)?.values,pe=(t,e)=>t.get(e)?.values?.[0];let ae=class extends ie{constructor(){super(...arguments),this._files=null,this._headerInfo=null,this._bufferSize=1048576,this.datasetFormat="TIFF"}async fetchRawTile(t,e,r,s={}){if(!this._headerInfo?.isSupported||this.isBlockOutside(t,e,r))return null;const i=await this._fetchRawTiffTile(t,e,r,!1,s);if(i!=null&&this._headerInfo.hasMaskBand){const a=await this._fetchRawTiffTile(t,e,r,!0,s);a!=null&&a.pixels[0]instanceof Uint8Array&&(i.mask=a.pixels[0])}return i}async _open(t){const e=t?t.signal:null,{data:r}=await this.request(this.url,{range:{from:0,to:this._bufferSize},responseType:"array-buffer",signal:e});if(!r)throw new C("tiffraster:open","failed to open url "+this.url);this.datasetName=this.url.slice(this.url.lastIndexOf("/")+1,this.url.lastIndexOf("."));const{littleEndian:s,firstIFDPos:i,isBigTiff:a}=ds(r),n=[];await this._readIFDs(n,r,s,i,0,a?8:4,e);const{imageInfo:l,rasterInfo:o}=gi(n),c=ms(n),u=ys(n);if(this._headerInfo={littleEndian:s,isBigTiff:a,ifds:n,pyramidIFDs:c,maskIFDs:u,...l},this._set("rasterInfo",o),!l.isSupported)throw new C("tiffraster:open","this tiff is not supported: "+l.message);if(!l.tileWidth)throw new C("tiffraster:open","none-tiled tiff is not optimized for access, convert to COG and retry.");o.isPseudoSpatialReference&&se.getLogger(this).warn("The spatial reference for this tiff is unsupported. Only EPSG spatial reference codes and Esri WKTs are supported.");const p=n[0].get("PREDICTOR")?.values?.[0];if(n[0].get("SAMPLEFORMAT")?.values?.[0]===3&&p===2)throw new C("tiffraster:open","unsupported horizontal difference encoding. Predictor=3 is supported for floating point data");const{skipMapInfo:h,skipExtensions:f=[]}=this.ioConfig;if(!f.includes("aux.xml")&&!h){const y=await this._fetchAuxiliaryMetaData(t);y!=null&&xi(y,o)}f.includes("vat.dbf")||o.bandCount!==1||o.pixelType!=="u8"||h||(o.attributeTable=await this._fetchAuxiliaryTable(t),o.attributeTable!=null&&(o.keyProperties.DataType="thematic")),h&&this.updateImageSpaceRasterInfo(o),this.updateTileInfo()}async _readIFDs(t,e,r,s,i,a=4,n){if(!s)return null;(s>=e.byteLength||s<0)&&(e=(await this.request(this.url,{range:{from:s+i,to:s+i+this._bufferSize},responseType:"array-buffer",signal:n})).data,i=s+i,s=0);const l=await this._readIFD(e,r,s,i,ge.tiffTags,a,n);if(t.push(l.ifd),!l.nextIFD)return null;await this._readIFDs(t,e,r,l.nextIFD-i,i,a,n)}async _readIFD(t,e,r,s,i=ge.tiffTags,a=4,n){if(!t)return null;const l=gs(t,e,r,s,i,a);if(l.success){const o=[];if(l.ifd?.forEach(c=>{c.values||o.push(c)}),o.length>0){const c=o.map(p=>p.offlineOffsetSize).filter(Pe),u=Math.min.apply(null,c.map(p=>p[0]));if(Math.min.apply(null,c.map(p=>p[0]+p[1]))-u<=this._bufferSize){const{data:p}=await this.request(this.url,{range:{from:u,to:u+this._bufferSize},responseType:"array-buffer",signal:n});t=p,s=u,o.forEach(h=>xs(t,e,h,s))}}if(l.ifd?.has("GEOKEYDIRECTORY")){const c=l.ifd.get("GEOKEYDIRECTORY"),u=c?.values;if(u&&u.length>4){const p=u[0]+"."+u[1]+"."+u[2],h=await this._readIFD(t,e,c.valueOffset+6-s,s,ge.geoKeys,2,n);c.data=h.ifd,c.data&&c.data.set("GEOTIFFVersion",{id:0,type:2,valueCount:1,valueOffset:null,values:[p]})}}return l}if(l.requiredBufferSize&&l.requiredBufferSize!==t.byteLength)return(t=(await this.request(this.url,{range:{from:s,to:s+l.requiredBufferSize+4},responseType:"array-buffer",signal:n})).data).byteLength<l.requiredBufferSize?null:this._readIFD(t,e,0,s,ge.tiffTags,4,n)}async _fetchRawTiffTile(t,e,r,s,i={}){const a=this._getTileLocation(t,e,r,s);if(!a)return null;const{ranges:n,actualTileWidth:l,actualTileHeight:o,ifd:c}=a,u=n.map(T=>this.request(this.url,{range:T,responseType:"array-buffer",signal:i.signal})),p=await Promise.all(u),h=p.map(T=>T.data.byteLength).reduce((T,S)=>T+S),f=p.length===1?p[0].data:new ArrayBuffer(h),y=[0],g=[0];if(p.length>1){const T=new Uint8Array(f);for(let S=0,k=0;S<p.length;S++){const _=p[S].data;T.set(new Uint8Array(_),k),y[S]=k,k+=_.byteLength,g[S]=_.byteLength}}const{blockWidth:d,blockHeight:m}=this.getBlockWidthHeight(t),x=await this.decodePixelBlock(f,{format:"tiff",customOptions:{headerInfo:this._headerInfo,ifd:c,offsets:y,sizes:g},width:d,height:m,planes:null,pixelType:null});if(x==null)return null;let I,R,v;if(l!==d||o!==m){let T=x.mask;if(T)for(I=0;I<m;I++)if(v=I*d,I<o)for(R=l;R<d;R++)T[v+R]=0;else for(R=0;R<d;R++)T[v+R]=0;else for(T=new Uint8Array(d*m),x.mask=T,I=0;I<o;I++)for(v=I*d,R=0;R<l;R++)T[v+R]=1}return x}_getTileLocation(t,e,r,s=!1){const{firstPyramidLevel:i,blockBoundary:a}=this.rasterInfo.storageInfo,n=t===0?0:t-(i-1),{_headerInfo:l}=this;if(!l)return null;const o=s?l.maskIFDs[n]:n===0?l?.ifds[0]:l?.pyramidIFDs[n-1];if(!o)return null;const c=ws(o,l),u=qe(o,"TILEOFFSETS");if(u===void 0)return null;const p=qe(o,"TILEBYTECOUNTS"),{minRow:h,minCol:f,maxRow:y,maxCol:g}=a[n];if(e>y||r>g||e<h||r<f)return null;const d=pe(o,"IMAGEWIDTH"),m=pe(o,"IMAGELENGTH"),x=pe(o,"TILEWIDTH"),I=pe(o,"TILELENGTH"),R=[];if(c){const{bandCount:v}=this.rasterInfo;for(let T=0;T<v;T++){const S=T*(y+1)*(g+1)+e*(g+1)+r;R[T]={from:u[S],to:u[S]+p[S]-1}}}else{const v=e*(g+1)+r;R.push({from:u[v],to:u[v]+p[v]-1})}for(let v=0;v<R.length;v++)if(R[v].from==null||!R[v].to||R[v].to<0)return null;return{ranges:R,ifd:o,actualTileWidth:r===g&&d%x||x,actualTileHeight:e===y&&m%I||I}}async _fetchAuxiliaryMetaData(t){try{const{data:e}=await this.request(this.url+".aux.xml",{responseType:"xml",signal:t?.signal});return Ge(e)}catch{return null}}async _fetchAuxiliaryTable(t){try{const{data:e}=await this.request(this.url+".vat.dbf",{responseType:"array-buffer",signal:t?.signal}),r=yi.parse(e);return r?.recordSet?ke.fromJSON(r.recordSet):null}catch{return null}}};function gi(t){const e=Is(t),{width:r,height:s,tileWidth:i,tileHeight:a,planes:n,pixelType:l,compression:o,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidBlockWidth:p,pyramidBlockHeight:h,pyramidResolutions:f,tileBoundary:y,affine:g,metadata:d}=e,m=e.extent.spatialReference?.wkt||e.extent.spatialReference?.wkid;let x=Re(m),I=!!e.isPseudoGeographic;x==null&&(I=!0,x=new H({wkid:3857}));const R=new W({...e.extent,spatialReference:x}),v=new A(R?{x:R.xmin,y:R.ymax,spatialReference:x}:{x:0,y:0}),T=new de({blockWidth:i,blockHeight:a,pyramidBlockWidth:p,pyramidBlockHeight:h,compression:o,origin:v,firstPyramidLevel:c,maximumPyramidLevel:u,pyramidResolutions:f,blockBoundary:y}),S=new A({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/s,spatialReference:x}),k=d?{BandProperties:d.bandProperties,DataType:d.dataType}:{};let _=null;const P=pe(t[0],"PHOTOMETRICINTERPRETATION"),F=qe(t[0],"COLORMAP");if(P<=3&&F?.length>3&&F.length%3==0){_=[];const O=F.length/3;for(let N=0;N<O;N++)_.push([N,F[N]>>>8,F[N+O]>>>8,F[N+2*O]>>>8])}const M=new ye({width:r,height:s,bandCount:n,pixelType:l,pixelSize:S,storageInfo:T,spatialReference:x,isPseudoSpatialReference:I,keyProperties:k,extent:R,colormap:_,statistics:d?d.statistics:null});if(g?.length&&(M.nativeExtent=new W({xmin:-.5,ymin:.5-s,xmax:r-.5,ymax:.5,spatialReference:x}),M.transform=new Ee({polynomialOrder:1,forwardCoefficients:[g[2]+g[0]/2,g[5]-g[3]/2,g[0],g[3],-g[1],-g[4]]}),M.extent=M.transform.forwardTransform(M.nativeExtent),M.pixelSize=new A({x:(R.xmax-R.xmin)/r,y:(R.ymax-R.ymin)/s,spatialReference:x}),T.origin.x=-.5,T.origin.y=.5),f){const{x:O,y:N}=M.pixelSize;f.forEach(D=>{D.x*=O,D.y*=N})}return{imageInfo:e,rasterInfo:M}}function xi(t,e){if(e.statistics=t.statistics??e.statistics,e.histograms=t.histograms,t.histograms&&e.statistics==null&&(e.statistics=Me(t.histograms)),t.transform&&e.transform==null){e.transform=t.transform,e.nativeExtent=e.extent;const r=e.transform.forwardTransform(e.nativeExtent);e.pixelSize=new A({x:(r.xmax-r.xmin)/e.width,y:(r.ymax-r.ymin)/e.height,spatialReference:e.spatialReference}),e.extent=r}e.isPseudoSpatialReference&&t.spatialReference&&(e.spatialReference=t.spatialReference,e.extent.spatialReference=e.nativeExtent.spatialReference=e.storageInfo.origin.spatialReference=e.spatialReference)}w([b()],ae.prototype,"_files",void 0),w([b()],ae.prototype,"_headerInfo",void 0),w([b()],ae.prototype,"_bufferSize",void 0),w([b({type:String,json:{write:!0}})],ae.prototype,"datasetFormat",void 0),ae=w([$("esri.layers.support.rasterDatasets.TIFFRaster")],ae);const wi=ae,L=new Map;L.set("MRF",{desc:"Meta Raster Format",constructor:di}),L.set("TIFF",{desc:"GeoTIFF",constructor:wi}),L.set("RasterTileServer",{desc:"Raster Tile Server",constructor:fi}),L.set("JPG",{desc:"JPG Raster Format",constructor:ve}),L.set("PNG",{desc:"PNG Raster Format",constructor:ve}),L.set("GIF",{desc:"GIF Raster Format",constructor:ve}),L.set("BMP",{desc:"BMP Raster Format",constructor:ve}),L.set("CovJSON",{desc:"COVJSON Raster Format",constructor:ai}),L.set("MEMORY",{desc:"In Memory Raster Format",constructor:Le});class je{static get supportedFormats(){const e=new Set;return L.forEach((r,s)=>e.add(s)),e}static async open(e){const{url:r,ioConfig:s,source:i,sourceJSON:a}=e;let n=e.datasetFormat??s?.datasetFormat;n==null&&(r.includes(".")?n=r.slice(r.lastIndexOf(".")+1).toUpperCase():i?.type?.toLowerCase()==="coverage"?n="CovJSON":i?.extent&&i.pixelblocks&&(n="MEMORY")),n==="OVR"||n==="TIF"?n="TIFF":n==="JPG"||n==="JPEG"||n==="JFIF"?n="JPG":n==="COVJSON"&&(n="CovJSON"),r.toLowerCase().includes("/imageserver")&&!r.toLowerCase().includes("/wcsserver")&&(n="RasterTileServer");const l={url:r,source:i,sourceJSON:a,datasetFormat:n,ioConfig:s??{bandIds:null,sampling:null}};if(Object.keys(l).forEach(p=>{l[p]==null&&delete l[p]}),n){if(!this.supportedFormats.has(n))throw new C("rasterfactory:open","not a supported format "+n);if(n==="CRF")throw new C("rasterfactory:open",`cannot open raster: ${r}`);const p=new(L.get(n)).constructor(l);return await p.open({signal:e.signal}),p}const o=Array.from(L.keys()).filter(p=>p!=="CovJSON"&&p!=="Memory");let c=0;const u=()=>{if(n=o[c++],!n||n==="CRF")return null;const p=new(L.get(n)).constructor(l);return p.open({signal:e.signal}).then(()=>p).catch(()=>u())};return u()}static register(e,r,s){L.has(e.toUpperCase())||L.set(e.toUpperCase(),{desc:r,constructor:s})}}let J=class extends bs(Rs(Ss(vs(Ts(_s(ei(Fs(ks(Cs(Os(Ps(As)))))))))))){constructor(...t){super(...t),this._primaryRasters=[],this.legendEnabled=!0,this.isReference=null,this.listMode="show",this.sourceJSON=null,this.version=null,this.type="imagery-tile",this.operationalLayerType="ArcGISTiledImageServiceLayer",this.popupEnabled=!0,this.popupTemplate=null,this.fields=null,this.source=void 0,this._debouncedSaveOperations=Ms(async(e,r,s)=>{const{save:i,saveAs:a}=await import("./imageryUtils-DUQ3sTvH.js");switch(e){case xe.SAVE:return i(this,r);case xe.SAVE_AS:return a(this,s,r)}})}normalizeCtorArgs(t,e){return typeof t=="string"?{url:t,...e}:t}load(t){const e=t!=null?t.signal:null;return this.addResolvingPromise(this.loadFromPortal({supportedTypes:["Image Service"]},t).catch(Ns).then(()=>this._openRaster(e))),Promise.resolve(this)}get defaultPopupTemplate(){return this.createPopupTemplate()}get rasterFields(){const t=[new oe({name:"Raster.ServicePixelValue",alias:"Pixel Value",domain:null,editable:!1,length:50,type:"string"}),new oe({name:"Raster.ServicePixelValue.Raw",alias:"Raw Pixel Value",domain:null,editable:!1,length:50,type:"string"})],e=this.raster?.rasterInfo??this.serviceRasterInfo,r=e?.attributeTable,s=r!=null?r.fields:null,i="Raster.";if(s){const l=s.filter(o=>o.type!=="oid"&&o.name.toLowerCase()!=="value").map(o=>{const c=o.clone();return c.name=i+o.name,c});t.push(...l)}const a=e?.dataType,n=e?.multidimensionalInfo;if((a==="vector-magdir"||a==="vector-uv")&&n!=null){const l=n.variables[0].unit?.trim(),o="Magnitude"+(l?` (${l})`:"");t.push(new oe({name:"Raster.Magnitude",alias:o,domain:null,editable:!1,type:"double"})),t.push(new oe({name:"Raster.Direction",alias:"Direction (\xB0)",domain:null,editable:!1,type:"double"}))}return t}createPopupTemplate(t){const{rasterFields:e}=this,r=t?.visibleFieldNames??new Set(e.map(({name:a})=>a).filter(a=>a.toLowerCase()!=="raster.servicepixelvalue.raw")),s=Ds({fields:e,title:this.title},{...t,visibleFieldNames:r}),{rasterInfo:i}=this.raster;return s?.fieldInfos&&i?.pixelType.startsWith("f")&&s.fieldInfos.forEach(({format:a,fieldName:n})=>{a&&n&&/^raster\.(item|service)pixelvalue/i.test(n)&&(a.places=2)}),s}async generateRasterInfo(t,e){if(t=Te(Ce,t),await this.load(),!t||t.functionName?.toLowerCase()==="none")return this.serviceRasterInfo;try{const{rasterInfo:r}=await this._openFunctionRaster(t,e);return r}catch(r){throw r instanceof C?r:new C("imagery-tile-layer","the given raster function is not supported")}}async save(t){return this._debouncedSaveOperations(xe.SAVE,t)}async saveAs(t,e){return this._debouncedSaveOperations(xe.SAVE_AS,e,t)}write(t,e){const r=this._primaryRasters[0]??this.raster;if(this.loaded?r.datasetFormat==="RasterTileServer"&&(r.tileType==="Raster"||r.tileType==="Map"):this.url&&/\/ImageServer(\/|\/?$)/i.test(this.url))return super.write(t,e);if(e?.messages){const s=`${e.origin}/${e.layerContainerType||"operational-layers"}`;e.messages.push(new C("layer:unsupported",`Layers (${this.title}, ${this.id}) of type '${this.declaredClass}' are not supported in the context of '${s}'`,{layer:this}))}return null}async _openRaster(t){let e=!1;if(this.raster)await this._openFromRaster(this.raster,t),e=this.raster.datasetFormat==="Function",!e&&this.rasterFunction&&(this._primaryRasters=[this.raster],await this._initializeWithFunctionRaster(this.rasterFunction));else{const{url:s,rasterFunction:i,source:a}=this;if(!s&&!a)throw new C("imagery-tile-layer:open","missing url or source parameter");a?await this._openFromSource(a,t):i?await this._openFromUrlWithRasterFunction(s,i,t):await this._openFromUrl(s,t)}const r=this.raster.rasterInfo;if(!r)throw new C("imagery-tile-layer:load","cannot load resources on "+this.url);if(this._set("serviceRasterInfo",e?r:this._primaryRasters[0].rasterInfo),this._set("spatialReference",r.spatialReference),this.sourceJSON=this.sourceJSON||this.raster.sourceJSON,this.sourceJSON!=null){const s=this.raster.tileType==="Map"&&this.sourceJSON.minLOD!=null&&this.sourceJSON.maxLOD!=null?this.sourceJSON:{...this.sourceJSON,minScale:0,maxScale:0};this.read(s,{origin:"service"})}else this.read({tileInfo:this.serviceRasterInfo?.storageInfo.tileInfo.toJSON()},{origin:"service"});this.title||(this.title=this.raster.datasetName),this.raster.tileType==="Map"&&(this.popupEnabled=!1),this._configDefaultSettings(),this.addHandles(Js(()=>this.customParameters,s=>{this.raster&&(this.raster.ioConfig.customFetchParameters=s)}))}async _openFromRaster(t,e){t.rasterInfo||await t.open({signal:e}),this._primaryRasters=t.datasetFormat==="Function"?t.primaryRasters.rasters:[t],this.url||(this.url=this._primaryRasters[0].url)}async _openFromUrlWithRasterFunction(t,e,r){const s=[t];e&&Vs(e.toJSON(),s);const i=await Promise.all(s.map(n=>je.open({url:n,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:r}))),a=i.findIndex(n=>n==null);if(a>-1)throw new C("imagery-tile-layer:open",`cannot open raster: ${s[a]}`);return this._primaryRasters=i,this._initializeWithFunctionRaster(e)}async _openFromUrl(t,e){const r=await je.open({url:t,sourceJSON:this.sourceJSON,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(r==null)throw new C("imagery-tile-layer:open",`cannot open raster: ${t}`);this._primaryRasters=[r],this.raster=r}async _openFromSource(t,e){const r="the tiled imagery data source is not supported",s=t.type?.toLowerCase()==="coverage"?"CovJSON":t.extent&&t.pixelBlock?"MEMORY":null;if(!s)throw new C("imagery-tile-layer:open",r);s==="MEMORY"&&(t={...t,pixelBlock:void 0,pixelBlocks:[t.pixelBlock]});const i=await je.open({url:"",source:t,datasetFormat:s,ioConfig:{sampling:"closest",...this.ioConfig,customFetchParameters:this.customParameters},signal:e});if(i==null)throw new C("imagery-tile-layer:open",r);this._primaryRasters=[i],this.rasterFunction?await this._initializeWithFunctionRaster(this.rasterFunction):this.raster=i}async _openFunctionRaster(t,e){const r={raster:this._primaryRasters[0]};this._primaryRasters.length>1&&this._primaryRasters.forEach(a=>r[a.url]=a);const s=ht(t.functionDefinition?.toJSON()??t.toJSON(),r),i=new pt({rasterFunction:s});return await i.open(e),i}async _initializeWithFunctionRaster(t,e){try{this.raster=await this._openFunctionRaster(t,e)}catch(r){r instanceof C&&se.getLogger(this).error("imagery-tile-layer:open",r.message),se.getLogger(this).warn("imagery-tile-layer:open","the raster function cannot be applied and is removed"),this._set("rasterFunction",null),this.raster=this._primaryRasters[0]}}};w([b({clonable:!1})],J.prototype,"_primaryRasters",void 0),w([b(Bs)],J.prototype,"legendEnabled",void 0),w([b({type:Boolean,json:{read:!1,write:{enabled:!0,overridePolicy:()=>({enabled:!1})}}})],J.prototype,"isReference",void 0),w([b({type:["show","hide"]})],J.prototype,"listMode",void 0),w([b({json:{read:!0,write:!0}})],J.prototype,"blendMode",void 0),w([b()],J.prototype,"sourceJSON",void 0),w([b({readOnly:!0,json:{origins:{service:{read:{source:"currentVersion"}}}}})],J.prototype,"version",void 0),w([b({readOnly:!0,json:{read:!1}})],J.prototype,"type",void 0),w([b({type:["ArcGISTiledImageServiceLayer"]})],J.prototype,"operationalLayerType",void 0),w([b({type:Boolean,value:!0,json:{read:{source:"disablePopup",reader:(t,e)=>!e.disablePopup},write:{target:"disablePopup",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}},writer(t,e,r){e[r]=!t}}}})],J.prototype,"popupEnabled",void 0),w([b({type:Es,json:{read:{source:"popupInfo"},write:{target:"popupInfo",overridePolicy(){return{enabled:!this.loaded||this.raster.tileType==="Raster"}}}}})],J.prototype,"popupTemplate",void 0),w([b({readOnly:!0})],J.prototype,"defaultPopupTemplate",null),w([b({readOnly:!0,type:[oe]})],J.prototype,"fields",void 0),w([b({readOnly:!0,type:[oe]})],J.prototype,"rasterFields",null),w([b({constructOnly:!0})],J.prototype,"source",void 0),J=w([$("esri.layers.ImageryTileLayer")],J);const Ii=J;export{Ii as default};
