{"version":3,"file":"index-DYBxjHjA.js","sources":["../../src/fixtures/details/store/details-state.ts","../../src/fixtures/details/api/details.ts","../../src/fixtures/details/lang/lang.csv?raw","../../src/fixtures/details/index.ts"],"sourcesContent":["import type { PanelWidthObject } from '@/api';\n\nexport type DetailsItemSet = { [name: string]: DetailsItemInstance };\n\n/**\n * Types of requests for the details panel. Currently, consists of requests\n * from the toggle events, such as the grid (details for a single item) and\n * requests from a map click (details for all items at a point).\n */\nexport type DetailsRequestOrigin = 'toggleEvent' | 'identify';\n\nexport interface DetailsConfig {\n    /**\n     * The dictionary of default templates indexed by identify result format with value as the template component id.\n     */\n    templates: { [type: string]: string };\n\n    /**\n     * The width of the details panel in pixels.\n     *\n     * @type {number}\n     * @interface GridConfig\n     */\n    panelWidth: PanelWidthObject | number;\n}\n\nexport interface DetailsFieldItem {\n    /**\n     * Unique identifier for the field. Aligns with the layer field name.\n     */\n    field: string;\n\n    /**\n     * Specifies the field title.\n     */\n    alias?: string;\n\n    /**\n     * Whether this field is displayed.\n     */\n    visible?: boolean;\n}\n\nexport interface DetailsConfigItem {\n    /**\n     * The layer ID that we want to bind the custom template to.\n     *\n     * @type {string}\n     * @memberof DetailsConfigItem\n     */\n    id: string;\n\n    /**\n     * The optional display name of the layer.\n     *\n     * @type {string}\n     * @memberof DetailsConfigItem\n     */\n    name: string;\n\n    /**\n     * The component that we would like to use as a template.\n     *\n     * @type {string}\n     * @memberof DetailsConfigItem\n     */\n    template: string;\n\n    /**\n     * An array to specify how the layer data fields are defined.\n     *\n     * @type {array}\n     * @memberof DetailsConfigItem\n     */\n    fields?: DetailsFieldItem[];\n\n    /**\n     * Specifies result priority for auto-open. Lower number is higher priority.\n     *\n     * @type {number}\n     * @memberof DetailsConfigItem\n     */\n    priority: number;\n}\n\nexport class DetailsItemInstance implements DetailsConfigItem {\n    id: string;\n\n    name: string;\n\n    template: string;\n\n    priority: number;\n\n    fields?: DetailsFieldItem[];\n\n    componentId?: string;\n\n    constructor(value: string | DetailsConfigItem) {\n        const params = {\n            ...(typeof value === 'string' ? { id: value, template: '', name: '', priority: 50 } : value)\n        };\n        ({\n            template: this.template,\n            id: this.id,\n            name: this.name,\n            fields: this.fields,\n            priority: this.priority\n        } = params);\n    }\n}\n","import { FixtureInstance, LayerInstance, ReactiveIdentifyFactory } from '@/api';\nimport type { IdentifyItem, IdentifyResult } from '@/api';\nimport type { Graphic, IdentifyResultFormat } from '@/geo/api';\nimport { DetailsItemInstance, useDetailsStore } from '../store';\n\nimport type { DetailsConfig, DetailsConfigItem, DetailsItemSet } from '../store';\n\nimport type { HilightAPI } from '../../hilight/api/hilight';\nimport { HilightMode } from '../../hilight/api/hilight-defs';\n\nexport const ORIGIN_DETAILS = 'details';\n\nexport class DetailsAPI extends FixtureInstance {\n    private detailsStore = useDetailsStore(this.$vApp.$pinia);\n\n    get config(): DetailsConfig | undefined {\n        return super.config;\n    }\n\n    /**\n     * Updates the identify result in the store, and then opens the details panel.\n     *\n     * @param {IdentifyResult[]} payload\n     * @memberof DetailsAPI\n     */\n    openDetails(payload: IdentifyResult[]): void {\n        // Check to see if each layer has a fixture config in the store.\n        // This needs to happen prior to setting the payload, as the watcher\n        // on the payload property will require this information in the store.\n        payload.forEach(p => {\n            this._loadDetailsConfig(this.$iApi.geo.layer.getLayer(p.uid));\n        });\n\n        // Save the provided identify result in the store.\n        this.detailsStore.payload = payload;\n\n        const panel = this.$iApi.panel.get('details');\n        // Indicate this request for the details panel comes from clicking on the map\n        this.detailsStore.origin = 'identify';\n        panel.button.tooltip = 'details.layers.title.identifyOrigin';\n\n        // Open the details panel.\n        const detailsPanel = this.$iApi.panel.get('details');\n        if (!detailsPanel.isOpen) {\n            this.$iApi.panel.open({\n                id: 'details'\n            });\n        }\n    }\n\n    /**\n     * Provided with the data for a single feature, shows or hides details panel.\n     * If panel is closed or incoming data is different than current content, panel is shown.\n     * If panel open and incoming data is what is currently shown, panel closes.\n     * The `open` parameter can override the behavior.\n     * featureData payload (can be empty if forcing closed)\n     * - uid     : uid string of the layer hosting the feature\n     * - format  : structure of the data. IdentifyResultFormat value.\n     * - data    : source information for the feature. Analogous to the data property of an IdentifyItem\n     * - layerId : optional layerId string of the layer hosting the feature. Will be looked up if not provided\n     *\n     * @param {{data: any, uid: string, format: IdentifyResultFormat}} featureData\n     * @param {boolean | undefined} open can force the panel to open (true) or close (false) regardless of current panel state\n     * @memberof DetailsAPI\n     */\n    toggleFeature(\n        featureData: {\n            data: any;\n            uid: string;\n            layerId?: string;\n            format: IdentifyResultFormat;\n        },\n        open: boolean | undefined\n    ): void {\n        const panel = this.$iApi.panel.get('details');\n\n        if (open === false) {\n            // close panel and run away. allows a close without providing featureData\n            panel.close();\n            this.detailsStore.currentFeatureId = undefined;\n            return;\n        }\n\n        // feature ids are composed of the layer uid and feature object id\n        const layer: LayerInstance | undefined = this.$iApi.geo.layer.getLayer(featureData.uid);\n        const currFeatureId = `${featureData.uid}-${\n            // see https://github.com/ramp4-pcar4/ramp4-pcar4/issues/1767 for the reasoning behind this\n            layer?.supportsFeatures ? featureData.data[layer?.oidField ?? ''] : JSON.stringify(featureData.data)\n        }`;\n\n        if (panel.isOpen && currFeatureId === this.detailsStore.currentFeatureId && !(open === true)) {\n            // panel is open, same request was fired at it, and not a force-open. Close it.\n            panel.close();\n            this.detailsStore.currentFeatureId = undefined;\n            return;\n        }\n\n        // at this point, we are showing the payload\n\n        // Indicate this request for the details panel comes from a grid item\n        this.detailsStore.origin = 'toggleEvent';\n\n        panel.button.tooltip = 'details.layers.title.gridOrigin';\n\n        this.detailsStore.currentFeatureId = currFeatureId;\n\n        // Check to see if the layer has a fixture config in the store.\n        this._loadDetailsConfig(layer);\n\n        const fakeResult: IdentifyResult = {\n            items: [ReactiveIdentifyFactory.makeRawItem(featureData.format, featureData.data)],\n            uid: featureData.uid,\n            layerId: featureData.layerId || layer?.id || 'error-not-found',\n            loading: Promise.resolve(),\n            loaded: true,\n            errored: false,\n            requestTime: Date.now()\n        };\n\n        this.detailsStore.payload = [fakeResult];\n\n        if (!panel.isOpen) {\n            panel.open();\n        }\n    }\n\n    /**\n     * Read the details section of the layers' fixture config\n     *\n     * @param {DetailsConfig} [config]\n     * @memberof DetailsAPI\n     */\n    _parseConfig(config?: DetailsConfig) {\n        // set the default templates if provided\n        if (config && config.templates) {\n            this.detailsStore.defaultTemplates = config.templates;\n        }\n\n        this.handlePanelWidths(['details']);\n        this.handlePanelTeleports(['details']);\n\n        // get all layer fixture configs\n        const layerDetailsConfigs: any = this.getLayerFixtureConfigs();\n        const detailsConfigItems: DetailsConfigItem[] = [];\n\n        // construct the details config from the layer fixture configs\n        Object.keys(layerDetailsConfigs).forEach((layerId: string) => {\n            detailsConfigItems.push({\n                id: layerId,\n                name: layerDetailsConfigs[layerId].name,\n                template: layerDetailsConfigs[layerId].template,\n                fields: layerDetailsConfigs[layerId].fields,\n                priority: layerDetailsConfigs[layerId].priority ?? 50\n            });\n        });\n\n        const detailsItems = detailsConfigItems.map((item: any) => new DetailsItemInstance(item));\n\n        // save the items in the store\n        this.detailsStore.properties = detailsItems.reduce<DetailsItemSet>((map, item) => {\n            map[item.id] = item;\n            return map;\n        }, {});\n\n        this._validateItems();\n    }\n\n    /**\n     * Will see if we have this layer's detail fixture config cached, and if not,\n     * cache it.\n     *\n     * @param layer the layer to check\n     * @private\n     */\n    _loadDetailsConfig(layer: LayerInstance | undefined) {\n        // Check to see if the layer has a fixture config in the store.\n        if (layer) {\n            // Check to see if we've already saved this layer's details config.\n            const detailsItem = this.detailsStore.properties[layer.id];\n\n            // If we haven't and the layer has a details config set, add it to the details store.\n            if (detailsItem === undefined) {\n                // Dev note: this is pretty inefficient, as getLayerFixtureConfigs() processes every layer.\n                //           but it also abstracts some ugly code with lots of `any` types. Since we're\n                //           caching we can live with it. Noting for future potential code cleanup.\n                const layerDetailsConfigs: any = this.getLayerFixtureConfigs();\n\n                const thisLayerConfig = layerDetailsConfigs[layer.id];\n\n                if (thisLayerConfig) {\n                    this.detailsStore.addConfigProperty({\n                        id: layer.id,\n                        name: thisLayerConfig.name,\n                        template: thisLayerConfig.template,\n                        fields: thisLayerConfig.fields,\n                        priority: thisLayerConfig.priority ?? 50\n                    });\n                }\n            }\n        }\n    }\n\n    /**\n     * Check to see if the stored components are registered properly.\n     *\n     * @memberof DetailsAPI\n     */\n    _validateItems() {\n        Object.values<DetailsConfigItem>(this.detailsStore.properties).forEach(item => {\n            if (item.template in this.$vApp.$options.components!) {\n                this.detailsStore.properties[item.id].componentId = item.template;\n            }\n        });\n    }\n\n    /**\n     * Highlight identified items\n     * @param items items to add\n     * @param layerUid uid of layer the items belong to\n     */\n    async hilightDetailsItems(items: IdentifyItem | Array<IdentifyItem>, layerUid: string) {\n        // hilight all provided identify items for this layer\n        const hItems = items instanceof Array ? items : [items];\n        const hilightFix: HilightAPI = this.$iApi.fixture.get('hilight');\n        if (hilightFix) {\n            const gsByKey = await hilightFix.getGraphicsByKey(ORIGIN_DETAILS);\n            await hilightFix.removeHilight(gsByKey);\n\n            // calculate after the above removeHilight call, since it also does a timestamp.\n            // NOTE if the two calls are too fast (same time) then we can add optional param to\n            //      not stamp when removing, or pass in this stamp.\n            // mark and save this highlight session\n            const thisHighlight = Date.now();\n            this.detailsStore.lastHilight = thisHighlight;\n\n            const graphics: Array<Graphic> = await this.getHilightGraphics(hItems, layerUid);\n\n            if (this.detailsStore.lastHilight === thisHighlight) {\n                // our request on this thread is still the most recent one. begin to add graphics to highlighter\n                await hilightFix.addHilight(graphics);\n\n                // while unlikely, given everything is async its possible that a delete request completes before\n                // the graphics could be added to the hilight layer.\n                // so check one again. If we're now stale, remove the hilight.\n                if (this.detailsStore.lastHilight !== thisHighlight) {\n                    // hilight removal will gracefully exit if something else already deleted any of these graphics.\n                    hilightFix.removeHilight(graphics);\n                }\n            }\n        }\n    }\n\n    /**\n     * Remove all details panel map hilights.\n     */\n    async removeDetailsHilight() {\n        const hilightFix: HilightAPI = this.$iApi.fixture.get('hilight');\n        if (hilightFix) {\n            // mark that we are removing. any in-progress highlights will\n            // see this new timestamp and know they are stale once finished.\n            this.detailsStore.lastHilight = Date.now();\n            const gsByKey = await hilightFix.getGraphicsByKey(ORIGIN_DETAILS);\n            await hilightFix.removeHilight(gsByKey);\n        }\n    }\n\n    /**\n     * Reload map elements of the hilighter for a set of identify items.\n     *\n     * @param {IdentifyItem | Array<IdentifyItem>} items items to reload\n     * @param {string} layerUid uid of layer the items belong to\n     */\n    async reloadDetailsHilight(items: IdentifyItem | Array<IdentifyItem>, layerUid: string) {\n        // DEV NOTE: this call is not being used anymore. But since part of public API, remains\n        //           for respectful compatibility\n\n        // TODO this method doesn't use the lastHilight flag, so in theory if a stale\n        //      batch of identify items is passed, they will end up drawing.\n        //      Might be easier to depreciate this method? Breaks API but\n        //      the method is really just a shortcut to remove + add, without the\n        //      smarter code of those methods.\n        //      Alternate, replace all the guts with\n        //        await removeDetailsHilight\n        //        await hilightDetailsItems(items, layerUid)\n        //      but that technically changes the method behavior\n\n        // hilight all provided identify items for this layer\n        const hItems = items instanceof Array ? items : [items];\n        const hilightFix: HilightAPI = this.$iApi.fixture.get('hilight');\n        if (hilightFix) {\n            const graphics: Array<Graphic> = await this.getHilightGraphics(hItems, layerUid);\n            hilightFix.reloadHilight(graphics);\n        }\n    }\n\n    /**\n     * Return the graphics of the given IdentifyItems once the items have loaded.\n     * @param {Array<IdentifyItem>} items identify items to hilight. Items should be of ESRI format\n     * @param layerUid uid of layer the items belong to\n     * @returns {Promise<Array<Graphic>>} resolves with array of graphics\n     */\n    async getHilightGraphics(items: Array<IdentifyItem>, layerUid: string): Promise<Array<Graphic>> {\n        const layer: LayerInstance = this.$iApi.geo.layer.getLayer(layerUid)!;\n        const hilightFix: HilightAPI = this.$iApi.fixture.get('hilight');\n        const gs: Array<Graphic> = [];\n        if (layer) {\n            // get all the identified Graphics\n            await Promise.all(\n                items.map(async item => {\n                    // ensure item finishes loading\n                    await item.loading;\n\n                    const oid = item.data[layer.oidField];\n                    const g = await layer.getGraphic(oid, {\n                        getGeom: true,\n                        getAttribs: true,\n                        getStyle: true\n                    });\n                    g.id = hilightFix.constructGraphicKey(ORIGIN_DETAILS, layerUid, oid);\n                    gs.push(g);\n                })\n            );\n        }\n        return gs;\n    }\n\n    /**\n     * Updates hilighted graphics when the hilight toggler is toggled.\n     *\n     * @param {boolean} hilightOn Whether the toggler has been turned on/off\n     * @param {IdentifyItem | Array<IdentifyItem>} items The identify items to highlight. Only required if turning on\n     * @param {string} layerUid the layer UID that owns the items. Only required if turning on\n     */\n    onHilightToggle(hilightOn: boolean, items?: IdentifyItem | Array<IdentifyItem>, layerUid?: string) {\n        // DEV NOTE: this call is not being used anymore. But since part of public API, remains\n        //           for respectful compatibility\n\n        this.detailsStore.hilightToggle = hilightOn;\n\n        if (hilightOn && items && layerUid) {\n            // hilight got turned on, and valid params provided\n            this.hilightDetailsItems(items, layerUid);\n        } else if (!hilightOn) {\n            // hilight got turned off\n            this.removeDetailsHilight();\n        }\n    }\n\n    /**\n     * Return whether or not a HilightMode has been defined (other than NONE)\n     */\n    hasHilighter(): boolean {\n        const hilightFix: HilightAPI = this.$iApi.fixture.get('hilight');\n        return hilightFix && hilightFix.hilightMode.mode !== HilightMode.NONE;\n    }\n}\n","export default \"key,enValue,enValid,frValue,frValid\\ndetails.layers.title.identifyOrigin,Identify Details,1,Identifier les détails,0\\ndetails.layers.title.gridOrigin,Details,1,Détails,1\\ndetails.layers.found,Found {numResults} results in {numLayers} layers,1,{numResults} résultats trouvés dans {numLayers} couches,1\\ndetails.layers.loading,The layer is loading...,1,La couche est en cours de chargement...,1\\ndetails.layers.error,Error,1,Erreur,1\\ndetails.layers.results.empty,No results found for any layer.,1,Aucun résultat trouvé pour aucune couche.,0\\ndetails.layers.results.empty.currentLayer,No results found for the selected layer.,1,Aucun résultat trouvé pour la couche sélectionnée.,1\\ndetails.layers.results.empty.noLayers,No layers for identification.,1,Pas de couches pour l'identification.,0\\ndetails.layers.results.list.tooltip,Use the arrow keys to navigate the items,1,Utilisez les touches fléchées pour naviguer entre les éléments,0\\ndetails.result.default.name,Identify Item {0},1,Désigner l'élément {0},1\\ndetails.loading,Loading...,1,Chargement en cours...,1\\ndetails.items.title,Details,1,Détails,1\\ndetails.items.range,{0} - {1} of {2},1,{0} - {1} de {2},0\\ndetails.items.next,Next page,1,Page suivante,0\\ndetails.items.previous,Previous page,1,Page précédente,0\\ndetails.items.page,Items per page,1,éléments par page,0\\ndetails.item.see.list,See List,1,Voir la liste,1\\ndetails.item.zoom,Zoom to feature,1,Zoom à l'élément,1\\ndetails.item.zoom.zooming,Zooming...,1,Zoom en cours...,1\\ndetails.item.zoom.error,Zoom failed,1,Échec du zoom,1\\ndetails.item.zoom.zoomed,Zoomed,1,Zoom terminé,1\\ndetails.item.previous.item,Previous item,1,Élément précédent,1\\ndetails.item.next.item,Next item,1,Élément suivant,1\\ndetails.item.count,{0} of {1},1,{0} de {1},1\\ndetails.item.loading,Loading results...,1,Chargement des résultats...,1\\ndetails.item.no.data,No data to show because the layer has been removed,1,Aucune donnée à afficher, car la couche a été supprimée,1\\ndetails.item.alert.zoom,Zoomed into feature,1,Zoom sur la caractéristique,1\\ndetails.item.alert.show.item,Showing result {itemName},1,Affichage du résultat {itemName},1\\ndetails.item.alert.show.list,Showing all results for {layerName},1,Affichage de tous les résultats pour {layerName},1\\ndetails.item.alert.defaultAltText,Image associated with {alias} field,1,Image associée au champ {alias},1\\ndetails.togglehilight.title,Toggle Highlight,1,Basculer vers l'élément principal,1\\ndetails.item.open,Expand,1,Développer,1\\ndetails.item.collapse,Collapse,1,Réduire,1\"","import { DetailsAPI } from './api/details';\nimport { type DetailsConfig, useDetailsStore } from './store';\nimport messages from './lang/lang.csv?raw';\n\nimport { markRaw } from 'vue';\nimport { useAppbarStore } from '../appbar/store';\n\nclass DetailsFixture extends DetailsAPI {\n    async added() {\n        this.$iApi.panel.register(\n            {\n                details: {\n                    screens: {\n                        'details-screen': () => markRaw(import('./details-screen.vue'))\n                    },\n                    style: {\n                        width: '425px'\n                    },\n                    button: {\n                        tooltip: 'details.layers.title.identifyOrigin',\n                        // https://fonts.google.com/icons?selected=Material%20Icons%3Aarticle%3A\n                        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0z\" fill=\"none\" /><path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm-5 14H7v-2h7v2zm3-4H7v-2h10v2zm0-4H7V7h10v2z\" /></svg>'\n                    },\n                    alertName: 'details.items.title'\n                }\n            },\n            { i18n: { messages } }\n        );\n\n        // Parse the details portion of the configuration file and save any custom\n        // template bindings in the details store.\n        this._parseConfig(this.config);\n        const unwatch = this.$vApp.$watch(\n            () => this.config,\n            (value: DetailsConfig | undefined) => this._parseConfig(value)\n        );\n\n        // override the removed method here to get access to scope\n        this.removed = () => {\n            // console.log(`[fixture] ${this.id} removed`);\n            unwatch();\n\n            this.$iApi.panel.remove('details');\n\n            if (this.$iApi.fixture.exists('appbar')) {\n                const appbarStore = useAppbarStore(this.$vApp.$pinia);\n                appbarStore.removeButton('details');\n            }\n\n            const detailsStore = useDetailsStore(this.$vApp.$pinia);\n            detailsStore.$reset();\n        };\n    }\n}\n\nexport default DetailsFixture;\n"],"names":["DetailsItemInstance","value","params","ORIGIN_DETAILS","DetailsAPI","FixtureInstance","useDetailsStore","payload","p","panel","featureData","open","layer","currFeatureId","fakeResult","ReactiveIdentifyFactory","config","layerDetailsConfigs","detailsConfigItems","layerId","detailsItems","item","map","thisLayerConfig","items","layerUid","hItems","hilightFix","gsByKey","thisHighlight","graphics","gs","oid","g","hilightOn","HilightMode","messages","DetailsFixture","markRaw","unwatch","useAppbarStore"],"mappings":"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"}