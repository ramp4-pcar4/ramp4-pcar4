import{I as y,a0 as S,bP as f,U as c,aw as l,bT as o,bS as g,a5 as R,gy as m,bq as p,bx as b}from"./main-DCIX61zy.js";function q(n){const t=n.geometry,i=n.toJSON(),e=i;let a,r,s;return t!=null&&(r=t.spatialReference,s=o(r),e.geometryType=g(t),e.geometry=JSON.stringify(t),e.inSR=s),i.outSR?(e.outSR=o(i.outSR),a=n.outSpatialReference):t&&(e.outSR=e.inSR,a=r),e.bin&&=JSON.stringify(e.bin),e.quantizationParameters&&=JSON.stringify(e.quantizationParameters),e.outStatistics&&=JSON.stringify(e.outStatistics),e.outTimeReference&&=JSON.stringify(e.outTimeReference),n.defaultSpatialReference&&R(r,a)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function J(n,t,i){return N(n,t,i)}async function N(n,t,i={}){const e=typeof n=="string"?y(n):n,a=t.geometry?[t.geometry]:[],r=await S(a,null,{signal:i.signal}),s=r?.[0];s!=null&&((t=t.clone()).geometry=s);const u=f({...e.query,f:"json",...q(t)});return c(l(e.path,"queryBins"),{...i,query:{...u,...i.query}})}async function O(n,t,i){const{data:e}=await J(p(n),m.from(t),i);return b.fromJSON(e)}export{O as executeBinsQuery};
