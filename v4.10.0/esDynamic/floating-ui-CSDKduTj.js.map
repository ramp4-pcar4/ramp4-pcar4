{"version":3,"file":"floating-ui-CSDKduTj.js","sources":["../../node_modules/@esri/calcite-components/dist/components/floating-ui.js"],"sourcesContent":["/*!\n * All material copyright ESRI, All Rights Reserved, unless otherwise specified.\n * See https://github.com/Esri/calcite-design-system/blob/dev/LICENSE.md for details.\n * v2.13.2\n */\nimport { D as DEBOUNCE } from './resources.js';\nimport { a as getElementDir } from './dom.js';\nimport { i as isBrowser } from './browser.js';\nimport { d as debounce } from './debounce.js';\n\n/**\n * Custom positioning reference element.\n * @see https://floating-ui.com/docs/virtual-elements\n */\n\nconst sides = ['top', 'right', 'bottom', 'left'];\nconst alignments = ['start', 'end'];\nconst placements = /*#__PURE__*/sides.reduce((acc, side) => acc.concat(side, side + \"-\" + alignments[0], side + \"-\" + alignments[1]), []);\nconst min = Math.min;\nconst max = Math.max;\nconst round = Math.round;\nconst floor = Math.floor;\nconst createCoords = v => ({\n  x: v,\n  y: v\n});\nconst oppositeSideMap = {\n  left: 'right',\n  right: 'left',\n  bottom: 'top',\n  top: 'bottom'\n};\nconst oppositeAlignmentMap = {\n  start: 'end',\n  end: 'start'\n};\nfunction clamp(start, value, end) {\n  return max(start, min(value, end));\n}\nfunction evaluate(value, param) {\n  return typeof value === 'function' ? value(param) : value;\n}\nfunction getSide(placement) {\n  return placement.split('-')[0];\n}\nfunction getAlignment(placement) {\n  return placement.split('-')[1];\n}\nfunction getOppositeAxis(axis) {\n  return axis === 'x' ? 'y' : 'x';\n}\nfunction getAxisLength(axis) {\n  return axis === 'y' ? 'height' : 'width';\n}\nfunction getSideAxis(placement) {\n  return ['top', 'bottom'].includes(getSide(placement)) ? 'y' : 'x';\n}\nfunction getAlignmentAxis(placement) {\n  return getOppositeAxis(getSideAxis(placement));\n}\nfunction getAlignmentSides(placement, rects, rtl) {\n  if (rtl === void 0) {\n    rtl = false;\n  }\n  const alignment = getAlignment(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const length = getAxisLength(alignmentAxis);\n  let mainAlignmentSide = alignmentAxis === 'x' ? alignment === (rtl ? 'end' : 'start') ? 'right' : 'left' : alignment === 'start' ? 'bottom' : 'top';\n  if (rects.reference[length] > rects.floating[length]) {\n    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);\n  }\n  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];\n}\nfunction getExpandedPlacements(placement) {\n  const oppositePlacement = getOppositePlacement(placement);\n  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];\n}\nfunction getOppositeAlignmentPlacement(placement) {\n  return placement.replace(/start|end/g, alignment => oppositeAlignmentMap[alignment]);\n}\nfunction getSideList(side, isStart, rtl) {\n  const lr = ['left', 'right'];\n  const rl = ['right', 'left'];\n  const tb = ['top', 'bottom'];\n  const bt = ['bottom', 'top'];\n  switch (side) {\n    case 'top':\n    case 'bottom':\n      if (rtl) return isStart ? rl : lr;\n      return isStart ? lr : rl;\n    case 'left':\n    case 'right':\n      return isStart ? tb : bt;\n    default:\n      return [];\n  }\n}\nfunction getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {\n  const alignment = getAlignment(placement);\n  let list = getSideList(getSide(placement), direction === 'start', rtl);\n  if (alignment) {\n    list = list.map(side => side + \"-\" + alignment);\n    if (flipAlignment) {\n      list = list.concat(list.map(getOppositeAlignmentPlacement));\n    }\n  }\n  return list;\n}\nfunction getOppositePlacement(placement) {\n  return placement.replace(/left|right|bottom|top/g, side => oppositeSideMap[side]);\n}\nfunction expandPaddingObject(padding) {\n  return {\n    top: 0,\n    right: 0,\n    bottom: 0,\n    left: 0,\n    ...padding\n  };\n}\nfunction getPaddingObject(padding) {\n  return typeof padding !== 'number' ? expandPaddingObject(padding) : {\n    top: padding,\n    right: padding,\n    bottom: padding,\n    left: padding\n  };\n}\nfunction rectToClientRect(rect) {\n  const {\n    x,\n    y,\n    width,\n    height\n  } = rect;\n  return {\n    width,\n    height,\n    top: y,\n    left: x,\n    right: x + width,\n    bottom: y + height,\n    x,\n    y\n  };\n}\n\nfunction computeCoordsFromPlacement(_ref, placement, rtl) {\n  let {\n    reference,\n    floating\n  } = _ref;\n  const sideAxis = getSideAxis(placement);\n  const alignmentAxis = getAlignmentAxis(placement);\n  const alignLength = getAxisLength(alignmentAxis);\n  const side = getSide(placement);\n  const isVertical = sideAxis === 'y';\n  const commonX = reference.x + reference.width / 2 - floating.width / 2;\n  const commonY = reference.y + reference.height / 2 - floating.height / 2;\n  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;\n  let coords;\n  switch (side) {\n    case 'top':\n      coords = {\n        x: commonX,\n        y: reference.y - floating.height\n      };\n      break;\n    case 'bottom':\n      coords = {\n        x: commonX,\n        y: reference.y + reference.height\n      };\n      break;\n    case 'right':\n      coords = {\n        x: reference.x + reference.width,\n        y: commonY\n      };\n      break;\n    case 'left':\n      coords = {\n        x: reference.x - floating.width,\n        y: commonY\n      };\n      break;\n    default:\n      coords = {\n        x: reference.x,\n        y: reference.y\n      };\n  }\n  switch (getAlignment(placement)) {\n    case 'start':\n      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n    case 'end':\n      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);\n      break;\n  }\n  return coords;\n}\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n *\n * This export does not have any `platform` interface logic. You will need to\n * write one for the platform you are using Floating UI with.\n */\nconst computePosition$1 = async (reference, floating, config) => {\n  const {\n    placement = 'bottom',\n    strategy = 'absolute',\n    middleware = [],\n    platform\n  } = config;\n  const validMiddleware = middleware.filter(Boolean);\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(floating));\n  let rects = await platform.getElementRects({\n    reference,\n    floating,\n    strategy\n  });\n  let {\n    x,\n    y\n  } = computeCoordsFromPlacement(rects, placement, rtl);\n  let statefulPlacement = placement;\n  let middlewareData = {};\n  let resetCount = 0;\n  for (let i = 0; i < validMiddleware.length; i++) {\n    const {\n      name,\n      fn\n    } = validMiddleware[i];\n    const {\n      x: nextX,\n      y: nextY,\n      data,\n      reset\n    } = await fn({\n      x,\n      y,\n      initialPlacement: placement,\n      placement: statefulPlacement,\n      strategy,\n      middlewareData,\n      rects,\n      platform,\n      elements: {\n        reference,\n        floating\n      }\n    });\n    x = nextX != null ? nextX : x;\n    y = nextY != null ? nextY : y;\n    middlewareData = {\n      ...middlewareData,\n      [name]: {\n        ...middlewareData[name],\n        ...data\n      }\n    };\n    if (reset && resetCount <= 50) {\n      resetCount++;\n      if (typeof reset === 'object') {\n        if (reset.placement) {\n          statefulPlacement = reset.placement;\n        }\n        if (reset.rects) {\n          rects = reset.rects === true ? await platform.getElementRects({\n            reference,\n            floating,\n            strategy\n          }) : reset.rects;\n        }\n        ({\n          x,\n          y\n        } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));\n      }\n      i = -1;\n    }\n  }\n  return {\n    x,\n    y,\n    placement: statefulPlacement,\n    strategy,\n    middlewareData\n  };\n};\n\n/**\n * Resolves with an object of overflow side offsets that determine how much the\n * element is overflowing a given clipping boundary on each side.\n * - positive = overflowing the boundary by that number of pixels\n * - negative = how many pixels left before it will overflow\n * - 0 = lies flush with the boundary\n * @see https://floating-ui.com/docs/detectOverflow\n */\nasync function detectOverflow(state, options) {\n  var _await$platform$isEle;\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    x,\n    y,\n    platform,\n    rects,\n    elements,\n    strategy\n  } = state;\n  const {\n    boundary = 'clippingAncestors',\n    rootBoundary = 'viewport',\n    elementContext = 'floating',\n    altBoundary = false,\n    padding = 0\n  } = evaluate(options, state);\n  const paddingObject = getPaddingObject(padding);\n  const altContext = elementContext === 'floating' ? 'reference' : 'floating';\n  const element = elements[altBoundary ? altContext : elementContext];\n  const clippingClientRect = rectToClientRect(await platform.getClippingRect({\n    element: ((_await$platform$isEle = await (platform.isElement == null ? void 0 : platform.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || (await (platform.getDocumentElement == null ? void 0 : platform.getDocumentElement(elements.floating))),\n    boundary,\n    rootBoundary,\n    strategy\n  }));\n  const rect = elementContext === 'floating' ? {\n    x,\n    y,\n    width: rects.floating.width,\n    height: rects.floating.height\n  } : rects.reference;\n  const offsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(elements.floating));\n  const offsetScale = (await (platform.isElement == null ? void 0 : platform.isElement(offsetParent))) ? (await (platform.getScale == null ? void 0 : platform.getScale(offsetParent))) || {\n    x: 1,\n    y: 1\n  } : {\n    x: 1,\n    y: 1\n  };\n  const elementClientRect = rectToClientRect(platform.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform.convertOffsetParentRelativeRectToViewportRelativeRect({\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  }) : rect);\n  return {\n    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,\n    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,\n    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,\n    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x\n  };\n}\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow$1 = options => ({\n  name: 'arrow',\n  options,\n  async fn(state) {\n    const {\n      x,\n      y,\n      placement,\n      rects,\n      platform,\n      elements,\n      middlewareData\n    } = state;\n    // Since `element` is required, we don't Partial<> the type.\n    const {\n      element,\n      padding = 0\n    } = evaluate(options, state) || {};\n    if (element == null) {\n      return {};\n    }\n    const paddingObject = getPaddingObject(padding);\n    const coords = {\n      x,\n      y\n    };\n    const axis = getAlignmentAxis(placement);\n    const length = getAxisLength(axis);\n    const arrowDimensions = await platform.getDimensions(element);\n    const isYAxis = axis === 'y';\n    const minProp = isYAxis ? 'top' : 'left';\n    const maxProp = isYAxis ? 'bottom' : 'right';\n    const clientProp = isYAxis ? 'clientHeight' : 'clientWidth';\n    const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];\n    const startDiff = coords[axis] - rects.reference[axis];\n    const arrowOffsetParent = await (platform.getOffsetParent == null ? void 0 : platform.getOffsetParent(element));\n    let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;\n\n    // DOM platform can return `window` as the `offsetParent`.\n    if (!clientSize || !(await (platform.isElement == null ? void 0 : platform.isElement(arrowOffsetParent)))) {\n      clientSize = elements.floating[clientProp] || rects.floating[length];\n    }\n    const centerToReference = endDiff / 2 - startDiff / 2;\n\n    // If the padding is large enough that it causes the arrow to no longer be\n    // centered, modify the padding so that it is centered.\n    const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;\n    const minPadding = min(paddingObject[minProp], largestPossiblePadding);\n    const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);\n\n    // Make sure the arrow doesn't overflow the floating element if the center\n    // point is outside the floating element's bounds.\n    const min$1 = minPadding;\n    const max = clientSize - arrowDimensions[length] - maxPadding;\n    const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;\n    const offset = clamp(min$1, center, max);\n\n    // If the reference is small enough that the arrow's padding causes it to\n    // to point to nothing for an aligned placement, adjust the offset of the\n    // floating element itself. To ensure `shift()` continues to take action,\n    // a single reset is performed when this is true.\n    const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;\n    const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max : 0;\n    return {\n      [axis]: coords[axis] + alignmentOffset,\n      data: {\n        [axis]: offset,\n        centerOffset: center - offset - alignmentOffset,\n        ...(shouldAddOffset && {\n          alignmentOffset\n        })\n      },\n      reset: shouldAddOffset\n    };\n  }\n});\n\nfunction getPlacementList(alignment, autoAlignment, allowedPlacements) {\n  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter(placement => getAlignment(placement) === alignment), ...allowedPlacements.filter(placement => getAlignment(placement) !== alignment)] : allowedPlacements.filter(placement => getSide(placement) === placement);\n  return allowedPlacementsSortedByAlignment.filter(placement => {\n    if (alignment) {\n      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);\n    }\n    return true;\n  });\n}\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement$1 = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'autoPlacement',\n    options,\n    async fn(state) {\n      var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;\n      const {\n        rects,\n        middlewareData,\n        placement,\n        platform,\n        elements\n      } = state;\n      const {\n        crossAxis = false,\n        alignment,\n        allowedPlacements = placements,\n        autoAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const placements$1 = alignment !== undefined || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;\n      const currentPlacement = placements$1[currentIndex];\n      if (currentPlacement == null) {\n        return {};\n      }\n      const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating)));\n\n      // Make `computeCoords` start from the right place.\n      if (placement !== currentPlacement) {\n        return {\n          reset: {\n            placement: placements$1[0]\n          }\n        };\n      }\n      const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];\n      const allOverflows = [...(((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || []), {\n        placement: currentPlacement,\n        overflows: currentOverflows\n      }];\n      const nextPlacement = placements$1[currentIndex + 1];\n\n      // There are more placements to check.\n      if (nextPlacement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: nextPlacement\n          }\n        };\n      }\n      const placementsSortedByMostSpace = allOverflows.map(d => {\n        const alignment = getAlignment(d.placement);\n        return [d.placement, alignment && crossAxis ?\n        // Check along the mainAxis and main crossAxis side.\n        d.overflows.slice(0, 2).reduce((acc, v) => acc + v, 0) :\n        // Check only the mainAxis.\n        d.overflows[0], d.overflows];\n      }).sort((a, b) => a[1] - b[1]);\n      const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter(d => d[2].slice(0,\n      // Aligned placements should not check their opposite crossAxis\n      // side.\n      getAlignment(d[0]) ? 2 : 3).every(v => v <= 0));\n      const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];\n      if (resetPlacement !== placement) {\n        return {\n          data: {\n            index: currentIndex + 1,\n            overflows: allOverflows\n          },\n          reset: {\n            placement: resetPlacement\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip$1 = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'flip',\n    options,\n    async fn(state) {\n      var _middlewareData$arrow, _middlewareData$flip;\n      const {\n        placement,\n        middlewareData,\n        rects,\n        initialPlacement,\n        platform,\n        elements\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true,\n        fallbackPlacements: specifiedFallbackPlacements,\n        fallbackStrategy = 'bestFit',\n        fallbackAxisSideDirection = 'none',\n        flipAlignment = true,\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n\n      // If a reset by the arrow was caused due to an alignment offset being\n      // added, we should skip any logic now since `flip()` has already done its\n      // work.\n      // https://github.com/floating-ui/floating-ui/issues/2549#issuecomment-1719601643\n      if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      const side = getSide(placement);\n      const isBasePlacement = getSide(initialPlacement) === initialPlacement;\n      const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n      const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));\n      if (!specifiedFallbackPlacements && fallbackAxisSideDirection !== 'none') {\n        fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));\n      }\n      const placements = [initialPlacement, ...fallbackPlacements];\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const overflows = [];\n      let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];\n      if (checkMainAxis) {\n        overflows.push(overflow[side]);\n      }\n      if (checkCrossAxis) {\n        const sides = getAlignmentSides(placement, rects, rtl);\n        overflows.push(overflow[sides[0]], overflow[sides[1]]);\n      }\n      overflowsData = [...overflowsData, {\n        placement,\n        overflows\n      }];\n\n      // One or more sides is overflowing.\n      if (!overflows.every(side => side <= 0)) {\n        var _middlewareData$flip2, _overflowsData$filter;\n        const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;\n        const nextPlacement = placements[nextIndex];\n        if (nextPlacement) {\n          // Try next placement and re-run the lifecycle.\n          return {\n            data: {\n              index: nextIndex,\n              overflows: overflowsData\n            },\n            reset: {\n              placement: nextPlacement\n            }\n          };\n        }\n\n        // First, find the candidates that fit on the mainAxis side of overflow,\n        // then find the placement that fits the best on the main crossAxis side.\n        let resetPlacement = (_overflowsData$filter = overflowsData.filter(d => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;\n\n        // Otherwise fallback.\n        if (!resetPlacement) {\n          switch (fallbackStrategy) {\n            case 'bestFit':\n              {\n                var _overflowsData$map$so;\n                const placement = (_overflowsData$map$so = overflowsData.map(d => [d.placement, d.overflows.filter(overflow => overflow > 0).reduce((acc, overflow) => acc + overflow, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$map$so[0];\n                if (placement) {\n                  resetPlacement = placement;\n                }\n                break;\n              }\n            case 'initialPlacement':\n              resetPlacement = initialPlacement;\n              break;\n          }\n        }\n        if (placement !== resetPlacement) {\n          return {\n            reset: {\n              placement: resetPlacement\n            }\n          };\n        }\n      }\n      return {};\n    }\n  };\n};\n\nfunction getSideOffsets(overflow, rect) {\n  return {\n    top: overflow.top - rect.height,\n    right: overflow.right - rect.width,\n    bottom: overflow.bottom - rect.height,\n    left: overflow.left - rect.width\n  };\n}\nfunction isAnySideFullyClipped(overflow) {\n  return sides.some(side => overflow[side] >= 0);\n}\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide$1 = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'hide',\n    options,\n    async fn(state) {\n      const {\n        rects\n      } = state;\n      const {\n        strategy = 'referenceHidden',\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      switch (strategy) {\n        case 'referenceHidden':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              elementContext: 'reference'\n            });\n            const offsets = getSideOffsets(overflow, rects.reference);\n            return {\n              data: {\n                referenceHiddenOffsets: offsets,\n                referenceHidden: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        case 'escaped':\n          {\n            const overflow = await detectOverflow(state, {\n              ...detectOverflowOptions,\n              altBoundary: true\n            });\n            const offsets = getSideOffsets(overflow, rects.floating);\n            return {\n              data: {\n                escapedOffsets: offsets,\n                escaped: isAnySideFullyClipped(offsets)\n              }\n            };\n          }\n        default:\n          {\n            return {};\n          }\n      }\n    }\n  };\n};\n\nfunction getBoundingRect(rects) {\n  const minX = min(...rects.map(rect => rect.left));\n  const minY = min(...rects.map(rect => rect.top));\n  const maxX = max(...rects.map(rect => rect.right));\n  const maxY = max(...rects.map(rect => rect.bottom));\n  return {\n    x: minX,\n    y: minY,\n    width: maxX - minX,\n    height: maxY - minY\n  };\n}\nfunction getRectsByLine(rects) {\n  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);\n  const groups = [];\n  let prevRect = null;\n  for (let i = 0; i < sortedRects.length; i++) {\n    const rect = sortedRects[i];\n    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {\n      groups.push([rect]);\n    } else {\n      groups[groups.length - 1].push(rect);\n    }\n    prevRect = rect;\n  }\n  return groups.map(rect => rectToClientRect(getBoundingRect(rect)));\n}\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\nconst inline = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'inline',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        elements,\n        rects,\n        platform,\n        strategy\n      } = state;\n      // A MouseEvent's client{X,Y} coords can be up to 2 pixels off a\n      // ClientRect's bounds, despite the event listener being triggered. A\n      // padding of 2 seems to handle this issue.\n      const {\n        padding = 2,\n        x,\n        y\n      } = evaluate(options, state);\n      const nativeClientRects = Array.from((await (platform.getClientRects == null ? void 0 : platform.getClientRects(elements.reference))) || []);\n      const clientRects = getRectsByLine(nativeClientRects);\n      const fallback = rectToClientRect(getBoundingRect(nativeClientRects));\n      const paddingObject = getPaddingObject(padding);\n      function getBoundingClientRect() {\n        // There are two rects and they are disjoined.\n        if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {\n          // Find the first rect in which the point is fully inside.\n          return clientRects.find(rect => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;\n        }\n\n        // There are 2 or more connected rects.\n        if (clientRects.length >= 2) {\n          if (getSideAxis(placement) === 'y') {\n            const firstRect = clientRects[0];\n            const lastRect = clientRects[clientRects.length - 1];\n            const isTop = getSide(placement) === 'top';\n            const top = firstRect.top;\n            const bottom = lastRect.bottom;\n            const left = isTop ? firstRect.left : lastRect.left;\n            const right = isTop ? firstRect.right : lastRect.right;\n            const width = right - left;\n            const height = bottom - top;\n            return {\n              top,\n              bottom,\n              left,\n              right,\n              width,\n              height,\n              x: left,\n              y: top\n            };\n          }\n          const isLeftSide = getSide(placement) === 'left';\n          const maxRight = max(...clientRects.map(rect => rect.right));\n          const minLeft = min(...clientRects.map(rect => rect.left));\n          const measureRects = clientRects.filter(rect => isLeftSide ? rect.left === minLeft : rect.right === maxRight);\n          const top = measureRects[0].top;\n          const bottom = measureRects[measureRects.length - 1].bottom;\n          const left = minLeft;\n          const right = maxRight;\n          const width = right - left;\n          const height = bottom - top;\n          return {\n            top,\n            bottom,\n            left,\n            right,\n            width,\n            height,\n            x: left,\n            y: top\n          };\n        }\n        return fallback;\n      }\n      const resetRects = await platform.getElementRects({\n        reference: {\n          getBoundingClientRect\n        },\n        floating: elements.floating,\n        strategy\n      });\n      if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {\n        return {\n          reset: {\n            rects: resetRects\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\n// For type backwards-compatibility, the `OffsetOptions` type was also\n// Derivable.\n\nasync function convertValueToCoords(state, options) {\n  const {\n    placement,\n    platform,\n    elements\n  } = state;\n  const rtl = await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating));\n  const side = getSide(placement);\n  const alignment = getAlignment(placement);\n  const isVertical = getSideAxis(placement) === 'y';\n  const mainAxisMulti = ['left', 'top'].includes(side) ? -1 : 1;\n  const crossAxisMulti = rtl && isVertical ? -1 : 1;\n  const rawValue = evaluate(options, state);\n\n  // eslint-disable-next-line prefer-const\n  let {\n    mainAxis,\n    crossAxis,\n    alignmentAxis\n  } = typeof rawValue === 'number' ? {\n    mainAxis: rawValue,\n    crossAxis: 0,\n    alignmentAxis: null\n  } : {\n    mainAxis: 0,\n    crossAxis: 0,\n    alignmentAxis: null,\n    ...rawValue\n  };\n  if (alignment && typeof alignmentAxis === 'number') {\n    crossAxis = alignment === 'end' ? alignmentAxis * -1 : alignmentAxis;\n  }\n  return isVertical ? {\n    x: crossAxis * crossAxisMulti,\n    y: mainAxis * mainAxisMulti\n  } : {\n    x: mainAxis * mainAxisMulti,\n    y: crossAxis * crossAxisMulti\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset$1 = function (options) {\n  if (options === void 0) {\n    options = 0;\n  }\n  return {\n    name: 'offset',\n    options,\n    async fn(state) {\n      var _middlewareData$offse, _middlewareData$arrow;\n      const {\n        x,\n        y,\n        placement,\n        middlewareData\n      } = state;\n      const diffCoords = await convertValueToCoords(state, options);\n\n      // If the placement is the same and the arrow caused an alignment offset\n      // then we don't need to change the positioning coordinates.\n      if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {\n        return {};\n      }\n      return {\n        x: x + diffCoords.x,\n        y: y + diffCoords.y,\n        data: {\n          ...diffCoords,\n          placement\n        }\n      };\n    }\n  };\n};\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift$1 = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'shift',\n    options,\n    async fn(state) {\n      const {\n        x,\n        y,\n        placement\n      } = state;\n      const {\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = false,\n        limiter = {\n          fn: _ref => {\n            let {\n              x,\n              y\n            } = _ref;\n            return {\n              x,\n              y\n            };\n          }\n        },\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const crossAxis = getSideAxis(getSide(placement));\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      if (checkMainAxis) {\n        const minSide = mainAxis === 'y' ? 'top' : 'left';\n        const maxSide = mainAxis === 'y' ? 'bottom' : 'right';\n        const min = mainAxisCoord + overflow[minSide];\n        const max = mainAxisCoord - overflow[maxSide];\n        mainAxisCoord = clamp(min, mainAxisCoord, max);\n      }\n      if (checkCrossAxis) {\n        const minSide = crossAxis === 'y' ? 'top' : 'left';\n        const maxSide = crossAxis === 'y' ? 'bottom' : 'right';\n        const min = crossAxisCoord + overflow[minSide];\n        const max = crossAxisCoord - overflow[maxSide];\n        crossAxisCoord = clamp(min, crossAxisCoord, max);\n      }\n      const limitedCoords = limiter.fn({\n        ...state,\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      });\n      return {\n        ...limitedCoords,\n        data: {\n          x: limitedCoords.x - x,\n          y: limitedCoords.y - y\n        }\n      };\n    }\n  };\n};\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nconst limitShift = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    options,\n    fn(state) {\n      const {\n        x,\n        y,\n        placement,\n        rects,\n        middlewareData\n      } = state;\n      const {\n        offset = 0,\n        mainAxis: checkMainAxis = true,\n        crossAxis: checkCrossAxis = true\n      } = evaluate(options, state);\n      const coords = {\n        x,\n        y\n      };\n      const crossAxis = getSideAxis(placement);\n      const mainAxis = getOppositeAxis(crossAxis);\n      let mainAxisCoord = coords[mainAxis];\n      let crossAxisCoord = coords[crossAxis];\n      const rawOffset = evaluate(offset, state);\n      const computedOffset = typeof rawOffset === 'number' ? {\n        mainAxis: rawOffset,\n        crossAxis: 0\n      } : {\n        mainAxis: 0,\n        crossAxis: 0,\n        ...rawOffset\n      };\n      if (checkMainAxis) {\n        const len = mainAxis === 'y' ? 'height' : 'width';\n        const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;\n        const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;\n        if (mainAxisCoord < limitMin) {\n          mainAxisCoord = limitMin;\n        } else if (mainAxisCoord > limitMax) {\n          mainAxisCoord = limitMax;\n        }\n      }\n      if (checkCrossAxis) {\n        var _middlewareData$offse, _middlewareData$offse2;\n        const len = mainAxis === 'y' ? 'width' : 'height';\n        const isOriginSide = ['top', 'left'].includes(getSide(placement));\n        const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);\n        const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);\n        if (crossAxisCoord < limitMin) {\n          crossAxisCoord = limitMin;\n        } else if (crossAxisCoord > limitMax) {\n          crossAxisCoord = limitMax;\n        }\n      }\n      return {\n        [mainAxis]: mainAxisCoord,\n        [crossAxis]: crossAxisCoord\n      };\n    }\n  };\n};\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nconst size = function (options) {\n  if (options === void 0) {\n    options = {};\n  }\n  return {\n    name: 'size',\n    options,\n    async fn(state) {\n      const {\n        placement,\n        rects,\n        platform,\n        elements\n      } = state;\n      const {\n        apply = () => {},\n        ...detectOverflowOptions\n      } = evaluate(options, state);\n      const overflow = await detectOverflow(state, detectOverflowOptions);\n      const side = getSide(placement);\n      const alignment = getAlignment(placement);\n      const isYAxis = getSideAxis(placement) === 'y';\n      const {\n        width,\n        height\n      } = rects.floating;\n      let heightSide;\n      let widthSide;\n      if (side === 'top' || side === 'bottom') {\n        heightSide = side;\n        widthSide = alignment === ((await (platform.isRTL == null ? void 0 : platform.isRTL(elements.floating))) ? 'start' : 'end') ? 'left' : 'right';\n      } else {\n        widthSide = side;\n        heightSide = alignment === 'end' ? 'top' : 'bottom';\n      }\n      const maximumClippingHeight = height - overflow.top - overflow.bottom;\n      const maximumClippingWidth = width - overflow.left - overflow.right;\n      const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);\n      const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);\n      const noShift = !state.middlewareData.shift;\n      let availableHeight = overflowAvailableHeight;\n      let availableWidth = overflowAvailableWidth;\n      if (isYAxis) {\n        availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;\n      } else {\n        availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;\n      }\n      if (noShift && !alignment) {\n        const xMin = max(overflow.left, 0);\n        const xMax = max(overflow.right, 0);\n        const yMin = max(overflow.top, 0);\n        const yMax = max(overflow.bottom, 0);\n        if (isYAxis) {\n          availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));\n        } else {\n          availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));\n        }\n      }\n      await apply({\n        ...state,\n        availableWidth,\n        availableHeight\n      });\n      const nextDimensions = await platform.getDimensions(elements.floating);\n      if (width !== nextDimensions.width || height !== nextDimensions.height) {\n        return {\n          reset: {\n            rects: true\n          }\n        };\n      }\n      return {};\n    }\n  };\n};\n\nfunction hasWindow() {\n  return typeof window !== 'undefined';\n}\nfunction getNodeName(node) {\n  if (isNode(node)) {\n    return (node.nodeName || '').toLowerCase();\n  }\n  // Mocked nodes in testing environments may not be instances of Node. By\n  // returning `#document` an infinite loop won't occur.\n  // https://github.com/floating-ui/floating-ui/issues/2317\n  return '#document';\n}\nfunction getWindow(node) {\n  var _node$ownerDocument;\n  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;\n}\nfunction getDocumentElement(node) {\n  var _ref;\n  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;\n}\nfunction isNode(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Node || value instanceof getWindow(value).Node;\n}\nfunction isElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof Element || value instanceof getWindow(value).Element;\n}\nfunction isHTMLElement(value) {\n  if (!hasWindow()) {\n    return false;\n  }\n  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;\n}\nfunction isShadowRoot(value) {\n  if (!hasWindow() || typeof ShadowRoot === 'undefined') {\n    return false;\n  }\n  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;\n}\nfunction isOverflowElement(element) {\n  const {\n    overflow,\n    overflowX,\n    overflowY,\n    display\n  } = getComputedStyle$1(element);\n  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !['inline', 'contents'].includes(display);\n}\nfunction isTableElement(element) {\n  return ['table', 'td', 'th'].includes(getNodeName(element));\n}\nfunction isTopLayer(element) {\n  return [':popover-open', ':modal'].some(selector => {\n    try {\n      return element.matches(selector);\n    } catch (e) {\n      return false;\n    }\n  });\n}\nfunction isContainingBlock(elementOrCss) {\n  const webkit = isWebKit();\n  const css = isElement(elementOrCss) ? getComputedStyle$1(elementOrCss) : elementOrCss;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  return css.transform !== 'none' || css.perspective !== 'none' || (css.containerType ? css.containerType !== 'normal' : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== 'none' : false) || !webkit && (css.filter ? css.filter !== 'none' : false) || ['transform', 'perspective', 'filter'].some(value => (css.willChange || '').includes(value)) || ['paint', 'layout', 'strict', 'content'].some(value => (css.contain || '').includes(value));\n}\nfunction getContainingBlock(element) {\n  let currentNode = getParentNode(element);\n  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    if (isContainingBlock(currentNode)) {\n      return currentNode;\n    } else if (isTopLayer(currentNode)) {\n      return null;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  return null;\n}\nfunction isWebKit() {\n  if (typeof CSS === 'undefined' || !CSS.supports) return false;\n  return CSS.supports('-webkit-backdrop-filter', 'none');\n}\nfunction isLastTraversableNode(node) {\n  return ['html', 'body', '#document'].includes(getNodeName(node));\n}\nfunction getComputedStyle$1(element) {\n  return getWindow(element).getComputedStyle(element);\n}\nfunction getNodeScroll(element) {\n  if (isElement(element)) {\n    return {\n      scrollLeft: element.scrollLeft,\n      scrollTop: element.scrollTop\n    };\n  }\n  return {\n    scrollLeft: element.scrollX,\n    scrollTop: element.scrollY\n  };\n}\nfunction getParentNode(node) {\n  if (getNodeName(node) === 'html') {\n    return node;\n  }\n  const result =\n  // Step into the shadow DOM of the parent of a slotted node.\n  node.assignedSlot ||\n  // DOM Element detected.\n  node.parentNode ||\n  // ShadowRoot detected.\n  isShadowRoot(node) && node.host ||\n  // Fallback.\n  getDocumentElement(node);\n  return isShadowRoot(result) ? result.host : result;\n}\nfunction getNearestOverflowAncestor(node) {\n  const parentNode = getParentNode(node);\n  if (isLastTraversableNode(parentNode)) {\n    return node.ownerDocument ? node.ownerDocument.body : node.body;\n  }\n  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {\n    return parentNode;\n  }\n  return getNearestOverflowAncestor(parentNode);\n}\nfunction getOverflowAncestors(node, list, traverseIframes) {\n  var _node$ownerDocument2;\n  if (list === void 0) {\n    list = [];\n  }\n  if (traverseIframes === void 0) {\n    traverseIframes = true;\n  }\n  const scrollableAncestor = getNearestOverflowAncestor(node);\n  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);\n  const win = getWindow(scrollableAncestor);\n  if (isBody) {\n    const frameElement = getFrameElement(win);\n    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], frameElement && traverseIframes ? getOverflowAncestors(frameElement) : []);\n  }\n  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));\n}\nfunction getFrameElement(win) {\n  return win.parent && Object.getPrototypeOf(win.parent) ? win.frameElement : null;\n}\n\nfunction getCssDimensions(element) {\n  const css = getComputedStyle$1(element);\n  // In testing environments, the `width` and `height` properties are empty\n  // strings for SVG elements, returning NaN. Fallback to `0` in this case.\n  let width = parseFloat(css.width) || 0;\n  let height = parseFloat(css.height) || 0;\n  const hasOffset = isHTMLElement(element);\n  const offsetWidth = hasOffset ? element.offsetWidth : width;\n  const offsetHeight = hasOffset ? element.offsetHeight : height;\n  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;\n  if (shouldFallback) {\n    width = offsetWidth;\n    height = offsetHeight;\n  }\n  return {\n    width,\n    height,\n    $: shouldFallback\n  };\n}\n\nfunction unwrapElement(element) {\n  return !isElement(element) ? element.contextElement : element;\n}\n\nfunction getScale(element) {\n  const domElement = unwrapElement(element);\n  if (!isHTMLElement(domElement)) {\n    return createCoords(1);\n  }\n  const rect = domElement.getBoundingClientRect();\n  const {\n    width,\n    height,\n    $\n  } = getCssDimensions(domElement);\n  let x = ($ ? round(rect.width) : rect.width) / width;\n  let y = ($ ? round(rect.height) : rect.height) / height;\n\n  // 0, NaN, or Infinity should always fallback to 1.\n\n  if (!x || !Number.isFinite(x)) {\n    x = 1;\n  }\n  if (!y || !Number.isFinite(y)) {\n    y = 1;\n  }\n  return {\n    x,\n    y\n  };\n}\n\nconst noOffsets = /*#__PURE__*/createCoords(0);\nfunction getVisualOffsets(element) {\n  const win = getWindow(element);\n  if (!isWebKit() || !win.visualViewport) {\n    return noOffsets;\n  }\n  return {\n    x: win.visualViewport.offsetLeft,\n    y: win.visualViewport.offsetTop\n  };\n}\nfunction shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {\n  if (isFixed === void 0) {\n    isFixed = false;\n  }\n  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {\n    return false;\n  }\n  return isFixed;\n}\n\nfunction getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {\n  if (includeScale === void 0) {\n    includeScale = false;\n  }\n  if (isFixedStrategy === void 0) {\n    isFixedStrategy = false;\n  }\n  const clientRect = element.getBoundingClientRect();\n  const domElement = unwrapElement(element);\n  let scale = createCoords(1);\n  if (includeScale) {\n    if (offsetParent) {\n      if (isElement(offsetParent)) {\n        scale = getScale(offsetParent);\n      }\n    } else {\n      scale = getScale(element);\n    }\n  }\n  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);\n  let x = (clientRect.left + visualOffsets.x) / scale.x;\n  let y = (clientRect.top + visualOffsets.y) / scale.y;\n  let width = clientRect.width / scale.x;\n  let height = clientRect.height / scale.y;\n  if (domElement) {\n    const win = getWindow(domElement);\n    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;\n    let currentWin = win;\n    let currentIFrame = currentWin.frameElement;\n    while (currentIFrame && offsetParent && offsetWin !== currentWin) {\n      const iframeScale = getScale(currentIFrame);\n      const iframeRect = currentIFrame.getBoundingClientRect();\n      const css = getComputedStyle$1(currentIFrame);\n      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;\n      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;\n      x *= iframeScale.x;\n      y *= iframeScale.y;\n      width *= iframeScale.x;\n      height *= iframeScale.y;\n      x += left;\n      y += top;\n      currentWin = getWindow(currentIFrame);\n      currentIFrame = currentWin.frameElement;\n    }\n  }\n  return rectToClientRect({\n    width,\n    height,\n    x,\n    y\n  });\n}\n\nfunction convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {\n  let {\n    elements,\n    rect,\n    offsetParent,\n    strategy\n  } = _ref;\n  const isFixed = strategy === 'fixed';\n  const documentElement = getDocumentElement(offsetParent);\n  const topLayer = elements ? isTopLayer(elements.floating) : false;\n  if (offsetParent === documentElement || topLayer && isFixed) {\n    return rect;\n  }\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  let scale = createCoords(1);\n  const offsets = createCoords(0);\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isHTMLElement(offsetParent)) {\n      const offsetRect = getBoundingClientRect(offsetParent);\n      scale = getScale(offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    }\n  }\n  return {\n    width: rect.width * scale.x,\n    height: rect.height * scale.y,\n    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,\n    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y\n  };\n}\n\nfunction getClientRects(element) {\n  return Array.from(element.getClientRects());\n}\n\nfunction getWindowScrollBarX(element) {\n  // If <html> has a CSS width greater than the viewport, then this will be\n  // incorrect for RTL.\n  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;\n}\n\n// Gets the entire size of the scrollable document area, even extending outside\n// of the `<html>` and `<body>` rect bounds if horizontally scrollable.\nfunction getDocumentRect(element) {\n  const html = getDocumentElement(element);\n  const scroll = getNodeScroll(element);\n  const body = element.ownerDocument.body;\n  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);\n  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);\n  let x = -scroll.scrollLeft + getWindowScrollBarX(element);\n  const y = -scroll.scrollTop;\n  if (getComputedStyle$1(body).direction === 'rtl') {\n    x += max(html.clientWidth, body.clientWidth) - width;\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\nfunction getViewportRect(element, strategy) {\n  const win = getWindow(element);\n  const html = getDocumentElement(element);\n  const visualViewport = win.visualViewport;\n  let width = html.clientWidth;\n  let height = html.clientHeight;\n  let x = 0;\n  let y = 0;\n  if (visualViewport) {\n    width = visualViewport.width;\n    height = visualViewport.height;\n    const visualViewportBased = isWebKit();\n    if (!visualViewportBased || visualViewportBased && strategy === 'fixed') {\n      x = visualViewport.offsetLeft;\n      y = visualViewport.offsetTop;\n    }\n  }\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\n\n// Returns the inner client rect, subtracting scrollbars if present.\nfunction getInnerBoundingClientRect(element, strategy) {\n  const clientRect = getBoundingClientRect(element, true, strategy === 'fixed');\n  const top = clientRect.top + element.clientTop;\n  const left = clientRect.left + element.clientLeft;\n  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);\n  const width = element.clientWidth * scale.x;\n  const height = element.clientHeight * scale.y;\n  const x = left * scale.x;\n  const y = top * scale.y;\n  return {\n    width,\n    height,\n    x,\n    y\n  };\n}\nfunction getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {\n  let rect;\n  if (clippingAncestor === 'viewport') {\n    rect = getViewportRect(element, strategy);\n  } else if (clippingAncestor === 'document') {\n    rect = getDocumentRect(getDocumentElement(element));\n  } else if (isElement(clippingAncestor)) {\n    rect = getInnerBoundingClientRect(clippingAncestor, strategy);\n  } else {\n    const visualOffsets = getVisualOffsets(element);\n    rect = {\n      ...clippingAncestor,\n      x: clippingAncestor.x - visualOffsets.x,\n      y: clippingAncestor.y - visualOffsets.y\n    };\n  }\n  return rectToClientRect(rect);\n}\nfunction hasFixedPositionAncestor(element, stopNode) {\n  const parentNode = getParentNode(element);\n  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {\n    return false;\n  }\n  return getComputedStyle$1(parentNode).position === 'fixed' || hasFixedPositionAncestor(parentNode, stopNode);\n}\n\n// A \"clipping ancestor\" is an `overflow` element with the characteristic of\n// clipping (or hiding) child elements. This returns all clipping ancestors\n// of the given element up the tree.\nfunction getClippingElementAncestors(element, cache) {\n  const cachedResult = cache.get(element);\n  if (cachedResult) {\n    return cachedResult;\n  }\n  let result = getOverflowAncestors(element, [], false).filter(el => isElement(el) && getNodeName(el) !== 'body');\n  let currentContainingBlockComputedStyle = null;\n  const elementIsFixed = getComputedStyle$1(element).position === 'fixed';\n  let currentNode = elementIsFixed ? getParentNode(element) : element;\n\n  // https://developer.mozilla.org/en-US/docs/Web/CSS/Containing_block#identifying_the_containing_block\n  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {\n    const computedStyle = getComputedStyle$1(currentNode);\n    const currentNodeIsContaining = isContainingBlock(currentNode);\n    if (!currentNodeIsContaining && computedStyle.position === 'fixed') {\n      currentContainingBlockComputedStyle = null;\n    }\n    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === 'static' && !!currentContainingBlockComputedStyle && ['absolute', 'fixed'].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);\n    if (shouldDropCurrentNode) {\n      // Drop non-containing blocks.\n      result = result.filter(ancestor => ancestor !== currentNode);\n    } else {\n      // Record last containing block for next iteration.\n      currentContainingBlockComputedStyle = computedStyle;\n    }\n    currentNode = getParentNode(currentNode);\n  }\n  cache.set(element, result);\n  return result;\n}\n\n// Gets the maximum area that the element is visible in due to any number of\n// clipping ancestors.\nfunction getClippingRect(_ref) {\n  let {\n    element,\n    boundary,\n    rootBoundary,\n    strategy\n  } = _ref;\n  const elementClippingAncestors = boundary === 'clippingAncestors' ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);\n  const clippingAncestors = [...elementClippingAncestors, rootBoundary];\n  const firstClippingAncestor = clippingAncestors[0];\n  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {\n    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);\n    accRect.top = max(rect.top, accRect.top);\n    accRect.right = min(rect.right, accRect.right);\n    accRect.bottom = min(rect.bottom, accRect.bottom);\n    accRect.left = max(rect.left, accRect.left);\n    return accRect;\n  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));\n  return {\n    width: clippingRect.right - clippingRect.left,\n    height: clippingRect.bottom - clippingRect.top,\n    x: clippingRect.left,\n    y: clippingRect.top\n  };\n}\n\nfunction getDimensions(element) {\n  const {\n    width,\n    height\n  } = getCssDimensions(element);\n  return {\n    width,\n    height\n  };\n}\n\nfunction getRectRelativeToOffsetParent(element, offsetParent, strategy) {\n  const isOffsetParentAnElement = isHTMLElement(offsetParent);\n  const documentElement = getDocumentElement(offsetParent);\n  const isFixed = strategy === 'fixed';\n  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);\n  let scroll = {\n    scrollLeft: 0,\n    scrollTop: 0\n  };\n  const offsets = createCoords(0);\n  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {\n    if (getNodeName(offsetParent) !== 'body' || isOverflowElement(documentElement)) {\n      scroll = getNodeScroll(offsetParent);\n    }\n    if (isOffsetParentAnElement) {\n      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);\n      offsets.x = offsetRect.x + offsetParent.clientLeft;\n      offsets.y = offsetRect.y + offsetParent.clientTop;\n    } else if (documentElement) {\n      offsets.x = getWindowScrollBarX(documentElement);\n    }\n  }\n  const x = rect.left + scroll.scrollLeft - offsets.x;\n  const y = rect.top + scroll.scrollTop - offsets.y;\n  return {\n    x,\n    y,\n    width: rect.width,\n    height: rect.height\n  };\n}\n\nfunction isStaticPositioned(element) {\n  return getComputedStyle$1(element).position === 'static';\n}\n\nfunction getTrueOffsetParent(element, polyfill) {\n  if (!isHTMLElement(element) || getComputedStyle$1(element).position === 'fixed') {\n    return null;\n  }\n  if (polyfill) {\n    return polyfill(element);\n  }\n  return element.offsetParent;\n}\n\n// Gets the closest ancestor positioned element. Handles some edge cases,\n// such as table ancestors and cross browser bugs.\nfunction getOffsetParent(element, polyfill) {\n  const win = getWindow(element);\n  if (isTopLayer(element)) {\n    return win;\n  }\n  if (!isHTMLElement(element)) {\n    let svgOffsetParent = getParentNode(element);\n    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {\n      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {\n        return svgOffsetParent;\n      }\n      svgOffsetParent = getParentNode(svgOffsetParent);\n    }\n    return win;\n  }\n  let offsetParent = getTrueOffsetParent(element, polyfill);\n  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {\n    offsetParent = getTrueOffsetParent(offsetParent, polyfill);\n  }\n  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {\n    return win;\n  }\n  return offsetParent || getContainingBlock(element) || win;\n}\n\nconst getElementRects = async function (data) {\n  const getOffsetParentFn = this.getOffsetParent || getOffsetParent;\n  const getDimensionsFn = this.getDimensions;\n  const floatingDimensions = await getDimensionsFn(data.floating);\n  return {\n    reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),\n    floating: {\n      x: 0,\n      y: 0,\n      width: floatingDimensions.width,\n      height: floatingDimensions.height\n    }\n  };\n};\n\nfunction isRTL(element) {\n  return getComputedStyle$1(element).direction === 'rtl';\n}\n\nconst platform = {\n  convertOffsetParentRelativeRectToViewportRelativeRect,\n  getDocumentElement,\n  getClippingRect,\n  getOffsetParent,\n  getElementRects,\n  getClientRects,\n  getDimensions,\n  getScale,\n  isElement,\n  isRTL\n};\n\n// https://samthor.au/2021/observing-dom/\nfunction observeMove(element, onMove) {\n  let io = null;\n  let timeoutId;\n  const root = getDocumentElement(element);\n  function cleanup() {\n    var _io;\n    clearTimeout(timeoutId);\n    (_io = io) == null || _io.disconnect();\n    io = null;\n  }\n  function refresh(skip, threshold) {\n    if (skip === void 0) {\n      skip = false;\n    }\n    if (threshold === void 0) {\n      threshold = 1;\n    }\n    cleanup();\n    const {\n      left,\n      top,\n      width,\n      height\n    } = element.getBoundingClientRect();\n    if (!skip) {\n      onMove();\n    }\n    if (!width || !height) {\n      return;\n    }\n    const insetTop = floor(top);\n    const insetRight = floor(root.clientWidth - (left + width));\n    const insetBottom = floor(root.clientHeight - (top + height));\n    const insetLeft = floor(left);\n    const rootMargin = -insetTop + \"px \" + -insetRight + \"px \" + -insetBottom + \"px \" + -insetLeft + \"px\";\n    const options = {\n      rootMargin,\n      threshold: max(0, min(1, threshold)) || 1\n    };\n    let isFirstUpdate = true;\n    function handleObserve(entries) {\n      const ratio = entries[0].intersectionRatio;\n      if (ratio !== threshold) {\n        if (!isFirstUpdate) {\n          return refresh();\n        }\n        if (!ratio) {\n          // If the reference is clipped, the ratio is 0. Throttle the refresh\n          // to prevent an infinite loop of updates.\n          timeoutId = setTimeout(() => {\n            refresh(false, 1e-7);\n          }, 1000);\n        } else {\n          refresh(false, ratio);\n        }\n      }\n      isFirstUpdate = false;\n    }\n\n    // Older browsers don't support a `document` as the root and will throw an\n    // error.\n    try {\n      io = new IntersectionObserver(handleObserve, {\n        ...options,\n        // Handle <iframe>s\n        root: root.ownerDocument\n      });\n    } catch (e) {\n      io = new IntersectionObserver(handleObserve, options);\n    }\n    io.observe(element);\n  }\n  refresh(true);\n  return cleanup;\n}\n\n/**\n * Automatically updates the position of the floating element when necessary.\n * Should only be called when the floating element is mounted on the DOM or\n * visible on the screen.\n * @returns cleanup function that should be invoked when the floating element is\n * removed from the DOM or hidden from the screen.\n * @see https://floating-ui.com/docs/autoUpdate\n */\nfunction autoUpdate(reference, floating, update, options) {\n  if (options === void 0) {\n    options = {};\n  }\n  const {\n    ancestorScroll = true,\n    ancestorResize = true,\n    elementResize = typeof ResizeObserver === 'function',\n    layoutShift = typeof IntersectionObserver === 'function',\n    animationFrame = false\n  } = options;\n  const referenceEl = unwrapElement(reference);\n  const ancestors = ancestorScroll || ancestorResize ? [...(referenceEl ? getOverflowAncestors(referenceEl) : []), ...getOverflowAncestors(floating)] : [];\n  ancestors.forEach(ancestor => {\n    ancestorScroll && ancestor.addEventListener('scroll', update, {\n      passive: true\n    });\n    ancestorResize && ancestor.addEventListener('resize', update);\n  });\n  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;\n  let reobserveFrame = -1;\n  let resizeObserver = null;\n  if (elementResize) {\n    resizeObserver = new ResizeObserver(_ref => {\n      let [firstEntry] = _ref;\n      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {\n        // Prevent update loops when using the `size` middleware.\n        // https://github.com/floating-ui/floating-ui/issues/1740\n        resizeObserver.unobserve(floating);\n        cancelAnimationFrame(reobserveFrame);\n        reobserveFrame = requestAnimationFrame(() => {\n          var _resizeObserver;\n          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);\n        });\n      }\n      update();\n    });\n    if (referenceEl && !animationFrame) {\n      resizeObserver.observe(referenceEl);\n    }\n    resizeObserver.observe(floating);\n  }\n  let frameId;\n  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;\n  if (animationFrame) {\n    frameLoop();\n  }\n  function frameLoop() {\n    const nextRefRect = getBoundingClientRect(reference);\n    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {\n      update();\n    }\n    prevRefRect = nextRefRect;\n    frameId = requestAnimationFrame(frameLoop);\n  }\n  update();\n  return () => {\n    var _resizeObserver2;\n    ancestors.forEach(ancestor => {\n      ancestorScroll && ancestor.removeEventListener('scroll', update);\n      ancestorResize && ancestor.removeEventListener('resize', update);\n    });\n    cleanupIo == null || cleanupIo();\n    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();\n    resizeObserver = null;\n    if (animationFrame) {\n      cancelAnimationFrame(frameId);\n    }\n  };\n}\n\n/**\n * Modifies the placement by translating the floating element along the\n * specified axes.\n * A number (shorthand for `mainAxis` or distance), or an axes configuration\n * object may be passed.\n * @see https://floating-ui.com/docs/offset\n */\nconst offset = offset$1;\n\n/**\n * Optimizes the visibility of the floating element by choosing the placement\n * that has the most space available automatically, without needing to specify a\n * preferred placement. Alternative to `flip`.\n * @see https://floating-ui.com/docs/autoPlacement\n */\nconst autoPlacement = autoPlacement$1;\n\n/**\n * Optimizes the visibility of the floating element by shifting it in order to\n * keep it in view when it will overflow the clipping boundary.\n * @see https://floating-ui.com/docs/shift\n */\nconst shift = shift$1;\n\n/**\n * Optimizes the visibility of the floating element by flipping the `placement`\n * in order to keep it in view when the preferred placement(s) will overflow the\n * clipping boundary. Alternative to `autoPlacement`.\n * @see https://floating-ui.com/docs/flip\n */\nconst flip = flip$1;\n\n/**\n * Provides data that allows you to change the size of the floating element —\n * for instance, prevent it from overflowing the clipping boundary or match the\n * width of the reference element.\n * @see https://floating-ui.com/docs/size\n */\nsize;\n\n/**\n * Provides data to hide the floating element in applicable situations, such as\n * when it is not in the same clipping context as the reference element.\n * @see https://floating-ui.com/docs/hide\n */\nconst hide = hide$1;\n\n/**\n * Provides data to position an inner element of the floating element so that it\n * appears centered to the reference element.\n * @see https://floating-ui.com/docs/arrow\n */\nconst arrow = arrow$1;\n\n/**\n * Provides improved positioning for inline reference elements that can span\n * over multiple lines, such as hyperlinks or range selections.\n * @see https://floating-ui.com/docs/inline\n */\ninline;\n\n/**\n * Built-in `limiter` that will stop `shift()` at a certain point.\n */\nlimitShift;\n\n/**\n * Computes the `x` and `y` coordinates that will place the floating element\n * next to a given reference element.\n */\nconst computePosition = (reference, floating, options) => {\n  // This caches the expensive `getClippingElementAncestors` function so that\n  // multiple lifecycle resets re-use the same result. It only lives for a\n  // single call. If other functions become expensive, we can add them as well.\n  const cache = new Map();\n  const mergedOptions = {\n    platform,\n    ...options\n  };\n  const platformWithCache = {\n    ...mergedOptions.platform,\n    _c: cache\n  };\n  return computePosition$1(reference, floating, {\n    ...mergedOptions,\n    platform: platformWithCache\n  });\n};\n\nfunction offsetParent(element) {\n    return offsetParentPolyfill(element);\n}\nfunction flatTreeParent(element) {\n    if (element.assignedSlot) {\n        return element.assignedSlot;\n    }\n    if (element.parentNode instanceof ShadowRoot) {\n        return element.parentNode.host;\n    }\n    return element.parentNode;\n}\nfunction offsetParentPolyfill(element) {\n    // Do an initial walk to check for display:none ancestors.\n    for (let ancestor = element; ancestor; ancestor = flatTreeParent(ancestor)) {\n        if (!(ancestor instanceof Element)) {\n            continue;\n        }\n        if (getComputedStyle(ancestor).display === 'none') {\n            return null;\n        }\n    }\n    for (let ancestor = flatTreeParent(element); ancestor; ancestor = flatTreeParent(ancestor)) {\n        if (!(ancestor instanceof Element)) {\n            continue;\n        }\n        const style = getComputedStyle(ancestor);\n        // Display:contents nodes aren't in the layout tree, so they should be skipped.\n        if (style.display === 'contents') {\n            continue;\n        }\n        if (style.position !== 'static' || isContainingBlock(style)) {\n            return ancestor;\n        }\n        if (ancestor.tagName === 'BODY') {\n            return ancestor;\n        }\n    }\n    return null;\n}\n\n(function setUpFloatingUiForShadowDomPositioning() {\n    if (isBrowser()) {\n        const originalGetOffsetParent = platform.getOffsetParent;\n        platform.getOffsetParent = (element) => originalGetOffsetParent(element, offsetParent);\n    }\n})();\nfunction roundByDPR(value) {\n    const dpr = window.devicePixelRatio || 1;\n    return Math.round(value * dpr) / dpr;\n}\n/**\n * Positions the floating element relative to the reference element.\n *\n * **Note:** exported for testing purposes only\n *\n * @param root0\n * @param root0.referenceEl\n * @param root0.floatingEl\n * @param root0.overlayPositioning\n * @param root0.placement\n * @param root0.flipDisabled\n * @param root0.flipPlacements\n * @param root0.offsetDistance\n * @param root0.offsetSkidding\n * @param root0.arrowEl\n * @param root0.type\n * @param component\n * @param root0.referenceEl.referenceEl\n * @param root0.referenceEl.floatingEl\n * @param root0.referenceEl.overlayPositioning\n * @param root0.referenceEl.placement\n * @param root0.referenceEl.flipDisabled\n * @param root0.referenceEl.flipPlacements\n * @param root0.referenceEl.offsetDistance\n * @param root0.referenceEl.offsetSkidding\n * @param root0.referenceEl.arrowEl\n * @param root0.referenceEl.type\n * @param component.referenceEl\n * @param component.floatingEl\n * @param component.overlayPositioning\n * @param component.placement\n * @param component.flipDisabled\n * @param component.flipPlacements\n * @param component.offsetDistance\n * @param component.offsetSkidding\n * @param component.arrowEl\n * @param component.type\n */\nconst positionFloatingUI = \n/* we export arrow function to allow us to spy on it during testing */\nasync (component, { referenceEl, floatingEl, overlayPositioning = \"absolute\", placement, flipDisabled, flipPlacements, offsetDistance, offsetSkidding, arrowEl, type, }) => {\n    if (!referenceEl || !floatingEl) {\n        return null;\n    }\n    const isRTL = getElementDir(floatingEl) === \"rtl\";\n    const { x, y, placement: effectivePlacement, strategy: position, middlewareData, } = await computePosition(referenceEl, floatingEl, {\n        strategy: overlayPositioning,\n        placement: placement === \"auto\" || placement === \"auto-start\" || placement === \"auto-end\"\n            ? undefined\n            : getEffectivePlacement(placement, isRTL),\n        middleware: getMiddleware({\n            placement,\n            flipDisabled,\n            flipPlacements: flipPlacements?.map((placement) => getEffectivePlacement(placement, isRTL)),\n            offsetDistance,\n            offsetSkidding,\n            arrowEl,\n            type,\n        }),\n    });\n    if (arrowEl && middlewareData.arrow) {\n        const { x, y } = middlewareData.arrow;\n        const side = effectivePlacement.split(\"-\")[0];\n        const alignment = x != null ? \"left\" : \"top\";\n        const transform = ARROW_CSS_TRANSFORM[side];\n        const reset = { left: \"\", top: \"\", bottom: \"\", right: \"\" };\n        if (\"floatingLayout\" in component) {\n            component.floatingLayout = side === \"left\" || side === \"right\" ? \"horizontal\" : \"vertical\";\n        }\n        Object.assign(arrowEl.style, {\n            ...reset,\n            [alignment]: `${alignment == \"left\" ? x : y}px`,\n            [side]: \"100%\",\n            transform,\n        });\n    }\n    const referenceHidden = middlewareData.hide?.referenceHidden;\n    const visibility = referenceHidden ? \"hidden\" : null;\n    const pointerEvents = visibility ? \"none\" : null;\n    floatingEl.setAttribute(placementDataAttribute, effectivePlacement);\n    const { open } = component;\n    Object.assign(floatingEl.style, {\n        visibility,\n        pointerEvents,\n        position,\n        transform: open ? `translate(${roundByDPR(x)}px,${roundByDPR(y)}px)` : \"\",\n        top: 0,\n        left: 0,\n    });\n};\n/**\n * Exported for testing purposes only\n */\nconst placementDataAttribute = \"data-placement\";\nconst flipPlacements = [\n    \"top\",\n    \"bottom\",\n    \"right\",\n    \"left\",\n    \"top-start\",\n    \"top-end\",\n    \"bottom-start\",\n    \"bottom-end\",\n    \"right-start\",\n    \"right-end\",\n    \"left-start\",\n    \"left-end\",\n    \"leading\",\n    \"trailing\",\n    \"leading-start\",\n    \"leading-end\",\n    \"trailing-start\",\n    \"trailing-end\",\n];\nconst defaultMenuPlacement = \"bottom-start\";\nconst defaultEndMenuPlacement = \"bottom-end\";\nconst FloatingCSS = {\n    animation: \"calcite-floating-ui-anim\",\n    animationActive: \"calcite-floating-ui-anim--active\",\n    arrow: \"calcite-floating-ui-arrow\",\n    arrowStroke: \"calcite-floating-ui-arrow__stroke\",\n};\nfunction getMiddleware({ placement, flipDisabled, flipPlacements, offsetDistance, offsetSkidding, arrowEl, type, }) {\n    const defaultMiddleware = [shift(), hide()];\n    if (type === \"menu\") {\n        return [\n            ...defaultMiddleware,\n            flip({\n                fallbackPlacements: flipPlacements || [\"top-start\", \"top\", \"top-end\", \"bottom-start\", \"bottom\", \"bottom-end\"],\n            }),\n        ];\n    }\n    if (type === \"popover\" || type === \"tooltip\") {\n        const middleware = [\n            ...defaultMiddleware,\n            offset({\n                mainAxis: typeof offsetDistance === \"number\" ? offsetDistance : 0,\n                crossAxis: typeof offsetSkidding === \"number\" ? offsetSkidding : 0,\n            }),\n        ];\n        if (placement === \"auto\" || placement === \"auto-start\" || placement === \"auto-end\") {\n            middleware.push(autoPlacement({ alignment: placement === \"auto-start\" ? \"start\" : placement === \"auto-end\" ? \"end\" : null }));\n        }\n        else if (!flipDisabled) {\n            middleware.push(flip(flipPlacements ? { fallbackPlacements: flipPlacements } : {}));\n        }\n        if (arrowEl) {\n            middleware.push(arrow({\n                element: arrowEl,\n            }));\n        }\n        return middleware;\n    }\n    return [];\n}\nfunction filterValidFlipPlacements(placements, el) {\n    const filteredPlacements = placements.filter((placement) => flipPlacements.includes(placement));\n    if (filteredPlacements.length !== placements.length) {\n        console.warn(`${el.tagName}: Invalid value found in: flipPlacements. Try any of these: ${flipPlacements\n            .map((placement) => `\"${placement}\"`)\n            .join(\", \")\n            .trim()}`, { el });\n    }\n    return filteredPlacements;\n}\nfunction getEffectivePlacement(placement, isRTL = false) {\n    const placements = [\"left\", \"right\"];\n    if (isRTL) {\n        placements.reverse();\n    }\n    return placement.replace(/leading/gi, placements[0]).replace(/trailing/gi, placements[1]);\n}\n/**\n * Convenience function to manage `reposition` calls for FloatingUIComponents that use `positionFloatingUI.\n *\n * Note: this is not needed for components that use `calcite-popover`.\n *\n * @param component - A floating-ui component.\n * @param options - Reposition parameters.\n * @param options.referenceEl - The `referenceElement` used to position the component according to its `placement` value.\n * @param options.floatingEl - The `floatingElement` containing the floating ui.\n * @param options.overlayPositioning - type of positioning to use for the overlaid content.\n * @param options.placement - Determines where the component will be positioned relative to the `referenceElement`.\n * @param options.flipDisabled - Prevents flipping the component's placement when overlapping its `referenceElement`.\n * @param options.flipPlacements - Defines the available placements that can be used when a flip occurs.\n * @param options.offsetDistance - Offsets the position of the popover away from the `referenceElement`.\n * @param options.offsetSkidding - Offsets the position of the component along the `referenceElement`.\n * @param options.arrowEl - A customizable arrow element.\n * @param options.type - The type of floating UI.\n * @param delayed - Reposition the component after a delay.\n * @returns {Promise<void>}\n */\nasync function reposition(component, options, delayed = false) {\n    if (!component.open || !options.floatingEl || !options.referenceEl) {\n        return;\n    }\n    const trackedState = autoUpdatingComponentMap.get(component);\n    if (!trackedState) {\n        return runAutoUpdate(component, options.referenceEl, options.floatingEl);\n    }\n    const positionFunction = delayed ? getDebouncedReposition(component) : positionFloatingUI;\n    await positionFunction(component, options);\n}\nfunction getDebouncedReposition(component) {\n    let debounced = componentToDebouncedRepositionMap.get(component);\n    if (debounced) {\n        return debounced;\n    }\n    debounced = debounce(positionFloatingUI, DEBOUNCE.reposition, {\n        leading: true,\n        maxWait: DEBOUNCE.reposition,\n    });\n    componentToDebouncedRepositionMap.set(component, debounced);\n    return debounced;\n}\nconst ARROW_CSS_TRANSFORM = {\n    top: \"\",\n    left: \"rotate(-90deg)\",\n    bottom: \"rotate(180deg)\",\n    right: \"rotate(90deg)\",\n};\n/**\n * Exported for testing purposes only\n *\n * @internal\n */\nconst autoUpdatingComponentMap = new WeakMap();\nconst componentToDebouncedRepositionMap = new WeakMap();\nasync function runAutoUpdate(component, referenceEl, floatingEl) {\n    if (!floatingEl.isConnected) {\n        return;\n    }\n    const effectiveAutoUpdate = isBrowser()\n        ? autoUpdate\n        : (_refEl, _floatingEl, updateCallback) => {\n            updateCallback();\n            return () => {\n                /* noop */\n            };\n        };\n    // we set initial state here to make it available for `reposition` calls\n    autoUpdatingComponentMap.set(component, { state: \"pending\" });\n    let repositionPromise;\n    const cleanUp = effectiveAutoUpdate(referenceEl, floatingEl, \n    // callback is invoked immediately\n    () => {\n        const promise = component.reposition();\n        if (!repositionPromise) {\n            repositionPromise = promise;\n        }\n    });\n    autoUpdatingComponentMap.set(component, { state: \"active\", cleanUp });\n    return repositionPromise;\n}\n/**\n * Helper to set up floating element interactions on connectedCallback.\n *\n * @param component - A floating-ui component.\n * @param referenceEl - The `referenceElement` used to position the component according to its `placement` value.\n * @param floatingEl - The `floatingElement` containing the floating ui.\n */\nasync function connectFloatingUI(component, referenceEl, floatingEl) {\n    if (!floatingEl || !referenceEl) {\n        return;\n    }\n    disconnectFloatingUI(component, referenceEl, floatingEl);\n    Object.assign(floatingEl.style, {\n        visibility: \"hidden\",\n        pointerEvents: \"none\",\n        // initial positioning based on https://floating-ui.com/docs/computePosition#initial-layout\n        position: component.overlayPositioning,\n    });\n    if (!component.open) {\n        return;\n    }\n    return runAutoUpdate(component, referenceEl, floatingEl);\n}\n/**\n * Helper to tear down floating element interactions on disconnectedCallback.\n *\n * @param component - A floating-ui component.\n * @param referenceEl - The `referenceElement` used to position the component according to its `placement` value.\n * @param floatingEl - The `floatingElement` containing the floating ui.\n */\nfunction disconnectFloatingUI(component, referenceEl, floatingEl) {\n    if (!floatingEl || !referenceEl) {\n        return;\n    }\n    const trackedState = autoUpdatingComponentMap.get(component);\n    if (trackedState?.state === \"active\") {\n        trackedState.cleanUp();\n    }\n    autoUpdatingComponentMap.delete(component);\n    componentToDebouncedRepositionMap.get(component)?.cancel();\n    componentToDebouncedRepositionMap.delete(component);\n}\nconst visiblePointerSize = 4;\n/**\n * Default offset the position of the floating element away from the reference element.\n *\n * @default 6\n */\nconst defaultOffsetDistance = Math.ceil(Math.hypot(visiblePointerSize, visiblePointerSize));\n\nexport { FloatingCSS as F, disconnectFloatingUI as a, defaultEndMenuPlacement as b, connectFloatingUI as c, defaultOffsetDistance as d, defaultMenuPlacement as e, filterValidFlipPlacements as f, reposition as r };\n\n//# sourceMappingURL=floating-ui.js.map"],"names":["sides","alignments","placements","acc","side","min","max","round","floor","createCoords","v","oppositeSideMap","oppositeAlignmentMap","clamp","start","value","end","evaluate","param","getSide","placement","getAlignment","getOppositeAxis","axis","getAxisLength","getSideAxis","getAlignmentAxis","getAlignmentSides","rects","rtl","alignment","alignmentAxis","length","mainAlignmentSide","getOppositePlacement","getExpandedPlacements","oppositePlacement","getOppositeAlignmentPlacement","getSideList","isStart","lr","rl","tb","bt","getOppositeAxisPlacements","flipAlignment","direction","list","expandPaddingObject","padding","getPaddingObject","rectToClientRect","rect","x","y","width","height","computeCoordsFromPlacement","_ref","reference","floating","sideAxis","alignLength","isVertical","commonX","commonY","commonAlign","coords","computePosition$1","config","strategy","middleware","platform","validMiddleware","statefulPlacement","middlewareData","resetCount","i","name","fn","nextX","nextY","data","reset","detectOverflow","state","options","_await$platform$isEle","elements","boundary","rootBoundary","elementContext","altBoundary","paddingObject","element","clippingClientRect","offsetParent","offsetScale","elementClientRect","arrow$1","arrowDimensions","isYAxis","minProp","maxProp","clientProp","endDiff","startDiff","arrowOffsetParent","clientSize","centerToReference","largestPossiblePadding","minPadding","maxPadding","min$1","center","offset","shouldAddOffset","alignmentOffset","getPlacementList","autoAlignment","allowedPlacements","autoPlacement$1","_middlewareData$autoP","_middlewareData$autoP2","_placementsThatFitOnE","crossAxis","detectOverflowOptions","placements$1","overflow","currentIndex","currentPlacement","alignmentSides","currentOverflows","allOverflows","nextPlacement","placementsSortedByMostSpace","d","a","b","resetPlacement","flip$1","_middlewareData$arrow","_middlewareData$flip","initialPlacement","checkMainAxis","checkCrossAxis","specifiedFallbackPlacements","fallbackStrategy","fallbackAxisSideDirection","isBasePlacement","fallbackPlacements","overflows","overflowsData","_middlewareData$flip2","_overflowsData$filter","nextIndex","_overflowsData$map$so","getSideOffsets","isAnySideFullyClipped","hide$1","offsets","convertValueToCoords","mainAxisMulti","crossAxisMulti","rawValue","mainAxis","offset$1","_middlewareData$offse","diffCoords","shift$1","limiter","mainAxisCoord","crossAxisCoord","minSide","maxSide","limitedCoords","hasWindow","getNodeName","node","isNode","getWindow","_node$ownerDocument","getDocumentElement","isElement","isHTMLElement","isShadowRoot","isOverflowElement","overflowX","overflowY","display","getComputedStyle$1","isTableElement","isTopLayer","selector","isContainingBlock","elementOrCss","webkit","isWebKit","css","getContainingBlock","currentNode","getParentNode","isLastTraversableNode","getNodeScroll","result","getNearestOverflowAncestor","parentNode","getOverflowAncestors","traverseIframes","_node$ownerDocument2","scrollableAncestor","isBody","win","frameElement","getFrameElement","getCssDimensions","hasOffset","offsetWidth","offsetHeight","shouldFallback","unwrapElement","getScale","domElement","$","noOffsets","getVisualOffsets","shouldAddVisualOffsets","isFixed","floatingOffsetParent","getBoundingClientRect","includeScale","isFixedStrategy","clientRect","scale","visualOffsets","offsetWin","currentWin","currentIFrame","iframeScale","iframeRect","left","top","convertOffsetParentRelativeRectToViewportRelativeRect","documentElement","topLayer","scroll","isOffsetParentAnElement","offsetRect","getClientRects","getWindowScrollBarX","getDocumentRect","html","body","getViewportRect","visualViewport","visualViewportBased","getInnerBoundingClientRect","getClientRectFromClippingAncestor","clippingAncestor","hasFixedPositionAncestor","stopNode","getClippingElementAncestors","cache","cachedResult","el","currentContainingBlockComputedStyle","elementIsFixed","computedStyle","currentNodeIsContaining","ancestor","getClippingRect","clippingAncestors","firstClippingAncestor","clippingRect","accRect","getDimensions","getRectRelativeToOffsetParent","isStaticPositioned","getTrueOffsetParent","polyfill","getOffsetParent","svgOffsetParent","getElementRects","getOffsetParentFn","getDimensionsFn","floatingDimensions","isRTL","observeMove","onMove","io","timeoutId","root","cleanup","_io","refresh","skip","threshold","insetTop","insetRight","insetBottom","insetLeft","isFirstUpdate","handleObserve","entries","ratio","autoUpdate","update","ancestorScroll","ancestorResize","elementResize","layoutShift","animationFrame","referenceEl","ancestors","cleanupIo","reobserveFrame","resizeObserver","firstEntry","_resizeObserver","frameId","prevRefRect","frameLoop","nextRefRect","_resizeObserver2","autoPlacement","shift","flip","hide","arrow","computePosition","mergedOptions","platformWithCache","offsetParentPolyfill","flatTreeParent","style","isBrowser","originalGetOffsetParent","roundByDPR","dpr","positionFloatingUI","component","floatingEl","overlayPositioning","flipDisabled","flipPlacements","offsetDistance","offsetSkidding","arrowEl","type","getElementDir","effectivePlacement","position","getEffectivePlacement","getMiddleware","transform","ARROW_CSS_TRANSFORM","visibility","pointerEvents","placementDataAttribute","open","defaultMenuPlacement","defaultEndMenuPlacement","FloatingCSS","defaultMiddleware","filterValidFlipPlacements","filteredPlacements","reposition","delayed","autoUpdatingComponentMap","runAutoUpdate","getDebouncedReposition","debounced","componentToDebouncedRepositionMap","debounce","DEBOUNCE","effectiveAutoUpdate","_refEl","_floatingEl","updateCallback","repositionPromise","cleanUp","promise","connectFloatingUI","disconnectFloatingUI","trackedState","visiblePointerSize","defaultOffsetDistance"],"mappings":"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","x_google_ignoreList":[0]}