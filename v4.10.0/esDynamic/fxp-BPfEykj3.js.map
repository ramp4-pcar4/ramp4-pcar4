{"version":3,"file":"fxp-BPfEykj3.js","sources":["../../node_modules/fast-xml-parser/src/util.js","../../node_modules/fast-xml-parser/src/validator.js","../../node_modules/fast-xml-parser/src/xmlparser/OptionsBuilder.js","../../node_modules/fast-xml-parser/src/xmlparser/xmlNode.js","../../node_modules/fast-xml-parser/src/xmlparser/DocTypeReader.js","../../node_modules/strnum/strnum.js","../../node_modules/fast-xml-parser/src/xmlparser/OrderedObjParser.js","../../node_modules/fast-xml-parser/src/xmlparser/node2json.js","../../node_modules/fast-xml-parser/src/xmlparser/XMLParser.js","../../node_modules/fast-xml-parser/src/xmlbuilder/orderedJs2Xml.js","../../node_modules/fast-xml-parser/src/xmlbuilder/json2xml.js","../../node_modules/fast-xml-parser/src/fxp.js"],"sourcesContent":["'use strict';\n\nconst nameStartChar = ':A-Za-z_\\\\u00C0-\\\\u00D6\\\\u00D8-\\\\u00F6\\\\u00F8-\\\\u02FF\\\\u0370-\\\\u037D\\\\u037F-\\\\u1FFF\\\\u200C-\\\\u200D\\\\u2070-\\\\u218F\\\\u2C00-\\\\u2FEF\\\\u3001-\\\\uD7FF\\\\uF900-\\\\uFDCF\\\\uFDF0-\\\\uFFFD';\nconst nameChar = nameStartChar + '\\\\-.\\\\d\\\\u00B7\\\\u0300-\\\\u036F\\\\u203F-\\\\u2040';\nconst nameRegexp = '[' + nameStartChar + '][' + nameChar + ']*'\nconst regexName = new RegExp('^' + nameRegexp + '$');\n\nconst getAllMatches = function(string, regex) {\n  const matches = [];\n  let match = regex.exec(string);\n  while (match) {\n    const allmatches = [];\n    allmatches.startIndex = regex.lastIndex - match[0].length;\n    const len = match.length;\n    for (let index = 0; index < len; index++) {\n      allmatches.push(match[index]);\n    }\n    matches.push(allmatches);\n    match = regex.exec(string);\n  }\n  return matches;\n};\n\nconst isName = function(string) {\n  const match = regexName.exec(string);\n  return !(match === null || typeof match === 'undefined');\n};\n\nexports.isExist = function(v) {\n  return typeof v !== 'undefined';\n};\n\nexports.isEmptyObject = function(obj) {\n  return Object.keys(obj).length === 0;\n};\n\n/**\n * Copy all the properties of a into b.\n * @param {*} target\n * @param {*} a\n */\nexports.merge = function(target, a, arrayMode) {\n  if (a) {\n    const keys = Object.keys(a); // will return an array of own properties\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      if (arrayMode === 'strict') {\n        target[keys[i]] = [ a[keys[i]] ];\n      } else {\n        target[keys[i]] = a[keys[i]];\n      }\n    }\n  }\n};\n/* exports.merge =function (b,a){\n  return Object.assign(b,a);\n} */\n\nexports.getValue = function(v) {\n  if (exports.isExist(v)) {\n    return v;\n  } else {\n    return '';\n  }\n};\n\n// const fakeCall = function(a) {return a;};\n// const fakeCallNoReturn = function() {};\n\nexports.isName = isName;\nexports.getAllMatches = getAllMatches;\nexports.nameRegexp = nameRegexp;\n","'use strict';\n\nconst util = require('./util');\n\nconst defaultOptions = {\n  allowBooleanAttributes: false, //A tag can have attributes without any value\n  unpairedTags: []\n};\n\n//const tagsPattern = new RegExp(\"<\\\\/?([\\\\w:\\\\-_\\.]+)\\\\s*\\/?>\",\"g\");\nexports.validate = function (xmlData, options) {\n  options = Object.assign({}, defaultOptions, options);\n\n  //xmlData = xmlData.replace(/(\\r\\n|\\n|\\r)/gm,\"\");//make it single line\n  //xmlData = xmlData.replace(/(^\\s*<\\?xml.*?\\?>)/g,\"\");//Remove XML starting tag\n  //xmlData = xmlData.replace(/(<!DOCTYPE[\\s\\w\\\"\\.\\/\\-\\:]+(\\[.*\\])*\\s*>)/g,\"\");//Remove DOCTYPE\n  const tags = [];\n  let tagFound = false;\n\n  //indicates that the root tag has been closed (aka. depth 0 has been reached)\n  let reachedRoot = false;\n\n  if (xmlData[0] === '\\ufeff') {\n    // check for byte order mark (BOM)\n    xmlData = xmlData.substr(1);\n  }\n  \n  for (let i = 0; i < xmlData.length; i++) {\n\n    if (xmlData[i] === '<' && xmlData[i+1] === '?') {\n      i+=2;\n      i = readPI(xmlData,i);\n      if (i.err) return i;\n    }else if (xmlData[i] === '<') {\n      //starting of tag\n      //read until you reach to '>' avoiding any '>' in attribute value\n      let tagStartPos = i;\n      i++;\n      \n      if (xmlData[i] === '!') {\n        i = readCommentAndCDATA(xmlData, i);\n        continue;\n      } else {\n        let closingTag = false;\n        if (xmlData[i] === '/') {\n          //closing tag\n          closingTag = true;\n          i++;\n        }\n        //read tagname\n        let tagName = '';\n        for (; i < xmlData.length &&\n          xmlData[i] !== '>' &&\n          xmlData[i] !== ' ' &&\n          xmlData[i] !== '\\t' &&\n          xmlData[i] !== '\\n' &&\n          xmlData[i] !== '\\r'; i++\n        ) {\n          tagName += xmlData[i];\n        }\n        tagName = tagName.trim();\n        //console.log(tagName);\n\n        if (tagName[tagName.length - 1] === '/') {\n          //self closing tag without attributes\n          tagName = tagName.substring(0, tagName.length - 1);\n          //continue;\n          i--;\n        }\n        if (!validateTagName(tagName)) {\n          let msg;\n          if (tagName.trim().length === 0) {\n            msg = \"Invalid space after '<'.\";\n          } else {\n            msg = \"Tag '\"+tagName+\"' is an invalid name.\";\n          }\n          return getErrorObject('InvalidTag', msg, getLineNumberForPosition(xmlData, i));\n        }\n\n        const result = readAttributeStr(xmlData, i);\n        if (result === false) {\n          return getErrorObject('InvalidAttr', \"Attributes for '\"+tagName+\"' have open quote.\", getLineNumberForPosition(xmlData, i));\n        }\n        let attrStr = result.value;\n        i = result.index;\n\n        if (attrStr[attrStr.length - 1] === '/') {\n          //self closing tag\n          const attrStrStart = i - attrStr.length;\n          attrStr = attrStr.substring(0, attrStr.length - 1);\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid === true) {\n            tagFound = true;\n            //continue; //text may presents after self closing tag\n          } else {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, attrStrStart + isValid.err.line));\n          }\n        } else if (closingTag) {\n          if (!result.tagClosed) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' doesn't have proper closing.\", getLineNumberForPosition(xmlData, i));\n          } else if (attrStr.trim().length > 0) {\n            return getErrorObject('InvalidTag', \"Closing tag '\"+tagName+\"' can't have attributes or invalid starting.\", getLineNumberForPosition(xmlData, tagStartPos));\n          } else {\n            const otg = tags.pop();\n            if (tagName !== otg.tagName) {\n              let openPos = getLineNumberForPosition(xmlData, otg.tagStartPos);\n              return getErrorObject('InvalidTag',\n                \"Expected closing tag '\"+otg.tagName+\"' (opened in line \"+openPos.line+\", col \"+openPos.col+\") instead of closing tag '\"+tagName+\"'.\",\n                getLineNumberForPosition(xmlData, tagStartPos));\n            }\n\n            //when there are no more tags, we reached the root level.\n            if (tags.length == 0) {\n              reachedRoot = true;\n            }\n          }\n        } else {\n          const isValid = validateAttributeString(attrStr, options);\n          if (isValid !== true) {\n            //the result from the nested function returns the position of the error within the attribute\n            //in order to get the 'true' error line, we need to calculate the position where the attribute begins (i - attrStr.length) and then add the position within the attribute\n            //this gives us the absolute index in the entire xml, which we can use to find the line at last\n            return getErrorObject(isValid.err.code, isValid.err.msg, getLineNumberForPosition(xmlData, i - attrStr.length + isValid.err.line));\n          }\n\n          //if the root level has been reached before ...\n          if (reachedRoot === true) {\n            return getErrorObject('InvalidXml', 'Multiple possible root nodes found.', getLineNumberForPosition(xmlData, i));\n          } else if(options.unpairedTags.indexOf(tagName) !== -1){\n            //don't push into stack\n          } else {\n            tags.push({tagName, tagStartPos});\n          }\n          tagFound = true;\n        }\n\n        //skip tag text value\n        //It may include comments and CDATA value\n        for (i++; i < xmlData.length; i++) {\n          if (xmlData[i] === '<') {\n            if (xmlData[i + 1] === '!') {\n              //comment or CADATA\n              i++;\n              i = readCommentAndCDATA(xmlData, i);\n              continue;\n            } else if (xmlData[i+1] === '?') {\n              i = readPI(xmlData, ++i);\n              if (i.err) return i;\n            } else{\n              break;\n            }\n          } else if (xmlData[i] === '&') {\n            const afterAmp = validateAmpersand(xmlData, i);\n            if (afterAmp == -1)\n              return getErrorObject('InvalidChar', \"char '&' is not expected.\", getLineNumberForPosition(xmlData, i));\n            i = afterAmp;\n          }else{\n            if (reachedRoot === true && !isWhiteSpace(xmlData[i])) {\n              return getErrorObject('InvalidXml', \"Extra text at the end\", getLineNumberForPosition(xmlData, i));\n            }\n          }\n        } //end of reading tag text value\n        if (xmlData[i] === '<') {\n          i--;\n        }\n      }\n    } else {\n      if ( isWhiteSpace(xmlData[i])) {\n        continue;\n      }\n      return getErrorObject('InvalidChar', \"char '\"+xmlData[i]+\"' is not expected.\", getLineNumberForPosition(xmlData, i));\n    }\n  }\n\n  if (!tagFound) {\n    return getErrorObject('InvalidXml', 'Start tag expected.', 1);\n  }else if (tags.length == 1) {\n      return getErrorObject('InvalidTag', \"Unclosed tag '\"+tags[0].tagName+\"'.\", getLineNumberForPosition(xmlData, tags[0].tagStartPos));\n  }else if (tags.length > 0) {\n      return getErrorObject('InvalidXml', \"Invalid '\"+\n          JSON.stringify(tags.map(t => t.tagName), null, 4).replace(/\\r?\\n/g, '')+\n          \"' found.\", {line: 1, col: 1});\n  }\n\n  return true;\n};\n\nfunction isWhiteSpace(char){\n  return char === ' ' || char === '\\t' || char === '\\n'  || char === '\\r';\n}\n/**\n * Read Processing insstructions and skip\n * @param {*} xmlData\n * @param {*} i\n */\nfunction readPI(xmlData, i) {\n  const start = i;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] == '?' || xmlData[i] == ' ') {\n      //tagname\n      const tagname = xmlData.substr(start, i - start);\n      if (i > 5 && tagname === 'xml') {\n        return getErrorObject('InvalidXml', 'XML declaration allowed only at the start of the document.', getLineNumberForPosition(xmlData, i));\n      } else if (xmlData[i] == '?' && xmlData[i + 1] == '>') {\n        //check if valid attribut string\n        i++;\n        break;\n      } else {\n        continue;\n      }\n    }\n  }\n  return i;\n}\n\nfunction readCommentAndCDATA(xmlData, i) {\n  if (xmlData.length > i + 5 && xmlData[i + 1] === '-' && xmlData[i + 2] === '-') {\n    //comment\n    for (i += 3; i < xmlData.length; i++) {\n      if (xmlData[i] === '-' && xmlData[i + 1] === '-' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  } else if (\n    xmlData.length > i + 8 &&\n    xmlData[i + 1] === 'D' &&\n    xmlData[i + 2] === 'O' &&\n    xmlData[i + 3] === 'C' &&\n    xmlData[i + 4] === 'T' &&\n    xmlData[i + 5] === 'Y' &&\n    xmlData[i + 6] === 'P' &&\n    xmlData[i + 7] === 'E'\n  ) {\n    let angleBracketsCount = 1;\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === '<') {\n        angleBracketsCount++;\n      } else if (xmlData[i] === '>') {\n        angleBracketsCount--;\n        if (angleBracketsCount === 0) {\n          break;\n        }\n      }\n    }\n  } else if (\n    xmlData.length > i + 9 &&\n    xmlData[i + 1] === '[' &&\n    xmlData[i + 2] === 'C' &&\n    xmlData[i + 3] === 'D' &&\n    xmlData[i + 4] === 'A' &&\n    xmlData[i + 5] === 'T' &&\n    xmlData[i + 6] === 'A' &&\n    xmlData[i + 7] === '['\n  ) {\n    for (i += 8; i < xmlData.length; i++) {\n      if (xmlData[i] === ']' && xmlData[i + 1] === ']' && xmlData[i + 2] === '>') {\n        i += 2;\n        break;\n      }\n    }\n  }\n\n  return i;\n}\n\nconst doubleQuote = '\"';\nconst singleQuote = \"'\";\n\n/**\n * Keep reading xmlData until '<' is found outside the attribute value.\n * @param {string} xmlData\n * @param {number} i\n */\nfunction readAttributeStr(xmlData, i) {\n  let attrStr = '';\n  let startChar = '';\n  let tagClosed = false;\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === doubleQuote || xmlData[i] === singleQuote) {\n      if (startChar === '') {\n        startChar = xmlData[i];\n      } else if (startChar !== xmlData[i]) {\n        //if vaue is enclosed with double quote then single quotes are allowed inside the value and vice versa\n      } else {\n        startChar = '';\n      }\n    } else if (xmlData[i] === '>') {\n      if (startChar === '') {\n        tagClosed = true;\n        break;\n      }\n    }\n    attrStr += xmlData[i];\n  }\n  if (startChar !== '') {\n    return false;\n  }\n\n  return {\n    value: attrStr,\n    index: i,\n    tagClosed: tagClosed\n  };\n}\n\n/**\n * Select all the attributes whether valid or invalid.\n */\nconst validAttrStrRegxp = new RegExp('(\\\\s*)([^\\\\s=]+)(\\\\s*=)?(\\\\s*([\\'\"])(([\\\\s\\\\S])*?)\\\\5)?', 'g');\n\n//attr, =\"sd\", a=\"amit's\", a=\"sd\"b=\"saf\", ab  cd=\"\"\n\nfunction validateAttributeString(attrStr, options) {\n  //console.log(\"start:\"+attrStr+\":end\");\n\n  //if(attrStr.trim().length === 0) return true; //empty string\n\n  const matches = util.getAllMatches(attrStr, validAttrStrRegxp);\n  const attrNames = {};\n\n  for (let i = 0; i < matches.length; i++) {\n    if (matches[i][1].length === 0) {\n      //nospace before attribute name: a=\"sd\"b=\"saf\"\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' has no space in starting.\", getPositionFromMatch(matches[i]))\n    } else if (matches[i][3] !== undefined && matches[i][4] === undefined) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+matches[i][2]+\"' is without value.\", getPositionFromMatch(matches[i]));\n    } else if (matches[i][3] === undefined && !options.allowBooleanAttributes) {\n      //independent attribute: ab\n      return getErrorObject('InvalidAttr', \"boolean attribute '\"+matches[i][2]+\"' is not allowed.\", getPositionFromMatch(matches[i]));\n    }\n    /* else if(matches[i][6] === undefined){//attribute without value: ab=\n                    return { err: { code:\"InvalidAttr\",msg:\"attribute \" + matches[i][2] + \" has no value assigned.\"}};\n                } */\n    const attrName = matches[i][2];\n    if (!validateAttrName(attrName)) {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is an invalid name.\", getPositionFromMatch(matches[i]));\n    }\n    if (!attrNames.hasOwnProperty(attrName)) {\n      //check for duplicate attribute.\n      attrNames[attrName] = 1;\n    } else {\n      return getErrorObject('InvalidAttr', \"Attribute '\"+attrName+\"' is repeated.\", getPositionFromMatch(matches[i]));\n    }\n  }\n\n  return true;\n}\n\nfunction validateNumberAmpersand(xmlData, i) {\n  let re = /\\d/;\n  if (xmlData[i] === 'x') {\n    i++;\n    re = /[\\da-fA-F]/;\n  }\n  for (; i < xmlData.length; i++) {\n    if (xmlData[i] === ';')\n      return i;\n    if (!xmlData[i].match(re))\n      break;\n  }\n  return -1;\n}\n\nfunction validateAmpersand(xmlData, i) {\n  // https://www.w3.org/TR/xml/#dt-charref\n  i++;\n  if (xmlData[i] === ';')\n    return -1;\n  if (xmlData[i] === '#') {\n    i++;\n    return validateNumberAmpersand(xmlData, i);\n  }\n  let count = 0;\n  for (; i < xmlData.length; i++, count++) {\n    if (xmlData[i].match(/\\w/) && count < 20)\n      continue;\n    if (xmlData[i] === ';')\n      break;\n    return -1;\n  }\n  return i;\n}\n\nfunction getErrorObject(code, message, lineNumber) {\n  return {\n    err: {\n      code: code,\n      msg: message,\n      line: lineNumber.line || lineNumber,\n      col: lineNumber.col,\n    },\n  };\n}\n\nfunction validateAttrName(attrName) {\n  return util.isName(attrName);\n}\n\n// const startsWithXML = /^xml/i;\n\nfunction validateTagName(tagname) {\n  return util.isName(tagname) /* && !tagname.match(startsWithXML) */;\n}\n\n//this function returns the line number for the character at the given index\nfunction getLineNumberForPosition(xmlData, index) {\n  const lines = xmlData.substring(0, index).split(/\\r?\\n/);\n  return {\n    line: lines.length,\n\n    // column number is last line's length + 1, because column numbering starts at 1:\n    col: lines[lines.length - 1].length + 1\n  };\n}\n\n//this function returns the position of the first character of match within attrStr\nfunction getPositionFromMatch(match) {\n  return match.startIndex + match[1].length;\n}\n","\nconst defaultOptions = {\n    preserveOrder: false,\n    attributeNamePrefix: '@_',\n    attributesGroupName: false,\n    textNodeName: '#text',\n    ignoreAttributes: true,\n    removeNSPrefix: false, // remove NS from tag name or attribute name if true\n    allowBooleanAttributes: false, //a tag can have attributes without any value\n    //ignoreRootElement : false,\n    parseTagValue: true,\n    parseAttributeValue: false,\n    trimValues: true, //Trim string values of tag and attributes\n    cdataPropName: false,\n    numberParseOptions: {\n      hex: true,\n      leadingZeros: true,\n      eNotation: true\n    },\n    tagValueProcessor: function(tagName, val) {\n      return val;\n    },\n    attributeValueProcessor: function(attrName, val) {\n      return val;\n    },\n    stopNodes: [], //nested tags will not be parsed even for errors\n    alwaysCreateTextNode: false,\n    isArray: () => false,\n    commentPropName: false,\n    unpairedTags: [],\n    processEntities: true,\n    htmlEntities: false,\n    ignoreDeclaration: false,\n    ignorePiTags: false,\n    transformTagName: false,\n    transformAttributeName: false,\n    updateTag: function(tagName, jPath, attrs){\n      return tagName\n    },\n    // skipEmptyListItem: false\n};\n   \nconst buildOptions = function(options) {\n    return Object.assign({}, defaultOptions, options);\n};\n\nexports.buildOptions = buildOptions;\nexports.defaultOptions = defaultOptions;","'use strict';\n\nclass XmlNode{\n  constructor(tagname) {\n    this.tagname = tagname;\n    this.child = []; //nested tags, text, cdata, comments in order\n    this[\":@\"] = {}; //attributes map\n  }\n  add(key,val){\n    // this.child.push( {name : key, val: val, isCdata: isCdata });\n    if(key === \"__proto__\") key = \"#__proto__\";\n    this.child.push( {[key]: val });\n  }\n  addChild(node) {\n    if(node.tagname === \"__proto__\") node.tagname = \"#__proto__\";\n    if(node[\":@\"] && Object.keys(node[\":@\"]).length > 0){\n      this.child.push( { [node.tagname]: node.child, [\":@\"]: node[\":@\"] });\n    }else{\n      this.child.push( { [node.tagname]: node.child });\n    }\n  };\n};\n\n\nmodule.exports = XmlNode;","const util = require('../util');\n\n//TODO: handle comments\nfunction readDocType(xmlData, i){\n    \n    const entities = {};\n    if( xmlData[i + 3] === 'O' &&\n         xmlData[i + 4] === 'C' &&\n         xmlData[i + 5] === 'T' &&\n         xmlData[i + 6] === 'Y' &&\n         xmlData[i + 7] === 'P' &&\n         xmlData[i + 8] === 'E')\n    {    \n        i = i+9;\n        let angleBracketsCount = 1;\n        let hasBody = false, comment = false;\n        let exp = \"\";\n        for(;i<xmlData.length;i++){\n            if (xmlData[i] === '<' && !comment) { //Determine the tag type\n                if( hasBody && isEntity(xmlData, i)){\n                    i += 7; \n                    [entityName, val,i] = readEntityExp(xmlData,i+1);\n                    if(val.indexOf(\"&\") === -1) //Parameter entities are not supported\n                        entities[ validateEntityName(entityName) ] = {\n                            regx : RegExp( `&${entityName};`,\"g\"),\n                            val: val\n                        };\n                }\n                else if( hasBody && isElement(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isAttlist(xmlData, i))  i += 8;//Not supported\n                else if( hasBody && isNotation(xmlData, i)) i += 9;//Not supported\n                else if( isComment)                         comment = true;\n                else                                        throw new Error(\"Invalid DOCTYPE\");\n\n                angleBracketsCount++;\n                exp = \"\";\n            } else if (xmlData[i] === '>') { //Read tag content\n                if(comment){\n                    if( xmlData[i - 1] === \"-\" && xmlData[i - 2] === \"-\"){\n                        comment = false;\n                        angleBracketsCount--;\n                    }\n                }else{\n                    angleBracketsCount--;\n                }\n                if (angleBracketsCount === 0) {\n                  break;\n                }\n            }else if( xmlData[i] === '['){\n                hasBody = true;\n            }else{\n                exp += xmlData[i];\n            }\n        }\n        if(angleBracketsCount !== 0){\n            throw new Error(`Unclosed DOCTYPE`);\n        }\n    }else{\n        throw new Error(`Invalid Tag instead of DOCTYPE`);\n    }\n    return {entities, i};\n}\n\nfunction readEntityExp(xmlData,i){\n    //External entities are not supported\n    //    <!ENTITY ext SYSTEM \"http://normal-website.com\" >\n\n    //Parameter entities are not supported\n    //    <!ENTITY entityname \"&anotherElement;\">\n\n    //Internal entities are supported\n    //    <!ENTITY entityname \"replacement text\">\n    \n    //read EntityName\n    let entityName = \"\";\n    for (; i < xmlData.length && (xmlData[i] !== \"'\" && xmlData[i] !== '\"' ); i++) {\n        // if(xmlData[i] === \" \") continue;\n        // else \n        entityName += xmlData[i];\n    }\n    entityName = entityName.trim();\n    if(entityName.indexOf(\" \") !== -1) throw new Error(\"External entites are not supported\");\n\n    //read Entity Value\n    const startChar = xmlData[i++];\n    let val = \"\"\n    for (; i < xmlData.length && xmlData[i] !== startChar ; i++) {\n        val += xmlData[i];\n    }\n    return [entityName, val, i];\n}\n\nfunction isComment(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === '-' &&\n    xmlData[i+3] === '-') return true\n    return false\n}\nfunction isEntity(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'N' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'I' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'Y') return true\n    return false\n}\nfunction isElement(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'E' &&\n    xmlData[i+3] === 'L' &&\n    xmlData[i+4] === 'E' &&\n    xmlData[i+5] === 'M' &&\n    xmlData[i+6] === 'E' &&\n    xmlData[i+7] === 'N' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\n\nfunction isAttlist(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'A' &&\n    xmlData[i+3] === 'T' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'L' &&\n    xmlData[i+6] === 'I' &&\n    xmlData[i+7] === 'S' &&\n    xmlData[i+8] === 'T') return true\n    return false\n}\nfunction isNotation(xmlData, i){\n    if(xmlData[i+1] === '!' &&\n    xmlData[i+2] === 'N' &&\n    xmlData[i+3] === 'O' &&\n    xmlData[i+4] === 'T' &&\n    xmlData[i+5] === 'A' &&\n    xmlData[i+6] === 'T' &&\n    xmlData[i+7] === 'I' &&\n    xmlData[i+8] === 'O' &&\n    xmlData[i+9] === 'N') return true\n    return false\n}\n\nfunction validateEntityName(name){\n    if (util.isName(name))\n\treturn name;\n    else\n        throw new Error(`Invalid entity name ${name}`);\n}\n\nmodule.exports = readDocType;\n","const hexRegex = /^[-+]?0x[a-fA-F0-9]+$/;\nconst numRegex = /^([\\-\\+])?(0*)(\\.[0-9]+([eE]\\-?[0-9]+)?|[0-9]+(\\.[0-9]+([eE]\\-?[0-9]+)?)?)$/;\n// const octRegex = /0x[a-z0-9]+/;\n// const binRegex = /0x[a-z0-9]+/;\n\n\n//polyfill\nif (!Number.parseInt && window.parseInt) {\n    Number.parseInt = window.parseInt;\n}\nif (!Number.parseFloat && window.parseFloat) {\n    Number.parseFloat = window.parseFloat;\n}\n\n  \nconst consider = {\n    hex :  true,\n    leadingZeros: true,\n    decimalPoint: \"\\.\",\n    eNotation: true\n    //skipLike: /regex/\n};\n\nfunction toNumber(str, options = {}){\n    // const options = Object.assign({}, consider);\n    // if(opt.leadingZeros === false){\n    //     options.leadingZeros = false;\n    // }else if(opt.hex === false){\n    //     options.hex = false;\n    // }\n\n    options = Object.assign({}, consider, options );\n    if(!str || typeof str !== \"string\" ) return str;\n    \n    let trimmedStr  = str.trim();\n    // if(trimmedStr === \"0.0\") return 0;\n    // else if(trimmedStr === \"+0.0\") return 0;\n    // else if(trimmedStr === \"-0.0\") return -0;\n\n    if(options.skipLike !== undefined && options.skipLike.test(trimmedStr)) return str;\n    else if (options.hex && hexRegex.test(trimmedStr)) {\n        return Number.parseInt(trimmedStr, 16);\n    // } else if (options.parseOct && octRegex.test(str)) {\n    //     return Number.parseInt(val, 8);\n    // }else if (options.parseBin && binRegex.test(str)) {\n    //     return Number.parseInt(val, 2);\n    }else{\n        //separate negative sign, leading zeros, and rest number\n        const match = numRegex.exec(trimmedStr);\n        if(match){\n            const sign = match[1];\n            const leadingZeros = match[2];\n            let numTrimmedByZeros = trimZeros(match[3]); //complete num without leading zeros\n            //trim ending zeros for floating number\n            \n            const eNotation = match[4] || match[6];\n            if(!options.leadingZeros && leadingZeros.length > 0 && sign && trimmedStr[2] !== \".\") return str; //-0123\n            else if(!options.leadingZeros && leadingZeros.length > 0 && !sign && trimmedStr[1] !== \".\") return str; //0123\n            else{//no leading zeros or leading zeros are allowed\n                const num = Number(trimmedStr);\n                const numStr = \"\" + num;\n                if(numStr.search(/[eE]/) !== -1){ //given number is long and parsed to eNotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(eNotation){ //given number has enotation\n                    if(options.eNotation) return num;\n                    else return str;\n                }else if(trimmedStr.indexOf(\".\") !== -1){ //floating number\n                    // const decimalPart = match[5].substr(1);\n                    // const intPart = trimmedStr.substr(0,trimmedStr.indexOf(\".\"));\n\n                    \n                    // const p = numStr.indexOf(\".\");\n                    // const givenIntPart = numStr.substr(0,p);\n                    // const givenDecPart = numStr.substr(p+1);\n                    if(numStr === \"0\" && (numTrimmedByZeros === \"\") ) return num; //0.0\n                    else if(numStr === numTrimmedByZeros) return num; //0.456. 0.79000\n                    else if( sign && numStr === \"-\"+numTrimmedByZeros) return num;\n                    else return str;\n                }\n                \n                if(leadingZeros){\n                    // if(numTrimmedByZeros === numStr){\n                    //     if(options.leadingZeros) return num;\n                    //     else return str;\n                    // }else return str;\n                    if(numTrimmedByZeros === numStr) return num;\n                    else if(sign+numTrimmedByZeros === numStr) return num;\n                    else return str;\n                }\n\n                if(trimmedStr === numStr) return num;\n                else if(trimmedStr === sign+numStr) return num;\n                // else{\n                //     //number with +/- sign\n                //     trimmedStr.test(/[-+][0-9]);\n\n                // }\n                return str;\n            }\n            // else if(!eNotation && trimmedStr && trimmedStr !== Number(trimmedStr) ) return str;\n            \n        }else{ //non-numeric string\n            return str;\n        }\n    }\n}\n\n/**\n * \n * @param {string} numStr without leading zeros\n * @returns \n */\nfunction trimZeros(numStr){\n    if(numStr && numStr.indexOf(\".\") !== -1){//float\n        numStr = numStr.replace(/0+$/, \"\"); //remove ending zeros\n        if(numStr === \".\")  numStr = \"0\";\n        else if(numStr[0] === \".\")  numStr = \"0\"+numStr;\n        else if(numStr[numStr.length-1] === \".\")  numStr = numStr.substr(0,numStr.length-1);\n        return numStr;\n    }\n    return numStr;\n}\nmodule.exports = toNumber\n","'use strict';\n///@ts-check\n\nconst util = require('../util');\nconst xmlNode = require('./xmlNode');\nconst readDocType = require(\"./DocTypeReader\");\nconst toNumber = require(\"strnum\");\n\nconst regx =\n  '<((!\\\\[CDATA\\\\[([\\\\s\\\\S]*?)(]]>))|((NAME:)?(NAME))([^>]*)>|((\\\\/)(NAME)\\\\s*>))([^<]*)'\n  .replace(/NAME/g, util.nameRegexp);\n\n//const tagsRegx = new RegExp(\"<(\\\\/?[\\\\w:\\\\-\\._]+)([^>]*)>(\\\\s*\"+cdataRegx+\")*([^<]+)?\",\"g\");\n//const tagsRegx = new RegExp(\"<(\\\\/?)((\\\\w*:)?([\\\\w:\\\\-\\._]+))([^>]*)>([^<]*)(\"+cdataRegx+\"([^<]*))*([^<]+)?\",\"g\");\n\nclass OrderedObjParser{\n  constructor(options){\n    this.options = options;\n    this.currentNode = null;\n    this.tagsNodeStack = [];\n    this.docTypeEntities = {};\n    this.lastEntities = {\n      \"apos\" : { regex: /&(apos|#39|#x27);/g, val : \"'\"},\n      \"gt\" : { regex: /&(gt|#62|#x3E);/g, val : \">\"},\n      \"lt\" : { regex: /&(lt|#60|#x3C);/g, val : \"<\"},\n      \"quot\" : { regex: /&(quot|#34|#x22);/g, val : \"\\\"\"},\n    };\n    this.ampEntity = { regex: /&(amp|#38|#x26);/g, val : \"&\"};\n    this.htmlEntities = {\n      \"space\": { regex: /&(nbsp|#160);/g, val: \" \" },\n      // \"lt\" : { regex: /&(lt|#60);/g, val: \"<\" },\n      // \"gt\" : { regex: /&(gt|#62);/g, val: \">\" },\n      // \"amp\" : { regex: /&(amp|#38);/g, val: \"&\" },\n      // \"quot\" : { regex: /&(quot|#34);/g, val: \"\\\"\" },\n      // \"apos\" : { regex: /&(apos|#39);/g, val: \"'\" },\n      \"cent\" : { regex: /&(cent|#162);/g, val: \"¢\" },\n      \"pound\" : { regex: /&(pound|#163);/g, val: \"£\" },\n      \"yen\" : { regex: /&(yen|#165);/g, val: \"¥\" },\n      \"euro\" : { regex: /&(euro|#8364);/g, val: \"€\" },\n      \"copyright\" : { regex: /&(copy|#169);/g, val: \"©\" },\n      \"reg\" : { regex: /&(reg|#174);/g, val: \"®\" },\n      \"inr\" : { regex: /&(inr|#8377);/g, val: \"₹\" },\n    };\n    this.addExternalEntities = addExternalEntities;\n    this.parseXml = parseXml;\n    this.parseTextData = parseTextData;\n    this.resolveNameSpace = resolveNameSpace;\n    this.buildAttributesMap = buildAttributesMap;\n    this.isItStopNode = isItStopNode;\n    this.replaceEntitiesValue = replaceEntitiesValue;\n    this.readStopNodeData = readStopNodeData;\n    this.saveTextToParentTag = saveTextToParentTag;\n    this.addChild = addChild;\n  }\n\n}\n\nfunction addExternalEntities(externalEntities){\n  const entKeys = Object.keys(externalEntities);\n  for (let i = 0; i < entKeys.length; i++) {\n    const ent = entKeys[i];\n    this.lastEntities[ent] = {\n       regex: new RegExp(\"&\"+ent+\";\",\"g\"),\n       val : externalEntities[ent]\n    }\n  }\n}\n\n/**\n * @param {string} val\n * @param {string} tagName\n * @param {string} jPath\n * @param {boolean} dontTrim\n * @param {boolean} hasAttributes\n * @param {boolean} isLeafNode\n * @param {boolean} escapeEntities\n */\nfunction parseTextData(val, tagName, jPath, dontTrim, hasAttributes, isLeafNode, escapeEntities) {\n  if (val !== undefined) {\n    if (this.options.trimValues && !dontTrim) {\n      val = val.trim();\n    }\n    if(val.length > 0){\n      if(!escapeEntities) val = this.replaceEntitiesValue(val);\n      \n      const newval = this.options.tagValueProcessor(tagName, val, jPath, hasAttributes, isLeafNode);\n      if(newval === null || newval === undefined){\n        //don't parse\n        return val;\n      }else if(typeof newval !== typeof val || newval !== val){\n        //overwrite\n        return newval;\n      }else if(this.options.trimValues){\n        return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n      }else{\n        const trimmedVal = val.trim();\n        if(trimmedVal === val){\n          return parseValue(val, this.options.parseTagValue, this.options.numberParseOptions);\n        }else{\n          return val;\n        }\n      }\n    }\n  }\n}\n\nfunction resolveNameSpace(tagname) {\n  if (this.options.removeNSPrefix) {\n    const tags = tagname.split(':');\n    const prefix = tagname.charAt(0) === '/' ? '/' : '';\n    if (tags[0] === 'xmlns') {\n      return '';\n    }\n    if (tags.length === 2) {\n      tagname = prefix + tags[1];\n    }\n  }\n  return tagname;\n}\n\n//TODO: change regex to capture NS\n//const attrsRegx = new RegExp(\"([\\\\w\\\\-\\\\.\\\\:]+)\\\\s*=\\\\s*(['\\\"])((.|\\n)*?)\\\\2\",\"gm\");\nconst attrsRegx = new RegExp('([^\\\\s=]+)\\\\s*(=\\\\s*([\\'\"])([\\\\s\\\\S]*?)\\\\3)?', 'gm');\n\nfunction buildAttributesMap(attrStr, jPath, tagName) {\n  if (!this.options.ignoreAttributes && typeof attrStr === 'string') {\n    // attrStr = attrStr.replace(/\\r?\\n/g, ' ');\n    //attrStr = attrStr || attrStr.trim();\n\n    const matches = util.getAllMatches(attrStr, attrsRegx);\n    const len = matches.length; //don't make it inline\n    const attrs = {};\n    for (let i = 0; i < len; i++) {\n      const attrName = this.resolveNameSpace(matches[i][1]);\n      let oldVal = matches[i][4];\n      let aName = this.options.attributeNamePrefix + attrName;\n      if (attrName.length) {\n        if (this.options.transformAttributeName) {\n          aName = this.options.transformAttributeName(aName);\n        }\n        if(aName === \"__proto__\") aName  = \"#__proto__\";\n        if (oldVal !== undefined) {\n          if (this.options.trimValues) {\n            oldVal = oldVal.trim();\n          }\n          oldVal = this.replaceEntitiesValue(oldVal);\n          const newVal = this.options.attributeValueProcessor(attrName, oldVal, jPath);\n          if(newVal === null || newVal === undefined){\n            //don't parse\n            attrs[aName] = oldVal;\n          }else if(typeof newVal !== typeof oldVal || newVal !== oldVal){\n            //overwrite\n            attrs[aName] = newVal;\n          }else{\n            //parse\n            attrs[aName] = parseValue(\n              oldVal,\n              this.options.parseAttributeValue,\n              this.options.numberParseOptions\n            );\n          }\n        } else if (this.options.allowBooleanAttributes) {\n          attrs[aName] = true;\n        }\n      }\n    }\n    if (!Object.keys(attrs).length) {\n      return;\n    }\n    if (this.options.attributesGroupName) {\n      const attrCollection = {};\n      attrCollection[this.options.attributesGroupName] = attrs;\n      return attrCollection;\n    }\n    return attrs\n  }\n}\n\nconst parseXml = function(xmlData) {\n  xmlData = xmlData.replace(/\\r\\n?/g, \"\\n\"); //TODO: remove this line\n  const xmlObj = new xmlNode('!xml');\n  let currentNode = xmlObj;\n  let textData = \"\";\n  let jPath = \"\";\n  for(let i=0; i< xmlData.length; i++){//for each char in XML data\n    const ch = xmlData[i];\n    if(ch === '<'){\n      // const nextIndex = i+1;\n      // const _2ndChar = xmlData[nextIndex];\n      if( xmlData[i+1] === '/') {//Closing Tag\n        const closeIndex = findClosingIndex(xmlData, \">\", i, \"Closing Tag is not closed.\")\n        let tagName = xmlData.substring(i+2,closeIndex).trim();\n\n        if(this.options.removeNSPrefix){\n          const colonIndex = tagName.indexOf(\":\");\n          if(colonIndex !== -1){\n            tagName = tagName.substr(colonIndex+1);\n          }\n        }\n\n        if(this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n\n        if(currentNode){\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        }\n\n        //check if last tag of nested tag was unpaired tag\n        const lastTagName = jPath.substring(jPath.lastIndexOf(\".\")+1);\n        if(tagName && this.options.unpairedTags.indexOf(tagName) !== -1 ){\n          throw new Error(`Unpaired tag can not be used as closing tag: </${tagName}>`);\n        }\n        let propIndex = 0\n        if(lastTagName && this.options.unpairedTags.indexOf(lastTagName) !== -1 ){\n          propIndex = jPath.lastIndexOf('.', jPath.lastIndexOf('.')-1)\n          this.tagsNodeStack.pop();\n        }else{\n          propIndex = jPath.lastIndexOf(\".\");\n        }\n        jPath = jPath.substring(0, propIndex);\n\n        currentNode = this.tagsNodeStack.pop();//avoid recursion, set the parent tag scope\n        textData = \"\";\n        i = closeIndex;\n      } else if( xmlData[i+1] === '?') {\n\n        let tagData = readTagExp(xmlData,i, false, \"?>\");\n        if(!tagData) throw new Error(\"Pi Tag is not closed.\");\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n        if( (this.options.ignoreDeclaration && tagData.tagName === \"?xml\") || this.options.ignorePiTags){\n\n        }else{\n  \n          const childNode = new xmlNode(tagData.tagName);\n          childNode.add(this.options.textNodeName, \"\");\n          \n          if(tagData.tagName !== tagData.tagExp && tagData.attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagData.tagExp, jPath, tagData.tagName);\n          }\n          this.addChild(currentNode, childNode, jPath)\n\n        }\n\n\n        i = tagData.closeIndex + 1;\n      } else if(xmlData.substr(i + 1, 3) === '!--') {\n        const endIndex = findClosingIndex(xmlData, \"-->\", i+4, \"Comment is not closed.\")\n        if(this.options.commentPropName){\n          const comment = xmlData.substring(i + 4, endIndex - 2);\n\n          textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n          currentNode.add(this.options.commentPropName, [ { [this.options.textNodeName] : comment } ]);\n        }\n        i = endIndex;\n      } else if( xmlData.substr(i + 1, 2) === '!D') {\n        const result = readDocType(xmlData, i);\n        this.docTypeEntities = result.entities;\n        i = result.i;\n      }else if(xmlData.substr(i + 1, 2) === '![') {\n        const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"CDATA is not closed.\") - 2;\n        const tagExp = xmlData.substring(i + 9,closeIndex);\n\n        textData = this.saveTextToParentTag(textData, currentNode, jPath);\n\n        //cdata should be set even if it is 0 length string\n        if(this.options.cdataPropName){\n          // let val = this.parseTextData(tagExp, this.options.cdataPropName, jPath + \".\" + this.options.cdataPropName, true, false, true);\n          // if(!val) val = \"\";\n          currentNode.add(this.options.cdataPropName, [ { [this.options.textNodeName] : tagExp } ]);\n        }else{\n          let val = this.parseTextData(tagExp, currentNode.tagname, jPath, true, false, true);\n          if(val == undefined) val = \"\";\n          currentNode.add(this.options.textNodeName, val);\n        }\n        \n        i = closeIndex + 2;\n      }else {//Opening tag\n        let result = readTagExp(xmlData,i, this.options.removeNSPrefix);\n        let tagName= result.tagName;\n        const rawTagName = result.rawTagName;\n        let tagExp = result.tagExp;\n        let attrExpPresent = result.attrExpPresent;\n        let closeIndex = result.closeIndex;\n\n        if (this.options.transformTagName) {\n          tagName = this.options.transformTagName(tagName);\n        }\n        \n        //save text as child node\n        if (currentNode && textData) {\n          if(currentNode.tagname !== '!xml'){\n            //when nested tag is found\n            textData = this.saveTextToParentTag(textData, currentNode, jPath, false);\n          }\n        }\n\n        //check if last tag was unpaired tag\n        const lastTag = currentNode;\n        if(lastTag && this.options.unpairedTags.indexOf(lastTag.tagname) !== -1 ){\n          currentNode = this.tagsNodeStack.pop();\n          jPath = jPath.substring(0, jPath.lastIndexOf(\".\"));\n        }\n        if(tagName !== xmlObj.tagname){\n          jPath += jPath ? \".\" + tagName : tagName;\n        }\n        if (this.isItStopNode(this.options.stopNodes, jPath, tagName)) {\n          let tagContent = \"\";\n          //self-closing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            i = result.closeIndex;\n          }\n          //unpaired tag\n          else if(this.options.unpairedTags.indexOf(tagName) !== -1){\n            i = result.closeIndex;\n          }\n          //normal tag\n          else{\n            //read until closing tag is found\n            const result = this.readStopNodeData(xmlData, rawTagName, closeIndex + 1);\n            if(!result) throw new Error(`Unexpected end of ${rawTagName}`);\n            i = result.i;\n            tagContent = result.tagContent;\n          }\n\n          const childNode = new xmlNode(tagName);\n          if(tagName !== tagExp && attrExpPresent){\n            childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n          }\n          if(tagContent) {\n            tagContent = this.parseTextData(tagContent, tagName, jPath, true, attrExpPresent, true, true);\n          }\n          \n          jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          childNode.add(this.options.textNodeName, tagContent);\n          \n          this.addChild(currentNode, childNode, jPath)\n        }else{\n  //selfClosing tag\n          if(tagExp.length > 0 && tagExp.lastIndexOf(\"/\") === tagExp.length - 1){\n            if(tagName[tagName.length - 1] === \"/\"){ //remove trailing '/'\n              tagName = tagName.substr(0, tagName.length - 1);\n              jPath = jPath.substr(0, jPath.length - 1);\n              tagExp = tagName;\n            }else{\n              tagExp = tagExp.substr(0, tagExp.length - 1);\n            }\n            \n            if(this.options.transformTagName) {\n              tagName = this.options.transformTagName(tagName);\n            }\n\n            const childNode = new xmlNode(tagName);\n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            jPath = jPath.substr(0, jPath.lastIndexOf(\".\"));\n          }\n    //opening tag\n          else{\n            const childNode = new xmlNode( tagName);\n            this.tagsNodeStack.push(currentNode);\n            \n            if(tagName !== tagExp && attrExpPresent){\n              childNode[\":@\"] = this.buildAttributesMap(tagExp, jPath, tagName);\n            }\n            this.addChild(currentNode, childNode, jPath)\n            currentNode = childNode;\n          }\n          textData = \"\";\n          i = closeIndex;\n        }\n      }\n    }else{\n      textData += xmlData[i];\n    }\n  }\n  return xmlObj.child;\n}\n\nfunction addChild(currentNode, childNode, jPath){\n  const result = this.options.updateTag(childNode.tagname, jPath, childNode[\":@\"])\n  if(result === false){\n  }else if(typeof result === \"string\"){\n    childNode.tagname = result\n    currentNode.addChild(childNode);\n  }else{\n    currentNode.addChild(childNode);\n  }\n}\n\nconst replaceEntitiesValue = function(val){\n\n  if(this.options.processEntities){\n    for(let entityName in this.docTypeEntities){\n      const entity = this.docTypeEntities[entityName];\n      val = val.replace( entity.regx, entity.val);\n    }\n    for(let entityName in this.lastEntities){\n      const entity = this.lastEntities[entityName];\n      val = val.replace( entity.regex, entity.val);\n    }\n    if(this.options.htmlEntities){\n      for(let entityName in this.htmlEntities){\n        const entity = this.htmlEntities[entityName];\n        val = val.replace( entity.regex, entity.val);\n      }\n    }\n    val = val.replace( this.ampEntity.regex, this.ampEntity.val);\n  }\n  return val;\n}\nfunction saveTextToParentTag(textData, currentNode, jPath, isLeafNode) {\n  if (textData) { //store previously collected data as textNode\n    if(isLeafNode === undefined) isLeafNode = Object.keys(currentNode.child).length === 0\n    \n    textData = this.parseTextData(textData,\n      currentNode.tagname,\n      jPath,\n      false,\n      currentNode[\":@\"] ? Object.keys(currentNode[\":@\"]).length !== 0 : false,\n      isLeafNode);\n\n    if (textData !== undefined && textData !== \"\")\n      currentNode.add(this.options.textNodeName, textData);\n    textData = \"\";\n  }\n  return textData;\n}\n\n//TODO: use jPath to simplify the logic\n/**\n * \n * @param {string[]} stopNodes \n * @param {string} jPath\n * @param {string} currentTagName \n */\nfunction isItStopNode(stopNodes, jPath, currentTagName){\n  const allNodesExp = \"*.\" + currentTagName;\n  for (const stopNodePath in stopNodes) {\n    const stopNodeExp = stopNodes[stopNodePath];\n    if( allNodesExp === stopNodeExp || jPath === stopNodeExp  ) return true;\n  }\n  return false;\n}\n\n/**\n * Returns the tag Expression and where it is ending handling single-double quotes situation\n * @param {string} xmlData \n * @param {number} i starting index\n * @returns \n */\nfunction tagExpWithClosingIndex(xmlData, i, closingChar = \">\"){\n  let attrBoundary;\n  let tagExp = \"\";\n  for (let index = i; index < xmlData.length; index++) {\n    let ch = xmlData[index];\n    if (attrBoundary) {\n        if (ch === attrBoundary) attrBoundary = \"\";//reset\n    } else if (ch === '\"' || ch === \"'\") {\n        attrBoundary = ch;\n    } else if (ch === closingChar[0]) {\n      if(closingChar[1]){\n        if(xmlData[index + 1] === closingChar[1]){\n          return {\n            data: tagExp,\n            index: index\n          }\n        }\n      }else{\n        return {\n          data: tagExp,\n          index: index\n        }\n      }\n    } else if (ch === '\\t') {\n      ch = \" \"\n    }\n    tagExp += ch;\n  }\n}\n\nfunction findClosingIndex(xmlData, str, i, errMsg){\n  const closingIndex = xmlData.indexOf(str, i);\n  if(closingIndex === -1){\n    throw new Error(errMsg)\n  }else{\n    return closingIndex + str.length - 1;\n  }\n}\n\nfunction readTagExp(xmlData,i, removeNSPrefix, closingChar = \">\"){\n  const result = tagExpWithClosingIndex(xmlData, i+1, closingChar);\n  if(!result) return;\n  let tagExp = result.data;\n  const closeIndex = result.index;\n  const separatorIndex = tagExp.search(/\\s/);\n  let tagName = tagExp;\n  let attrExpPresent = true;\n  if(separatorIndex !== -1){//separate tag name and attributes expression\n    tagName = tagExp.substr(0, separatorIndex).replace(/\\s\\s*$/, '');\n    tagExp = tagExp.substr(separatorIndex + 1);\n  }\n\n  const rawTagName = tagName;\n  if(removeNSPrefix){\n    const colonIndex = tagName.indexOf(\":\");\n    if(colonIndex !== -1){\n      tagName = tagName.substr(colonIndex+1);\n      attrExpPresent = tagName !== result.data.substr(colonIndex + 1);\n    }\n  }\n\n  return {\n    tagName: tagName,\n    tagExp: tagExp,\n    closeIndex: closeIndex,\n    attrExpPresent: attrExpPresent,\n    rawTagName: rawTagName,\n  }\n}\n/**\n * find paired tag for a stop node\n * @param {string} xmlData \n * @param {string} tagName \n * @param {number} i \n */\nfunction readStopNodeData(xmlData, tagName, i){\n  const startIndex = i;\n  // Starting at 1 since we already have an open tag\n  let openTagCount = 1;\n\n  for (; i < xmlData.length; i++) {\n    if( xmlData[i] === \"<\"){ \n      if (xmlData[i+1] === \"/\") {//close tag\n          const closeIndex = findClosingIndex(xmlData, \">\", i, `${tagName} is not closed`);\n          let closeTagName = xmlData.substring(i+2,closeIndex).trim();\n          if(closeTagName === tagName){\n            openTagCount--;\n            if (openTagCount === 0) {\n              return {\n                tagContent: xmlData.substring(startIndex, i),\n                i : closeIndex\n              }\n            }\n          }\n          i=closeIndex;\n        } else if(xmlData[i+1] === '?') { \n          const closeIndex = findClosingIndex(xmlData, \"?>\", i+1, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 3) === '!--') { \n          const closeIndex = findClosingIndex(xmlData, \"-->\", i+3, \"StopNode is not closed.\")\n          i=closeIndex;\n        } else if(xmlData.substr(i + 1, 2) === '![') { \n          const closeIndex = findClosingIndex(xmlData, \"]]>\", i, \"StopNode is not closed.\") - 2;\n          i=closeIndex;\n        } else {\n          const tagData = readTagExp(xmlData, i, '>')\n\n          if (tagData) {\n            const openTagName = tagData && tagData.tagName;\n            if (openTagName === tagName && tagData.tagExp[tagData.tagExp.length-1] !== \"/\") {\n              openTagCount++;\n            }\n            i=tagData.closeIndex;\n          }\n        }\n      }\n  }//end for loop\n}\n\nfunction parseValue(val, shouldParse, options) {\n  if (shouldParse && typeof val === 'string') {\n    //console.log(options)\n    const newval = val.trim();\n    if(newval === 'true' ) return true;\n    else if(newval === 'false' ) return false;\n    else return toNumber(val, options);\n  } else {\n    if (util.isExist(val)) {\n      return val;\n    } else {\n      return '';\n    }\n  }\n}\n\n\nmodule.exports = OrderedObjParser;\n","'use strict';\n\n/**\n * \n * @param {array} node \n * @param {any} options \n * @returns \n */\nfunction prettify(node, options){\n  return compress( node, options);\n}\n\n/**\n * \n * @param {array} arr \n * @param {object} options \n * @param {string} jPath \n * @returns object\n */\nfunction compress(arr, options, jPath){\n  let text;\n  const compressedObj = {};\n  for (let i = 0; i < arr.length; i++) {\n    const tagObj = arr[i];\n    const property = propName(tagObj);\n    let newJpath = \"\";\n    if(jPath === undefined) newJpath = property;\n    else newJpath = jPath + \".\" + property;\n\n    if(property === options.textNodeName){\n      if(text === undefined) text = tagObj[property];\n      else text += \"\" + tagObj[property];\n    }else if(property === undefined){\n      continue;\n    }else if(tagObj[property]){\n      \n      let val = compress(tagObj[property], options, newJpath);\n      const isLeaf = isLeafTag(val, options);\n\n      if(tagObj[\":@\"]){\n        assignAttributes( val, tagObj[\":@\"], newJpath, options);\n      }else if(Object.keys(val).length === 1 && val[options.textNodeName] !== undefined && !options.alwaysCreateTextNode){\n        val = val[options.textNodeName];\n      }else if(Object.keys(val).length === 0){\n        if(options.alwaysCreateTextNode) val[options.textNodeName] = \"\";\n        else val = \"\";\n      }\n\n      if(compressedObj[property] !== undefined && compressedObj.hasOwnProperty(property)) {\n        if(!Array.isArray(compressedObj[property])) {\n            compressedObj[property] = [ compressedObj[property] ];\n        }\n        compressedObj[property].push(val);\n      }else{\n        //TODO: if a node is not an array, then check if it should be an array\n        //also determine if it is a leaf node\n        if (options.isArray(property, newJpath, isLeaf )) {\n          compressedObj[property] = [val];\n        }else{\n          compressedObj[property] = val;\n        }\n      }\n    }\n    \n  }\n  // if(text && text.length > 0) compressedObj[options.textNodeName] = text;\n  if(typeof text === \"string\"){\n    if(text.length > 0) compressedObj[options.textNodeName] = text;\n  }else if(text !== undefined) compressedObj[options.textNodeName] = text;\n  return compressedObj;\n}\n\nfunction propName(obj){\n  const keys = Object.keys(obj);\n  for (let i = 0; i < keys.length; i++) {\n    const key = keys[i];\n    if(key !== \":@\") return key;\n  }\n}\n\nfunction assignAttributes(obj, attrMap, jpath, options){\n  if (attrMap) {\n    const keys = Object.keys(attrMap);\n    const len = keys.length; //don't make it inline\n    for (let i = 0; i < len; i++) {\n      const atrrName = keys[i];\n      if (options.isArray(atrrName, jpath + \".\" + atrrName, true, true)) {\n        obj[atrrName] = [ attrMap[atrrName] ];\n      } else {\n        obj[atrrName] = attrMap[atrrName];\n      }\n    }\n  }\n}\n\nfunction isLeafTag(obj, options){\n  const { textNodeName } = options;\n  const propCount = Object.keys(obj).length;\n  \n  if (propCount === 0) {\n    return true;\n  }\n\n  if (\n    propCount === 1 &&\n    (obj[textNodeName] || typeof obj[textNodeName] === \"boolean\" || obj[textNodeName] === 0)\n  ) {\n    return true;\n  }\n\n  return false;\n}\nexports.prettify = prettify;\n","const { buildOptions} = require(\"./OptionsBuilder\");\nconst OrderedObjParser = require(\"./OrderedObjParser\");\nconst { prettify} = require(\"./node2json\");\nconst validator = require('../validator');\n\nclass XMLParser{\n    \n    constructor(options){\n        this.externalEntities = {};\n        this.options = buildOptions(options);\n        \n    }\n    /**\n     * Parse XML dats to JS object \n     * @param {string|Buffer} xmlData \n     * @param {boolean|Object} validationOption \n     */\n    parse(xmlData,validationOption){\n        if(typeof xmlData === \"string\"){\n        }else if( xmlData.toString){\n            xmlData = xmlData.toString();\n        }else{\n            throw new Error(\"XML data is accepted in String or Bytes[] form.\")\n        }\n        if( validationOption){\n            if(validationOption === true) validationOption = {}; //validate with default options\n            \n            const result = validator.validate(xmlData, validationOption);\n            if (result !== true) {\n              throw Error( `${result.err.msg}:${result.err.line}:${result.err.col}` )\n            }\n          }\n        const orderedObjParser = new OrderedObjParser(this.options);\n        orderedObjParser.addExternalEntities(this.externalEntities);\n        const orderedResult = orderedObjParser.parseXml(xmlData);\n        if(this.options.preserveOrder || orderedResult === undefined) return orderedResult;\n        else return prettify(orderedResult, this.options);\n    }\n\n    /**\n     * Add Entity which is not by default supported by this library\n     * @param {string} key \n     * @param {string} value \n     */\n    addEntity(key, value){\n        if(value.indexOf(\"&\") !== -1){\n            throw new Error(\"Entity value can't have '&'\")\n        }else if(key.indexOf(\"&\") !== -1 || key.indexOf(\";\") !== -1){\n            throw new Error(\"An entity must be set without '&' and ';'. Eg. use '#xD' for '&#xD;'\")\n        }else if(value === \"&\"){\n            throw new Error(\"An entity with value '&' is not permitted\");\n        }else{\n            this.externalEntities[key] = value;\n        }\n    }\n}\n\nmodule.exports = XMLParser;","const EOL = \"\\n\";\n\n/**\n * \n * @param {array} jArray \n * @param {any} options \n * @returns \n */\nfunction toXml(jArray, options) {\n    let indentation = \"\";\n    if (options.format && options.indentBy.length > 0) {\n        indentation = EOL;\n    }\n    return arrToStr(jArray, options, \"\", indentation);\n}\n\nfunction arrToStr(arr, options, jPath, indentation) {\n    let xmlStr = \"\";\n    let isPreviousElementTag = false;\n\n    for (let i = 0; i < arr.length; i++) {\n        const tagObj = arr[i];\n        const tagName = propName(tagObj);\n        if(tagName === undefined) continue;\n\n        let newJPath = \"\";\n        if (jPath.length === 0) newJPath = tagName\n        else newJPath = `${jPath}.${tagName}`;\n\n        if (tagName === options.textNodeName) {\n            let tagText = tagObj[tagName];\n            if (!isStopNode(newJPath, options)) {\n                tagText = options.tagValueProcessor(tagName, tagText);\n                tagText = replaceEntitiesValue(tagText, options);\n            }\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += tagText;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.cdataPropName) {\n            if (isPreviousElementTag) {\n                xmlStr += indentation;\n            }\n            xmlStr += `<![CDATA[${tagObj[tagName][0][options.textNodeName]}]]>`;\n            isPreviousElementTag = false;\n            continue;\n        } else if (tagName === options.commentPropName) {\n            xmlStr += indentation + `<!--${tagObj[tagName][0][options.textNodeName]}-->`;\n            isPreviousElementTag = true;\n            continue;\n        } else if (tagName[0] === \"?\") {\n            const attStr = attr_to_str(tagObj[\":@\"], options);\n            const tempInd = tagName === \"?xml\" ? \"\" : indentation;\n            let piTextNodeName = tagObj[tagName][0][options.textNodeName];\n            piTextNodeName = piTextNodeName.length !== 0 ? \" \" + piTextNodeName : \"\"; //remove extra spacing\n            xmlStr += tempInd + `<${tagName}${piTextNodeName}${attStr}?>`;\n            isPreviousElementTag = true;\n            continue;\n        }\n        let newIdentation = indentation;\n        if (newIdentation !== \"\") {\n            newIdentation += options.indentBy;\n        }\n        const attStr = attr_to_str(tagObj[\":@\"], options);\n        const tagStart = indentation + `<${tagName}${attStr}`;\n        const tagValue = arrToStr(tagObj[tagName], options, newJPath, newIdentation);\n        if (options.unpairedTags.indexOf(tagName) !== -1) {\n            if (options.suppressUnpairedNode) xmlStr += tagStart + \">\";\n            else xmlStr += tagStart + \"/>\";\n        } else if ((!tagValue || tagValue.length === 0) && options.suppressEmptyNode) {\n            xmlStr += tagStart + \"/>\";\n        } else if (tagValue && tagValue.endsWith(\">\")) {\n            xmlStr += tagStart + `>${tagValue}${indentation}</${tagName}>`;\n        } else {\n            xmlStr += tagStart + \">\";\n            if (tagValue && indentation !== \"\" && (tagValue.includes(\"/>\") || tagValue.includes(\"</\"))) {\n                xmlStr += indentation + options.indentBy + tagValue + indentation;\n            } else {\n                xmlStr += tagValue;\n            }\n            xmlStr += `</${tagName}>`;\n        }\n        isPreviousElementTag = true;\n    }\n\n    return xmlStr;\n}\n\nfunction propName(obj) {\n    const keys = Object.keys(obj);\n    for (let i = 0; i < keys.length; i++) {\n        const key = keys[i];\n        if(!obj.hasOwnProperty(key)) continue;\n        if (key !== \":@\") return key;\n    }\n}\n\nfunction attr_to_str(attrMap, options) {\n    let attrStr = \"\";\n    if (attrMap && !options.ignoreAttributes) {\n        for (let attr in attrMap) {\n            if(!attrMap.hasOwnProperty(attr)) continue;\n            let attrVal = options.attributeValueProcessor(attr, attrMap[attr]);\n            attrVal = replaceEntitiesValue(attrVal, options);\n            if (attrVal === true && options.suppressBooleanAttributes) {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}`;\n            } else {\n                attrStr += ` ${attr.substr(options.attributeNamePrefix.length)}=\"${attrVal}\"`;\n            }\n        }\n    }\n    return attrStr;\n}\n\nfunction isStopNode(jPath, options) {\n    jPath = jPath.substr(0, jPath.length - options.textNodeName.length - 1);\n    let tagName = jPath.substr(jPath.lastIndexOf(\".\") + 1);\n    for (let index in options.stopNodes) {\n        if (options.stopNodes[index] === jPath || options.stopNodes[index] === \"*.\" + tagName) return true;\n    }\n    return false;\n}\n\nfunction replaceEntitiesValue(textValue, options) {\n    if (textValue && textValue.length > 0 && options.processEntities) {\n        for (let i = 0; i < options.entities.length; i++) {\n            const entity = options.entities[i];\n            textValue = textValue.replace(entity.regex, entity.val);\n        }\n    }\n    return textValue;\n}\nmodule.exports = toXml;\n","'use strict';\n//parse Empty Node as self closing node\nconst buildFromOrderedJs = require('./orderedJs2Xml');\n\nconst defaultOptions = {\n  attributeNamePrefix: '@_',\n  attributesGroupName: false,\n  textNodeName: '#text',\n  ignoreAttributes: true,\n  cdataPropName: false,\n  format: false,\n  indentBy: '  ',\n  suppressEmptyNode: false,\n  suppressUnpairedNode: true,\n  suppressBooleanAttributes: true,\n  tagValueProcessor: function(key, a) {\n    return a;\n  },\n  attributeValueProcessor: function(attrName, a) {\n    return a;\n  },\n  preserveOrder: false,\n  commentPropName: false,\n  unpairedTags: [],\n  entities: [\n    { regex: new RegExp(\"&\", \"g\"), val: \"&amp;\" },//it must be on top\n    { regex: new RegExp(\">\", \"g\"), val: \"&gt;\" },\n    { regex: new RegExp(\"<\", \"g\"), val: \"&lt;\" },\n    { regex: new RegExp(\"\\'\", \"g\"), val: \"&apos;\" },\n    { regex: new RegExp(\"\\\"\", \"g\"), val: \"&quot;\" }\n  ],\n  processEntities: true,\n  stopNodes: [],\n  // transformTagName: false,\n  // transformAttributeName: false,\n  oneListGroup: false\n};\n\nfunction Builder(options) {\n  this.options = Object.assign({}, defaultOptions, options);\n  if (this.options.ignoreAttributes || this.options.attributesGroupName) {\n    this.isAttribute = function(/*a*/) {\n      return false;\n    };\n  } else {\n    this.attrPrefixLen = this.options.attributeNamePrefix.length;\n    this.isAttribute = isAttribute;\n  }\n\n  this.processTextOrObjNode = processTextOrObjNode\n\n  if (this.options.format) {\n    this.indentate = indentate;\n    this.tagEndChar = '>\\n';\n    this.newLine = '\\n';\n  } else {\n    this.indentate = function() {\n      return '';\n    };\n    this.tagEndChar = '>';\n    this.newLine = '';\n  }\n}\n\nBuilder.prototype.build = function(jObj) {\n  if(this.options.preserveOrder){\n    return buildFromOrderedJs(jObj, this.options);\n  }else {\n    if(Array.isArray(jObj) && this.options.arrayNodeName && this.options.arrayNodeName.length > 1){\n      jObj = {\n        [this.options.arrayNodeName] : jObj\n      }\n    }\n    return this.j2x(jObj, 0).val;\n  }\n};\n\nBuilder.prototype.j2x = function(jObj, level) {\n  let attrStr = '';\n  let val = '';\n  for (let key in jObj) {\n    if(!Object.prototype.hasOwnProperty.call(jObj, key)) continue;\n    if (typeof jObj[key] === 'undefined') {\n      // supress undefined node only if it is not an attribute\n      if (this.isAttribute(key)) {\n        val += '';\n      }\n    } else if (jObj[key] === null) {\n      // null attribute should be ignored by the attribute list, but should not cause the tag closing\n      if (this.isAttribute(key)) {\n        val += '';\n      } else if (key[0] === '?') {\n        val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n      } else {\n        val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n      }\n      // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n    } else if (jObj[key] instanceof Date) {\n      val += this.buildTextValNode(jObj[key], key, '', level);\n    } else if (typeof jObj[key] !== 'object') {\n      //premitive type\n      const attr = this.isAttribute(key);\n      if (attr) {\n        attrStr += this.buildAttrPairStr(attr, '' + jObj[key]);\n      }else {\n        //tag value\n        if (key === this.options.textNodeName) {\n          let newval = this.options.tagValueProcessor(key, '' + jObj[key]);\n          val += this.replaceEntitiesValue(newval);\n        } else {\n          val += this.buildTextValNode(jObj[key], key, '', level);\n        }\n      }\n    } else if (Array.isArray(jObj[key])) {\n      //repeated nodes\n      const arrLen = jObj[key].length;\n      let listTagVal = \"\";\n      for (let j = 0; j < arrLen; j++) {\n        const item = jObj[key][j];\n        if (typeof item === 'undefined') {\n          // supress undefined node\n        } else if (item === null) {\n          if(key[0] === \"?\") val += this.indentate(level) + '<' + key + '?' + this.tagEndChar;\n          else val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n          // val += this.indentate(level) + '<' + key + '/' + this.tagEndChar;\n        } else if (typeof item === 'object') {\n          if(this.options.oneListGroup ){\n            listTagVal += this.j2x(item, level + 1).val;\n          }else{\n            listTagVal += this.processTextOrObjNode(item, key, level)\n          }\n        } else {\n          listTagVal += this.buildTextValNode(item, key, '', level);\n        }\n      }\n      if(this.options.oneListGroup){\n        listTagVal = this.buildObjectNode(listTagVal, key, '', level);\n      }\n      val += listTagVal;\n    } else {\n      //nested node\n      if (this.options.attributesGroupName && key === this.options.attributesGroupName) {\n        const Ks = Object.keys(jObj[key]);\n        const L = Ks.length;\n        for (let j = 0; j < L; j++) {\n          attrStr += this.buildAttrPairStr(Ks[j], '' + jObj[key][Ks[j]]);\n        }\n      } else {\n        val += this.processTextOrObjNode(jObj[key], key, level)\n      }\n    }\n  }\n  return {attrStr: attrStr, val: val};\n};\n\nBuilder.prototype.buildAttrPairStr = function(attrName, val){\n  val = this.options.attributeValueProcessor(attrName, '' + val);\n  val = this.replaceEntitiesValue(val);\n  if (this.options.suppressBooleanAttributes && val === \"true\") {\n    return ' ' + attrName;\n  } else return ' ' + attrName + '=\"' + val + '\"';\n}\n\nfunction processTextOrObjNode (object, key, level) {\n  const result = this.j2x(object, level + 1);\n  if (object[this.options.textNodeName] !== undefined && Object.keys(object).length === 1) {\n    return this.buildTextValNode(object[this.options.textNodeName], key, result.attrStr, level);\n  } else {\n    return this.buildObjectNode(result.val, key, result.attrStr, level);\n  }\n}\n\nBuilder.prototype.buildObjectNode = function(val, key, attrStr, level) {\n  if(val === \"\"){\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }\n  }else{\n\n    let tagEndExp = '</' + key + this.tagEndChar;\n    let piClosingChar = \"\";\n    \n    if(key[0] === \"?\") {\n      piClosingChar = \"?\";\n      tagEndExp = \"\";\n    }\n  \n    // attrStr is an empty string in case the attribute came as undefined or null\n    if ((attrStr || attrStr === '') && val.indexOf('<') === -1) {\n      return ( this.indentate(level) + '<' +  key + attrStr + piClosingChar + '>' + val + tagEndExp );\n    } else if (this.options.commentPropName !== false && key === this.options.commentPropName && piClosingChar.length === 0) {\n      return this.indentate(level) + `<!--${val}-->` + this.newLine;\n    }else {\n      return (\n        this.indentate(level) + '<' + key + attrStr + piClosingChar + this.tagEndChar +\n        val +\n        this.indentate(level) + tagEndExp    );\n    }\n  }\n}\n\nBuilder.prototype.closeTag = function(key){\n  let closeTag = \"\";\n  if(this.options.unpairedTags.indexOf(key) !== -1){ //unpaired\n    if(!this.options.suppressUnpairedNode) closeTag = \"/\"\n  }else if(this.options.suppressEmptyNode){ //empty\n    closeTag = \"/\";\n  }else{\n    closeTag = `></${key}`\n  }\n  return closeTag;\n}\n\nfunction buildEmptyObjNode(val, key, attrStr, level) {\n  if (val !== '') {\n    return this.buildObjectNode(val, key, attrStr, level);\n  } else {\n    if(key[0] === \"?\") return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar;\n    else {\n      return  this.indentate(level) + '<' + key + attrStr + '/' + this.tagEndChar;\n      // return this.buildTagStr(level,key, attrStr);\n    }\n  }\n}\n\nBuilder.prototype.buildTextValNode = function(val, key, attrStr, level) {\n  if (this.options.cdataPropName !== false && key === this.options.cdataPropName) {\n    return this.indentate(level) + `<![CDATA[${val}]]>` +  this.newLine;\n  }else if (this.options.commentPropName !== false && key === this.options.commentPropName) {\n    return this.indentate(level) + `<!--${val}-->` +  this.newLine;\n  }else if(key[0] === \"?\") {//PI tag\n    return  this.indentate(level) + '<' + key + attrStr+ '?' + this.tagEndChar; \n  }else{\n    let textValue = this.options.tagValueProcessor(key, val);\n    textValue = this.replaceEntitiesValue(textValue);\n  \n    if( textValue === ''){\n      return this.indentate(level) + '<' + key + attrStr + this.closeTag(key) + this.tagEndChar;\n    }else{\n      return this.indentate(level) + '<' + key + attrStr + '>' +\n         textValue +\n        '</' + key + this.tagEndChar;\n    }\n  }\n}\n\nBuilder.prototype.replaceEntitiesValue = function(textValue){\n  if(textValue && textValue.length > 0 && this.options.processEntities){\n    for (let i=0; i<this.options.entities.length; i++) {\n      const entity = this.options.entities[i];\n      textValue = textValue.replace(entity.regex, entity.val);\n    }\n  }\n  return textValue;\n}\n\nfunction indentate(level) {\n  return this.options.indentBy.repeat(level);\n}\n\nfunction isAttribute(name /*, options*/) {\n  if (name.startsWith(this.options.attributeNamePrefix) && name !== this.options.textNodeName) {\n    return name.substr(this.attrPrefixLen);\n  } else {\n    return false;\n  }\n}\n\nmodule.exports = Builder;\n","'use strict';\n\nconst validator = require('./validator');\nconst XMLParser = require('./xmlparser/XMLParser');\nconst XMLBuilder = require('./xmlbuilder/json2xml');\n\nmodule.exports = {\n  XMLParser: XMLParser,\n  XMLValidator: validator,\n  XMLBuilder: XMLBuilder\n}"],"names":["nameStartChar","nameChar","nameRegexp","regexName","getAllMatches","string","regex","matches","match","allmatches","len","index","isName","exports","v","obj","target","a","arrayMode","keys","i","util","require$$0","defaultOptions","validator","xmlData","options","tags","tagFound","reachedRoot","readPI","tagStartPos","readCommentAndCDATA","closingTag","tagName","validateTagName","msg","getErrorObject","getLineNumberForPosition","result","readAttributeStr","attrStr","attrStrStart","isValid","validateAttributeString","otg","openPos","afterAmp","validateAmpersand","isWhiteSpace","t","char","start","tagname","angleBracketsCount","doubleQuote","singleQuote","startChar","tagClosed","validAttrStrRegxp","attrNames","getPositionFromMatch","attrName","validateAttrName","validateNumberAmpersand","re","count","code","message","lineNumber","lines","val","jPath","attrs","buildOptions","OptionsBuilder","XmlNode","key","node","xmlNode","readDocType","entities","hasBody","comment","exp","isEntity","readEntityExp","validateEntityName","isElement","isAttlist","isNotation","isComment","entityName","name","DocTypeReader","hexRegex","numRegex","consider","toNumber","str","trimmedStr","sign","leadingZeros","numTrimmedByZeros","trimZeros","eNotation","num","numStr","strnum","require$$1","require$$2","require$$3","OrderedObjParser","addExternalEntities","parseXml","parseTextData","resolveNameSpace","buildAttributesMap","isItStopNode","replaceEntitiesValue","readStopNodeData","saveTextToParentTag","addChild","externalEntities","entKeys","ent","dontTrim","hasAttributes","isLeafNode","escapeEntities","newval","parseValue","prefix","attrsRegx","oldVal","aName","newVal","attrCollection","xmlObj","currentNode","textData","closeIndex","findClosingIndex","colonIndex","lastTagName","propIndex","tagData","readTagExp","childNode","endIndex","tagExp","rawTagName","attrExpPresent","lastTag","tagContent","entity","stopNodes","currentTagName","allNodesExp","stopNodePath","stopNodeExp","tagExpWithClosingIndex","closingChar","attrBoundary","ch","errMsg","closingIndex","removeNSPrefix","separatorIndex","startIndex","openTagCount","shouldParse","OrderedObjParser_1","prettify","compress","arr","text","compressedObj","tagObj","property","propName","newJpath","isLeaf","isLeafTag","assignAttributes","attrMap","jpath","atrrName","textNodeName","propCount","node2json","XMLParser","validationOption","orderedObjParser","orderedResult","value","XMLParser_1","EOL","toXml","jArray","indentation","arrToStr","xmlStr","isPreviousElementTag","newJPath","tagText","isStopNode","attStr","attr_to_str","tempInd","piTextNodeName","newIdentation","tagStart","tagValue","attr","attrVal","textValue","orderedJs2Xml","buildFromOrderedJs","Builder","isAttribute","processTextOrObjNode","indentate","jObj","level","arrLen","listTagVal","j","item","Ks","L","object","tagEndExp","piClosingChar","closeTag","json2xml","XMLBuilder","fxp"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11]}