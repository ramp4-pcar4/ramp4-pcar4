import{eq as U,ec as V,ed as X,ee as j,ef as z,er as q,es as F,aY as g,bn as b,et as _,aq as u,dB as G,dE as p,dX as E,dF as M,bE as L,bJ as I,eu as S,ev as T,ew as h,s as W,B as R,U as k,G as D,bt as f,bu as m,ex as P,ej as B,bv as K,ep as $,ap as v}from"./main-DCIX61zy.js";import{$ as N,Z as J,w as O}from"./elevationInfoUtils-Cubp_PC_.js";let y=class extends U(V(X(j(z(q(F($))))))){constructor(a){super(a),this.operationalLayerType="IntegratedMesh3DTilesLayer",this.spatialReference=new g({wkid:4326,vcsWkid:115700}),this.fullExtent=new b(-180,-90,180,90,this.spatialReference),this.url=null,this.type="integrated-mesh-3dtiles",this.path=null,this.minScale=0,this.maxScale=0}set elevationInfo(a){this._set("elevationInfo",a),this._validateElevationInfo()}_verifyArray(a,s){if(!Array.isArray(a)||a.length<s)return!1;for(const o of a)if(typeof o!="number")return!1;return!0}_initFullExtent(a){const s=a.root?.boundingVolume;if(!s)return;if(s.box){const t=s?.box;if(t[3]>7972671&&t[7]>7972671&&t[11]>7945940)return}const o=a.root?.transform,w=v();if(s.region&&this._verifyArray(s.region,6)){const t=s.region,l=_(t[0]),n=_(t[1]),i=t[4],r=_(t[2]),e=_(t[3]),d=t[5];this.fullExtent=new b({xmin:l,ymin:n,zmin:i,xmax:r,ymax:e,zmax:d,spatialReference:this.spatialReference})}else if(s.sphere&&this._verifyArray(s.sphere,4)){const t=s.sphere,l=u(t[0],t[1],t[2]),n=t[3]/Math.sqrt(3),i=v();G(i,l,u(n,n,n));const r=v();if(p(r,l,u(n,n,n)),o&&this._verifyArray(o,16)){const x=o;E(w,i,x),M(i,w),E(w,r,x),M(r,w)}L(i,I,0,i,g.WGS84,0),L(r,I,0,r,g.WGS84,0);const e=v(),d=v();S(e,i,r),T(d,i,r),this.fullExtent=new b({xmin:e[0],ymin:e[1],zmin:e[2],xmax:d[0],ymax:d[1],zmax:d[2],spatialReference:this.spatialReference})}else if(s.box&&this._verifyArray(s.box,12)){const t=s.box,l=u(t[0],t[1],t[2]),n=u(t[3],t[4],t[5]),i=u(t[6],t[7],t[8]),r=u(t[9],t[10],t[11]),e=[];for(let c=0;c<8;++c)e.push(v());if(p(e[0],l,n),p(e[0],e[0],i),p(e[0],e[0],r),h(e[1],l,n),p(e[1],e[1],i),p(e[1],e[1],r),p(e[2],l,n),h(e[2],e[2],i),p(e[2],e[2],r),h(e[3],l,n),h(e[3],e[3],i),p(e[3],e[3],r),p(e[4],l,n),p(e[4],e[4],i),h(e[4],e[4],r),h(e[5],l,n),p(e[5],e[5],i),h(e[5],e[5],r),p(e[6],l,n),h(e[6],e[6],i),h(e[6],e[6],r),h(e[7],l,n),h(e[7],e[7],i),h(e[7],e[7],r),o&&this._verifyArray(o,16)){const c=o;for(let A=0;A<8;++A)E(e[A],e[A],c)}const d=u(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),x=u(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE);for(let c=0;c<8;++c)L(e[c],I,0,e[c],g.WGS84,0),S(x,x,e[c]),T(d,d,e[c]);this.fullExtent=new b({xmin:x[0],ymin:x[1],zmin:x[2],xmax:d[0],ymax:d[1],zmax:d[2],spatialReference:this.spatialReference})}}async load(a){return this.addResolvingPromise(this._doLoad(a)),this}async _doLoad(a){const s=a!=null?a.signal:null;try{await this.loadFromPortal({supportedTypes:["3DTiles Service"],validateItem:o=>{if(o.typeKeywords?.includes("IntegratedMesh"))return!0;throw new W("portal:invalid-layer-item-type","Invalid layer item, expected '${expectedType}' ",{expectedType:"3DTiles Service containing IntegratedMesh"})}},a)}catch(o){R(o)}this.url&&await k(this.url,{query:{f:"json",...this.customParameters,token:this.apiKey},responseType:"json",signal:s}).then(o=>{this._initFullExtent(o.data)},o=>{R(o)})}async fetchAttributionData(){return this.load().then(()=>({}))}_validateElevationInfo(){const a=this.elevationInfo,s="Integrated mesh 3d tiles layers";N(D.getLogger(this),J(s,"absolute-height",a)),N(D.getLogger(this),O(s,a))}};f([m({type:["IntegratedMesh3DTilesLayer"]})],y.prototype,"operationalLayerType",void 0),f([m({type:g})],y.prototype,"spatialReference",void 0),f([m({type:b})],y.prototype,"fullExtent",void 0),f([m(P)],y.prototype,"elevationInfo",null),f([m({type:["show","hide"]})],y.prototype,"listMode",void 0),f([m(B)],y.prototype,"url",void 0),f([m({readOnly:!0})],y.prototype,"type",void 0),f([m({type:String,json:{origins:{"web-scene":{read:!0,write:!0},"portal-item":{read:!0,write:!0}},read:!1}})],y.prototype,"path",void 0),f([m({type:Number,json:{name:"layerDefinition.minScale",write:!0,origins:{service:{read:!1,write:!1}}}})],y.prototype,"minScale",void 0),f([m({type:Number,json:{name:"layerDefinition.maxScale",write:!0,origins:{service:{read:!1,write:!1}}}})],y.prototype,"maxScale",void 0),y=f([K("esri.layers.IntegratedMesh3DTilesLayer")],y);const C=y;export{C as default};
