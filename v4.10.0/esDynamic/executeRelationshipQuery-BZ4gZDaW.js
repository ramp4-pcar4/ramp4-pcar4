import{bP as b,U as j,bT as R,gx as l,bq as y,bx as m}from"./main-DCIX61zy.js";function p(n,o){const e=n.toJSON();return e.objectIds&&(e.objectIds=e.objectIds.join(",")),e.orderByFields&&(e.orderByFields=e.orderByFields.join(",")),e.outFields&&!o?.returnCountOnly?e.outFields.includes("*")?e.outFields="*":e.outFields=e.outFields.join(","):delete e.outFields,e.outSR&&(e.outSR=R(e.outSR)),e.dynamicDataSource&&(e.layer=JSON.stringify({source:e.dynamicDataSource}),delete e.dynamicDataSource),e}async function F(n,o,e){const r=await f(n,o,e),t=r.data,s=t.geometryType,a=t.spatialReference,c={};for(const d of t.relatedRecordGroups){const u={fields:void 0,objectIdFieldName:void 0,geometryType:s,spatialReference:a,hasZ:!!t.hasZ,hasM:!!t.hasM,features:d.relatedRecords};if(d.objectId!=null)c[d.objectId]=u;else for(const i of Object.keys(d))i!=="relatedRecords"&&(c[d[i]]=u)}return{...r,data:c}}async function h(n,o,e){const r=await f(n,o,e,{returnCountOnly:!0}),t=r.data,s={};for(const a of t.relatedRecordGroups)a.objectId!=null&&(s[a.objectId]=a.count);return{...r,data:s}}async function f(n,o,e={},r){const t=b({...n.query,f:"json",...r,...p(o,r)});return j(n.path+"/queryRelatedRecords",{...e,query:{...e.query,...t}})}async function I(n,o,e){o=l.from(o);const r=y(n);return F(r,o,e).then(t=>{const s=t.data,a={};return Object.keys(s).forEach(c=>a[c]=m.fromJSON(s[c])),a})}async function S(n,o,e){o=l.from(o);const r=y(n);return h(r,o,{...e}).then(t=>t.data)}export{I as executeRelationshipQuery,S as executeRelationshipQueryForCount};
