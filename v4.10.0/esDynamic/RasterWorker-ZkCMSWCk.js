import{bt as f,e3 as u,bv as p,iH as o,iI as S,iJ as d,iK as y,bn as n,iL as x,D as O,iM as h,iN as N,iO as J,iP as P,iQ as b,iR as B,iS as v,iT as g,iU as k}from"./main-DCIX61zy.js";import{a as w,c as z,y as D,T}from"./PolynomialTransform-C_RaF2be.js";import{w as I,v as F,i as R}from"./rasterProjectionHelper-CgVEist9.js";var c;let l=c=class extends w{constructor(){super(...arguments),this.type="identity"}clone(){return new c}};f([u({IdentityXform:"identity"})],l.prototype,"type",void 0),l=c=f([p("esri.layers.support.rasterTransforms.IdentityTransform")],l);const E=l,G={GCSShiftXform:z,IdentityXform:E,PolynomialXform:D};function j(a){if(!a?.type)return null;const e=G[a?.type];if(e){const r=new e;return r.read(a),r}return null}class A{convertVectorFieldData(e){const r=o.fromJSON(e.pixelBlock),s=S(r,e.type);return Promise.resolve(s!=null?s.toJSON():null)}computeStatisticsHistograms(e){const r=o.fromJSON(e.pixelBlock),s=d(r);return Promise.resolve(s)}async decode(e){const r=await y(e.data,e.options);return r&&r.toJSON()}symbolize(e){e.pixelBlock=o.fromJSON(e.pixelBlock),e.extent=e.extent?n.fromJSON(e.extent):null;const r=this.symbolizer.symbolize(e);return Promise.resolve(r!=null?r.toJSON():null)}async updateSymbolizer(e){this.symbolizer=x.fromJSON(e.symbolizerJSON),e.histograms&&this.symbolizer?.rendererJSON.type==="rasterStretch"&&(this.symbolizer.rendererJSON.histograms=e.histograms)}async updateRasterFunction(e){this.rasterFunction=T(e.rasterFunctionJSON)}async process(e){const r=this.rasterFunction.process({extent:n.fromJSON(e.extent),primaryPixelBlocks:e.primaryPixelBlocks.map(s=>s!=null?o.fromJSON(s):null),primaryPixelSizes:e.primaryPixelSizes?.map(s=>s!=null?O.fromJSON(s):null),primaryRasterIds:e.primaryRasterIds});return r!=null?r.toJSON():null}stretch(e){const r=this.symbolizer.simpleStretch(o.fromJSON(e.srcPixelBlock),e.stretchParams);return Promise.resolve(r?.toJSON())}estimateStatisticsHistograms(e){const r=h(o.fromJSON(e.srcPixelBlock));return Promise.resolve(r)}split(e){const r=N(o.fromJSON(e.srcPixelBlock),e.tileSize,e.maximumPyramidLevel??0,e.useBilinear===!1);return r&&r.forEach((s,t)=>{r.set(t,s?.toJSON())}),Promise.resolve(r)}clipTile(e){const r=o.fromJSON(e.pixelBlock),s=J({...e,pixelBlock:r});return Promise.resolve(s?.toJSON())}async mosaicAndTransform(e){const r=e.srcPixelBlocks.map(m=>m?new o(m):null),s=P(r,e.srcMosaicSize,{blockWidths:e.blockWidths,alignmentInfo:e.alignmentInfo,clipOffset:e.clipOffset,clipSize:e.clipSize});let t,i=s;return e.coefs&&(i=b(s,e.destDimension,e.coefs,e.sampleSpacing,e.interpolation)),e.projectDirections&&e.gcsGrid&&(t=B(e.destDimension,e.gcsGrid),i=v(i,e.isUV?"vector-uv":"vector-magdir",t)),{pixelBlock:i?.toJSON(),localNorthDirections:t}}async createFlowMesh(e,r){const s={data:new Float32Array(e.flowData.buffer),mask:new Uint8Array(e.flowData.maskBuffer),width:e.flowData.width,height:e.flowData.height},{vertexData:t,indexData:i}=await g(e.meshType,e.simulationSettings,s,r.signal);return{result:{vertexBuffer:t.buffer,indexBuffer:i.buffer},transferList:[t.buffer,i.buffer]}}async getProjectionOffsetGrid(e){const r=n.fromJSON(e.projectedExtent),s=n.fromJSON(e.srcBufferExtent);let t=null;e.datumTransformationSteps&&(t=new k({steps:e.datumTransformationSteps})),(e.includeGCSGrid||I(r.spatialReference,s.spatialReference,t))&&await F();const i=e.rasterTransform?j(e.rasterTransform):null;return R({...e,projectedExtent:r,srcBufferExtent:s,datumTransformation:t,rasterTransform:i})}}export{A as default};
