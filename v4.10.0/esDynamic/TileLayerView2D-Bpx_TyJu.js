import{c2 as w,c3 as y,c4 as I,c5 as V,c6 as H,bh as v,a5 as T,c7 as p,c8 as f,G as b,bt as o,bu as m,bv as q}from"./main-DCIX61zy.js";import"./floatRGBA-CNeCgBBY.js";import"./UpdateTracking2D-swFQJIjy.js";import"./GeometryUtils-v59R1Z6F.js";import"./Container-C-rqKhNk.js";import"./WGLContainer-whJgsi2t.js";import"./Program-1XjJitsM.js";import"./LabelMetric-DpMX58iW.js";import"./StyleDefinition-CovmM7Ch.js";import"./enums-qHpGJ28Q.js";import"./GridShader--au302uP.js";import"./FeatureCommandQueue-F8dH-mVd.js";import"./PieChartMeshWriter-DYJnKx_X.js";import"./renderState-CRtOsw3X.js";import"./interfaces-DN2-jsJC.js";import"./testSVGPremultipliedAlpha-DmWsO1ZL.js";import{F as U}from"./GraphicsView2D-DGP_h330.js";import"./earcut-XDcq3zAf.js";import"./vec3f32-BS0cezmI.js";import{r as C,o as c,n as d}from"./imageUtils-BQMOAI7a.js";import{j as Q,y as S}from"./LayerView-DONYuvqR.js";import{h as F}from"./HighlightGraphicContainer-cUb9kmn3.js";import{i as P}from"./RefreshableLayerView-D30wcOhz.js";import{_ as L,R as k}from"./MapServiceLayerViewHelper-CyPZdm17.js";import{r as G}from"./drapedUtils-Bj2xRBlq.js";const E=[0,0];let a=class extends P(C(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),this._highlightView?.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,t=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,t?.effectiveMinLOD,t?.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(i,s)=>this.fetchTile(i,s),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),L(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new F(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new k({createFetchPopupFeaturesQueryGeometry:(s,h)=>G(s,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(s,h)=>{i.graphicUpdateHandler({graphic:s,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(e,t):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):v()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){return T(this.layer.tileInfo?.spatialReference,e)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(e=>this._updatingHandles.addPromise(this._enqueueTileFetch(e)))}}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(E,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(t)),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i=this.tilemapCache,{signal:s,resamplingLevel:h=0}=t;if(!i)try{return await this._fetchImage(e,s)}catch(r){if(!p(r)&&!this.resampling)return c(this._tileInfoView.tileInfo.size);if(h<3){const u=this._tileInfoView.getTileParentId(e.id);if(u){const g=new f(u),_=await this.fetchTile(g,{...t,resamplingLevel:h+1});return d(this._tileInfoView,_,g,e)}}throw r}const l=new f(0,0,0,0);let n;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:s}),!this.resampling&&l.level!==e.level)return c(this._tileInfoView.tileInfo.size);n=await this._fetchImage(l,s)}catch(r){if(p(r))throw r;return c(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,n,l,e):n}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){p(t)||b.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};o([m()],a.prototype,"resampling",null),o([m()],a.prototype,"tilemapCache",null),a=o([q("esri.views.2d.layers.TileLayerView2D")],a);const z=a;export{z as default};
