import{P as n,$ as o}from"./utils-CkW7zLh1.js";import{l as c,a as p,f as i,u}from"./main-CzbArNue.js";import"./originUtils-CPX8CCAY.js";import"./multiOriginJSONSupportUtils-C0wm8_Yw.js";import"./jsonContext-CJCtz3WJ.js";import"./saveUtils-CixRxS1p.js";import"./preload-helper-ExcqyqRp.js";const s="Image Service",g="imagery-layer-save",v="imagery-layer-save-as",f="imagery-tile-layer-save",d="imagery-tile-layer-save-as";function l(r){if(r.type==="imagery")return{isValid:!0};const{raster:e}=r,t=e?.datasetFormat==="Function"?e.primaryRasters?.rasters[0]:e;return{isValid:t?.datasetFormat==="RasterTileServer"&&(t.tileType==="Raster"||t.tileType==="Map"),errorMessage:"imagery tile layer should be created from a tiled image service."}}function y(r){const e=r.layerJSON;return Promise.resolve(e&&Object.keys(e).length?e:null)}async function T(r,e){const{parsedUrl:t,title:a,fullExtent:m}=r;e.url=t.path,e.title||=a;try{e.extent=await c(m)}catch{e.extent=void 0}p(e,i.METADATA),u(e,i.TILED_IMAGERY,r.type==="imagery-tile")}async function M(r,e){const t=r.type==="imagery"?g:f;return n({layer:r,itemType:s,validateLayer:l,createItemData:y,errorNamePrefix:t},e)}async function R(r,e,t){const a=r.type==="imagery"?v:d;return o({layer:r,itemType:s,validateLayer:l,createItemData:y,errorNamePrefix:a,newItem:e,setItemProperties:T},t)}export{M as save,R as saveAs};
