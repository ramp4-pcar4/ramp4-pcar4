import{I as f,a0 as y,bS as S,U as c,aw as l,bW as s,bV as m,a6 as R,gB as g,bt as p,bA as b}from"./main-CzbArNue.js";import"./preload-helper-ExcqyqRp.js";function J(a){const t=a.geometry,n=a.toJSON(),e=n;let r,i,o;return t!=null&&(i=t.spatialReference,o=s(i),e.geometryType=m(t),e.geometry=JSON.stringify(t),e.inSR=o),n.outSR?(e.outSR=s(n.outSR),r=a.outSpatialReference):t&&(e.outSR=e.inSR,r=i),e.bin&&=JSON.stringify(e.bin),e.quantizationParameters&&=JSON.stringify(e.quantizationParameters),e.outStatistics&&=JSON.stringify(e.outStatistics),e.outTimeReference&&=JSON.stringify(e.outTimeReference),a.defaultSpatialReference&&R(i,r)&&(e.defaultSR=e.inSR,delete e.inSR,delete e.outSR),e}async function N(a,t,n){return O(a,t,n)}async function O(a,t,n={}){const e=typeof a=="string"?f(a):a,r=t.geometry?[t.geometry]:[],i=await y(r,null,{signal:n.signal}),o=i?.[0];o!=null&&((t=t.clone()).geometry=o);const u=S({...e.query,f:"json",...J(t)});return c(l(e.path,"queryBins"),{...n,query:{...u,...n.query}})}async function w(a,t,n){const{data:e}=await N(p(a),g.from(t),n);return b.fromJSON(e)}export{w as executeBinsQuery};
