import{a_ as p,aZ as l}from"./main-CzbArNue.js";import{G as n}from"./geometryEngineBase-CR-T1bpS.js";import{hydratedAdapter as r}from"./hydrated-CNDFlMdw.js";import"./preload-helper-ExcqyqRp.js";function i(e){const t=Array.isArray(e)?e[0].spatialReference:e.spatialReference;return t?p(l,t):l.WGS84}function w(e){return n.extendedSpatialReferenceInfo(e)}function R(e,t){return n.clip(r,i(e),e,t)}function x(e,t){return n.cut(r,i(e),e,t)}function S(e,t){return n.contains(r,i(e),e,t)}function y(e,t){return n.crosses(r,i(e),e,t)}function A(e,t,a){return n.distance(r,i(e),e,t,a)}function D(e,t){return n.equals(r,i(e),e,t)}function L(e,t){return n.intersects(r,i(e),e,t)}function T(e,t){return n.touches(r,i(e),e,t)}function V(e,t){return n.within(r,i(e),e,t)}function v(e,t){return n.disjoint(r,i(e),e,t)}function z(e,t){return n.overlaps(r,i(e),e,t)}function H(e,t,a){return n.relate(r,i(e),e,t,a)}function I(e){return n.isSimple(r,i(e),e)}function J(e){return n.simplify(r,i(e),e)}function N(e,t=!1){return n.convexHull(r,i(e),e,t)}function O(e,t){return n.difference(r,i(e),e,t)}function b(e,t){return n.symmetricDifference(r,i(e),e,t)}function j(e,t){return n.intersect(r,i(e),e,t)}function q(e,t=null){return n.union(r,i(e),e,t)}function B(e,t,a,s,c,u){return n.offset(r,i(e),e,t,a,s,c,u)}function C(e,t,a,s=!1){return n.buffer(r,i(e),e,t,a,s)}function E(e,t,a,s,c,u){return n.geodesicBuffer(r,i(e),e,t,a,s,c,u)}function G(e,t,a=!0){return n.nearestCoordinate(r,i(e),e,t,a)}function P(e,t){return n.nearestVertex(r,i(e),e,t)}function W(e,t,a,s){return n.nearestVertices(r,i(e),e,t,a,s)}function f(e){return"xmin"in e?"center"in e?e.center:null:"x"in e?e:"extent"in e?e.extent?.center??null:null}function $(e,t,a){if(e==null)throw new o;const s=e.spatialReference;if((a=a??f(e))==null)throw new o;const c=e.constructor.fromJSON(n.rotate(e,t,a));return c.spatialReference=s,c}function k(e,t){if(e==null)throw new o;const a=e.spatialReference;if((t=t??f(e))==null)throw new o;const s=e.constructor.fromJSON(n.flipHorizontal(e,t));return s.spatialReference=a,s}function F(e,t){if(e==null)throw new o;const a=e.spatialReference;if((t=t??f(e))==null)throw new o;const s=e.constructor.fromJSON(n.flipVertical(e,t));return s.spatialReference=a,s}function K(e,t,a,s){return n.generalize(r,i(e),e,t,a,s)}function Z(e,t,a){return n.densify(r,i(e),e,t,a)}function _(e,t,a,s=0){return n.geodesicDensify(r,i(e),e,t,a,s)}function M(e,t){return n.planarArea(r,i(e),e,t)}function Q(e,t){return n.planarLength(r,i(e),e,t)}function U(e,t,a){return n.geodesicArea(r,i(e),e,t,a)}function X(e,t,a){return n.geodesicLength(r,i(e),e,t,a)}function Y(e,t){return n.intersectLinesToPoints(r,i(e),e,t)}function ee(e,t){n.changeDefaultSpatialReferenceTolerance(e,t)}function te(e){n.clearDefaultSpatialReferenceTolerance(e)}class o extends Error{constructor(){super("Illegal Argument Exception")}}export{C as buffer,ee as changeDefaultSpatialReferenceTolerance,te as clearDefaultSpatialReferenceTolerance,R as clip,S as contains,N as convexHull,y as crosses,x as cut,Z as densify,O as difference,v as disjoint,A as distance,D as equals,w as extendedSpatialReferenceInfo,k as flipHorizontal,F as flipVertical,K as generalize,U as geodesicArea,E as geodesicBuffer,_ as geodesicDensify,X as geodesicLength,j as intersect,Y as intersectLinesToPoints,L as intersects,I as isSimple,G as nearestCoordinate,P as nearestVertex,W as nearestVertices,B as offset,z as overlaps,M as planarArea,Q as planarLength,H as relate,$ as rotate,J as simplify,b as symmetricDifference,T as touches,q as union,V as within};
