import{c5 as w,c6 as y,c7 as I,c8 as V,c9 as H,bi as v,a6 as T,ca as o,cb as g,G as b,bw as n,bx as f,by as q}from"./main-CzbArNue.js";import"./floatRGBA-27q1qkUd.js";import"./UpdateTracking2D-BdYdrn9N.js";import"./GeometryUtils-B5OGAATT.js";import"./Container-YB8BBMjE.js";import"./WGLContainer-lo2WWuxf.js";import"./Program-DtvrcJVH.js";import"./LabelMetric-hP-xV4kN.js";import"./StyleDefinition-DxIfDb1I.js";import"./enums-BRzLM11V.js";import"./GridShader-LwOOXSXK.js";import"./FeatureCommandQueue-DmpjJglh.js";import"./PieChartMeshWriter-CgaGiEL4.js";import"./renderState-BEdhEqi_.js";import"./interfaces-DDtDqZYj.js";import"./testSVGPremultipliedAlpha-BRs916jT.js";import{F as U}from"./GraphicsView2D-D-uHr-64.js";import"./earcut-Lltz9D9k.js";import"./vec3f32-nZdmKIgz.js";import{r as C,o as c,n as d}from"./imageUtils-8SkE3h_K.js";import{j as Q,y as S}from"./LayerView-Ck3mR3vt.js";import{h as $}from"./HighlightGraphicContainer-D6ULYfwE.js";import{i as F}from"./RefreshableLayerView-BD7EM3Zi.js";import{_ as P,R as G}from"./MapServiceLayerViewHelper-CpvAd23b.js";import{r as L}from"./drapedUtils-DptJpZb-.js";import"./preload-helper-ExcqyqRp.js";import"./BidiEngine-DNnuvc1i.js";import"./Rect-CUzevAry.js";import"./BindType-BmZEZMMh.js";import"./Util-DC-hA0iR.js";import"./BufferObject-COmOSznC.js";import"./VertexArrayObject-CH1EhbG6.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./ProgramTemplate-D4pS209o.js";import"./config-MDUrh2eL.js";import"./CircularArray-CujHzHWW.js";import"./AttributeStore-B-lwGHaY.js";import"./TimeOnly-Dsr-JsNO.js";import"./timeSupport-B2vaQ9ve.js";import"./constants-F8oTIn7N.js";import"./TurboLine-BYpQ-lmu.js";import"./basicInterfaces-CZwQPxTp.js";import"./normalizeUtilsSync-DB6gw0HN.js";import"./Bitmap-h8EKm8jv.js";import"./TileContainer-Da-C8_CP.js";import"./layerViewUtils-CKW6QWO-.js";import"./AGraphicContainer-CQIXTHKl.js";import"./TechniqueInstance-CfXcGkOf.js";import"./languageUtils-2AG_4pxN.js";import"./ImmutableArray-BPVd6ESQ.js";import"./shared-QFy6LUS5.js";import"./number-Cw23x7KN.js";import"./popupUtils-CJBtuwUc.js";const k=[0,0];let a=class extends F(C(Q(S))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new w,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(t){this._fetchQueue.pause(),this._fetchQueue.state=t.state,this._tileStrategy.update(t),this._fetchQueue.resume(),this._highlightView?.processUpdate(t)}attach(){const t="tileServers"in this.layer?this.layer.tileServers:null,e=this.tilemapCache;if(this._tileInfoView=new y(this.layer.tileInfo,this.layer.fullExtent,e?.effectiveMinLOD,e?.effectiveMaxLOD),this._fetchQueue=new I({tileInfoView:this._tileInfoView,concurrency:t&&10*t.length||10,process:(i,r)=>this.fetchTile(i,r),scheduler:this.scheduler,priority:V.MAPVIEW_FETCH_QUEUE}),this._tileStrategy=new H({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),P(this,this.layer)){const i=this._highlightView=new U({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new $(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(r,s)=>L(r,s,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(r,s)=>{i.graphicUpdateHandler({graphic:r,property:s})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),this._popupHighlightHelper?.destroy(),this._highlightView?.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeaturesAtLocation(t,e){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeaturesAtLocation(t,e):[]}highlight(t){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(t):v()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(t){return T(this.layer.tileInfo?.spatialReference,t)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(t=>this._updatingHandles.addPromise(this._enqueueTileFetch(t)))}}acquireTile(t){const e=this._bitmapView.createTile(t),i=e.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(k,e.key),i.resolution=this._tileInfoView.getTileResolution(e.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(e)),this._bitmapView.addChild(e),this.requestUpdate(),e}releaseTile(t){this._fetchQueue.abort(t.key.id),this._bitmapView.removeChild(t),t.once("detach",()=>t.destroy()),this.requestUpdate()}async fetchTile(t,e={}){const i=this.tilemapCache,{signal:r,resamplingLevel:s=0}=e;if(!i)try{return await this._fetchImage(t,r)}catch(h){if(!o(h)&&!this.resampling)return c(this._tileInfoView.tileInfo.size);if(s<3){const u=this._tileInfoView.getTileParentId(t.id);if(u){const m=new g(u),_=await this.fetchTile(m,{...e,resamplingLevel:s+1});return d(this._tileInfoView,_,m,t)}}throw h}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(t.level,t.row,t.col,l,{signal:r}),!this.resampling&&l.level!==t.level)return c(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,r)}catch(h){if(o(h))throw h;return c(this._tileInfoView.tileInfo.size)}return this.resampling?d(this._tileInfoView,p,l,t):p}async _enqueueTileFetch(t){if(!this._fetchQueue.has(t.key.id)){try{const e=await this._fetchQueue.push(t.key);t.bitmap.source=e,t.bitmap.width=this._tileInfoView.tileInfo.size[0],t.bitmap.height=this._tileInfoView.tileInfo.size[1],t.once("attach",()=>this.requestUpdate())}catch(e){o(e)||b.getLogger(this).error(e)}this.requestUpdate()}}async _fetchImage(t,e){return this.layer.fetchImageBitmapTile(t.level,t.row,t.col,{signal:e})}};n([f()],a.prototype,"resampling",null),n([f()],a.prototype,"tilemapCache",null),a=n([q("esri.views.2d.layers.TileLayerView2D")],a);const kt=a;export{kt as default};
