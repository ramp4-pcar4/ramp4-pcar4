{"version":3,"file":"screen.vue_vue_type_script_setup_true_lang-DkuCHmdT.js","sources":["../../src/fixtures/geosearch/search-bar.vue","../../src/fixtures/geosearch/top-filters.vue","../../src/fixtures/geosearch/bottom-filters.vue","../../src/fixtures/geosearch/loading-bar.vue","../../src/fixtures/geosearch/screen.vue"],"sourcesContent":["<template>\n    <div class=\"rv-geosearch-bar relative h-26 mx-8 mb-8\">\n        <input\n            type=\"text\"\n            class=\"border-b w-full text-base py-8 outline-none focus:shadow-outline border-gray-600 h-full min-w-0\"\n            :class=\"{ 'border-yellow-500': badChars }\"\n            :placeholder=\"t('geosearch.searchText')\"\n            :value=\"searchVal\"\n            @input=\"onSearchTermChange(($event.target as HTMLInputElement).value)\"\n            @keyup.enter=\"\n                if (panelStore.mobileView) {\n                    ($event.target as HTMLInputElement).blur();\n                }\n            \"\n            :aria-label=\"t('geosearch.searchText')\"\n            @keypress.enter.prevent\n            enterkeyhint=\"done\"\n        />\n        <span class=\"absolute inset-y-0 right-8 grid w-10 place-content-center\">\n            <button\n                v-if=\"badChars\"\n                class=\"cursor-default\"\n                :aria-label=\"t('geosearch.badChars', { chars: badChars })\"\n                :content=\"t('geosearch.badChars', { chars: badChars })\"\n                v-tippy\n            >\n                âš \n            </button>\n        </span>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed } from 'vue';\nimport { useGeosearchStore } from './store';\nimport { debounce } from 'throttle-debounce';\nimport { useI18n } from 'vue-i18n';\nimport { usePanelStore } from '@/stores/panel';\n\nconst { t } = useI18n();\nconst geosearchStore = useGeosearchStore();\nconst panelStore = usePanelStore();\n\nconst searchVal = computed(() => geosearchStore.searchVal);\nconst badChars = computed<string>(() =>\n    ['\"', '$', '!', '*', '+', '?', '^', '{', '}', '(', ')', '|', '[', ']']\n        .filter(bc => geosearchStore.searchVal.includes(bc))\n        .join('')\n);\nconst setSearchTerm = (value: string) => {\n    geosearchStore.setSearchTerm(value);\n    geosearchStore.setSearchRegex(value);\n};\n\nconst onSearchTermChange = debounce(500, (searchTerm: string) => {\n    setSearchTerm(searchTerm);\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n    <div class=\"rv-geosearch-top-filters sm:flex items-center w-full ml-8 mb-14\">\n        <div class=\"w-fit inline-block sm:w-1/2 h-26 mb-8 sm:mb-0 pr-16 sm:pr-0\">\n            <select\n                class=\"border-b border-b-gray-600 w-full h-full py-0 cursor-pointer\"\n                :value=\"queryParams.province\"\n                :aria-label=\"t('geosearch.filters.province')\"\n                v-on:change=\"\n                    setProvince({\n                        province: ($event.target as HTMLSelectElement).value\n                    })\n                \"\n                v-truncate\n            >\n                <option value=\"\" disabled hidden v-truncate>\n                    {{ t('geosearch.filters.province') }}\n                </option>\n                <option v-for=\"province in provinces\" v-bind:key=\"province.code\" v-truncate>\n                    {{ province.name }}\n                </option>\n            </select>\n        </div>\n        <div class=\"sm:w-1/2 h-26 sm:mx-16 flex\">\n            <select\n                class=\"border-b border-b-gray-600 w-full h-full py-0 cursor-pointer max-w-150\"\n                :value=\"queryParams.type\"\n                :aria-label=\"t('geosearch.filters.type')\"\n                v-on:change=\"\n                    setType({\n                        type: ($event.target as HTMLSelectElement).value\n                    })\n                \"\n                v-truncate\n            >\n                <option value=\"\" disabled hidden>\n                    {{ t('geosearch.filters.type') }}\n                </option>\n                <option v-for=\"t in types\" :key=\"t.code\">\n                    {{ t.name }}\n                </option>\n            </select>\n            <button\n                type=\"button\"\n                class=\"text-gray-500 w-1/8 h-24 pl-8 pr-16 sm:pr-8 hover:text-black disabled:cursor-default disabled:text-gray-400\"\n                :disabled=\"!queryParams.type && !queryParams.province\"\n                v-on:click=\"clearFilters\"\n                :content=\"t('geosearch.filters.clear')\"\n                :aria-label=\"t('geosearch.filters.clear')\"\n                v-tippy=\"{ placement: 'bottom' }\"\n            >\n                <div class=\"rv-geosearch-icon\">\n                    <svg class=\"fill-current w-18 h-18\" viewBox=\"0 0 23 21\">\n                        <path\n                            d=\"M 14.7574,20.8284L 17.6036,17.9822L 14.7574,15.1716L 16.1716,13.7574L 19.0178,16.568L 21.8284,13.7574L 23.2426,15.1716L 20.432,17.9822L 23.2426,20.8284L 21.8284,22.2426L 19.0178,19.3964L 16.1716,22.2426L 14.7574,20.8284 Z M 2,2L 19.9888,2.00001L 20,2.00001L 20,2.01122L 20,3.99999L 19.9207,3.99999L 13,10.9207L 13,22.909L 8.99999,18.909L 8.99999,10.906L 2.09405,3.99999L 2,3.99999L 2,2 Z \"\n                        />\n                    </svg>\n                </div>\n            </button>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport type { InstanceAPI } from '@/api';\nimport { computed, inject, onBeforeMount, onBeforeUnmount, ref, watch } from 'vue';\nimport type { GeosearchAPI } from './api/geosearch';\nimport { useGeosearchStore } from './store';\nimport type { QueryParams } from './store';\nimport { useI18n } from 'vue-i18n';\n\nconst { t } = useI18n();\nconst iApi = inject<InstanceAPI>('iApi')!;\nconst geosearchStore = useGeosearchStore();\n\nconst provinces = ref<Array<any>>([]);\nconst types = ref<Array<any>>([]);\nconst watchers = ref<Array<Function>>([]);\n\nconst queryParams = computed<QueryParams>(() => geosearchStore.queryParams as QueryParams);\nconst language = computed<string>(() => iApi.language);\n\nconst setProvince = (payload: { province?: string; forceReRun?: boolean }) => geosearchStore.setProvince(payload);\nconst setType = (payload: { type?: string; forceReRun?: boolean }) => geosearchStore.setType(payload);\n\n// Called when the `clear filters` button is clicked. Clears province and type filters.\nconst clearFilters = () => {\n    setProvince({});\n    setType({});\n};\n\n// Fetches the most up to date provinces and types.\n// Because of the way the GSservice is structured, on language switch, we need to make a new GSservice in the updated language\n// and then re fetch all the provinces and types again.\n// TODO: In the future, we should look to refactor the code for this fixture to improve clarity and reduce the number of API calls.\nconst updateProvincesAndTypes = () => {\n    geosearchStore.initService(iApi.language, iApi.fixture.get<GeosearchAPI>('geosearch').config);\n\n    // convert current province and type selection to new lang\n    const queryProvCode = provinces.value.find(prov => queryParams.value.province === prov.name)?.code;\n    const queryTypeCode = types.value.find(type => queryParams.value.type === type.name)?.code;\n\n    // populate province and type selection lists in new lang\n    geosearchStore.getProvinces.then(provs => {\n        provinces.value = provs;\n        setProvince({\n            province: provs.find(prov => prov.code === queryProvCode)?.name,\n            forceReRun: true\n        });\n    });\n    geosearchStore.getTypes.then(typs => {\n        types.value = typs;\n        setType({\n            type: typs.find(type => type.code === queryTypeCode)?.name,\n            forceReRun: true\n        });\n    });\n};\n\nonBeforeMount(() => {\n    updateProvincesAndTypes();\n    watchers.value.push(watch(language, updateProvincesAndTypes));\n});\n\nonBeforeUnmount(() => {\n    watchers.value.forEach(unwatch => unwatch());\n});\n</script>\n\n<style lang=\"scss\" scoped></style>\n","<template>\n    <div class=\"rv-geosearch-bottom-filters\">\n        <div class=\"bg-white\">\n            <label class=\"ml-8 cursor-pointer font-normal\"\n                ><input\n                    type=\"checkbox\"\n                    class=\"border-2 mx-8 border-gray-600 cursor-pointer\"\n                    :checked=\"resultsVisible\"\n                    @change=\"updateMapExtent(($event.target as HTMLInputElement).checked)\"\n                    @keypress.enter.prevent\n                />{{ t('geosearch.visible') }}</label\n            >\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { GlobalEvents } from '@/api/internal';\nimport type { InstanceAPI } from '@/api/internal';\nimport type { Extent } from '@/geo/api';\nimport { useGeosearchStore } from './store';\nimport { debounce } from 'throttle-debounce';\n\nimport { computed, inject, onBeforeUnmount, onMounted } from 'vue';\nimport { useI18n } from 'vue-i18n';\n\nconst { t } = useI18n();\nconst iApi = inject<InstanceAPI>('iApi')!;\nconst geosearchStore = useGeosearchStore();\n\nconst resultsVisible = computed<boolean>(() => geosearchStore.resultsVisible);\n\nconst onMapExtentChange = debounce(300, (newExtent: Extent) => {\n    latLongExtent(newExtent).then((e: Extent) => {\n        setMapExtent({\n            extent: e,\n            visible: resultsVisible.value\n        });\n    });\n});\n\nconst setMapExtent = (mapExtent: any) => {\n    geosearchStore.setMapExtent(mapExtent);\n};\n\n// Computes the extent information.\nconst latLongExtent = async (ext: Extent): Promise<Extent> => {\n    if (ext.sr.wkid === 4326) {\n        return ext;\n    } else {\n        // var needed to get around casting complaints with async syntax\n        const pExt = await iApi.geo.proj.projectGeometry(4326, ext);\n        return pExt as Extent;\n    }\n};\n\n// Called when the checkbox is pressed. Updates the geosearch extent.\nconst updateMapExtent = (visible: boolean): void => {\n    latLongExtent(iApi.geo.map.getExtent()).then(e => {\n        setMapExtent({\n            extent: e,\n            visible: visible\n        });\n    });\n};\n\nonMounted(() => {\n    // TODO decide if this event handler should go into the default ramp events, or remain as hard-bound to geosearch.\n    //      hard-bound means no one outside can un-hook and replace with a different reaction.\n    //      going default means the handler function needs to be public / on the geosearch api.\n    //      ^ not entirely true. a person can still unhook the event, however our public documentation will\n    //        have no mention of the event handler name. A person would need to discover it.\n    // TODO also consider if this handler requires debounce because MAP_EXTENTCHANGE fires at a high rate\n    iApi.event.on(GlobalEvents.MAP_EXTENTCHANGE, onMapExtentChange, 'geosearch_map_extent');\n});\n\n/**\n * This is called while the component is still functional right before everything is removed.\n */\nonBeforeUnmount(() => {\n    iApi.event.off('geosearch_map_extent');\n});\n</script>\n\n<style></style>\n","<template>\n    <div class=\"w-full h-6 relative overflow-hidden rounded-full indeterminate mb-14\">\n        <div class=\"h-full progressbar bg-blue-800 rounded-full top-0\" aria-valuemin=\"0\" aria-valuemax=\"100\">\n            <span class=\"flex items-center h-full\">\n                <slot></slot>\n            </span>\n        </div>\n    </div>\n</template>\n\n<script setup lang=\"ts\"></script>\n\n<style scoped>\n@keyframes progress-indeterminate {\n    0% {\n        width: 30%;\n        left: -40%;\n    }\n    60% {\n        left: 100%;\n        width: 100%;\n    }\n    to {\n        left: 100%;\n        width: 0;\n    }\n}\n.progressbar {\n    transition: width 0.25s ease;\n}\n.indeterminate .progressbar {\n    animation: progress-indeterminate 1.4s ease infinite;\n}\n</style>\n","<template>\n    <panel-screen :panel=\"panel\">\n        <template #header>{{ t('geosearch.title') }}</template>\n\n        <template #content>\n            <div class=\"flex flex-col h-full\">\n                <geosearch-bar></geosearch-bar>\n                <geosearch-top-filters></geosearch-top-filters>\n                <loading-bar class=\"flex-none\" v-if=\"loadingResults\"></loading-bar>\n                <div class=\"text-red-900 text-xs px-8 mb-10\" v-if=\"failedServices.length > 0 && !loadingResults\">\n                    {{\n                        t('geosearch.serviceError', {\n                            services: failedServices.join(', ')\n                        })\n                    }}\n                </div>\n                <div\n                    class=\"px-8 mb-10 py-8 flex-grow text-wrap border-y border-gray-600 overflow-y-auto\"\n                    v-if=\"cleanedSearchVal && searchResults.length === 0 && !loadingResults\"\n                >\n                    <span class=\"relative h-48\"\n                        >{{ t('geosearch.noResults')\n                        }}<span class=\"font-bold text-blue-600\">\"{{ cleanedSearchVal }}\"</span></span\n                    >\n                </div>\n                <ul\n                    class=\"rv-results-list flex-grow mb-5 border-t border-b border-gray-600 overflow-y-auto\"\n                    v-focus-list\n                    v-if=\"searchResults.length > 0\"\n                >\n                    <li class=\"relative h-56\" v-for=\"(result, idx) in searchResults\" v-bind:key=\"idx\">\n                        <button\n                            type=\"button\"\n                            class=\"absolute inset-0 h-full w-full hover:bg-gray-300 default-focus-style\"\n                            @click=\"zoomIn(result)\"\n                            v-focus-item=\"'show-truncate'\"\n                            style=\"border-bottom: 1px solid lightgray\"\n                            truncate-trigger\n                        >\n                            <div class=\"rv-result-description px-8\">\n                                <div\n                                    class=\"flex-1 text-left truncate font-bold leading-tight\"\n                                    v-truncate=\"{\n                                        externalTrigger: true,\n                                        options: { placement: 'top-start' }\n                                    }\"\n                                >\n                                    <span v-html=\"highlightSearchTerm(result.name, result.location.province)\"></span>\n                                    <span v-if=\"result.location.province\" class=\"text-gray-600 text-sm\">\n                                        {{\n                                            result.location.city\n                                                ? ' ' + result.location.city + ', ' + result.location.province.abbr\n                                                : ' ' + result.location.province.abbr\n                                        }}</span\n                                    >\n                                    <span v-if=\"result.type\" class=\"hidden\">; </span>\n                                    <span v-if=\"result.type\" class=\"text-sm font-normal\"><br />{{ result.type }}</span>\n                                </div>\n                            </div>\n                        </button>\n                    </li>\n                </ul>\n                <geosearch-bottom-filters class=\"mt-auto\"></geosearch-bottom-filters>\n            </div>\n        </template>\n    </panel-screen>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, inject } from 'vue';\nimport type { PropType } from 'vue';\nimport type { InstanceAPI, PanelInstance } from '@/api';\nimport { Polygon, SpatialReference } from '@/geo/api';\nimport { useGeosearchStore } from './store';\nimport GeosearchBar from './search-bar.vue';\nimport GeosearchTopFilters from './top-filters.vue';\nimport GeosearchBottomFilters from './bottom-filters.vue';\nimport LoadingBar from './loading-bar.vue';\nimport { useI18n } from 'vue-i18n';\n\nconst { t } = useI18n();\nconst iApi = inject<InstanceAPI>('iApi')!;\nconst geosearchStore = useGeosearchStore();\n\ndefineProps({\n    panel: {\n        type: Object as PropType<PanelInstance>\n    }\n});\n\nconst cleanedSearchVal = computed<string>(() => geosearchStore.searchVal.replace(/[\"!*$+?^{}()|[\\]\\\\]/g, '').trim());\nconst searchResults = computed<Array<any>>(() => geosearchStore.searchResults);\nconst loadingResults = computed<boolean>(() => geosearchStore.loadingResults);\nconst failedServices = computed<string[]>(() => geosearchStore.failedServices);\n\n// zoom in to a clicked result\nconst zoomIn = (result: any) => {\n    let zoom = new Polygon(\n        'zoomies',\n        [\n            [\n                [result.bbox[0], result.bbox[1]],\n                [result.bbox[0], result.bbox[3]],\n                [result.bbox[2], result.bbox[3]],\n                [result.bbox[2], result.bbox[1]],\n                [result.bbox[0], result.bbox[1]]\n            ]\n        ],\n        SpatialReference.latLongSR(),\n        true\n    );\n    iApi.geo.map.zoomMapTo(zoom);\n};\n\n// highlight the search term in each listed geosearch result\nconst highlightSearchTerm = (name: string, province: any) => {\n    // wrap matched search term in results inside span with styling\n    const highlightedResult = name.replace(\n        new RegExp(`${geosearchStore.searchRegex}`, 'gi'),\n        match => '<span class=\"font-bold text-blue-600\">' + match + '</span>'\n    );\n    // add comma to new highlighted result if a province/location is provided\n    return province ? highlightedResult + ',' : highlightedResult;\n};\n</script>\n\n<style lang=\"scss\" scoped></style>\n"],"names":["t","useI18n","geosearchStore","useGeosearchStore","panelStore","usePanelStore","searchVal","computed","badChars","bc","setSearchTerm","value","onSearchTermChange","debounce","searchTerm","iApi","inject","provinces","ref","types","watchers","queryParams","language","setProvince","payload","setType","clearFilters","updateProvincesAndTypes","queryProvCode","prov","queryTypeCode","type","provs","typs","onBeforeMount","watch","onBeforeUnmount","unwatch","resultsVisible","onMapExtentChange","newExtent","latLongExtent","setMapExtent","mapExtent","ext","updateMapExtent","visible","onMounted","GlobalEvents","_hoisted_2","_sfc_render","_ctx","_cache","_openBlock","_createElementBlock","_hoisted_1","_createElementVNode","_hoisted_3","cleanedSearchVal","searchResults","loadingResults","failedServices","zoomIn","result","zoom","Polygon","SpatialReference","highlightSearchTerm","name","province","highlightedResult","match"],"mappings":"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"}