import{d as J,s as U}from"./enums-CpSG_SL3.js";const X={color:[128,128,128,1],outlinecolor:[0,0,0,1],backgroundcolor:[128,128,128,1],borderlinecolor:[0,0,0,1],tintcolor:[255,255,255,1]},w={CIMVectorMarker:{scalesymbolsproportionally:!1,respectframe:!0,anchorpointunits:"Relative",offsetx:0,offsety:0,rotateclockwise:!1,rotation:0,size:10,enable:!0,colorlocked:!1},CIMPictureMarker:{scalex:1,texturefilter:"Draft",anchorpointunits:"Relative",offsetx:0,offsety:0,rotateclockwise:!1,rotation:0,size:10,enable:!0,colorlocked:!1},CIMTextSymbol:{angle:0,anglex:0,angley:0,halosize:1,height:10,horizontalalignment:"Left",kerning:!0,letterspacing:0,letterwidth:100,ligatures:!0,linegap:0,offsetx:0,offsety:0,strikethrough:!1,textcase:"Normal",textstring:"",underline:!1,verticalalignment:"Bottom",enable:!0,colorlocked:!1},CIMSolidStroke:{capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMPictureStroke:{texturefilter:"Draft",capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMGradientStroke:{capstyle:"Round",joinstyle:"Round",miterlimit:4,width:4,enable:!0,colorlocked:!1},CIMSolidFill:{enable:!0,colorlocked:!1},CIMPictureFill:{offsetx:0,offsety:0,rotation:0,scalex:1,height:10,texturefilter:"Draft",enable:!0,colorlocked:!1},CIMHatchFill:{offsetx:0,offsety:0,rotation:0,separation:4,enable:!0,colorlocked:!1},CIMGeometricEffectAddControlPoints:{angletolerance:120},CIMGeometricEffectArrow:{arrowtype:"OpenEnded",width:5},CIMGeometricEffectBuffer:{size:1},CIMGeometricEffectCut:{begincut:1,endcut:1,middlecut:0,invert:!1},CIMGeometricEffectDashes:{customendingoffset:0,linedashending:"NoConstraint",offsetalongline:0},CIMGeometricEffectDonut:{method:"Mitered",option:"Accurate",width:2},CIMGeometricEffectJog:{angle:225,length:20,position:50},CIMGeometricEffectControlMeasureLine:{rule:"FullGeometry"},CIMGeometricEffectMove:{offsetx:1,offsety:-1},CIMGeometricEffectOffset:{method:"Square",offset:1,option:"Fast"},CIMGeometricEffectRotate:{angle:15},CIMGeometricEffectScale:{xscalefactor:1.15,yscalefactor:1.15},CIMGeometricEffectWave:{amplitude:2,period:3,seed:1,waveform:"Sinus"},CIMMarkerPlacementAlongLine:{customendingoffset:0,endings:"WithHalfGap",offsetalongline:0,placeperpart:!0,angletoline:!0,offset:0},CIMMarkerPlacementAtExtremities:{extremityplacement:"Both",offsetalongline:0,angletoline:!0,offset:0},CIMMarkerPlacementAtRatioPositions:{beginposition:0,endposition:0,flipfirst:!0,angletoline:!0,offset:0},CIMMarkerPlacementInsidePolygon:{gridangle:0,gridtype:"Fixed",offsetx:0,offsety:0,randomness:100,seed:0,shiftoddrows:!1,stepx:16,stepy:16,clipping:"ClipAtBoundary"},CIMMarkerPlacementOnLine:{relativeto:"LineMiddle",startpointoffset:0,angletoline:!0,offset:0},CIMMarkerPlacementOnVertices:{placeperpart:!0,placeoncontrolpoints:!0,placeonendpoints:!0,placeonregularvertices:!0,angletoline:!0,offset:0},CIMMarkerPlacementPolygonCenter:{method:"OnPolygon",offsetx:0,offsety:0,clipatboundary:!1},CIMAnimatedSymbolProperties:{playanimation:!1,reverseanimation:!1,randomizestarttime:!1,randomizestartseed:0,starttimeoffset:0,duration:3,endingduration:3,useendingduration:!1,repeattype:J.Loop,repeatdelay:0,easing:U.Linear},CIMSymbolAnimationSize:{tosize:10},CIMSymbolAnimationScale:{scalefactor:1},CIMSymbolAnimationColor:{tocolor:[255,255,255,1]},CIMSymbolAnimationTransparency:{totransparency:0},CIMSymbolAnimationRotation:{torotation:0},CIMSymbolAnimationOffset:{offsetx:0,offsety:0}};function Y(e){return[e.r,e.g,e.b,e.a]}const $=` /-,
`;function F(e){let t=e.length;for(;t--;)if(!$.includes(e.charAt(t)))return!1;return!0}function K(e,t){const r=[];let n=0,a=-1;do if(a=e.indexOf("[",n),a>=n){if(a>n){const o=e.slice(n,a);r.push([o,null,F(o)])}if(n=a+1,a=e.indexOf("]",n),a>=n){if(a>n){const o=t[e.slice(n,a)];o&&r.push([null,o,!1])}n=a+1}}while(a!==-1);if(n<e.length){const o=e.slice(n);r.push([o,null,F(o)])}return r}function Z(e,t,r,n){let a="",o=null;for(const M of t){const[i,f,u]=M;if(i)u?o=i:(o&&(a+=o,o=null),a+=i);else{let y=f;r!=null&&(y=V(f,r));const l=e.attributes[y];l&&(o&&(a+=o,o=null),a+=l)}}return _(a,n)}function _(e,t){switch(typeof e!="string"&&(e=String(e)),t){case"LowerCase":return e.toLowerCase();case"Allcaps":return e.toUpperCase();default:return e}}function Q(e,t,r,n,a,o,M=!0){const i=t/a,f=r/o,u=Math.ceil(i/2),y=Math.ceil(f/2);for(let l=0;l<o;l++)for(let s=0;s<a;s++){const d=4*(s+(M?o-l-1:l)*a);let c=0,p=0,h=0,b=0,k=0,S=0,g=0;const L=(l+.5)*f;for(let I=Math.floor(l*f);I<(l+1)*f;I++){const z=Math.abs(L-(I+.5))/y,H=(s+.5)*i,W=z*z;for(let P=Math.floor(s*i);P<(s+1)*i;P++){let m=Math.abs(H-(P+.5))/u;const C=Math.sqrt(W+m*m);C>=-1&&C<=1&&(c=2*C*C*C-3*C*C+1,c>0&&(m=4*(P+I*t),g+=c*e[m+3],h+=c,e[m+3]<255&&(c=c*e[m+3]/250),b+=c*e[m],k+=c*e[m+1],S+=c*e[m+2],p+=c))}}n[d]=b/p,n[d+1]=k/p,n[d+2]=S/p,n[d+3]=g/h}}function T(e){return e?[e[0],e[1],e[2],e[3]/255]:[0,0,0,0]}function ee(e){return e.data?.symbol??null}function te(e){return e.type==="CIMVectorMarker"||e.type==="CIMPictureMarker"||e.type==="CIMBarChartMarker"||e.type==="CIMCharacterMarker"||e.type==="CIMPieChartMarker"||e.type==="CIMStackedBarChartMarker"}function re(e){return e.type==="CIMGradientStroke"||e.type==="CIMPictureStroke"||e.type==="CIMSolidStroke"}function oe(e){return e!=null&&(e.type==="CIMGradientFill"||e.type==="CIMHatchFill"||e.type==="CIMPictureFill"||e.type==="CIMSolidFill"||e.type==="CIMWaterFill")}function N(e){return e!=null&&(e.type==="CIMMarkerPlacementAlongLineRandomSize"||e.type==="CIMMarkerPlacementAlongLineSameSize"||e.type==="CIMMarkerPlacementAlongLineVariableSize"||e.type==="CIMMarkerPlacementAtExtremities"||e.type==="CIMMarkerPlacementAtMeasuredUnits"||e.type==="CIMMarkerPlacementAtRatioPositions"||e.type==="CIMMarkerPlacementOnLine"||e.type==="CIMMarkerPlacementOnVertices")}const ne=(e,t=0)=>e==null||isNaN(e)?t:e,ae=(e,t)=>e??t,ie=(e,t)=>e??t,le=e=>e.tintColor?T(e.tintColor):[255,255,255,1],se=e=>{if(!e)return!1;for(const t of e)switch(t.type){case"CIMGeometricEffectBuffer":case"CIMGeometricEffectOffset":case"CIMGeometricEffectDonut":return!0}return!1};function ce(){return import("./geometryEngineJSON-CGn_tfx8.js").then(e=>e.g)}function fe(e){if(!e)return"normal";switch(e.toLowerCase()){case"italic":return"italic";case"oblique":return"oblique";default:return"normal"}}function ue(e){if(!e)return"normal";switch(e.toLowerCase()){case"bold":return"bold";case"bolder":return"bolder";case"lighter":return"lighter";default:return"normal"}}function Me(e){let t="normal",r="normal";if(e){const n=e.toLowerCase();n.includes("italic")?t="italic":n.includes("oblique")&&(t="oblique"),n.includes("bold")?r="bold":n.includes("light")&&(r="lighter")}return{style:t,weight:r}}function me(e){return e.underline?"underline":e.strikethrough?"line-through":"none"}function A(e){if(!e)return null;switch(e.type){case"CIMPolygonSymbol":if(e.symbolLayers)for(const t of e.symbolLayers){const r=A(t);if(r!=null)return r}break;case"CIMTextSymbol":return A(e.symbol);case"CIMSolidFill":return e.color}return null}function G(e){if(e)switch(e.type){case"CIMPolygonSymbol":case"CIMLineSymbol":{const t=e.symbolLayers;if(t)for(const r of t){const n=G(r);if(n!=null)return n}break}case"CIMTextSymbol":return G(e.symbol);case"CIMSolidStroke":return e.color}}function E(e){if(e)switch(e.type){case"CIMPolygonSymbol":case"CIMLineSymbol":if(e.symbolLayers)for(const t of e.symbolLayers){const r=E(t);if(r!==void 0)return r}break;case"CIMTextSymbol":return E(e.symbol);case"CIMSolidStroke":case"CIMGradientStroke":case"CIMPictureStroke":return e.width}}function ye(e){switch(e){case"Left":default:return"left";case"Right":return"right";case"Center":case"Justify":return"center"}}function Ce(e){switch(e){case"Top":default:return"top";case"Center":return"middle";case"Baseline":return"baseline";case"Bottom":return"bottom"}}function de(e){return(e?Object.keys(e):[]).map(t=>({name:t,alias:t,type:typeof e[t]=="string"?"esriFieldTypeString":"esriFieldTypeDouble"}))}const pe=e=>e.includes("data:image/svg+xml");function x(e){return e&&e.charAt(0).toLowerCase()+e.slice(1)}function Ie(e,t,r,n,a,o,M=!0){const{infos:i}=o;let f=1,u=0,y=0,l=0,s=1;for(const{absoluteAnchorPoint:p,offsetX:h,offsetY:b,rotation:k,size:S,frameHeight:g,rotateClockWise:L,scaleSymbolsProportionally:I}of i)s=p?1:f,y=q(h,b,u,s,y),l=B(h,b,u,s,l),g&&(I||M)&&(f*=S/g),u=j(k,L,u);const d=q(n,a,u,s,y),c=B(n,a,u,s,l);return{size:e*f,rotation:j(t,r,u),offsetX:d,offsetY:c}}function R(e){if(e==null)return!1;if(Array.isArray(e))return e.every(t=>R(t));switch(typeof e){case"string":return!!e;case"number":return!isNaN(e)}}function O(e,t){if(t==="color"||t==="outlinecolor"||t==="backgroundcolor"||t==="borderlinecolor"||t==="tintcolor")return[...X[t]];const r=w[e];if(!r)throw new Error(`InternalError: default value for type ${e}.`);return r[t]}function he(e){return e.split(" ").map(t=>Number(t))}function D(e){return typeof e=="string"?he(e):e}function be(e){return e?.dashTemplate&&(e.dashTemplate=D(e.dashTemplate)),e}function v(e){if(e==null)return"Normal";switch(e.type){case"CIMTextSymbol":return e.textCase??"Normal";case"CIMPointSymbol":case"CIMLineSymbol":case"CIMPolygonSymbol":{const t=e.symbolLayers;if(!t)return"Normal";for(const r of t)if(r.type==="CIMVectorMarker")return v(r)}break;case"CIMVectorMarker":{const t=e.markerGraphics;if(!t)return"Normal";for(const r of t)if(r.symbol)return v(r.symbol)}}return"Normal"}function ge(e){if(e)switch(e.type){case"CIMTextSymbol":return e.height;case"CIMPointSymbol":{let t=0;if(e.symbolLayers){for(const r of e.symbolLayers)if(r)switch(r.type){case"CIMCharacterMarker":case"CIMPictureMarker":case"CIMVectorMarker":case"CIMObjectMarker3D":case"CIMglTFMarker3D":{const n=r.size??w.CIMVectorMarker.size;n>t&&(t=n);break}}}return t}case"CIMLineSymbol":case"CIMPolygonSymbol":{let t=0;if(e.symbolLayers){for(const r of e.symbolLayers)if(r)switch(r.type){case"CIMSolidStroke":case"CIMPictureStroke":case"CIMGradientStroke":{const n=r.width;n!=null&&n>t&&(t=n);break}case"CIMCharacterMarker":case"CIMPictureMarker":case"CIMVectorMarker":case"CIMObjectMarker3D":case"CIMglTFMarker3D":if(r.markerPlacement&&N(r.markerPlacement)){const n=r.size??w.CIMVectorMarker.size;n>t&&(t=n)}break;case"CIMPictureFill":{const n=r.height;n!=null&&n>t&&(t=n)}}}return t}}}function V(e,t){if(t!==null){const r=t.get(e);return r?r.name:e}return e}function ke(e){return e.map(t=>({...t,propertyName:x(t.propertyName)}))}function Se(e){const t={};for(const r in e){const n=e[r];t[x(r)]=n}return t}function B(e,t,r,n,a){const o=r*Math.PI/180;if(o){const M=Math.cos(o);return(Math.sin(o)*e+M*t)*n+a}return t*n+a}function q(e,t,r,n,a){const o=r*Math.PI/180;return o?(Math.cos(o)*e-Math.sin(o)*t)*n+a:e*n+a}function j(e,t,r){return t?r-e:r+e}function Pe(e,t,r){const n=r==="Color"||r==="TintColor"||r==="ToColor",a=r==="Rotation"||r==="Angle"||r==="ToRotation";let o=t[x(r)];if(o!=null&&(n?o=[o[0]/255,o[1]/255,o[2]/255,o[3]/255]:a&&(o*=Math.PI/180)),o==null&&(o=O(t.type,r.toLowerCase()),o!=null&&(n?o=[o[0]/255,o[1]/255,o[2]/255,o[3]]:a&&(o*=Math.PI/180))),t.primitiveName!=null){const M=e[t.primitiveName];if(M!=null){const i=M[r];i==null||(typeof i=="string"||typeof i=="number"||Array.isArray(i)?(o=i,o!=null&&(n?o=[o[0]/255,o[1]/255,o[2]/255,o[3]/255]:a&&(o*=Math.PI/180))):(o={valueExpressionInfo:i,defaultValue:o},o!=null&&(n?o={type:"Process",op:"ArcadeColor",value:o}:a&&(o={type:"Process",op:"Divide",left:o,right:180/Math.PI}))))}}if(o==null)throw new Error(`Failed to derive a value or an expression for "${r}".`);return o}export{G as A,be as B,oe as C,O as D,Ie as E,Ce as F,pe as G,ge as H,N as I,V as J,Pe as K,me as L,te as M,E as N,R as O,ue as P,v as R,ce as S,A as T,ke as U,Se as W,K as a,ie as b,Z as c,le as d,T as f,fe as g,ae as h,w as i,se as k,re as m,Y as o,ne as p,D as q,Q as u,de as v,Me as w,ye as x,ee as y,x as z};
