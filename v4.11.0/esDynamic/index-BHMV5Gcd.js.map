{"version":3,"file":"index-BHMV5Gcd.js","sources":["../../src/fixtures/grid/api/grid.ts","../../src/fixtures/grid/lang/lang.csv?raw","../../src/fixtures/grid/index.ts"],"sourcesContent":["import { FixtureInstance } from '@/api';\nimport { useGridStore, type MergeGridConfig } from '../store';\nimport TableStateManager from '../store/table-state-manager';\n\nexport class GridAPI extends FixtureInstance {\n    private gridStore = useGridStore(this.$vApp.$pinia);\n    /**\n     * Open the grid with the given id.\n     *\n     * @param {string} id\n     * @param {boolean} [open] force panel open or closed\n     * @memberof GridAPI\n     */\n    toggleGrid(id: string, open?: boolean): void {\n        // fetch id of grid containing layer with given id\n        const gridId = this.gridStore.getGridId(id);\n\n        // if no GridConfig exists for the given id, create it.\n        if (!gridId) {\n            const layerGridConfigs: any = this.getLayerFixtureConfigs();\n\n            this.gridStore.addGrid({\n                id: id,\n                layerIds: [id],\n                state: new TableStateManager(layerGridConfigs[id]),\n                fieldMap: {}\n            });\n        }\n\n        const prevId = this.gridStore.currentId;\n        this.gridStore.currentId = gridId ?? id;\n\n        const panel = this.$iApi.panel.get('grid');\n\n        if (open === false) {\n            // force close\n            panel.close();\n            return;\n        }\n\n        if (!panel.isOpen || !panel.isVisible) {\n            this.$iApi.panel.open('grid');\n        } else if (prevId !== id || open === true) {\n            // don't toggle off if different layer or force open, use key prop to force rerender\n            panel.show({ screen: 'grid-screen', props: { key: id } });\n        } else {\n            panel.close();\n        }\n    }\n\n    /**\n     * Parses the grid config JSON snippet from the config file.\n     *\n     * @param {any} config\n     * @memberof GridAPI\n     */\n    _parseConfig(config?: { mergeGrids: MergeGridConfig[] }) {\n        this.handlePanelWidths(['grid']);\n        this.handlePanelTeleports(['grid']);\n\n        const layerGridConfigs: any = this.getLayerFixtureConfigs();\n\n        // parse merge grid configs\n        if (config && config.mergeGrids) {\n            config.mergeGrids.forEach((mergeGrid: any) => {\n                const layerIds: string[] = [];\n\n                // extract grid options\n                const { gridId, layers, fieldMap, options } = mergeGrid;\n\n                // collate merged layer ids and remove them from layer specific grid configs\n                // in case they are defined in two places\n                layers.forEach((layer: any) => {\n                    if (layer.sublayers) {\n                        layer.sublayers?.forEach((sl: number) => {\n                            layerIds.push(`${layer.layerId}-${sl}`);\n                            delete layerGridConfigs[`${layer.layerId}-${sl}`];\n                        });\n                    } else {\n                        layerIds.push(layer.layerId);\n                        delete layerGridConfigs[layer.layerId];\n                    }\n                });\n\n                const mapping: { [source: string]: string } = {};\n                fieldMap?.forEach((map: any) => {\n                    map.sources.forEach((source: string) => {\n                        mapping[source] = map.field;\n                    });\n                });\n\n                const gridConfig = {\n                    id: gridId,\n                    layerIds: layerIds,\n                    state: new TableStateManager(options),\n                    fieldMap: mapping\n                };\n                this.gridStore.addGrid(gridConfig);\n            });\n        }\n\n        // construct the details config from the layer fixture configs\n        Object.keys(layerGridConfigs).forEach((layerId: string) => {\n            const gridConfig = {\n                id: layerId,\n                layerIds: [layerId],\n                state: new TableStateManager(layerGridConfigs[layerId]),\n                fieldMap: {}\n            };\n\n            // save the item in the store\n            this.gridStore.addGrid(gridConfig);\n        });\n    }\n}\n","export default \"key,enValue,enValid,frValue,frValid\\ngrid.title,Datatable,1,Tableau de données,1\\ngrid.alertName,Grid,1,Grille,1\\ngrid.splash.error,Error: Failed to load the layer's data.,1,Erreur : Échec du chargement des données de la couche.,0\\ngrid.splash.loading,Loading data...,1,Chargement des données...,1\\ngrid.splash.building,Building table...,1,Création du tableau...,1\\ngrid.splash.cancel,Cancel,1,Annuler,1\\ngrid.search.clear,Clear search filter,1,Effacer le filtre de recherche,0\\ngrid.clearAll,Clear search and filters,1,Effacer la recherche et les filtres,1\\ngrid.layer.loading,The layer is loading...,1,La couche est en cours de téléchargement...,1\\ngrid.label.pinColumns,Pin columns,1,Épingler les colonnes,1\\ngrid.label.export,Export,1,Exporter,1\\ngrid.label.columns,Hide columns,1,Masquer les colonnes,1\\ngrid.label.copied,Copied,1,Copié,1\\ngrid.label.copy,Press ctrl + c or double click to copy,1,Appuyez sur Ctrl + C ou double-cliquez pour copier,1\\ngrid.label.specialColumn,Special Column,1,Colonne spéciale,0\\ngrid.label.filters.show,Show filters,1,Afficher les filtres,1\\ngrid.label.filters.hide,Hide filters,1,Masquer les filtres,1\\ngrid.label.filters.apply,Apply filters to map,1,Appliquer les filtres à la carte,1\\ngrid.header.sort.0,Sort ascending,1,Tri ascendant,1\\ngrid.header.sort.1,Sort descending,1,Tri descendant,1\\ngrid.header.sort.2,Sort default,1,Tri par défaut,1\\ngrid.header.reorder.left,Move left,1,Déplacer vers la gauche,1\\ngrid.header.reorder.right,Move right,1,Déplacer vers la droite,1\\ngrid.filters.label.global,Search table,1,Tableau de recherche,1\\ngrid.filters.column.label.text,Search {0}...,1,Rechercher {0}...,1\\ngrid.filters.clear,Clear filters,1,Supprimer les filtres,1\\ngrid.filters.number.max,Max,1,Max,1\\ngrid.filters.number.min,Min,1,Min,1\\ngrid.filters.date.max,Max Date,1,Date max,1\\ngrid.filters.date.min,Min Date,1,Date min,1\\ngrid.filters.label.info,{range} of {total} entries shown,1,{range} de {total} saisies affichées,1\\ngrid.filters.label.filtered,(filtered from {max} total entries),1,(filtré à partir d'un total de {max} saisies),1\\ngrid.filters.label.extent,Filter by extent,1,Filtrer par étendue,1\\ngrid.cells.controls,Use arrow keys to navigate grid cells. Press Tab to proceed,1,Utilisez les flèches pour parcourir les cellules de la grille. Appuyez sur Tab pour continuer,0\\ngrid.cells.zoom,Zoom to feature,1,Zoom à l'élément,1\\ngrid.cells.zoom.zooming,Zooming...,1,Zoom en cours...,1\\ngrid.cells.zoom.error,Zoom failed,1,Échec du zoom,1\\ngrid.cells.zoom.zoomed,Zoomed,1,Zoom terminé,1\\ngrid.cells.alert.zoom,Zoomed into feature,1,Zoom sur la caractéristique,1\\ngrid.cells.details,Details,1,Détails,1\\ngrid.button.title,Grid,1,Grille,1\\n\"","import { GridAPI } from './api/grid';\nimport { markRaw } from 'vue';\n\nimport messages from './lang/lang.csv?raw';\nimport { useAppbarStore } from '../appbar/store';\nimport { useGridStore } from './store';\n\nclass GridFixture extends GridAPI {\n    async added() {\n        this.$iApi.panel.register(\n            {\n                grid: {\n                    screens: {\n                        'grid-screen': () => markRaw(import('./screen.vue'))\n                    },\n                    style: {\n                        width: '450px'\n                    },\n                    controls: {\n                        expand: true\n                    },\n                    button: {\n                        tooltip: 'grid.button.title',\n                        // https://fonts.google.com/icons?selected=Material%20Icons%3Atable_chart\n                        icon: '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path d=\"M0 0h24v24H0V0z\" fill=\"none\" /> <path d=\"M10 10.02h5V21h-5zM17 21h3c1.1 0 2-.9 2-2v-9h-5v11zm3-18H5c-1.1 0-2 .9-2 2v3h19V5c0-1.1-.9-2-2-2zM3 19c0 1.1.9 2 2 2h3V10H3v9z\" /></svg>'\n                    },\n                    expanded: true,\n                    alertName: 'grid.alertName'\n                }\n            },\n            { i18n: { messages } }\n        );\n\n        // parse grid config for each layer\n        this._parseConfig(this.config);\n    }\n\n    removed() {\n        if (this.$iApi.fixture.exists('appbar')) {\n            const appbarStore = useAppbarStore(this.$vApp.$pinia);\n            appbarStore.removeButton('grid');\n        }\n\n        const gridStore = useGridStore(this.$vApp.$pinia);\n        gridStore.$reset();\n\n        this.$iApi.panel.remove('grid');\n    }\n}\n\nexport default GridFixture;\n"],"names":["GridAPI","FixtureInstance","useGridStore","id","open","gridId","layerGridConfigs","TableStateManager","prevId","panel","config","mergeGrid","layerIds","layers","fieldMap","options","layer","sl","mapping","map","source","gridConfig","layerId","messages","GridFixture","markRaw","useAppbarStore"],"mappings":"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"}