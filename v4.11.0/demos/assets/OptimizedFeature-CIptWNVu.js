let l=class n{constructor(t=[],s=[]){this.lengths=t??[],this.coords=s??[]}static fromJSON(t){return new n(t.lengths,t.coords)}static fromRect(t){const[s,h,e,o]=t,r=e-s,c=o-h;return new n([5],[s,h,r,0,0,c,-r,0,0,-c])}get isPoint(){return this.lengths.length===0&&this.coords.length>=2}get maxLength(){return Math.max(...this.lengths)}get size(){return this.lengths.reduce((t,s)=>t+s)}forEachVertex(t){let s=0;this.lengths.length||t(this.coords[0],this.coords[1]);for(let h=0;h<this.lengths.length;h++){const e=this.lengths[h];for(let o=0;o<e;o++)t(this.coords[2*(o+s)],this.coords[2*(o+s)+1]);s+=e}}deltaDecode(){const t=this.clone(),{coords:s,lengths:h}=t;let e=0;for(const o of h){for(let r=1;r<o;r++)s[2*(e+r)]+=s[2*(e+r)-2],s[2*(e+r)+1]+=s[2*(e+r)-1];e+=o}return t}clone(t){if(this.lengths.length===0)return new n([],[this.coords[0],this.coords[1]]);const s=(this.lengths.length===0?1:this.lengths.reduce((e,o)=>e+o))*2,h=this.coords.slice(0,s);return t?(t.set(h),new n(this.lengths,t)):new n(Array.from(this.lengths),Array.from(h))}};class i{constructor(t=null,s={},h,e){this.geometry=t,this.attributes=s,this.centroid=h,this.objectId=e,this.displayId=0,this.geohashX=0,this.geohashY=0}static fromJSON(t,s){const h=t.geometry?l.fromJSON(t.geometry):null,e=t.centroid?l.fromJSON(t.centroid):null,o=t.attributes[s];return new i(h,t.attributes,e,o)}weakClone(){const t=new i(this.geometry,this.attributes,this.centroid,this.objectId);return t.displayId=this.displayId,t.geohashX=this.geohashX,t.geohashY=this.geohashY,t}clone(){const t=this.geometry?.clone(),s=new i(t,{...this.attributes},this.centroid?.clone(),this.objectId);return s.displayId=this.displayId,s.geohashX=this.geohashX,s.geohashY=this.geohashY,s}}function a(g){return!!g.geometry?.coords?.length}export{a,i as e,l as s};
