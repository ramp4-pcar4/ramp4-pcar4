import{eV as I,aH as X,cU as b,eW as Y,cI as k,bF as B,eX as $,bx as z,aE as J,b3 as v,di as K,df as q,dh as R,E as U,aG as M,q as x,u as V,C as N}from"./main-7nqzKo04.js";import Q from"./GraphicsLayer-MDUw3E8o.js";import{l as W}from"./TelemetryDisplay-B9uryFjX.js";import{u as Z}from"./OverlayContainer-B-3RhvEj.js";import{n as tt}from"./vec2f64-B7N_6o8F.js";import{K as g}from"./projection-uWASLutg.js";import{e as et}from"./Container-gsuEA0YN.js";import{a as it,j as rt,y as st}from"./LayerView-Bbeu953L.js";import{D as ot}from"./enums-Dk3osxpS.js";import{p as nt,m as at}from"./Texture-B26cOnGq.js";import{t as lt}from"./GraphicContainer-BXqIf4fU.js";import{F as mt}from"./GraphicsView2D-DRV-OQ3e.js";import"./preload-helper-ExcqyqRp.js";import"./GraphicsCollection-CYDNLo0g.js";import"./Layer-Bmiqc_vS.js";import"./TimeExtent-LauUhoJg.js";import"./BlendLayer-B3kEVn1W.js";import"./jsonUtils-Ej-u0sVu.js";import"./parser-CHHf2xzw.js";import"./mat4f32-DcsiF_Rp.js";import"./mat4-gnzTYV35.js";import"./common-DQOJ18NT.js";import"./ScaleRangeLayer-3rKl-Gjx.js";import"./ElevationInfo-BeK7kpCR.js";import"./lengthUtils-yTwjD6q3.js";import"./mat3-XZDRtl20.js";import"./MapView-CdjwNzsS.js";import"./Cyclical-D0JMPWrU.js";import"./CollectionFlattener-DWiW_AsH.js";import"./workers-yoQEo-M6.js";import"./TileInfo-DQRGzhYz.js";import"./TileKey-DZd6gJy7.js";import"./themeUtils-aGG8mCu-.js";import"./uuid-Cl5lrJ4c.js";import"./UpdatingHandles-D_EiszAW.js";import"./signal-zY6W4EHa.js";import"./Map-DCaZ_vUZ.js";import"./Basemap-CKvCwA3Y.js";import"./loadAll-DWz3Z_IT.js";import"./PortalItem-CUJ-aEPg.js";import"./writeUtils-CZ7Hqggo.js";import"./compilerUtils-DO1ngQxB.js";import"./TablesMixin-riTapQBG.js";import"./HeightModelInfo-D_2KbXxu.js";import"./ReactiveMap-Ca83jZgf.js";import"./Query-BotaYlLX.js";import"./Field-DlKE1Mj8.js";import"./fieldType-CmjutMKi.js";import"./arcgisLayerUrl-Bgq-0hIo.js";import"./ViewingMode-HRfKv6NR.js";import"./vec2-DGVIkCvT.js";import"./Tile-M056j5jm.js";import"./TileKey-CSuPgwP2.js";import"./QueueProcessor-Bh2G5ga1.js";import"./quickselect-QQC62dOK.js";import"./normalizeUtils-Bz4pPiym.js";import"./normalizeUtilsCommon-BDljxOu-.js";import"./utils-BZ-awri-.js";import"./utils-RBj55bRD.js";import"./vec2f32-BbH2jxlN.js";import"./unitBezier-BX6NeAEr.js";import"./Scheduler-G3vNetIw.js";import"./vec32-CjC8RzUk.js";import"./definitions-C0Jy3zs7.js";import"./imageUtils-DlC2iV_P.js";import"./capabilities-A2uoe7dc.js";import"./Version-DnrwVW-G.js";import"./ColorBackground-DJxFZezX.js";import"./vec3f32-nZdmKIgz.js";import"./WGLContainer-Bnsmf3GQ.js";import"./LabelMetric-BkQF-_9M.js";import"./enums-CmIX1y88.js";import"./Program-CXPM2usP.js";import"./BufferObject-Ck_1lVUM.js";import"./VertexElementDescriptor-BOD-G50G.js";import"./VertexArrayObject-BOD4mv9m.js";import"./ProgramTemplate-Fp6reYgc.js";import"./StyleDefinition-BTt_i6C1.js";import"./config-MDUrh2eL.js";import"./earcut-Lltz9D9k.js";import"./featureConversionUtils-J97qUbG1.js";import"./OptimizedFeature-CIptWNVu.js";import"./OptimizedFeatureSet-Blu9Ckm7.js";import"./FeatureCommandQueue-c3hDOnYi.js";import"./UpdateTracking2D-gmKWFf1k.js";import"./BidiEngine-DNnuvc1i.js";import"./GeometryUtils-CtYxuPg5.js";import"./utils-QWndGYJy.js";import"./Rect-CUzevAry.js";import"./BindType-BmZEZMMh.js";import"./Util-C4yWdKVH.js";import"./vec42-CKs01hkn.js";import"./vec4f64-CMoMXWBi.js";import"./constants-F8oTIn7N.js";import"./projectBuffer-DohnbaJT.js";import"./layerViewUtils-Dp_bQAUb.js";import"./AGraphicContainer-CCxNevXu.js";import"./TechniqueInstance-wIU6WKn7.js";import"./TileContainer-yw_5rEo0.js";import"./FieldsIndex-Ba_LhL6O.js";import"./UnknownTimeZone-BbXWTWnn.js";import"./OverrideHelper-DuVEcR-f.js";import"./colorUtils-ZVjV-Ek5.js";import"./quantizationUtils-C6YmP8ac.js";import"./AttributeStore-ZsTRsSCD.js";import"./TimeOnly-Bhgd7sly.js";import"./timeSupport-Do1NRu2w.js";import"./queryUtils-d1mEfn_d.js";import"./json-Wa8cmqdu.js";import"./labelUtils-Btnn7TmQ.js";import"./diffUtils-DwXtBCa8.js";import"./normalizeUtilsSync-BtMs6EYZ.js";const C=2;class ht extends et{constructor(t){super(),this.element=t,this._handles=new I,this.isWrapAround=!1,this.perspectiveTransform=tt(),this.wrapAroundShift=0,this.clipGeometry=null,this._handles.add(X(()=>this.element,()=>{const e=this.element;this.ready(),e&&this._handles.add(Y(e,"play",()=>this.requestRender()))},b))}getMesh(t){throw new Error("Method not implemented.")}destroy(){this._handles.destroy(),this.texture=k(this.texture)}get textureSize(){if(!this.texture)return[1,1];const t=this.texture.descriptor;return[t.width,t.height]}get dvsMat3(){return this.parent.dvsMat3}beforeRender(t){const e=this.element;if(e==null)return;const{context:s}=t,{videoWidth:a,videoHeight:r}=e;if(a!==0&&r!==0){if(this.texture)e.paused||this.texture.setData(e);else{const i=new nt;i.wrapMode=ot.CLAMP_TO_EDGE,i.preMultiplyAlpha=!0,i.width=a,i.height=r,this.texture=new at(s,i,e)}e.paused||(this.texture.generateMipmap(),this.requestRender()),super.beforeRender(t)}}_createTransforms(){return null}updateDrawCoords(t,e,s,a){const r=this.element,i=this._getFrameInfo();if(!r||!i)return;this._initializeData(t,i,s);const{controlPoints:l,horizon:h}=i,m=Math.sqrt(l.length),p=m,{x:o,y}=t,u=this._vertices,T=l[0],G=l[m-1],F=l[(p-1)*m],j=l[(p-1)*m+m-1],P=g(h?h[0].mapPoint:T.mapPoint,s),O=g(h?h[1].mapPoint:G.mapPoint,s),f=g(F.mapPoint,s),E=g(j.mapPoint,s);this.clipGeometry=h?new it({geometry:B.fromJSON({rings:[[[f.x,f.y],[E.x,E.y],[O.x,O.y],[P.x,P.y],[f.x,f.y]]],spatialReference:s})}):null;for(let c=0;c<l.length;c++){const L=l[c],{sourcePoint:S,mapPoint:A}=L;if(S==null||A==null)continue;const w=g(A,s);u[c*C+0]=w.x-o,u[c*C+1]=w.y-y}let D=e;if(a){const c=Math.min(P.x,O.x,f.x,E.x),L=Math.max(P.x,O.x,f.x,E.x),{worldWidth:S,xBounds:A}=a,[w,H]=A;c<w&&L>w?D=S:L>H&&c<H&&(D=-S)}this.wrapAroundShift=D,this.isWrapAround=D!==0}draw(t,e){this.isReady&&this._vertices&&this._indices&&this._texCoords?e.render(t,{transform:{dvs:this.dvsMat3},config:{perspective:this.perspectiveTransform,texSize:this.textureSize,wrapAroundShift:this.wrapAroundShift,isWrapAround:this.isWrapAround,opacity:this.opacity,texture:{texture:this.texture,unit:0}},position:this._vertices,tex:this._texCoords,index:this._indices}):this.requestRender()}_initializeData(t,e,s){if(this._vertices!=null&&this._indices!=null)return;const{controlPoints:a}=e,r=Math.sqrt(a.length),i=r,l=new Float32Array(C*a.length),h=new Uint16Array(2*a.length);for(let o=0;o<a.length;o++){const y=a[o],{sourcePoint:u,mapPoint:T}=y;if(u==null||T==null)continue;const G=g(T,s);l[o*C+0]=G.x-t.x,l[o*C+1]=G.y-t.y,h[2*o+0]=u.x,h[2*o+1]=u.y}const m=new Uint16Array(i*r+(i-2)*(r+2));let p=0;for(let o=0;o<i;o++){for(let y=0;y<r;y++)m[p++]=o*r+y,m[p++]=(o+1)*r+y;o<i-2&&(m[p++]=(o+1)*r+(r-1),m[p++]=(o+1)*r)}this._vertices=l,this._texCoords=h,this._indices=m}_getFrameInfo(){if(!this.groundControlPoints)return null;const t=this._getFrameControlPoints(),e=this.frameHorizonPoints;let s=null;if(e){const a=e.startX,r=e.startY,i=e.endX,l=e.endY;s=[{sourcePoint:$(a,r),mapPoint:new z(e.startLongitude,e.startLatitude)},{sourcePoint:$(i,l),mapPoint:new z(e.endLongitude,e.endLatitude)}]}return{controlPoints:t,horizon:s}}_getFrameControlPoints(){const t=this.groundControlPoints,e=t?.length;if(!e)return[];const s=new Array(e),a=Math.max(...t.map(({x:i})=>i)),r=this.element.videoWidth/a;for(let i=0;i<e;i++){const{x:l,y:h,lat:m,lon:p}=t[i];s[i]={sourcePoint:$(l*r,-h*r),mapPoint:new z(p,m)}}return s}}const _=new J([255,127,0]);let d=class extends rt(st){constructor(){super(...arguments),this._graphicsLayer=new Q,this._frameOutlineGraphic=new v({symbol:new K({outline:{type:"simple-line",color:_}})}),this._sensorTrailGraphic=new v({symbol:new q({color:_})}),this._lineOfSightGraphic=new v({symbol:new q({color:_})}),this._sensorLocationGraphic=new v({symbol:new R({color:_})}),this._frameCenterGraphic=new v({symbol:new R({color:_,style:"cross"})}),this._overlayContainer=null,this.layer=null,this.symbolColor=_,this.visibleTelemetryElements=null}destroy(){this._graphicsLayer=U(this._graphicsLayer)}initialize(){this.addHandles(M(()=>this.symbolColor,()=>{this._frameOutlineGraphic.symbol.outline.color=this.symbolColor,this._sensorTrailGraphic.symbol.color=this.symbolColor,this._lineOfSightGraphic.symbol.color=this.symbolColor,this._sensorLocationGraphic.symbol.color=this.symbolColor,this._frameCenterGraphic.symbol.color=this.symbolColor},b)),this._graphicsLayer.graphics.addMany([this._frameOutlineGraphic,this._sensorTrailGraphic,this._lineOfSightGraphic,this._sensorLocationGraphic,this._frameCenterGraphic]),this.visibleTelemetryElements=new W({frame:this.layer.telemetryDisplay?.frame??!1,frameCenter:this.layer.telemetryDisplay?.frameCenter??!0,frameOutline:this.layer.telemetryDisplay?.frameOutline??!0,lineOfSight:this.layer.telemetryDisplay?.lineOfSight??!0,sensorLocation:this.layer.telemetryDisplay?.sensorLocation??!0,sensorTrail:this.layer.telemetryDisplay?.sensorTrail??!0})}attach(){this._overlayContainer=new Z,this.container.addChild(this._overlayContainer),this._addOverlayMultipoint(),this.graphicsView=new mt({requestUpdateCallback:()=>this.requestUpdate(),view:this.view,graphics:this._graphicsLayer.graphics,container:new lt(this.view.featuresTilingScheme)}),this.container.addChild(this.graphicsView.container),this.addAttachHandles(this._graphicsLayer.on("graphic-update",this.graphicsView.graphicUpdateHandler)),this.addAttachHandles([M(()=>[this.layer.telemetryDisplay?.frame,this.layer.telemetryDisplay?.frameCenter,this.layer.telemetryDisplay?.frameOutline,this.layer.telemetryDisplay?.sensorLocation,this.layer.telemetryDisplay?.sensorTrail,this.layer.telemetryDisplay?.lineOfSight],()=>this._updateVisibleTelemetryElements(),b),M(()=>[this.layer.telemetry,this.visibleTelemetryElements?.frameCenter,this.visibleTelemetryElements?.frameOutline,this.visibleTelemetryElements?.sensorLocation,this.visibleTelemetryElements?.sensorTrail,this.visibleTelemetryElements?.lineOfSight],()=>this._updateGraphicGeometries(),b)])}detach(){this._overlayContainer.removeAllChildren(),this.container.removeAllChildren(),this.graphicsView=U(this.graphicsView)}supportsSpatialReference(n){return!0}moveEnd(){}viewChange(){this.graphicsView.viewChange()}update(n){this.graphicsView.processUpdate(n)}isUpdating(){return!this.graphicsView||this.graphicsView.updating}_updateVisibleTelemetryElements(){this.visibleTelemetryElements&&this.layer.telemetryDisplay&&(this.visibleTelemetryElements.frame=this.layer.telemetryDisplay.frame,this.visibleTelemetryElements.frameCenter=this.layer.telemetryDisplay.frameCenter,this.visibleTelemetryElements.frameOutline=this.layer.telemetryDisplay.frameOutline,this.visibleTelemetryElements.lineOfSight=this.layer.telemetryDisplay.lineOfSight,this.visibleTelemetryElements.sensorLocation=this.layer.telemetryDisplay.sensorLocation,this.visibleTelemetryElements.sensorTrail=this.layer.telemetryDisplay.sensorTrail)}_updateGraphicGeometries(){const{telemetry:n}=this.layer,{visibleTelemetryElements:t}=this;n&&t&&(t.frameOutline&&n.frameOutline?this._frameOutlineGraphic.geometry=this.layer.telemetry.frameOutline:this._frameOutlineGraphic.geometry=null,t.sensorTrail&&n.sensorTrail?this._sensorTrailGraphic.geometry=this.layer.telemetry.sensorTrail:this._sensorTrailGraphic.geometry=null,t.lineOfSight&&n.lineOfSight?this._lineOfSightGraphic.geometry=this.layer.telemetry.lineOfSight:this._lineOfSightGraphic.geometry=null,t.sensorLocation&&n.sensorLocation?this._sensorLocationGraphic.geometry=this.layer.telemetry.sensorLocation:this._sensorLocationGraphic.geometry=null,t.frameCenter&&n.frameCenter?this._frameCenterGraphic.geometry=this.layer.telemetry.frameCenter:this._frameCenterGraphic.geometry=null)}async _addOverlayMultipoint(){if(!this.layer.videoElement)return;const n=new ht(this.layer.videoElement);this.addAttachHandles([M(()=>[this.layer.frameHorizonPoints,this.layer.groundControlPoints],()=>{const{visibleTelemetryElements:t}=this;t?.frame?(n.frameHorizonPoints=this.layer.frameHorizonPoints,n.groundControlPoints=this.layer.groundControlPoints,n.opacity=1):n.opacity=0},b)]),this._overlayContainer.addChild(n),this.view.stage.requestRender()}};x([V()],d.prototype,"graphicsView",void 0),x([V()],d.prototype,"layer",void 0),x([V()],d.prototype,"symbolColor",void 0),x([V({type:W})],d.prototype,"visibleTelemetryElements",void 0),d=x([N("esri.views.2d.layers.VideoLayerView2D")],d);const ui=d;export{ui as default};
